
hwsolution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026a50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025714  08026be0  08026be0  00036be0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804c2f4  0804c2f4  0006048c  2**0
                  CONTENTS
  4 .ARM          00000008  0804c2f4  0804c2f4  0005c2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804c2fc  0804c2fc  0006048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0804c2fc  0804c2fc  0005c2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804c304  0804c304  0005c304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000048c  20000000  0804c308  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0006048c  2**0
                  CONTENTS
 10 .bss          000022f4  2000048c  2000048c  0006048c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002780  20002780  0006048c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0006048c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00131b58  00000000  00000000  000604bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0001157f  00000000  00000000  00192014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004f40  00000000  00000000  001a3598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004ce0  00000000  00000000  001a84d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034126  00000000  00000000  001ad1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00058354  00000000  00000000  001e12de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019022d  00000000  00000000  00239632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  003c985f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00018268  00000000  00000000  003c98b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000048c 	.word	0x2000048c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08026bc8 	.word	0x08026bc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000490 	.word	0x20000490
 80001cc:	08026bc8 	.word	0x08026bc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:
static float __Z_Scale = 1.0f;
//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f008 f975 	bl	80093b4 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f00a f8fd 	bl	800b2d2 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f00a f8f6 	bl	800b2d2 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f008 f962 	bl	80093b4 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	200004a8 	.word	0x200004a8

08001100 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:
		dataR[i] = spiBuf[i];
	}
}
//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 800110e:	2258      	movs	r2, #88	; 0x58
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4855      	ldr	r0, [pc, #340]	; (8001268 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 8001114:	f021 fbc0 	bl	8022898 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	78db      	ldrb	r3, [r3, #3]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	b2da      	uxtb	r2, r3
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	4313      	orrs	r3, r2
 8001126:	b2db      	uxtb	r3, r3
 8001128:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f023 030f 	bic.w	r3, r3, #15
 8001132:	b2da      	uxtb	r2, r3
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	4313      	orrs	r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 800113c:	f107 030f 	add.w	r3, r7, #15
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	2020      	movs	r0, #32
 8001146:	f7ff ffb1 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001156:	b2da      	uxtb	r2, r3
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4313      	orrs	r3, r2
 800115c:	b2db      	uxtb	r3, r3
 800115e:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001168:	b2da      	uxtb	r2, r3
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	4313      	orrs	r3, r2
 800116e:	b2db      	uxtb	r3, r3
 8001170:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8001172:	f107 030f 	add.w	r3, r7, #15
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	2024      	movs	r0, #36	; 0x24
 800117c:	f7ff ff96 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001188:	2388      	movs	r3, #136	; 0x88
 800118a:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 800118c:	f107 030f 	add.w	r3, r7, #15
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	2023      	movs	r0, #35	; 0x23
 8001196:	f7ff ff89 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	2b20      	cmp	r3, #32
 80011a0:	d858      	bhi.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	0800122d 	.word	0x0800122d
 80011ac:	08001255 	.word	0x08001255
 80011b0:	08001255 	.word	0x08001255
 80011b4:	08001255 	.word	0x08001255
 80011b8:	08001255 	.word	0x08001255
 80011bc:	08001255 	.word	0x08001255
 80011c0:	08001255 	.word	0x08001255
 80011c4:	08001255 	.word	0x08001255
 80011c8:	08001235 	.word	0x08001235
 80011cc:	08001255 	.word	0x08001255
 80011d0:	08001255 	.word	0x08001255
 80011d4:	08001255 	.word	0x08001255
 80011d8:	08001255 	.word	0x08001255
 80011dc:	08001255 	.word	0x08001255
 80011e0:	08001255 	.word	0x08001255
 80011e4:	08001255 	.word	0x08001255
 80011e8:	0800123d 	.word	0x0800123d
 80011ec:	08001255 	.word	0x08001255
 80011f0:	08001255 	.word	0x08001255
 80011f4:	08001255 	.word	0x08001255
 80011f8:	08001255 	.word	0x08001255
 80011fc:	08001255 	.word	0x08001255
 8001200:	08001255 	.word	0x08001255
 8001204:	08001255 	.word	0x08001255
 8001208:	08001245 	.word	0x08001245
 800120c:	08001255 	.word	0x08001255
 8001210:	08001255 	.word	0x08001255
 8001214:	08001255 	.word	0x08001255
 8001218:	08001255 	.word	0x08001255
 800121c:	08001255 	.word	0x08001255
 8001220:	08001255 	.word	0x08001255
 8001224:	08001255 	.word	0x08001255
 8001228:	0800124d 	.word	0x0800124d
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 8001230:	601a      	str	r2, [r3, #0]
			break;
 8001232:	e00f      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 8001238:	601a      	str	r2, [r3, #0]
			break;
 800123a:	e00b      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 8001240:	601a      	str	r2, [r3, #0]
			break;
 8001242:	e007      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 8001246:	4a0d      	ldr	r2, [pc, #52]	; (800127c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 8001248:	601a      	str	r2, [r3, #0]
			break;
 800124a:	e003      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 8001250:	601a      	str	r2, [r3, #0]
			break;
 8001252:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8001254:	2201      	movs	r2, #1
 8001256:	2108      	movs	r1, #8
 8001258:	480a      	ldr	r0, [pc, #40]	; (8001284 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 800125a:	f008 f8ab 	bl	80093b4 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200004a8 	.word	0x200004a8
 800126c:	20000000 	.word	0x20000000
 8001270:	3d75c28f 	.word	0x3d75c28f
 8001274:	3df5c28f 	.word	0x3df5c28f
 8001278:	3e3851ec 	.word	0x3e3851ec
 800127c:	3e75c28f 	.word	0x3e75c28f
 8001280:	3f3ae148 	.word	0x3f3ae148
 8001284:	40021000 	.word	0x40021000

08001288 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001292:	edd7 7a01 	vldr	s15, [r7, #4]
 8001296:	eef0 7ae7 	vabs.f32	s15, s15
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	fab3 f383 	clz	r3, r3
 80012b6:	f1c3 031f 	rsb	r3, r3, #31
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	1e5a      	subs	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80012fe:	2137      	movs	r1, #55	; 0x37
 8001300:	4817      	ldr	r0, [pc, #92]	; (8001360 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 8001302:	f021 fa4f 	bl	80227a4 <__assert_func>

	if(align && size)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01f      	beq.n	800134c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d01c      	beq.n	800134c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3301      	adds	r3, #1
 8001316:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4413      	add	r3, r2
 800131e:	2101      	movs	r1, #1
 8001320:	4618      	mov	r0, r3
 8001322:	f018 fe21 	bl	8019f68 <_Z9ei_callocjj>
 8001326:	60f8      	str	r0, [r7, #12]

		if(p)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00e      	beq.n	800134c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	425b      	negs	r3, r3
 800133a:	4013      	ands	r3, r2
 800133c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1ad2      	subs	r2, r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3b02      	subs	r3, #2
 8001348:	b292      	uxth	r2, r2
 800134a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800134c:	697b      	ldr	r3, [r7, #20]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	08026c10 	.word	0x08026c10
 800135c:	08026c2c 	.word	0x08026c2c
 8001360:	08026c64 	.word	0x08026c64

08001364 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d105      	bne.n	800137e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001376:	215a      	movs	r1, #90	; 0x5a
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800137a:	f021 fa13 	bl	80227a4 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001384:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	425b      	negs	r3, r3
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001390:	68b8      	ldr	r0, [r7, #8]
 8001392:	f018 fdf7 	bl	8019f84 <_Z7ei_freePv>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	08026ce4 	.word	0x08026ce4
 80013a4:	08026ce8 	.word	0x08026ce8
 80013a8:	08026c64 	.word	0x08026c64

080013ac <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_ZNKSt14_Bit_referencecvbEv>:

#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    operator bool() const _GLIBCXX_NOEXCEPT
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bf14      	ite	ne
 80013ea:	2301      	movne	r3, #1
 80013ec:	2300      	moveq	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6819      	ldr	r1, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e009      	b.n	8001436 <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6819      	ldr	r1, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	43da      	mvns	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	400a      	ands	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
      return *this;
 8001436:	687b      	ldr	r3, [r7, #4]
    }
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	  --_M_p;
	}
    }

    void
    _M_incr(ptrdiff_t __i)
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	da00      	bge.n	800148a <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 8001488:	331f      	adds	r3, #31
 800148a:	115b      	asrs	r3, r3, #5
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	441a      	add	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	425a      	negs	r2, r3
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	f002 021f 	and.w	r2, r2, #31
 80014a0:	bf58      	it	pl
 80014a2:	4253      	negpl	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da07      	bge.n	80014bc <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3320      	adds	r3, #32
 80014b0:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1f1a      	subs	r2, r3, #4
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	605a      	str	r2, [r3, #4]
    }
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_ZNSt13_Bit_iteratorC1Ev>:
#else
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ffb1 	bl	8001444 <_ZNSt18_Bit_iterator_baseC1EPmj>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ffa0 	bl	8001444 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	461a      	mov	r2, r3
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff3f 	bl	80013ac <_ZNSt14_Bit_referenceC1EPmm>
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff90 	bl	800146a <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 800154a:	687b      	ldr	r3, [r7, #4]
    }
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZStplRKSt13_Bit_iteratori>:
    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    friend iterator
    operator+(const iterator& __x, difference_type __n)
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001568:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ffe1 	bl	8001536 <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 8001574:	bf00      	nop
    }
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	4798      	blx	r3
    }
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	731a      	strb	r2, [r3, #12]
 800162e:	e00e      	b.n	800164e <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	2101      	movs	r1, #1
 800163c:	4618      	mov	r0, r3
 800163e:	f018 fc93 	bl	8019f68 <_Z9ei_callocjj>
 8001642:	4602      	mov	r2, r0
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7b1b      	ldrb	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d004      	beq.n	8001686 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f018 fc7f 	bl	8019f84 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
    }
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	731a      	strb	r2, [r3, #12]
 80016d8:	e00d      	b.n	80016f6 <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	2101      	movs	r1, #1
 80016e4:	4618      	mov	r0, r3
 80016e6:	f018 fc3f 	bl	8019f68 <_Z9ei_callocjj>
 80016ea:	4602      	mov	r2, r0
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2201      	movs	r2, #1
 80016f4:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7b1b      	ldrb	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f018 fc2b 	bl	8019f84 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
 800173c:	e7fe      	b.n	800173c <_ZSt25__throw_bad_function_callv+0x4>

0800173e <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	ed87 0a01 	vstr	s0, [r7, #4]
 8001748:	ed97 0a01 	vldr	s0, [r7, #4]
 800174c:	f01e fdae 	bl	80202ac <expf>
 8001750:	eef0 7a40 	vmov.f32	s15, s0
 8001754:	eeb0 0a67 	vmov.f32	s0, s15
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	ed87 0a01 	vstr	s0, [r7, #4]
 8001768:	ed97 0a01 	vldr	s0, [r7, #4]
 800176c:	f01e fcde 	bl	802012c <roundf>
 8001770:	eef0 7a40 	vmov.f32	s15, s0
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	ed87 0a01 	vstr	s0, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001792:	edd7 7a05 	vldr	s15, [r7, #20]
 8001796:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	db09      	blt.n	80017b4 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80017a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80017a4:	f01e fde6 	bl	8020374 <sqrtf>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80017b2:	e004      	b.n	80017be <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80017bc:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
        }

        return EIDSP_OK;
    }

    static void transpose_in_place(matrix_t *matrix) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b096      	sub	sp, #88	; 0x58
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
        size_t size = matrix->cols * matrix->rows - 1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6852      	ldr	r2, [r2, #4]
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	64bb      	str	r3, [r7, #72]	; 0x48
        float temp; // temp for swap
        size_t next; // next item to swap
        size_t cycleBegin; // index of start of cycle
        size_t i; // location in matrix
        size_t all_done_mark = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	64fb      	str	r3, [r7, #76]	; 0x4c
        ei_vector<bool> done(size+1,false);
 80017ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017ec:	1c59      	adds	r1, r3, #1
 80017ee:	2300      	movs	r3, #0
 80017f0:	77fb      	strb	r3, [r7, #31]
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	f107 021f 	add.w	r2, r7, #31
 80017fa:	f107 0008 	add.w	r0, r7, #8
 80017fe:	f004 fbfa 	bl	8005ff6 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>

        i = 1; // Note that matrix[0] and last element of matrix won't move
 8001802:	2301      	movs	r3, #1
 8001804:	653b      	str	r3, [r7, #80]	; 0x50
        while (1)
        {
            cycleBegin = i;
 8001806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001808:	647b      	str	r3, [r7, #68]	; 0x44
            temp = matrix->buffer[i];
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	657b      	str	r3, [r7, #84]	; 0x54
            do
            {
                size_t col = i % matrix->cols;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800181e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001822:	fb01 f202 	mul.w	r2, r1, r2
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	643b      	str	r3, [r7, #64]	; 0x40
                size_t row = i / matrix->cols;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	63fb      	str	r3, [r7, #60]	; 0x3c
                // swap row and col to make new idx, b/c we want to know where in the transposed matrix
                next = col*matrix->rows + row;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001842:	4413      	add	r3, r2
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
                float temp2 = matrix->buffer[next];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
                matrix->buffer[next] = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001860:	601a      	str	r2, [r3, #0]
                temp = temp2;
 8001862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001864:	657b      	str	r3, [r7, #84]	; 0x54
                done[next] = true;
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	f107 0108 	add.w	r1, r7, #8
 800186e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001870:	4618      	mov	r0, r3
 8001872:	f004 fbe8 	bl	8006046 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187a:	2101      	movs	r1, #1
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fdbd 	bl	80013fc <_ZNSt14_Bit_referenceaSEb>
                i = next;
 8001882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001884:	653b      	str	r3, [r7, #80]	; 0x50
            }
            while (i != cycleBegin);
 8001886:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188a:	429a      	cmp	r2, r3
 800188c:	d000      	beq.n	8001890 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc2>
            do
 800188e:	e7c3      	b.n	8001818 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x4a>

            // start next cycle by find next not done
            for (i = all_done_mark; done[i]; i++) {
 8001890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001892:	653b      	str	r3, [r7, #80]	; 0x50
 8001894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001898:	f107 0108 	add.w	r1, r7, #8
 800189c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fbd1 	bl	8006046 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fd92 	bl	80013d2 <_ZNKSt14_Bit_referencecvbEv>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0a8      	beq.n	8001806 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                all_done_mark++; // move the high water mark so we don't look again
 80018b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b6:	3301      	adds	r3, #1
 80018b8:	64fb      	str	r3, [r7, #76]	; 0x4c
                if(i>=size) { goto LOOP_END; }
 80018ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80018bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018be:	429a      	cmp	r2, r3
 80018c0:	d203      	bcs.n	80018ca <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xfc>
            for (i = all_done_mark; done[i]; i++) {
 80018c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c4:	3301      	adds	r3, #1
 80018c6:	653b      	str	r3, [r7, #80]	; 0x50
 80018c8:	e7e4      	b.n	8001894 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc6>
                if(i>=size) { goto LOOP_END; }
 80018ca:	bf00      	nop
            }
        }
        LOOP_END:
        // finally, swap the row and column dimensions
        std::swap(matrix->rows, matrix->cols);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1d1a      	adds	r2, r3, #4
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3308      	adds	r3, #8
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f004 fbe0 	bl	800609c <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
        ei_vector<bool> done(size+1,false);
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	4618      	mov	r0, r3
 80018e2:	f004 fba3 	bl	800602c <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>
    }
 80018e6:	bf00      	nop
 80018e8:	3758      	adds	r7, #88	; 0x58
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	4619      	mov	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	461a      	mov	r2, r3
 8001906:	f000 f817 	bl	8001938 <_ZN2ei5numpy9transposeEPfii>
 800190a:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	e00c      	b.n	8001930 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001922:	893a      	ldrh	r2, [r7, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 8001928:	897a      	ldrh	r2, [r7, #10]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 800192e:	2300      	movs	r3, #0
    }
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b08f      	sub	sp, #60	; 0x3c
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800194c:	2300      	movs	r3, #0
 800194e:	f7ff fe5e 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <_ZN2ei5numpy9transposeEPfii+0x24>
 8001958:	4c23      	ldr	r4, [pc, #140]	; (80019e8 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 800195a:	e03b      	b.n	80019d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001962:	4c21      	ldr	r4, [pc, #132]	; (80019e8 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001964:	e036      	b.n	80019d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	da03      	bge.n	8001976 <_ZN2ei5numpy9transposeEPfii+0x3e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	db01      	blt.n	800197a <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 8001976:	4c1d      	ldr	r4, [pc, #116]	; (80019ec <_ZN2ei5numpy9transposeEPfii+0xb4>)
 8001978:	e02c      	b.n	80019d4 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	b29b      	uxth	r3, r3
 800197e:	83bb      	strh	r3, [r7, #28]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	b29b      	uxth	r3, r3
 8001984:	83fb      	strh	r3, [r7, #30]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	b29b      	uxth	r3, r3
 800198e:	82bb      	strh	r3, [r7, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	b29b      	uxth	r3, r3
 8001994:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001998:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 800199a:	f107 0214 	add.w	r2, r7, #20
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00d fae7 	bl	800ef78 <arm_mat_trans_f32>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 80019b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 80019b8:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 80019bc:	e00a      	b.n	80019d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 80019be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	461a      	mov	r2, r3
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f020 ff63 	bl	8022898 <memcpy>

        return EIDSP_OK;
 80019d2:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fe43 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 80019de:	4623      	mov	r3, r4
 80019e0:	4618      	mov	r0, r3
 80019e2:	373c      	adds	r7, #60	; 0x3c
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	fffffc16 	.word	0xfffffc16
 80019ec:	fffffc0c 	.word	0xfffffc0c

080019f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 80019fc:	edd7 7a00 	vldr	s15, [r7]
 8001a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a04:	eef4 7a47 	vcmp.f32	s15, s14
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	d101      	bne.n	8001a12 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e033      	b.n	8001a7a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1a:	d204      	bcs.n	8001a26 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a24:	d301      	bcc.n	8001a2a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001a28:	e027      	b.n	8001a7a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	82bb      	strh	r3, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	82fb      	strh	r3, [r7, #22]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	81bb      	strh	r3, [r7, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	81fb      	strh	r3, [r7, #14]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001a56:	f107 020c 	add.w	r2, r7, #12
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4611      	mov	r1, r2
 8001a60:	ed97 0a00 	vldr	s0, [r7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00d fa51 	bl	800ef0c <arm_mat_scale_f32>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	e000      	b.n	8001a7a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001a78:	2300      	movs	r3, #0
    }
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	fffffc0c 	.word	0xfffffc0c

08001a88 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6892      	ldr	r2, [r2, #8]
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d215      	bcs.n	8001ad6 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	ed93 7a00 	vldr	s14, [r3]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	edd7 7a00 	vldr	s15, [r7]
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e7e0      	b.n	8001a98 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 8001ad6:	2300      	movs	r3, #0
    }
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001afa:	4c26      	ldr	r4, [pc, #152]	; (8001b94 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001afc:	e045      	b.n	8001b8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d001      	beq.n	8001b0a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b06:	4c23      	ldr	r4, [pc, #140]	; (8001b94 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001b08:	e03f      	b.n	8001b8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d237      	bcs.n	8001b88 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa4>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689d      	ldr	r5, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	69f9      	ldr	r1, [r7, #28]
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f107 0008 	add.w	r0, r7, #8
 8001b32:	462a      	mov	r2, r5
 8001b34:	2101      	movs	r1, #1
 8001b36:	f7ff fd6a 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
 8001b40:	4c15      	ldr	r4, [pc, #84]	; (8001b98 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001b42:	2500      	movs	r5, #0
 8001b44:	e015      	b.n	8001b72 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff93 	bl	8001a88 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001b62:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8c>
                EIDSP_ERR(ret);
 8001b6a:	69bc      	ldr	r4, [r7, #24]
 8001b6c:	2500      	movs	r5, #0
 8001b6e:	e000      	b.n	8001b72 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
 8001b70:	2501      	movs	r5, #1
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fd74 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8001b7c:	2d01      	cmp	r5, #1
 8001b7e:	d104      	bne.n	8001b8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	3301      	adds	r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	e7c2      	b.n	8001b0e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2a>
            }
        }

        return EIDSP_OK;
 8001b88:	2400      	movs	r4, #0
    }
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bdb0      	pop	{r4, r5, r7, pc}
 8001b94:	fffffc14 	.word	0xfffffc14
 8001b98:	fffffc16 	.word	0xfffffc16

08001b9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001bb4:	e028      	b.n	8001c08 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d001      	beq.n	8001bc2 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001bc0:	e022      	b.n	8001c08 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d21a      	bcs.n	8001c06 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	18d0      	adds	r0, r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f107 0208 	add.w	r2, r7, #8
 8001bea:	4619      	mov	r1, r3
 8001bec:	f00d fa34 	bl	800f058 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3301      	adds	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	e7df      	b.n	8001bc6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001c06:	2300      	movs	r3, #0
    }
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	fffffc14 	.word	0xfffffc14

08001c14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d001      	beq.n	8001c2e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001c2c:	e028      	b.n	8001c80 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d001      	beq.n	8001c3a <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001c38:	e022      	b.n	8001c80 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d21a      	bcs.n	8001c7e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	18d0      	adds	r0, r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f107 0208 	add.w	r2, r7, #8
 8001c62:	4619      	mov	r1, r3
 8001c64:	f00d f9c9 	bl	800effa <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e7df      	b.n	8001c3e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001c7e:	2300      	movs	r3, #0
    }
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	fffffc14 	.word	0xfffffc14

08001c8c <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001c8c:	b5b0      	push	{r4, r5, r7, lr}
 8001c8e:	b098      	sub	sp, #96	; 0x60
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001caa:	4c65      	ldr	r4, [pc, #404]	; (8001e40 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8001cac:	e0c2      	b.n	8001e34 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d901      	bls.n	8001cba <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8001cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb8:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001cba:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	f7ff fca3 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001cce:	4c5d      	ldr	r4, [pc, #372]	; (8001e44 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001cd0:	e0ab      	b.n	8001e2a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 8001cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001cd8:	4c5a      	ldr	r4, [pc, #360]	; (8001e44 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001cda:	e0a6      	b.n	8001e2a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001cdc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	f020 fdd7 	bl	8022898 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001cea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	18d0      	adds	r0, r2, r3
 8001cf2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	f020 fdf3 	bl	80228e8 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d025      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d022      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	2b80      	cmp	r3, #128	; 0x80
 8001d12:	d01f      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d1a:	d01b      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d22:	d017      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2a:	d013      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d32:	d00f      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d3a:	d00b      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001d3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f000 fa4e 	bl	80021e4 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001d48:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d068      	beq.n	8001e22 <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 8001d50:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001d52:	e06a      	b.n	8001e2a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fada 	bl	8002314 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001d60:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8001d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8001d68:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001d6a:	e05d      	b.n	8001e28 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001d6c:	f107 0014 	add.w	r0, r7, #20
 8001d70:	2300      	movs	r3, #0
 8001d72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d74:	2101      	movs	r1, #1
 8001d76:	f7ff fc4a 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 8001d80:	4c30      	ldr	r4, [pc, #192]	; (8001e44 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001d82:	2500      	movs	r5, #0
 8001d84:	e045      	b.n	8001e12 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001d8c:	4c2d      	ldr	r4, [pc, #180]	; (8001e44 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001d8e:	2500      	movs	r5, #0
 8001d90:	e03f      	b.n	8001e12 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001d92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f00f fc8a 	bl	80116b4 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001db0:	3b01      	subs	r3, #1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	440b      	add	r3, r1
 8001db8:	6852      	ldr	r2, [r2, #4]
 8001dba:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d220      	bcs.n	8001e10 <_ZN2ei5numpy4rfftEPKfjPfjj+0x184>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f107 0210 	add.w	r2, r7, #16
 8001dda:	2102      	movs	r1, #2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00d f93b 	bl	800f058 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001de2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001de6:	f7ff fcca 	bl	800177e <_ZN2ei5numpy4sqrtEf>
 8001dea:	eeb0 7a40 	vmov.f32	s14, s0
 8001dee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfe:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 8001e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e04:	3302      	adds	r3, #2
 8001e06:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e0e:	e7d9      	b.n	8001dc4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>
 8001e10:	2501      	movs	r5, #1
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fc24 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8001e1c:	2d01      	cmp	r5, #1
 8001e1e:	d103      	bne.n	8001e28 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 8001e20:	e000      	b.n	8001e24 <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
            }
 8001e22:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001e24:	2400      	movs	r4, #0
 8001e26:	e000      	b.n	8001e2a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 8001e28:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001e2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fc18 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 8001e34:	4623      	mov	r3, r4
 8001e36:	4618      	mov	r0, r3
 8001e38:	3760      	adds	r7, #96	; 0x60
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	fffffc11 	.word	0xfffffc11
 8001e44:	fffffc16 	.word	0xfffffc16

08001e48 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b098      	sub	sp, #96	; 0x60
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001e66:	4c6f      	ldr	r4, [pc, #444]	; (8002024 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8001e68:	e0d6      	b.n	8002018 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d901      	bls.n	8001e76 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8001e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e74:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d101      	bne.n	8001e86 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001e86:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e8e:	2101      	movs	r1, #1
 8001e90:	f7ff fbbd 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 8001e9a:	4c63      	ldr	r4, [pc, #396]	; (8002028 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001e9c:	e0b7      	b.n	800200e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 8001e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ea4:	4c60      	ldr	r4, [pc, #384]	; (8002028 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001ea6:	e0b2      	b.n	800200e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 8001ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d112      	bne.n	8001ed4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001eae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68f9      	ldr	r1, [r7, #12]
 8001eb8:	f020 fcee 	bl	8022898 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8001ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	18d0      	adds	r0, r2, r3
 8001ec4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f020 fd0a 	bl	80228e8 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d025      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001edc:	2b40      	cmp	r3, #64	; 0x40
 8001ede:	d022      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee2:	2b80      	cmp	r3, #128	; 0x80
 8001ee4:	d01f      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eec:	d01b      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef4:	d017      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001ef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efc:	d013      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f04:	d00f      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0c:	d00b      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001f0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	f000 f9d7 	bl	80022c8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 8001f1a:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 8001f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d071      	beq.n	8002006 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 8001f22:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001f24:	e073      	b.n	800200e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001f26:	f107 0320 	add.w	r3, r7, #32
 8001f2a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f9f1 	bl	8002314 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001f32:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8001f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 8001f3a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001f3c:	e066      	b.n	800200c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001f3e:	f107 0010 	add.w	r0, r7, #16
 8001f42:	2300      	movs	r3, #0
 8001f44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f46:	2101      	movs	r1, #1
 8001f48:	f7ff fb61 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8001f52:	4c35      	ldr	r4, [pc, #212]	; (8002028 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001f54:	2500      	movs	r5, #0
 8001f56:	e04e      	b.n	8001ff6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001f5e:	4c32      	ldr	r4, [pc, #200]	; (8002028 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001f60:	2500      	movs	r5, #0
 8001f62:	e048      	b.n	8001ff6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001f64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	f107 0020 	add.w	r0, r7, #32
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f00f fba1 	bl	80116b4 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f86:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	440b      	add	r3, r1
 8001f92:	6852      	ldr	r2, [r2, #4]
 8001f94:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8001f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f98:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 8001faa:	2302      	movs	r3, #2
 8001fac:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001fae:	2301      	movs	r3, #1
 8001fb0:	657b      	str	r3, [r7, #84]	; 0x54
 8001fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d21b      	bcs.n	8001ff4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ac>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	441a      	add	r2, r3
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	440b      	add	r3, r1
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	441a      	add	r2, r3
 8001fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	440b      	add	r3, r1
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 8001fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fe8:	3302      	adds	r3, #2
 8001fea:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fee:	3301      	adds	r3, #1
 8001ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ff2:	e7de      	b.n	8001fb2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16a>
 8001ff4:	2501      	movs	r5, #1
 8001ff6:	f107 0310 	add.w	r3, r7, #16
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fb32 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8002000:	2d01      	cmp	r5, #1
 8002002:	d103      	bne.n	800200c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 8002004:	e000      	b.n	8002008 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
            }
 8002006:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002008:	2400      	movs	r4, #0
 800200a:	e000      	b.n	800200e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 800200c:	bf00      	nop
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 800200e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fb26 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 8002018:	4623      	mov	r3, r4
 800201a:	4618      	mov	r0, r3
 800201c:	3760      	adds	r7, #96	; 0x60
 800201e:	46bd      	mov	sp, r7
 8002020:	bdb0      	pop	{r4, r5, r7, pc}
 8002022:	bf00      	nop
 8002024:	fffffc11 	.word	0xfffffc11
 8002028:	fffffc16 	.word	0xfffffc16

0800202c <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	ed87 0a03 	vstr	s0, [r7, #12]
 8002036:	edc7 0a02 	vstr	s1, [r7, #8]
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 800204c:	e03f      	b.n	80020ce <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d104      	bne.n	800205e <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e037      	b.n	80020ce <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 800205e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002062:	edd7 7a03 	vldr	s15, [r7, #12]
 8002066:	ee77 6a67 	vsub.f32	s13, s14, s15
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3b01      	subs	r3, #1
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800207a:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3b01      	subs	r3, #1
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	429a      	cmp	r2, r3
 800208a:	d216      	bcs.n	80020ba <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002096:	edd7 7a04 	vldr	s15, [r7, #16]
 800209a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ae:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e7e3      	b.n	8002082 <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020c0:	3b01      	subs	r3, #1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80020cc:	2300      	movs	r3, #0
    }
 80020ce:	4618      	mov	r0, r3
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	fffffc10 	.word	0xfffffc10

080020e0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>:
    /**
     * Calculate the log10 of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log10(matrix_t *matrix)
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6892      	ldr	r2, [r2, #8]
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d263      	bcs.n	80021c6 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xe6>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6811      	ldr	r1, [r2, #0]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	188c      	adds	r4, r1, r2
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	617b      	str	r3, [r7, #20]
        float f = frexpf(fabsf(a), &e);
 800211a:	edd7 7a05 	vldr	s15, [r7, #20]
 800211e:	eef0 7ae7 	vabs.f32	s15, s15
 8002122:	f107 0308 	add.w	r3, r7, #8
 8002126:	4618      	mov	r0, r3
 8002128:	eeb0 0a67 	vmov.f32	s0, s15
 800212c:	f01d ffd8 	bl	80200e0 <frexpf>
 8002130:	ed87 0a04 	vstr	s0, [r7, #16]
        float y = 1.23149591368684f;
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf0>)
 8002136:	60fb      	str	r3, [r7, #12]
        y *= f;
 8002138:	ed97 7a03 	vldr	s14, [r7, #12]
 800213c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -4.11852516267426f;
 8002148:	edd7 7a03 	vldr	s15, [r7, #12]
 800214c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80021d4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf4>
 8002150:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002154:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002158:	ed97 7a03 	vldr	s14, [r7, #12]
 800215c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002164:	edc7 7a03 	vstr	s15, [r7, #12]
        y += 6.02197014179219f;
 8002168:	edd7 7a03 	vldr	s15, [r7, #12]
 800216c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021d8 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf8>
 8002170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002174:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002178:	ed97 7a03 	vldr	s14, [r7, #12]
 800217c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002184:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -3.13396450166353f;
 8002188:	edd7 7a03 	vldr	s15, [r7, #12]
 800218c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80021dc <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xfc>
 8002190:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002194:	edc7 7a03 	vstr	s15, [r7, #12]
        y += e;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80021a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021aa:	edc7 7a03 	vstr	s15, [r7, #12]
        return y;
 80021ae:	edd7 7a03 	vldr	s15, [r7, #12]
        return numpy::log2(a) * 0.3010299956639812f;
 80021b2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80021e0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0x100>
 80021b6:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80021ba:	edc4 7a00 	vstr	s15, [r4]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	e792      	b.n	80020ec <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xc>
        }

        return EIDSP_OK;
 80021c6:	2300      	movs	r3, #0
    }
 80021c8:	4618      	mov	r0, r3
 80021ca:	3724      	adds	r7, #36	; 0x24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd90      	pop	{r4, r7, pc}
 80021d0:	3f9da1a8 	.word	0x3f9da1a8
 80021d4:	4083caf5 	.word	0x4083caf5
 80021d8:	40c0b3fb 	.word	0x40c0b3fb
 80021dc:	404892e0 	.word	0x404892e0
 80021e0:	3e9a209b 	.word	0x3e9a209b

080021e4 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f017 feaa 	bl	8019f50 <_Z9ei_mallocj>
 80021fc:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002204:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002206:	e058      	b.n	80022ba <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2300      	movs	r3, #0
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	f017 faf3 	bl	8019800 <kiss_fftr_alloc>
 800221a:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d104      	bne.n	800222c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002222:	69b8      	ldr	r0, [r7, #24]
 8002224:	f017 feae 	bl	8019f84 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002228:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800222a:	e046      	b.n	80022ba <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	6978      	ldr	r0, [r7, #20]
 8002232:	f017 fc05 	bl	8019a40 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d234      	bcs.n	80022ac <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc8>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4413      	add	r3, r2
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	2002      	movs	r0, #2
 8002250:	eeb0 0a67 	vmov.f32	s0, s15
 8002254:	f003 ff41 	bl	80060da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002258:	ec55 4b10 	vmov	r4, r5, d0
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4413      	add	r3, r2
 8002264:	edd3 7a01 	vldr	s15, [r3, #4]
 8002268:	2002      	movs	r0, #2
 800226a:	eeb0 0a67 	vmov.f32	s0, s15
 800226e:	f003 ff34 	bl	80060da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002272:	ec53 2b10 	vmov	r2, r3, d0
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fe f811 	bl	80002a0 <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fcb9 	bl	8000bfc <__aeabi_d2f>
 800228a:	4601      	mov	r1, r0
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	18d4      	adds	r4, r2, r3
 8002294:	ee00 1a10 	vmov	s0, r1
 8002298:	f7ff fa71 	bl	800177e <_ZN2ei5numpy4sqrtEf>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	3301      	adds	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e7c6      	b.n	800223a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80022ac:	6978      	ldr	r0, [r7, #20]
 80022ae:	f017 fe69 	bl	8019f84 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80022b2:	69b8      	ldr	r0, [r7, #24]
 80022b4:	f017 fe66 	bl	8019f84 <_Z7ei_freePv>

        return EIDSP_OK;
 80022b8:	2300      	movs	r3, #0
    }
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bdb0      	pop	{r4, r5, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	fffffc16 	.word	0xfffffc16

080022c8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	f017 fa8c 	bl	8019800 <kiss_fftr_alloc>
 80022e8:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 80022f2:	e008      	b.n	8002306 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	68f9      	ldr	r1, [r7, #12]
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f017 fba1 	bl	8019a40 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80022fe:	6978      	ldr	r0, [r7, #20]
 8002300:	f017 fe40 	bl	8019f84 <_Z7ei_freePv>

        return EIDSP_OK;
 8002304:	2300      	movs	r3, #0
    }
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	fffffc16 	.word	0xfffffc16

08002314 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 800231e:	4b03      	ldr	r3, [pc, #12]	; (800232c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x18>)

        return status;
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	fffffc08 	.word	0xfffffc08

08002330 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 800233e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	b29b      	uxth	r3, r3
 8002344:	3301      	adds	r3, #1
 8002346:	461a      	mov	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4293      	cmp	r3, r2
 800234c:	d001      	beq.n	8002352 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800234e:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002350:	e050      	b.n	80023f4 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002352:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f7ff fc95 	bl	8001c8c <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002362:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	e042      	b.n	80023f4 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d23b      	bcs.n	80023f2 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc2>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 800237a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002384:	ee17 0a90 	vmov	r0, s15
 8002388:	f7fe f8e8 	bl	800055c <__aeabi_f2d>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	f04f 0000 	mov.w	r0, #0
 8002394:	491a      	ldr	r1, [pc, #104]	; (8002400 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 8002396:	f7fe fa63 	bl	8000860 <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4614      	mov	r4, r2
 80023a0:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	ed93 7a00 	vldr	s14, [r3]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023be:	ee17 0a90 	vmov	r0, s15
 80023c2:	f7fe f8cb 	bl	800055c <__aeabi_f2d>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f7fe f91d 	bl	800060c <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	18d4      	adds	r4, r2, r3
 80023e2:	f7fe fc0b 	bl	8000bfc <__aeabi_d2f>
 80023e6:	4603      	mov	r3, r0
 80023e8:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	e7bf      	b.n	8002372 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x42>
        }

        return EIDSP_OK;
 80023f2:	2300      	movs	r3, #0
    }
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bdb0      	pop	{r4, r5, r7, pc}
 80023fc:	fffffc14 	.word	0xfffffc14
 8002400:	3ff00000 	.word	0x3ff00000

08002404 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:

    static int welch_max_hold(
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b093      	sub	sp, #76	; 0x4c
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
        size_t stop_bin,
        size_t fft_points,
        bool do_overlap)
    {
        // save off one point to put back, b/c we're going to calculate in place
        float saved_point = 0;
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
        bool do_saved_point = false;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        size_t fft_out_size = fft_points / 2 + 1;
 800241e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	3301      	adds	r3, #1
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
        float *fft_out;
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002426:	4b4f      	ldr	r3, [pc, #316]	; (8002564 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x160>)
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	f107 0218 	add.w	r2, r7, #24
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f003 fe82 	bl	800613e <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        if (input_size < fft_points) {
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243e:	429a      	cmp	r2, r3
 8002440:	d20b      	bcs.n	800245a <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x56>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 8002442:	2104      	movs	r1, #4
 8002444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002446:	f017 fd8f 	bl	8019f68 <_Z9ei_callocjj>
 800244a:	6378      	str	r0, [r7, #52]	; 0x34
            p_fft_out.reset(fft_out);
 800244c:	f107 0310 	add.w	r3, r7, #16
 8002450:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fea9 	bl	80061aa <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>
 8002458:	e00b      	b.n	8002472 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6e>
        }
        else {
            // set input as output for in place operation
            fft_out = input;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
            // save off one point to put back, b/c we're going to calculate in place
            saved_point = input[fft_points / 2];
 800245e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
            do_saved_point = true;
 800246c:	2301      	movs	r3, #1
 800246e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        // init the output to zeros
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 8002472:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	461a      	mov	r2, r3
 800247c:	2100      	movs	r1, #0
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f020 fa32 	bl	80228e8 <memset>
        int input_ix = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248c:	429a      	cmp	r2, r3
 800248e:	da5e      	bge.n	800254e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14a>
            // Figure out if we need any zero padding
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 8002490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002494:	4413      	add	r3, r2
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	429a      	cmp	r2, r3
 800249a:	d203      	bcs.n	80024a4 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa0>
                                                                        : input_size - input_ix;
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	e000      	b.n	80024a6 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa2>
 80024a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a6:	623b      	str	r3, [r7, #32]
            EI_TRY(power_spectrum(
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	18d0      	adds	r0, r2, r3
 80024b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b2:	085b      	lsrs	r3, r3, #1
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024c0:	6a39      	ldr	r1, [r7, #32]
 80024c2:	f7ff ff35 	bl	8002330 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 80024c6:	61f8      	str	r0, [r7, #28]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xce>
 80024ce:	69fc      	ldr	r4, [r7, #28]
 80024d0:	e03e      	b.n	8002550 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14c>
                input + input_ix,
                n_input_points,
                fft_out,
                fft_points / 2 + 1,
                fft_points));
            int j = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            // keep the max of the last frame and everything before
            for (size_t i = start_bin; i < stop_bin; i++) {
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024de:	429a      	cmp	r2, r3
 80024e0:	d218      	bcs.n	8002514 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x110>
                output[j] = std::max(output[j], fft_out[i]);
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	18d0      	adds	r0, r2, r3
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024f0:	4413      	add	r3, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f003 fe6d 	bl	80061d2 <_ZSt3maxIfERKT_S2_S2_>
 80024f8:	4601      	mov	r1, r0
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	680a      	ldr	r2, [r1, #0]
 8002504:	601a      	str	r2, [r3, #0]
                j++;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	3301      	adds	r3, #1
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (size_t i = start_bin; i < stop_bin; i++) {
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	3301      	adds	r3, #1
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
 8002512:	e7e2      	b.n	80024da <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd6>
            }
            if (do_overlap) {
 8002514:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x140>
                if (do_saved_point) {
 800251c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x134>
                    // This step only matters first time through
                    input[fft_points / 2] = saved_point;
 8002524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4413      	add	r3, r2
 800252e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002530:	601a      	str	r2, [r3, #0]
                    do_saved_point = false;
 8002532:	2300      	movs	r3, #0
 8002534:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                }
                input_ix += fft_points / 2;
 8002538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800253a:	085a      	lsrs	r2, r3, #1
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	4413      	add	r3, r2
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
 8002542:	e7a1      	b.n	8002488 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
            else {
                input_ix += fft_points;
 8002544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002548:	4413      	add	r3, r2
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 800254c:	e79c      	b.n	8002488 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
        }

        return EIDSP_OK;
 800254e:	2400      	movs	r4, #0
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fe07 	bl	8006168 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }
 800255a:	4623      	mov	r3, r4
 800255c:	4618      	mov	r0, r3
 800255e:	3744      	adds	r7, #68	; 0x44
 8002560:	46bd      	mov	sp, r7
 8002562:	bd90      	pop	{r4, r7, pc}
 8002564:	08019f85 	.word	0x08019f85

08002568 <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d214      	bcs.n	80025a8 <_ZN2ei5numpy13zero_handlingEPfj+0x40>
            if (input[ix] == 0) {
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002592:	d105      	bne.n	80025a0 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
                input[ix] = 1e-10;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <_ZN2ei5numpy13zero_handlingEPfj+0x4c>)
 800259e:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e7e6      	b.n	8002576 <_ZN2ei5numpy13zero_handlingEPfj+0xe>
            }
        }
    }
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	2edbe6ff 	.word	0x2edbe6ff

080025b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 80025b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025bc:	b095      	sub	sp, #84	; 0x54
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6178      	str	r0, [r7, #20]
 80025c2:	ed87 0a04 	vstr	s0, [r7, #16]
 80025c6:	edc7 0a03 	vstr	s1, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	0fda      	lsrs	r2, r3, #31
 80025d4:	4413      	add	r3, r2
 80025d6:	105b      	asrs	r3, r3, #1
 80025d8:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7fd ffbe 	bl	800055c <__aeabi_f2d>
 80025e0:	a3f5      	add	r3, pc, #980	; (adr r3, 80029b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f7fe f811 	bl	800060c <__aeabi_dmul>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4690      	mov	r8, r2
 80025f0:	4699      	mov	r9, r3
 80025f2:	6938      	ldr	r0, [r7, #16]
 80025f4:	f7fd ffb2 	bl	800055c <__aeabi_f2d>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4640      	mov	r0, r8
 80025fe:	4649      	mov	r1, r9
 8002600:	f7fe f92e 	bl	8000860 <__aeabi_ddiv>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	ec43 2b17 	vmov	d7, r2, r3
 800260c:	eeb0 0a47 	vmov.f32	s0, s14
 8002610:	eef0 0a67 	vmov.f32	s1, s15
 8002614:	f01d fd30 	bl	8020078 <tan>
 8002618:	ec53 2b10 	vmov	r2, r3, d0
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe faec 	bl	8000bfc <__aeabi_d2f>
 8002624:	4603      	mov	r3, r0
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002628:	2002      	movs	r0, #2
 800262a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800262e:	f003 fd54 	bl	80060da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002632:	ec53 2b10 	vmov	r2, r3, d0
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f7fe fadf 	bl	8000bfc <__aeabi_d2f>
 800263e:	4603      	mov	r3, r0
 8002640:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002644:	2104      	movs	r1, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f017 fc8e 	bl	8019f68 <_Z9ei_callocjj>
 800264c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 800264e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002650:	2104      	movs	r1, #4
 8002652:	4618      	mov	r0, r3
 8002654:	f017 fc88 	bl	8019f68 <_Z9ei_callocjj>
 8002658:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 800265a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800265c:	2104      	movs	r1, #4
 800265e:	4618      	mov	r0, r3
 8002660:	f017 fc82 	bl	8019f68 <_Z9ei_callocjj>
 8002664:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002668:	2104      	movs	r1, #4
 800266a:	4618      	mov	r0, r3
 800266c:	f017 fc7c 	bl	8019f68 <_Z9ei_callocjj>
 8002670:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002674:	2104      	movs	r1, #4
 8002676:	4618      	mov	r0, r3
 8002678:	f017 fc76 	bl	8019f68 <_Z9ei_callocjj>
 800267c:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 800267e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002680:	2104      	movs	r1, #4
 8002682:	4618      	mov	r0, r3
 8002684:	f017 fc70 	bl	8019f68 <_Z9ei_callocjj>
 8002688:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 800268a:	2300      	movs	r3, #0
 800268c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800268e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002692:	429a      	cmp	r2, r3
 8002694:	f280 80e5 	bge.w	8002862 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002698:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800269a:	f7fd ff4d 	bl	8000538 <__aeabi_i2d>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	f7fd fdfd 	bl	80002a0 <__adddf3>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	4bc3      	ldr	r3, [pc, #780]	; (80029c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 80026b4:	f7fd fdf4 	bl	80002a0 <__adddf3>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	a3bd      	add	r3, pc, #756	; (adr r3, 80029b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	f7fd ffa1 	bl	800060c <__aeabi_dmul>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4690      	mov	r8, r2
 80026d0:	4699      	mov	r9, r3
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7fd ff30 	bl	8000538 <__aeabi_i2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	f7fd fde0 	bl	80002a0 <__adddf3>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4640      	mov	r0, r8
 80026e6:	4649      	mov	r1, r9
 80026e8:	f7fe f8ba 	bl	8000860 <__aeabi_ddiv>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	ec43 2b17 	vmov	d7, r2, r3
 80026f4:	eeb0 0a47 	vmov.f32	s0, s14
 80026f8:	eef0 0a67 	vmov.f32	s1, s15
 80026fc:	f01d fc64 	bl	801ffc8 <sin>
 8002700:	ec53 2b10 	vmov	r2, r3, d0
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	f7fe fa78 	bl	8000bfc <__aeabi_d2f>
 800270c:	4603      	mov	r3, r0
 800270e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002710:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002712:	f7fd ff23 	bl	800055c <__aeabi_f2d>
 8002716:	4680      	mov	r8, r0
 8002718:	4689      	mov	r9, r1
 800271a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800271c:	f7fd ff1e 	bl	800055c <__aeabi_f2d>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	f7fd fdbc 	bl	80002a0 <__adddf3>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4692      	mov	sl, r2
 800272e:	469b      	mov	fp, r3
 8002730:	69f8      	ldr	r0, [r7, #28]
 8002732:	f7fd ff13 	bl	800055c <__aeabi_f2d>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4650      	mov	r0, sl
 800273c:	4659      	mov	r1, fp
 800273e:	f7fd ff65 	bl	800060c <__aeabi_dmul>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4640      	mov	r0, r8
 8002748:	4649      	mov	r1, r9
 800274a:	f7fd fda9 	bl	80002a0 <__adddf3>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	4b99      	ldr	r3, [pc, #612]	; (80029c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 800275c:	f7fd fda0 	bl	80002a0 <__adddf3>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe fa48 	bl	8000bfc <__aeabi_d2f>
 800276c:	4603      	mov	r3, r0
 800276e:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 8002770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002776:	4413      	add	r3, r2
 8002778:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800277c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002784:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002788:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800278c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002794:	ee17 0a90 	vmov	r0, s15
 8002798:	f7fd fee0 	bl	800055c <__aeabi_f2d>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	f7fd fd7e 	bl	80002a0 <__adddf3>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4690      	mov	r8, r2
 80027aa:	4699      	mov	r9, r3
 80027ac:	6938      	ldr	r0, [r7, #16]
 80027ae:	f7fd fed5 	bl	800055c <__aeabi_f2d>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4640      	mov	r0, r8
 80027b8:	4649      	mov	r1, r9
 80027ba:	f7fe f851 	bl	8000860 <__aeabi_ddiv>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027cc:	18d6      	adds	r6, r2, r3
 80027ce:	f7fe fa15 	bl	8000bfc <__aeabi_d2f>
 80027d2:	4603      	mov	r3, r0
 80027d4:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 80027d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027d8:	f7fd fec0 	bl	800055c <__aeabi_f2d>
 80027dc:	4680      	mov	r8, r0
 80027de:	4689      	mov	r9, r1
 80027e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027e2:	f7fd febb 	bl	800055c <__aeabi_f2d>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	f7fd fd59 	bl	80002a0 <__adddf3>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4692      	mov	sl, r2
 80027f4:	469b      	mov	fp, r3
 80027f6:	69f8      	ldr	r0, [r7, #28]
 80027f8:	f7fd feb0 	bl	800055c <__aeabi_f2d>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4650      	mov	r0, sl
 8002802:	4659      	mov	r1, fp
 8002804:	f7fd ff02 	bl	800060c <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4640      	mov	r0, r8
 800280e:	4649      	mov	r1, r9
 8002810:	f7fd fd44 	bl	800029c <__aeabi_dsub>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8002822:	f7fd fd3d 	bl	80002a0 <__adddf3>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4614      	mov	r4, r2
 800282c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002830:	6938      	ldr	r0, [r7, #16]
 8002832:	f7fd fe93 	bl	800055c <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4620      	mov	r0, r4
 800283c:	4629      	mov	r1, r5
 800283e:	f7fe f80f 	bl	8000860 <__aeabi_ddiv>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002850:	18d6      	adds	r6, r2, r3
 8002852:	f7fe f9d3 	bl	8000bfc <__aeabi_d2f>
 8002856:	4603      	mov	r3, r0
 8002858:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 800285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285c:	3301      	adds	r3, #1
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002860:	e715      	b.n	800268e <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8002862:	2300      	movs	r3, #0
 8002864:	64bb      	str	r3, [r7, #72]	; 0x48
 8002866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	f080 80aa 	bcs.w	80029c4 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	441a      	add	r2, r3
 8002878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	440b      	add	r3, r1
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002884:	2300      	movs	r3, #0
 8002886:	647b      	str	r3, [r7, #68]	; 0x44
 8002888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800288a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288c:	429a      	cmp	r2, r3
 800288e:	f280 808e 	bge.w	80029ae <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002898:	4413      	add	r3, r2
 800289a:	ed93 7a00 	vldr	s14, [r3]
 800289e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	4413      	add	r3, r2
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b4:	4413      	add	r3, r2
 80028b6:	edd3 6a00 	vldr	s13, [r3]
 80028ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	6a3a      	ldr	r2, [r7, #32]
 80028c0:	4413      	add	r3, r2
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e0:	4413      	add	r3, r2
 80028e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e6:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 80028ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f0:	4413      	add	r3, r2
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fe31 	bl	800055c <__aeabi_f2d>
 80028fa:	4604      	mov	r4, r0
 80028fc:	460d      	mov	r5, r1
 80028fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002904:	4413      	add	r3, r2
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fe27 	bl	800055c <__aeabi_f2d>
 800290e:	4680      	mov	r8, r0
 8002910:	4689      	mov	r9, r1
 8002912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002918:	4413      	add	r3, r2
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fe1d 	bl	800055c <__aeabi_f2d>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	f7fd fcbb 	bl	80002a0 <__adddf3>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4640      	mov	r0, r8
 8002930:	4649      	mov	r1, r9
 8002932:	f7fd fcb5 	bl	80002a0 <__adddf3>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4690      	mov	r8, r2
 800293c:	4699      	mov	r9, r3
 800293e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	6a3a      	ldr	r2, [r7, #32]
 8002944:	4413      	add	r3, r2
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fe07 	bl	800055c <__aeabi_f2d>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4640      	mov	r0, r8
 8002954:	4649      	mov	r1, r9
 8002956:	f7fd fca3 	bl	80002a0 <__adddf3>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	f7fd fe53 	bl	800060c <__aeabi_dmul>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	18d4      	adds	r4, r2, r3
 8002976:	f7fe f941 	bl	8000bfc <__aeabi_d2f>
 800297a:	4603      	mov	r3, r0
 800297c:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 800297e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002984:	441a      	add	r2, r3
 8002986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	6a39      	ldr	r1, [r7, #32]
 800298c:	440b      	add	r3, r1
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8002992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002998:	441a      	add	r2, r3
 800299a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a0:	440b      	add	r3, r1
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 80029a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a8:	3301      	adds	r3, #1
 80029aa:	647b      	str	r3, [r7, #68]	; 0x44
 80029ac:	e76c      	b.n	8002888 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 80029ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b0:	3301      	adds	r3, #1
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b4:	e757      	b.n	8002866 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2ae>
 80029b6:	bf00      	nop
 80029b8:	54442d18 	.word	0x54442d18
 80029bc:	400921fb 	.word	0x400921fb
 80029c0:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 80029c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029c6:	f017 fadd 	bl	8019f84 <_Z7ei_freePv>
        ei_free(d1);
 80029ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029cc:	f017 fada 	bl	8019f84 <_Z7ei_freePv>
        ei_free(d2);
 80029d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029d2:	f017 fad7 	bl	8019f84 <_Z7ei_freePv>
        ei_free(w0);
 80029d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d8:	f017 fad4 	bl	8019f84 <_Z7ei_freePv>
        ei_free(w1);
 80029dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029de:	f017 fad1 	bl	8019f84 <_Z7ei_freePv>
        ei_free(w2);
 80029e2:	6a38      	ldr	r0, [r7, #32]
 80029e4:	f017 face 	bl	8019f84 <_Z7ei_freePv>
    }
 80029e8:	bf00      	nop
 80029ea:	3754      	adds	r7, #84	; 0x54
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f2:	bf00      	nop
 80029f4:	0000      	movs	r0, r0
	...

080029f8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 80029f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029fc:	b095      	sub	sp, #84	; 0x54
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6178      	str	r0, [r7, #20]
 8002a02:	ed87 0a04 	vstr	s0, [r7, #16]
 8002a06:	edc7 0a03 	vstr	s1, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	0fda      	lsrs	r2, r3, #31
 8002a14:	4413      	add	r3, r2
 8002a16:	105b      	asrs	r3, r3, #1
 8002a18:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f7fd fd9e 	bl	800055c <__aeabi_f2d>
 8002a20:	a3f5      	add	r3, pc, #980	; (adr r3, 8002df8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fdf1 	bl	800060c <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4690      	mov	r8, r2
 8002a30:	4699      	mov	r9, r3
 8002a32:	6938      	ldr	r0, [r7, #16]
 8002a34:	f7fd fd92 	bl	800055c <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4640      	mov	r0, r8
 8002a3e:	4649      	mov	r1, r9
 8002a40:	f7fd ff0e 	bl	8000860 <__aeabi_ddiv>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	ec43 2b17 	vmov	d7, r2, r3
 8002a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a50:	eef0 0a67 	vmov.f32	s1, s15
 8002a54:	f01d fb10 	bl	8020078 <tan>
 8002a58:	ec53 2b10 	vmov	r2, r3, d0
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f7fe f8cc 	bl	8000bfc <__aeabi_d2f>
 8002a64:	4603      	mov	r3, r0
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002a68:	2002      	movs	r0, #2
 8002a6a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002a6e:	f003 fb34 	bl	80060da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a72:	ec53 2b10 	vmov	r2, r3, d0
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f7fe f8bf 	bl	8000bfc <__aeabi_d2f>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a84:	2104      	movs	r1, #4
 8002a86:	4618      	mov	r0, r3
 8002a88:	f017 fa6e 	bl	8019f68 <_Z9ei_callocjj>
 8002a8c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a90:	2104      	movs	r1, #4
 8002a92:	4618      	mov	r0, r3
 8002a94:	f017 fa68 	bl	8019f68 <_Z9ei_callocjj>
 8002a98:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f017 fa62 	bl	8019f68 <_Z9ei_callocjj>
 8002aa4:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f017 fa5c 	bl	8019f68 <_Z9ei_callocjj>
 8002ab0:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f017 fa56 	bl	8019f68 <_Z9ei_callocjj>
 8002abc:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f017 fa50 	bl	8019f68 <_Z9ei_callocjj>
 8002ac8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 8002aca:	2300      	movs	r3, #0
 8002acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ace:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	f280 80e5 	bge.w	8002ca2 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002ad8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ada:	f7fd fd2d 	bl	8000538 <__aeabi_i2d>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	f7fd fbdd 	bl	80002a0 <__adddf3>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	4bc3      	ldr	r3, [pc, #780]	; (8002e00 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002af4:	f7fd fbd4 	bl	80002a0 <__adddf3>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	a3bd      	add	r3, pc, #756	; (adr r3, 8002df8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd fd81 	bl	800060c <__aeabi_dmul>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4690      	mov	r8, r2
 8002b10:	4699      	mov	r9, r3
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7fd fd10 	bl	8000538 <__aeabi_i2d>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	f7fd fbc0 	bl	80002a0 <__adddf3>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4640      	mov	r0, r8
 8002b26:	4649      	mov	r1, r9
 8002b28:	f7fd fe9a 	bl	8000860 <__aeabi_ddiv>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	ec43 2b17 	vmov	d7, r2, r3
 8002b34:	eeb0 0a47 	vmov.f32	s0, s14
 8002b38:	eef0 0a67 	vmov.f32	s1, s15
 8002b3c:	f01d fa44 	bl	801ffc8 <sin>
 8002b40:	ec53 2b10 	vmov	r2, r3, d0
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7fe f858 	bl	8000bfc <__aeabi_d2f>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b52:	f7fd fd03 	bl	800055c <__aeabi_f2d>
 8002b56:	4680      	mov	r8, r0
 8002b58:	4689      	mov	r9, r1
 8002b5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b5c:	f7fd fcfe 	bl	800055c <__aeabi_f2d>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	f7fd fb9c 	bl	80002a0 <__adddf3>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4692      	mov	sl, r2
 8002b6e:	469b      	mov	fp, r3
 8002b70:	69f8      	ldr	r0, [r7, #28]
 8002b72:	f7fd fcf3 	bl	800055c <__aeabi_f2d>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4650      	mov	r0, sl
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	f7fd fd45 	bl	800060c <__aeabi_dmul>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4640      	mov	r0, r8
 8002b88:	4649      	mov	r1, r9
 8002b8a:	f7fd fb89 	bl	80002a0 <__adddf3>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	4b99      	ldr	r3, [pc, #612]	; (8002e00 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002b9c:	f7fd fb80 	bl	80002a0 <__adddf3>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f7fe f828 	bl	8000bfc <__aeabi_d2f>
 8002bac:	4603      	mov	r3, r0
 8002bae:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 8002bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb6:	4413      	add	r3, r2
 8002bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002bc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bcc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd4:	ee17 0a90 	vmov	r0, s15
 8002bd8:	f7fd fcc0 	bl	800055c <__aeabi_f2d>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	f7fd fb5e 	bl	80002a0 <__adddf3>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4690      	mov	r8, r2
 8002bea:	4699      	mov	r9, r3
 8002bec:	6938      	ldr	r0, [r7, #16]
 8002bee:	f7fd fcb5 	bl	800055c <__aeabi_f2d>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4640      	mov	r0, r8
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	f7fd fe31 	bl	8000860 <__aeabi_ddiv>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0c:	18d6      	adds	r6, r2, r3
 8002c0e:	f7fd fff5 	bl	8000bfc <__aeabi_d2f>
 8002c12:	4603      	mov	r3, r0
 8002c14:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002c16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c18:	f7fd fca0 	bl	800055c <__aeabi_f2d>
 8002c1c:	4680      	mov	r8, r0
 8002c1e:	4689      	mov	r9, r1
 8002c20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c22:	f7fd fc9b 	bl	800055c <__aeabi_f2d>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	f7fd fb39 	bl	80002a0 <__adddf3>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4692      	mov	sl, r2
 8002c34:	469b      	mov	fp, r3
 8002c36:	69f8      	ldr	r0, [r7, #28]
 8002c38:	f7fd fc90 	bl	800055c <__aeabi_f2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4650      	mov	r0, sl
 8002c42:	4659      	mov	r1, fp
 8002c44:	f7fd fce2 	bl	800060c <__aeabi_dmul>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4640      	mov	r0, r8
 8002c4e:	4649      	mov	r1, r9
 8002c50:	f7fd fb24 	bl	800029c <__aeabi_dsub>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	4b67      	ldr	r3, [pc, #412]	; (8002e00 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002c62:	f7fd fb1d 	bl	80002a0 <__adddf3>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4614      	mov	r4, r2
 8002c6c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002c70:	6938      	ldr	r0, [r7, #16]
 8002c72:	f7fd fc73 	bl	800055c <__aeabi_f2d>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	f7fd fdef 	bl	8000860 <__aeabi_ddiv>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c90:	18d6      	adds	r6, r2, r3
 8002c92:	f7fd ffb3 	bl	8000bfc <__aeabi_d2f>
 8002c96:	4603      	mov	r3, r0
 8002c98:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 8002c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca0:	e715      	b.n	8002ace <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	f080 80aa 	bcs.w	8002e04 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	440b      	add	r3, r1
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	f280 808e 	bge.w	8002dee <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd8:	4413      	add	r3, r2
 8002cda:	ed93 7a00 	vldr	s14, [r3]
 8002cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	4413      	add	r3, r2
 8002ce6:	edd3 7a00 	vldr	s15, [r3]
 8002cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf4:	4413      	add	r3, r2
 8002cf6:	edd3 6a00 	vldr	s13, [r3]
 8002cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	6a3a      	ldr	r2, [r7, #32]
 8002d00:	4413      	add	r3, r2
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d20:	4413      	add	r3, r2
 8002d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d26:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 8002d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d30:	4413      	add	r3, r2
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fc11 	bl	800055c <__aeabi_f2d>
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	460d      	mov	r5, r1
 8002d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d44:	4413      	add	r3, r2
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fc07 	bl	800055c <__aeabi_f2d>
 8002d4e:	4680      	mov	r8, r0
 8002d50:	4689      	mov	r9, r1
 8002d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	4413      	add	r3, r2
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fbfd 	bl	800055c <__aeabi_f2d>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	f7fd fa9b 	bl	80002a0 <__adddf3>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4640      	mov	r0, r8
 8002d70:	4649      	mov	r1, r9
 8002d72:	f7fd fa93 	bl	800029c <__aeabi_dsub>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4690      	mov	r8, r2
 8002d7c:	4699      	mov	r9, r3
 8002d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	6a3a      	ldr	r2, [r7, #32]
 8002d84:	4413      	add	r3, r2
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fbe7 	bl	800055c <__aeabi_f2d>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4640      	mov	r0, r8
 8002d94:	4649      	mov	r1, r9
 8002d96:	f7fd fa83 	bl	80002a0 <__adddf3>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4620      	mov	r0, r4
 8002da0:	4629      	mov	r1, r5
 8002da2:	f7fd fc33 	bl	800060c <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	18d4      	adds	r4, r2, r3
 8002db6:	f7fd ff21 	bl	8000bfc <__aeabi_d2f>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8002dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	441a      	add	r2, r3
 8002dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	6a39      	ldr	r1, [r7, #32]
 8002dcc:	440b      	add	r3, r1
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8002dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd8:	441a      	add	r2, r3
 8002dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de0:	440b      	add	r3, r1
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8002de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de8:	3301      	adds	r3, #1
 8002dea:	647b      	str	r3, [r7, #68]	; 0x44
 8002dec:	e76c      	b.n	8002cc8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 8002dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df0:	3301      	adds	r3, #1
 8002df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df4:	e757      	b.n	8002ca6 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2ae>
 8002df6:	bf00      	nop
 8002df8:	54442d18 	.word	0x54442d18
 8002dfc:	400921fb 	.word	0x400921fb
 8002e00:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8002e04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e06:	f017 f8bd 	bl	8019f84 <_Z7ei_freePv>
        ei_free(d1);
 8002e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e0c:	f017 f8ba 	bl	8019f84 <_Z7ei_freePv>
        ei_free(d2);
 8002e10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e12:	f017 f8b7 	bl	8019f84 <_Z7ei_freePv>
        ei_free(w0);
 8002e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e18:	f017 f8b4 	bl	8019f84 <_Z7ei_freePv>
        ei_free(w1);
 8002e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e1e:	f017 f8b1 	bl	8019f84 <_Z7ei_freePv>
        ei_free(w2);
 8002e22:	6a38      	ldr	r0, [r7, #32]
 8002e24:	f017 f8ae 	bl	8019f84 <_Z7ei_freePv>
    }
 8002e28:	bf00      	nop
 8002e2a:	3754      	adds	r7, #84	; 0x54
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e32:	bf00      	nop

08002e34 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e40:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d21f      	bcs.n	8002e96 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_lowpass(
 8002e56:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	6979      	ldr	r1, [r7, #20]
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	6979      	ldr	r1, [r7, #20]
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 8002e7a:	441a      	add	r2, r3
                matrix->cols);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 8002e80:	4621      	mov	r1, r4
 8002e82:	edd7 0a01 	vldr	s1, [r7, #4]
 8002e86:	ed97 0a02 	vldr	s0, [r7, #8]
 8002e8a:	f7ff fb95 	bl	80025b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3301      	adds	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e7da      	b.n	8002e4c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 8002e96:	2300      	movs	r3, #0
    }
 8002e98:	4618      	mov	r0, r3
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd90      	pop	{r4, r7, pc}

08002ea0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002eac:	edc7 0a01 	vstr	s1, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d21f      	bcs.n	8002f02 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_highpass(
 8002ec2:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	6979      	ldr	r1, [r7, #20]
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	6979      	ldr	r1, [r7, #20]
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8002ee6:	441a      	add	r2, r3
                matrix->cols);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 8002eec:	4621      	mov	r1, r4
 8002eee:	edd7 0a01 	vldr	s1, [r7, #4]
 8002ef2:	ed97 0a02 	vldr	s0, [r7, #8]
 8002ef6:	f7ff fd7f 	bl	80029f8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e7da      	b.n	8002eb8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 8002f02:	2300      	movs	r3, #0
    }
 8002f04:	4618      	mov	r0, r3
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}

08002f0c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 8002f0c:	b480      	push	{r7}
 8002f0e:	b091      	sub	sp, #68	; 0x44
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f1a:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d001      	beq.n	8002f28 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f24:	4b60      	ldr	r3, [pc, #384]	; (80030a8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8002f26:	e0b9      	b.n	800309c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        if (output_matrix->cols != 1) {
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d001      	beq.n	8002f34 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f30:	4b5d      	ldr	r3, [pc, #372]	; (80030a8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8002f32:	e0b3      	b.n	800309c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        uint16_t out_ix = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8002f50:	4b56      	ldr	r3, [pc, #344]	; (80030ac <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8002f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	3b01      	subs	r3, #1
 8002f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d229      	bcs.n	8002fbc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xb0>
            if (in[ix] < min) {
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	4413      	add	r3, r2
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f80:	dd05      	ble.n	8002f8e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x82>
                min = in[ix];
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	6a3a      	ldr	r2, [r7, #32]
 8002f88:	4413      	add	r3, r2
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	6a3a      	ldr	r2, [r7, #32]
 8002f94:	4413      	add	r3, r2
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	d505      	bpl.n	8002fb4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa8>
                max = in[ix];
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	4413      	add	r3, r2
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fba:	e7d0      	b.n	8002f5e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x52>
            }
        }


        float prev = in[0];
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d261      	bcs.n	8003094 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe8:	d549      	bpl.n	800307e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	6a3a      	ldr	r2, [r7, #32]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	ed93 7a00 	vldr	s14, [r3]
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	4413      	add	r3, r2
 8003000:	edd3 7a00 	vldr	s15, [r3]
 8003004:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	dd37      	ble.n	800307e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	6a3a      	ldr	r2, [r7, #32]
 8003014:	4413      	add	r3, r2
 8003016:	ed93 7a00 	vldr	s14, [r3]
 800301a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800301e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	6a3a      	ldr	r2, [r7, #32]
 8003028:	4413      	add	r3, r2
 800302a:	edd3 6a00 	vldr	s13, [r3]
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	3301      	adds	r3, #1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	4413      	add	r3, r2
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003044:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8003048:	ed97 7a05 	vldr	s14, [r7, #20]
 800304c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003058:	dd11      	ble.n	800307e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                    out[out_ix] = ix;
 800305a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4413      	add	r3, r2
 8003062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003064:	ee07 2a90 	vmov	s15, r2
 8003068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306c:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 8003070:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003072:	3301      	adds	r3, #1
 8003074:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 8003076:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	429a      	cmp	r2, r3
 800307c:	d009      	beq.n	8003092 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x186>
                }
            }

            prev = in[ix];
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	6a3a      	ldr	r2, [r7, #32]
 8003084:	4413      	add	r3, r2
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	3301      	adds	r3, #1
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003090:	e799      	b.n	8002fc6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xba>
                    if (out_ix == out_size) break;
 8003092:	bf00      	nop
        }

        *peaks_found = out_ix;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003098:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 800309a:	2300      	movs	r3, #0
    }
 800309c:	4618      	mov	r0, r3
 800309e:	3744      	adds	r7, #68	; 0x44
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	fffffc14 	.word	0xfffffc14
 80030ac:	7f7fffff 	.word	0x7f7fffff

080030b0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 f8e2 	bl	8006284 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ffeb 	bl	80030b0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80030fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003104:	bfcc      	ite	gt
 8003106:	2301      	movgt	r3, #1
 8003108:	2300      	movle	r3, #0
 800310a:	b2db      	uxtb	r3, r3
        });
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8003118:	b5b0      	push	{r4, r5, r7, lr}
 800311a:	ed2d 8b02 	vpush	{d8}
 800311e:	b09c      	sub	sp, #112	; 0x70
 8003120:	af00      	add	r7, sp, #0
 8003122:	6178      	str	r0, [r7, #20]
 8003124:	6139      	str	r1, [r7, #16]
 8003126:	ed87 0a03 	vstr	s0, [r7, #12]
 800312a:	edc7 0a02 	vstr	s1, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d001      	beq.n	800313e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800313a:	4c95      	ldr	r4, [pc, #596]	; (8003390 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 800313c:	e120      	b.n	8003380 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->cols != 2) {
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d001      	beq.n	800314a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003146:	4c92      	ldr	r4, [pc, #584]	; (8003390 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003148:	e11a      	b.n	8003380 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->rows == 0) {
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 8003152:	2400      	movs	r4, #0
 8003154:	e114      	b.n	8003380 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        int N = static_cast<int>(fft_length);
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	663b      	str	r3, [r7, #96]	; 0x60
        float T = 1.0f / sampling_freq;
 800315a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800315e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003166:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003172:	2300      	movs	r3, #0
 8003174:	2101      	movs	r1, #1
 8003176:	f7fe fa4a 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 800317a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 8003180:	4c84      	ldr	r4, [pc, #528]	; (8003394 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003182:	e0f8      	b.n	8003376 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 8003184:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003188:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800318c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003190:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003196:	0fda      	lsrs	r2, r3, #31
 8003198:	4413      	add	r3, r2
 800319a:	105b      	asrs	r3, r3, #1
 800319c:	4618      	mov	r0, r3
 800319e:	f003 f85f 	bl	8006260 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80031a2:	ec53 2b10 	vmov	r2, r3, d0
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f7fd fd07 	bl	8000bbc <__aeabi_d2uiz>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	eef0 0a48 	vmov.f32	s1, s16
 80031ba:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8003398 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 80031be:	f7fe ff35 	bl	800202c <_ZN2ei5numpy8linspaceEffmPf>
 80031c2:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 80031c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb6>
            EIDSP_ERR(ret);
 80031ca:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80031cc:	e0d3      	b.n	8003376 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4619      	mov	r1, r3
 80031dc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80031e0:	2300      	movs	r3, #0
 80031e2:	2201      	movs	r2, #1
 80031e4:	f7fe fa13 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xda>
 80031ee:	4c69      	ldr	r4, [pc, #420]	; (8003394 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 80031f0:	e0bc      	b.n	800336c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 80031f2:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80031f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031fa:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8003398 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 80031fe:	4619      	mov	r1, r3
 8003200:	6978      	ldr	r0, [r7, #20]
 8003202:	f7ff fe83 	bl	8002f0c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8003206:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfa>
            EIDSP_ERR(ret);
 800320e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003210:	e0ac      	b.n	800336c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ei_vector<freq_peak_t> peaks;
 8003212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff57 	bl	80030ca <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 800321c:	2300      	movs	r3, #0
 800321e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003222:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003226:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003228:	4293      	cmp	r3, r2
 800322a:	da3d      	bge.n	80032a8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x190>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 800322c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800322e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003230:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003240:	ee17 3a90 	vmov	r3, s15
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	623b      	str	r3, [r7, #32]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003252:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003262:	ee17 3a90 	vmov	r3, s15
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
            if (d.amplitude < threshold) {
 800326e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003272:	ed97 7a02 	vldr	s14, [r7, #8]
 8003276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327e:	dd05      	ble.n	800328c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x174>
                d.freq = 0.0f;
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
                d.amplitude = 0.0f;
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
            peaks.push_back(d);
 800328c:	f107 0220 	add.w	r2, r7, #32
 8003290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f003 f831 	bl	80062fe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 800329c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80032a0:	3301      	adds	r3, #1
 80032a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80032a6:	e7bc      	b.n	8003222 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10a>
        sort(peaks.begin(), peaks.end(),
 80032a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ac:	4618      	mov	r0, r3
 80032ae:	f003 f84c 	bl	800634a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 80032b2:	4604      	mov	r4, r0
 80032b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 f856 	bl	800636a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 80032be:	4603      	mov	r3, r0
 80032c0:	462a      	mov	r2, r5
 80032c2:	4619      	mov	r1, r3
 80032c4:	4620      	mov	r0, r4
 80032c6:	f003 f861 	bl	800638c <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80032ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 f86e 	bl	80063b0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 80032d4:	66b8      	str	r0, [r7, #104]	; 0x68
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032dc:	429a      	cmp	r2, r3
 80032de:	d211      	bcs.n	8003304 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1ec>
            freq_peak_t d;
            d.freq = 0;
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
            d.amplitude = 0;
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
            peaks.push_back(d);
 80032ec:	f107 0218 	add.w	r2, r7, #24
 80032f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 f801 	bl	80062fe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80032fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032fe:	3301      	adds	r3, #1
 8003300:	66bb      	str	r3, [r7, #104]	; 0x68
 8003302:	e7e8      	b.n	80032d6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1be>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003304:	2300      	movs	r3, #0
 8003306:	667b      	str	r3, [r7, #100]	; 0x64
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800330e:	429a      	cmp	r2, r3
 8003310:	d226      	bcs.n	8003360 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x248>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8003312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003316:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003318:	4618      	mov	r0, r3
 800331a:	f003 f859 	bl	80063d0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	6802      	ldr	r2, [r0, #0]
 8003332:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8003334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003338:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800333a:	4618      	mov	r0, r3
 800333c:	f003 f848 	bl	80063d0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	3301      	adds	r3, #1
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	6842      	ldr	r2, [r0, #4]
 8003356:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800335a:	3301      	adds	r3, #1
 800335c:	667b      	str	r3, [r7, #100]	; 0x64
 800335e:	e7d3      	b.n	8003308 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f0>
        }

        return EIDSP_OK;
 8003360:	2400      	movs	r4, #0
        ei_vector<freq_peak_t> peaks;
 8003362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003366:	4618      	mov	r0, r3
 8003368:	f002 ffae 	bl	80062c8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 800336c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe f977 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8003376:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe f972 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 8003380:	4623      	mov	r3, r4
 8003382:	4618      	mov	r0, r3
 8003384:	3770      	adds	r7, #112	; 0x70
 8003386:	46bd      	mov	sp, r7
 8003388:	ecbd 8b02 	vpop	{d8}
 800338c:	bdb0      	pop	{r4, r5, r7, pc}
 800338e:	bf00      	nop
 8003390:	fffffc14 	.word	0xfffffc14
 8003394:	fffffc16 	.word	0xfffffc16
 8003398:	00000000 	.word	0x00000000

0800339c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b093      	sub	sp, #76	; 0x4c
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6178      	str	r0, [r7, #20]
 80033a4:	6139      	str	r1, [r7, #16]
 80033a6:	60fa      	str	r2, [r7, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d103      	bne.n	80033be <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d001      	beq.n	80033c2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80033be:	4c7b      	ldr	r4, [pc, #492]	; (80035ac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80033c0:	e0ef      	b.n	80035a2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d001      	beq.n	80033ce <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80033ca:	4c78      	ldr	r4, [pc, #480]	; (80035ac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80033cc:	e0e9      	b.n	80035a2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	429a      	cmp	r2, r3
 80033da:	d105      	bne.n	80033e8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80033e8:	4c70      	ldr	r4, [pc, #448]	; (80035ac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80033ea:	e0da      	b.n	80035a2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80033f8:	4c6c      	ldr	r4, [pc, #432]	; (80035ac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80033fa:	e0d2      	b.n	80035a2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003406:	2300      	movs	r3, #0
 8003408:	2101      	movs	r1, #1
 800340a:	f7fe f900 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 8003414:	4c66      	ldr	r4, [pc, #408]	; (80035b0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003416:	e0bf      	b.n	8003598 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	1e5a      	subs	r2, r3, #1
 800341e:	f107 0018 	add.w	r0, r7, #24
 8003422:	2300      	movs	r3, #0
 8003424:	2101      	movs	r1, #1
 8003426:	f7fe f8f2 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8003430:	4c5f      	ldr	r4, [pc, #380]	; (80035b0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003432:	e0ac      	b.n	800358e <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003434:	2300      	movs	r3, #0
 8003436:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800343a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	d264      	bcs.n	8003510 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x174>
            float t = freq_matrix->buffer[ix];
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003466:	2300      	movs	r3, #0
 8003468:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800346c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	3b01      	subs	r3, #1
 8003476:	429a      	cmp	r2, r3
 8003478:	d244      	bcs.n	8003504 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	edd3 7a00 	vldr	s15, [r3]
 800348a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800348e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	db2f      	blt.n	80034f8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034a0:	3301      	adds	r3, #1
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	edd3 7a00 	vldr	s15, [r3]
 80034aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80034ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b6:	d51f      	bpl.n	80034f8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
                    buckets.buffer[ex] += v;
 80034b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	ed93 7a00 	vldr	s14, [r3]
 80034c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80034d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d8:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034f2:	edc3 7a00 	vstr	s15, [r3]
                    break;
 80034f6:	e005      	b.n	8003504 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 80034f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034fc:	3301      	adds	r3, #1
 80034fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003502:	e7b3      	b.n	800346c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003504:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003508:	3301      	adds	r3, #1
 800350a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800350e:	e794      	b.n	800343a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x9e>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003510:	2300      	movs	r3, #0
 8003512:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003516:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	429a      	cmp	r2, r3
 8003522:	d233      	bcs.n	800358c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f0>
            if (bucket_count.buffer[ex] == 0.0f) {
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353a:	d109      	bne.n	8003550 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1b4>
                output_matrix->buffer[ex] = 0.0f;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e017      	b.n	8003580 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e4>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8003550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003552:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	edd3 6a00 	vldr	s13, [r3]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	ed93 7a00 	vldr	s14, [r3]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800357c:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003580:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003584:	3301      	adds	r3, #1
 8003586:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800358a:	e7c4      	b.n	8003516 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17a>
            }
        }

        return EIDSP_OK;
 800358c:	2400      	movs	r4, #0
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 800358e:	f107 0318 	add.w	r3, r7, #24
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe f866 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8003598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe f861 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 80035a2:	4623      	mov	r3, r4
 80035a4:	4618      	mov	r0, r3
 80035a6:	374c      	adds	r7, #76	; 0x4c
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd90      	pop	{r4, r7, pc}
 80035ac:	fffffc14 	.word	0xfffffc14
 80035b0:	fffffc16 	.word	0xfffffc16

080035b4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	ed2d 8b02 	vpush	{d8}
 80035ba:	b09b      	sub	sp, #108	; 0x6c
 80035bc:	af02      	add	r7, sp, #8
 80035be:	6178      	str	r0, [r7, #20]
 80035c0:	6139      	str	r1, [r7, #16]
 80035c2:	60fa      	str	r2, [r7, #12]
 80035c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80035c8:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d001      	beq.n	80035d6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80035d2:	4c80      	ldr	r4, [pc, #512]	; (80037d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 80035d4:	e192      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	0852      	lsrs	r2, r2, #1
 80035e6:	b292      	uxth	r2, r2
 80035e8:	3201      	adds	r2, #1
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d001      	beq.n	80035f2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80035ee:	4c79      	ldr	r4, [pc, #484]	; (80037d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 80035f0:	e184      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d107      	bne.n	800360a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	0852      	lsrs	r2, r2, #1
 8003602:	b292      	uxth	r2, r2
 8003604:	3201      	adds	r2, #1
 8003606:	4293      	cmp	r3, r2
 8003608:	d001      	beq.n	800360e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800360a:	4c72      	ldr	r4, [pc, #456]	; (80037d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 800360c:	e176      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003616:	4c70      	ldr	r4, [pc, #448]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003618:	e170      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003622:	4c6d      	ldr	r4, [pc, #436]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003624:	e16a      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800362e:	4c6a      	ldr	r4, [pc, #424]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003630:	e164      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003642:	f7fd ffe4 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 800364c:	4c62      	ldr	r4, [pc, #392]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 800364e:	e150      	b.n	80038f2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	429a      	cmp	r2, r3
 800365e:	d904      	bls.n	800366a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003668:	e006      	b.n	8003678 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 800366a:	88fa      	ldrh	r2, [r7, #6]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	d201      	bcs.n	8003678 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003678:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800367c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003680:	2300      	movs	r3, #0
 8003682:	2101      	movs	r1, #1
 8003684:	f7fd ffc3 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 800368e:	4c52      	ldr	r4, [pc, #328]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003690:	e12a      	b.n	80038e8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8003692:	2300      	movs	r3, #0
 8003694:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003698:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800369c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d20d      	bcs.n	80036c0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x10c>
            triage_segments.buffer[ix] = 1.0f;
 80036a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80036b2:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 80036b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80036b8:	3301      	adds	r3, #1
 80036ba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80036be:	e7eb      	b.n	8003698 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe4>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 80036c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80036d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036dc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d826      	bhi.n	8003742 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x18e>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 80036f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800370a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800370e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003712:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003716:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800371a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800371e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003732:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003736:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800373a:	3301      	adds	r3, #1
 800373c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003740:	e7d1      	b.n	80036e6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8003742:	f107 001c 	add.w	r0, r7, #28
 8003746:	2300      	movs	r3, #0
 8003748:	2201      	movs	r2, #1
 800374a:	2101      	movs	r1, #1
 800374c:	f7fd ff5f 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 8003756:	4c20      	ldr	r4, [pc, #128]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003758:	e0c1      	b.n	80038de <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 800375a:	f107 021c 	add.w	r2, r7, #28
 800375e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fa55 	bl	8001c14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 800376a:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 800376c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 8003772:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003774:	e0b3      	b.n	80038de <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 8003776:	f107 021c 	add.w	r2, r7, #28
 800377a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe f9af 	bl	8001ae4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8003786:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8003788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 800378e:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003790:	e0a5      	b.n	80038de <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	b29b      	uxth	r3, r3
 8003798:	3301      	adds	r3, #1
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f016 fbe2 	bl	8019f68 <_Z9ei_callocjj>
 80037a4:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 80037a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	461a      	mov	r2, r3
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037bc:	f7fe fb44 	bl	8001e48 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 80037c0:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80037c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d009      	beq.n	80037dc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 80037c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80037ca:	f016 fbdb 	bl	8019f84 <_Z7ei_freePv>
            EIDSP_ERR(ret);
 80037ce:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80037d0:	e085      	b.n	80038de <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
 80037d2:	bf00      	nop
 80037d4:	fffffc14 	.word	0xfffffc14
 80037d8:	fffffc16 	.word	0xfffffc16
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80037dc:	2300      	movs	r3, #0
 80037de:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d872      	bhi.n	80038d6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x322>
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 80037f0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037f8:	4413      	add	r3, r2
 80037fa:	ed93 7a00 	vldr	s14, [r3]
 80037fe:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003806:	4413      	add	r3, r2
 8003808:	edd3 7a00 	vldr	s15, [r3]
 800380c:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 8003810:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003818:	4413      	add	r3, r2
 800381a:	ed93 7a01 	vldr	s14, [r3, #4]
 800381e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003826:	4413      	add	r3, r2
 8003828:	edd3 7a01 	vldr	s15, [r3, #4]
 800382c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003830:	eeb0 0a67 	vmov.f32	s0, s15
 8003834:	f7fd fd28 	bl	8001288 <_ZSt3absf>
 8003838:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 800383c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003844:	4413      	add	r3, r2
 8003846:	ee78 7a27 	vadd.f32	s15, s16, s15
 800384a:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 800384e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003856:	4413      	add	r3, r2
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 800385e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003866:	4413      	add	r3, r2
 8003868:	ed93 7a00 	vldr	s14, [r3]
 800386c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003874:	4413      	add	r3, r2
 8003876:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800388c:	429a      	cmp	r2, r3
 800388e:	d00f      	beq.n	80038b0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2fc>
                fft_output[ix].r *= 2;
 8003890:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003898:	4413      	add	r3, r2
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038a6:	4413      	add	r3, r2
 80038a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80038ac:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 80038b0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038b8:	441a      	add	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80038ca:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038ce:	3301      	adds	r3, #1
 80038d0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80038d4:	e785      	b.n	80037e2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22e>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 80038d6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80038d8:	f016 fb54 	bl	8019f84 <_Z7ei_freePv>

        return EIDSP_OK;
 80038dc:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 80038de:	f107 031c 	add.w	r3, r7, #28
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd febe 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 80038e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd feb9 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 80038f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd feb4 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 80038fc:	4623      	mov	r3, r4
 80038fe:	4618      	mov	r0, r3
 8003900:	3764      	adds	r7, #100	; 0x64
 8003902:	46bd      	mov	sp, r7
 8003904:	ecbd 8b02 	vpop	{d8}
 8003908:	bd90      	pop	{r4, r7, pc}
 800390a:	bf00      	nop

0800390c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:

    static int subtract_mean(matrix_t* input_matrix) {
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	f107 000c 	add.w	r0, r7, #12
 800391c:	2300      	movs	r3, #0
 800391e:	2201      	movs	r2, #1
 8003920:	f7fd fe75 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x22>
 800392a:	4c12      	ldr	r4, [pc, #72]	; (8003974 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x68>)
 800392c:	e018      	b.n	8003960 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	4619      	mov	r1, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fe f96d 	bl	8001c14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 800393a:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003942:	4c0d      	ldr	r4, [pc, #52]	; (8003978 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8003944:	e00c      	b.n	8003960 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 8003946:	f107 030c 	add.w	r3, r7, #12
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7fe f8c9 	bl	8001ae4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8003952:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x52>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800395a:	4c07      	ldr	r4, [pc, #28]	; (8003978 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 800395c:	e000      	b.n	8003960 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        return EIDSP_OK;
 800395e:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	4618      	mov	r0, r3
 8003966:	f7fd fe7d 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 800396a:	4623      	mov	r3, r4
 800396c:	4618      	mov	r0, r3
 800396e:	3724      	adds	r7, #36	; 0x24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}
 8003974:	fffffc16 	.word	0xfffffc16
 8003978:	fffffc14 	.word	0xfffffc14

0800397c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 800397c:	b5b0      	push	{r4, r5, r7, lr}
 800397e:	b0b0      	sub	sp, #192	; 0xc0
 8003980:	af02      	add	r7, sp, #8
 8003982:	6178      	str	r0, [r7, #20]
 8003984:	6139      	str	r1, [r7, #16]
 8003986:	ed87 0a03 	vstr	s0, [r7, #12]
 800398a:	4611      	mov	r1, r2
 800398c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003990:	461a      	mov	r2, r3
 8003992:	ed87 1a00 	vstr	s2, [r7]
 8003996:	460b      	mov	r3, r1
 8003998:	72fb      	strb	r3, [r7, #11]
 800399a:	4613      	mov	r3, r2
 800399c:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d001      	beq.n	80039ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80039aa:	4caf      	ldr	r4, [pc, #700]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 80039ac:	e227      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	689d      	ldr	r5, [r3, #8]
 80039b2:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 80039b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	461a      	mov	r2, r3
 80039be:	2001      	movs	r0, #1
 80039c0:	f000 fa22 	bl	8003e08 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80039c4:	4603      	mov	r3, r0
 80039c6:	429d      	cmp	r5, r3
 80039c8:	bf14      	ite	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	2300      	moveq	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80039d4:	4ca4      	ldr	r4, [pc, #656]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 80039d6:	e212      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (edges_matrix_in->cols != 1) {
 80039d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d001      	beq.n	80039e6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80039e2:	4ca1      	ldr	r4, [pc, #644]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 80039e4:	e20b      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        int ret;

        size_t axes = input_matrix->rows;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        EI_TRY(processing::subtract_mean(input_matrix) );
 80039ee:	6938      	ldr	r0, [r7, #16]
 80039f0:	f7ff ff8c 	bl	800390c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 80039f4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80039f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8a>
 8003a00:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003a04:	e1fb      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>

        // apply filter
        if (filter_type == filter_lowpass) {
 8003a06:	7afb      	ldrb	r3, [r7, #11]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d110      	bne.n	8003a2e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb2>
            ret = spectral::processing::butterworth_lowpass_filter(
 8003a0c:	7abb      	ldrb	r3, [r7, #10]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	edd7 0a01 	vldr	s1, [r7, #4]
 8003a14:	ed97 0a03 	vldr	s0, [r7, #12]
 8003a18:	6938      	ldr	r0, [r7, #16]
 8003a1a:	f7ff fa0b 	bl	8002e34 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8003a1e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003a22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d015      	beq.n	8003a56 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a2a:	4c8f      	ldr	r4, [pc, #572]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003a2c:	e1e7      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }
        else if (filter_type == filter_highpass) {
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d110      	bne.n	8003a56 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
            ret = spectral::processing::butterworth_highpass_filter(
 8003a34:	7abb      	ldrb	r3, [r7, #10]
 8003a36:	4619      	mov	r1, r3
 8003a38:	edd7 0a01 	vldr	s1, [r7, #4]
 8003a3c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003a40:	6938      	ldr	r0, [r7, #16]
 8003a42:	f7ff fa2d 	bl	8002ea0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8003a46:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003a4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a52:	4c85      	ldr	r4, [pc, #532]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003a54:	e1d3      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003a56:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a62:	f7fd fdd4 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf6>
 8003a6e:	4c7f      	ldr	r4, [pc, #508]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003a70:	e1c0      	b.n	8003df4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8003a72:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a76:	4619      	mov	r1, r3
 8003a78:	6938      	ldr	r0, [r7, #16]
 8003a7a:	f7fe f88f 	bl	8001b9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8003a7e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret != EIDSP_OK) {
 8003a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x112>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a8a:	4c77      	ldr	r4, [pc, #476]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003a8c:	e1b2      	b.n	8003df4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003a8e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	461a      	mov	r2, r3
 8003a96:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aa0:	f7fd fdb5 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 8003aaa:	4c70      	ldr	r4, [pc, #448]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003aac:	e19d      	b.n	8003dea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003abc:	429a      	cmp	r2, r3
 8003abe:	f080 8193 	bcs.w	8003de8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46c>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	689d      	ldr	r5, [r3, #8]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003ade:	462a      	mov	r2, r5
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	f7fd fd94 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x176>
 8003aec:	4c5f      	ldr	r4, [pc, #380]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003aee:	2500      	movs	r5, #0
 8003af0:	e16d      	b.n	8003dce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 8003af2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	461a      	mov	r2, r3
 8003afe:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003b02:	2300      	movs	r3, #0
 8003b04:	2101      	movs	r1, #1
 8003b06:	f7fd fd82 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x19a>
 8003b10:	4c56      	ldr	r4, [pc, #344]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003b12:	2500      	movs	r5, #0
 8003b14:	e151      	b.n	8003dba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 8003b16:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003b18:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b1c:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8003b1e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	462b      	mov	r3, r5
 8003b26:	f7fe f8b1 	bl	8001c8c <_ZN2ei5numpy4rfftEPKfjPfjj>
 8003b2a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (ret != EIDSP_OK) {
 8003b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1c0>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003b36:	4c4c      	ldr	r4, [pc, #304]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003b38:	2500      	movs	r5, #0
 8003b3a:	e13e      	b.n	8003dba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8003b3c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b48:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b54:	eeb0 0a47 	vmov.f32	s0, s14
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fd ff49 	bl	80019f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8003b5e:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8003b62:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003b66:	2300      	movs	r3, #0
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f7fd fd50 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1fe>
 8003b74:	4c3d      	ldr	r4, [pc, #244]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003b76:	2500      	movs	r5, #0
 8003b78:	e115      	b.n	8003da6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 8003b7a:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8003b7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003b82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b86:	edd7 0a00 	vldr	s1, [r7]
 8003b8a:	ed97 0a03 	vldr	s0, [r7, #12]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fac2 	bl	8003118 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8003b94:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 8003b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x22a>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003ba0:	4c31      	ldr	r4, [pc, #196]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003ba2:	2500      	movs	r5, #0
 8003ba4:	e0ff      	b.n	8003da6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 8003ba6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	2101      	movs	r1, #1
 8003bba:	f7fd fd28 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x24e>
 8003bc4:	4c29      	ldr	r4, [pc, #164]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003bc6:	2500      	movs	r5, #0
 8003bc8:	e0e3      	b.n	8003d92 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 8003bca:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2101      	movs	r1, #1
 8003bde:	f7fd fd16 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x272>
 8003be8:	4c20      	ldr	r4, [pc, #128]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003bea:	2500      	movs	r5, #0
 8003bec:	e0c7      	b.n	8003d7e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            ret = spectral::processing::periodogram(&axis_matrix,
 8003bee:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003bf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bf6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003bfa:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003bfe:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c02:	f7ff fcd7 	bl	80035b4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 8003c06:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 8003c0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x29e>
                EIDSP_ERR(ret);
 8003c12:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003c16:	2500      	movs	r5, #0
 8003c18:	e0b1      	b.n	8003d7e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 8003c1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	1e59      	subs	r1, r3, #1
 8003c22:	f107 0018 	add.w	r0, r7, #24
 8003c26:	2300      	movs	r3, #0
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f7fd fcf0 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2be>
 8003c34:	4c0d      	ldr	r4, [pc, #52]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003c36:	2500      	movs	r5, #0
 8003c38:	e097      	b.n	8003d6a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
            ret = spectral::processing::spectral_power_edges(
 8003c3a:	f107 0318 	add.w	r3, r7, #24
 8003c3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c42:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003c46:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c4e:	f7ff fba5 	bl	800339c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 8003c52:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 8003c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f4>
                EIDSP_ERR(ret);
 8003c5e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003c62:	2500      	movs	r5, #0
 8003c64:	e081      	b.n	8003d6a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
 8003c66:	bf00      	nop
 8003c68:	fffffc14 	.word	0xfffffc14
 8003c6c:	fffffc16 	.word	0xfffffc16
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            size_t fx = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            features_row[fx++] = rms_matrix.buffer[row];
 8003c8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	441a      	add	r2, r3
 8003c9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c9e:	1c59      	adds	r1, r3, #1
 8003ca0:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003caa:	440b      	add	r3, r1
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d22c      	bcs.n	8003d1a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39e>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 8003cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	441a      	add	r2, r3
 8003cd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cd4:	1c59      	adds	r1, r3, #1
 8003cd6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003ce0:	440b      	add	r3, r1
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 8003ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cea:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003cee:	fb01 f303 	mul.w	r3, r1, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	441a      	add	r2, r3
 8003cf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cfc:	1c59      	adds	r1, r3, #1
 8003cfe:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003d08:	440b      	add	r3, r1
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d12:	3301      	adds	r3, #1
 8003d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d18:	e7cd      	b.n	8003cb6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33a>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d21e      	bcs.n	8003d68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ec>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	ed93 7a00 	vldr	s14, [r3]
 8003d3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003d4e:	4413      	add	r3, r2
 8003d50:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003d54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d58:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003d5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d60:	3301      	adds	r3, #1
 8003d62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d66:	e7db      	b.n	8003d20 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3a4>
 8003d68:	2501      	movs	r5, #1
 8003d6a:	f107 0318 	add.w	r3, r7, #24
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd fc78 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003d74:	2d01      	cmp	r5, #1
 8003d76:	d001      	beq.n	8003d7c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x400>
 8003d78:	2500      	movs	r5, #0
 8003d7a:	e000      	b.n	8003d7e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
 8003d7c:	2501      	movs	r5, #1
 8003d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd fc6e 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003d88:	2d01      	cmp	r5, #1
 8003d8a:	d001      	beq.n	8003d90 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x414>
 8003d8c:	2500      	movs	r5, #0
 8003d8e:	e000      	b.n	8003d92 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
 8003d90:	2501      	movs	r5, #1
 8003d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd fc64 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003d9c:	2d01      	cmp	r5, #1
 8003d9e:	d001      	beq.n	8003da4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x428>
 8003da0:	2500      	movs	r5, #0
 8003da2:	e000      	b.n	8003da6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
 8003da4:	2501      	movs	r5, #1
 8003da6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd fc5a 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003db0:	2d01      	cmp	r5, #1
 8003db2:	d001      	beq.n	8003db8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43c>
 8003db4:	2500      	movs	r5, #0
 8003db6:	e000      	b.n	8003dba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
 8003db8:	2501      	movs	r5, #1
 8003dba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fd fc50 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003dc4:	2d01      	cmp	r5, #1
 8003dc6:	d001      	beq.n	8003dcc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
 8003dc8:	2500      	movs	r5, #0
 8003dca:	e000      	b.n	8003dce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>
 8003dcc:	2501      	movs	r5, #1
 8003dce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd fc46 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003dd8:	2d01      	cmp	r5, #1
 8003dda:	d106      	bne.n	8003dea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003de0:	3301      	adds	r3, #1
 8003de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003de6:	e665      	b.n	8003ab4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x138>
            }
        }

        return EIDSP_OK;
 8003de8:	2400      	movs	r4, #0
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003dea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd fc38 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003df4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd fc33 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 8003dfe:	4623      	mov	r3, r4
 8003e00:	4618      	mov	r0, r3
 8003e02:	37b8      	adds	r7, #184	; 0xb8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bdb0      	pop	{r4, r5, r7, pc}

08003e08 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	3301      	adds	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	617b      	str	r3, [r7, #20]
        }
        return count;
 8003e40:	697b      	ldr	r3, [r7, #20]
    }
 8003e42:	4618      	mov	r0, r3
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v1(
 8003e50:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8003e54:	b0b3      	sub	sp, #204	; 0xcc
 8003e56:	af04      	add	r7, sp, #16
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_ptr,
        const float sampling_freq)
    {
        // scale the signal
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e68:	eeb0 0a67 	vmov.f32	s0, s15
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7fd fdbf 	bl	80019f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8003e72:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8003e76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x3e>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 8003e7e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003e82:	488c      	ldr	r0, [pc, #560]	; (80040b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x264>)
 8003e84:	f001 fed3 	bl	8005c2e <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8003e88:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8003e8c:	e10b      	b.n	80040a6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // transpose the matrix so we have one row per axis (nifty!)
        ret = numpy::transpose(input_matrix);
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7fd fd2d 	bl	80018ee <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8003e94:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8003e98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x60>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 8003ea0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003ea4:	4884      	ldr	r0, [pc, #528]	; (80040b8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x268>)
 8003ea6:	f001 fec2 	bl	8005c2e <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8003eaa:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8003eae:	e0fa      	b.n	80040a6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // the spectral edges that we want to calculate
        matrix_t edges_matrix_in(64, 1);
 8003eb0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	2140      	movs	r1, #64	; 0x40
 8003eba:	f7fd fba8 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
        size_t edge_matrix_ix = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        char spectral_str[128] = { 0 };
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	f107 0318 	add.w	r3, r7, #24
 8003ecc:	227c      	movs	r2, #124	; 0x7c
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f01e fd09 	bl	80228e8 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc f9d2 	bl	8000284 <strlen>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee4:	d901      	bls.n	8003eea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x9a>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8003ee6:	4c75      	ldr	r4, [pc, #468]	; (80040bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x26c>)
 8003ee8:	e0d8      	b.n	800409c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }
        memcpy(
            spectral_str,
            config_ptr->spectral_power_edges,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
        memcpy(
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fc f9c6 	bl	8000284 <strlen>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	f107 0314 	add.w	r3, r7, #20
 8003efe:	4621      	mov	r1, r4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f01e fcc9 	bl	8022898 <memcpy>
            strlen(config_ptr->spectral_power_edges));

        // convert spectral_power_edges (string) into float array
        char *spectral_ptr = spectral_str;
 8003f06:	f107 0314 	add.w	r3, r7, #20
 8003f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 8003f0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d03f      	beq.n	8003f96 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x146>
            while ((*spectral_ptr) == ' ') {
 8003f16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d105      	bne.n	8003f2c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xdc>
                spectral_ptr++;
 8003f20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f24:	3301      	adds	r3, #1
 8003f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            while ((*spectral_ptr) == ' ') {
 8003f2a:	e7f4      	b.n	8003f16 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc6>
            }

            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 8003f2c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003f30:	f01e fc56 	bl	80227e0 <atof>
 8003f34:	ec59 8b10 	vmov	r8, r9, d0
 8003f38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f40:	1c59      	adds	r1, r3, #1
 8003f42:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	18d4      	adds	r4, r2, r3
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	f7fc fe55 	bl	8000bfc <__aeabi_d2f>
 8003f52:	4603      	mov	r3, r0
 8003f54:	6023      	str	r3, [r4, #0]

            // find next (spectral) delimiter (or '\0' character)
            while ((*spectral_ptr != ',')) {
 8003f56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b2c      	cmp	r3, #44	; 0x2c
 8003f5e:	d00b      	beq.n	8003f78 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                spectral_ptr++;
 8003f60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f64:	3301      	adds	r3, #1
 8003f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (*spectral_ptr == '\0')
 8003f6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d000      	beq.n	8003f76 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x126>
            while ((*spectral_ptr != ',')) {
 8003f74:	e7ef      	b.n	8003f56 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x106>
                    break;
 8003f76:	bf00      	nop
            }

            if (*spectral_ptr == '\0') {
 8003f78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13a>
                spectral_ptr = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f88:	e7c1      	b.n	8003f0e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
            else {
                spectral_ptr++;
 8003f8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 8003f94:	e7bb      	b.n	8003f0e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
        }
        edges_matrix_in.rows = edge_matrix_ix;
 8003f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        // calculate how much room we need for the output matrix
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
            true,
            config_ptr->spectral_peaks_count,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 8003fa2:	4619      	mov	r1, r3
            edges_matrix_in.rows);
 8003fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2001      	movs	r0, #1
 8003fac:	f7ff ff2c 	bl	8003e08 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8003fb0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
        if (output_matrix->cols * output_matrix->rows !=
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	6852      	ldr	r2, [r2, #4]
 8003fbc:	fb03 f202 	mul.w	r2, r3, r2
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
        if (output_matrix->cols * output_matrix->rows !=
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d001      	beq.n	8003fd6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x186>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003fd2:	4c3b      	ldr	r4, [pc, #236]	; (80040c0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x270>)
 8003fd4:	e062      	b.n	800409c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        output_matrix->cols = output_matrix_cols;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003fdc:	609a      	str	r2, [r3, #8]
        output_matrix->rows = config_ptr->axes;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	605a      	str	r2, [r3, #4]

        spectral::filter_t filter_type;
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4935      	ldr	r1, [pc, #212]	; (80040c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x274>)
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc f93e 	bl	8000270 <strcmp>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b2>
            filter_type = spectral::filter_lowpass;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8004000:	e00f      	b.n	8004022 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	4930      	ldr	r1, [pc, #192]	; (80040c8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x278>)
 8004008:	4618      	mov	r0, r3
 800400a:	f7fc f931 	bl	8000270 <strcmp>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d103      	bne.n	800401c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>
            filter_type = spectral::filter_highpass;
 8004014:	2302      	movs	r3, #2
 8004016:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800401a:	e002      	b.n	8004022 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else {
            filter_type = spectral::filter_none;
 800401c:	2300      	movs	r3, #0
 800401e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        ret = spectral::feature::spectral_analysis(
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	edd3 7a04 	vldr	s15, [r3, #16]
            output_matrix,
            input_matrix,
            sampling_freq,
            filter_type,
            config_ptr->filter_cutoff,
            config_ptr->filter_order,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
        ret = spectral::feature::spectral_analysis(
 800402c:	b2dc      	uxtb	r4, r3
            config_ptr->fft_length,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
        ret = spectral::feature::spectral_analysis(
 8004032:	b29b      	uxth	r3, r3
            config_ptr->spectral_peaks_count,
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6a12      	ldr	r2, [r2, #32]
        ret = spectral::feature::spectral_analysis(
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004040:	f897 00af 	ldrb.w	r0, [r7, #175]	; 0xaf
 8004044:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8004048:	9102      	str	r1, [sp, #8]
 800404a:	9201      	str	r2, [sp, #4]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	eeb0 1a47 	vmov.f32	s2, s14
 8004052:	4623      	mov	r3, r4
 8004054:	eef0 0a67 	vmov.f32	s1, s15
 8004058:	4602      	mov	r2, r0
 800405a:	ed97 0a00 	vldr	s0, [r7]
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	68b8      	ldr	r0, [r7, #8]
 8004062:	f7ff fc8b 	bl	800397c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 8004066:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            config_ptr->spectral_peaks_threshold,
            &edges_matrix_in);
        if (ret != EIDSP_OK) {
 800406a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x232>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 8004072:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004076:	4815      	ldr	r0, [pc, #84]	; (80040cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x27c>)
 8004078:	f001 fdd9 	bl	8005c2e <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 800407c:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8004080:	e00c      	b.n	800409c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        // flatten again
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	461a      	mov	r2, r3
 8004088:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800408c:	fb03 f202 	mul.w	r2, r3, r2
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	609a      	str	r2, [r3, #8]
        output_matrix->rows = 1;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2201      	movs	r2, #1
 8004098:	605a      	str	r2, [r3, #4]

        return EIDSP_OK;
 800409a:	2400      	movs	r4, #0
        matrix_t edges_matrix_in(64, 1);
 800409c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd fadf 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 80040a6:	4623      	mov	r3, r4
 80040a8:	4618      	mov	r0, r3
 80040aa:	37bc      	adds	r7, #188	; 0xbc
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80040b2:	bf00      	nop
 80040b4:	08026d14 	.word	0x08026d14
 80040b8:	08026d38 	.word	0x08026d38
 80040bc:	fffffc10 	.word	0xfffffc10
 80040c0:	fffffc14 	.word	0xfffffc14
 80040c4:	08026d60 	.word	0x08026d60
 80040c8:	08026d64 	.word	0x08026d64
 80040cc:	08026d6c 	.word	0x08026d6c

080040d0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>:

    static void get_start_stop_bin(
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80040da:	6138      	str	r0, [r7, #16]
 80040dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	70fb      	strb	r3, [r7, #3]
        size_t *stop_bin,
        bool is_high_pass)
    {
        // we want to find n such that fcutoff < sample_f / fft * n ( or > for high pass )
        // also, + - half bin width (sample_f/(fft*2)) for high / low pass
        float bin = filter_cutoff * fft_length / sampling_freq;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80040f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80040f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80040fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004100:	edc7 7a07 	vstr	s15, [r7, #28]
        if (is_high_pass) {
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d021      	beq.n	800414e <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x7e>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 800410a:	69f8      	ldr	r0, [r7, #28]
 800410c:	f7fc fa26 	bl	800055c <__aeabi_f2d>
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 8004116:	f7fc f8c1 	bl	800029c <__aeabi_dsub>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f7fc fd4b 	bl	8000bbc <__aeabi_d2uiz>
 8004126:	4603      	mov	r3, r0
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	601a      	str	r2, [r3, #0]
            // don't use the DC bin b/c it's zero
            *start_bin = *start_bin == 0 ? 1 : *start_bin;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6c>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	e000      	b.n	800413e <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6e>
 800413c:	2301      	movs	r3, #1
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	6013      	str	r3, [r2, #0]
            *stop_bin = fft_length / 2 + 1; // go one past
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	601a      	str	r2, [r3, #0]
        }
        else {
            *start_bin = 1;
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
        }
    }
 800414c:	e014      	b.n	8004178 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xa8>
            *start_bin = 1;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 8004154:	69f8      	ldr	r0, [r7, #28]
 8004156:	f7fc fa01 	bl	800055c <__aeabi_f2d>
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 8004160:	f7fc f89e 	bl	80002a0 <__adddf3>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4610      	mov	r0, r2
 800416a:	4619      	mov	r1, r3
 800416c:	f7fc fd26 	bl	8000bbc <__aeabi_d2uiz>
 8004170:	4603      	mov	r3, r0
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	601a      	str	r2, [r3, #0]
    }
 8004178:	bf00      	nop
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	3fe00000 	.word	0x3fe00000

08004184 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v2(
 8004184:	b5b0      	push	{r4, r5, r7, lr}
 8004186:	b0a8      	sub	sp, #160	; 0xa0
 8004188:	af04      	add	r7, sp, #16
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7fd fb1a 	bl	80017ce <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	edd3 7a02 	vldr	s15, [r3, #8]
 80041a0:	eeb0 0a67 	vmov.f32	s0, s15
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7fd fc23 	bl	80019f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80041aa:	6738      	str	r0, [r7, #112]	; 0x70
 80041ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x32>
 80041b2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80041b4:	e19e      	b.n	80044f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        bool do_filter = false;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        bool is_high_pass;

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	49ab      	ldr	r1, [pc, #684]	; (8004470 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2ec>)
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc f854 	bl	8000270 <strcmp>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d11e      	bne.n	800420c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x88>
            if( config->filter_order ) {
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d013      	beq.n	80041fe <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	4619      	mov	r1, r3
 80041e4:	eef0 0a67 	vmov.f32	s1, s15
 80041e8:	ed97 0a00 	vldr	s0, [r7]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7fe fe21 	bl	8002e34 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 80041f2:	66b8      	str	r0, [r7, #104]	; 0x68
 80041f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
 80041fa:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80041fc:	e17a      	b.n	80044f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 80041fe:	2301      	movs	r3, #1
 8004200:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = false;
 8004204:	2300      	movs	r3, #0
 8004206:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800420a:	e026      	b.n	800425a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4998      	ldr	r1, [pc, #608]	; (8004474 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f0>)
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc f82c 	bl	8000270 <strcmp>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d11d      	bne.n	800425a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
            if( config->filter_order ) {
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d013      	beq.n	800424e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	edd3 7a04 	vldr	s15, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4619      	mov	r1, r3
 8004234:	eef0 0a67 	vmov.f32	s1, s15
 8004238:	ed97 0a00 	vldr	s0, [r7]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7fe fe2f 	bl	8002ea0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8004242:	66f8      	str	r0, [r7, #108]	; 0x6c
 8004244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
 800424a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800424c:	e152      	b.n	80044f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = true;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7ff fb56 	bl	800390c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8004260:	6678      	str	r0, [r7, #100]	; 0x64
 8004262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xe8>
 8004268:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800426a:	e143      	b.n	80044f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        // Figure bins we remove based on filter cutoff
        size_t start_bin, stop_bin;
        if (do_filter) {
 800426c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004270:	2b00      	cmp	r3, #0
 8004272:	d012      	beq.n	800429a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x116>
            get_start_stop_bin(
                sampling_freq,
                config->fft_length,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
            get_start_stop_bin(
 8004278:	4618      	mov	r0, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004280:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8004284:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004288:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800428c:	eef0 0a67 	vmov.f32	s1, s15
 8004290:	ed97 0a00 	vldr	s0, [r7]
 8004294:	f7ff ff1c 	bl	80040d0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>
 8004298:	e008      	b.n	80042ac <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                &start_bin,
                &stop_bin,
                is_high_pass);
        }
        else {
            start_bin = 1;
 800429a:	2301      	movs	r3, #1
 800429c:	64bb      	str	r3, [r7, #72]	; 0x48
            stop_bin = config->fft_length / 2 + 1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	0fda      	lsrs	r2, r3, #31
 80042a4:	4413      	add	r3, r2
 80042a6:	105b      	asrs	r3, r3, #1
 80042a8:	3301      	adds	r3, #1
 80042aa:	647b      	str	r3, [r7, #68]	; 0x44
        }
        size_t num_bins = stop_bin - start_bin;
 80042ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	663b      	str	r3, [r7, #96]	; 0x60

        float *feature_out = output_matrix->buffer;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80042bc:	2300      	movs	r3, #0
 80042be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80042ca:	429a      	cmp	r2, r3
 80042cc:	f080 8111 	bcs.w	80044f2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36e>
            float *data_window = input_matrix->get_row_ptr(row);
 80042d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7fd f9db 	bl	8001690 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80042da:	65f8      	str	r0, [r7, #92]	; 0x5c
            size_t data_size = input_matrix->cols;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	65bb      	str	r3, [r7, #88]	; 0x58

            matrix_t rms_in_matrix(1, data_size, data_window);
 80042e2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80042e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042ea:	2101      	movs	r1, #1
 80042ec:	f7fd f98f 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 80042f0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042f8:	2201      	movs	r2, #1
 80042fa:	2101      	movs	r1, #1
 80042fc:	f7fd f987 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 8004300:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004304:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd fc46 	bl	8001b9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8004310:	6578      	str	r0, [r7, #84]	; 0x54
 8004312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19a>
 8004318:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800431a:	2500      	movs	r5, #0
 800431c:	e0d2      	b.n	80044c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>

            feature_out++;
 800431e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004322:	3304      	adds	r3, #4
 8004324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            // Standard Deviation
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 8004328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800432c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004330:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            if (stddev == 0.0f) {
 8004334:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004338:	eef5 7a40 	vcmp.f32	s15, #0.0
 800433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004340:	d102      	bne.n	8004348 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1c4>
                stddev = 1e-10f;
 8004342:	4b4d      	ldr	r3, [pc, #308]	; (8004478 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f4>)
 8004344:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            // Substitute 0 for mean (b/c it is subtracted out above)
            // Skew becomes: mean(X^3) / stddev^3
            // Kurtosis becomes: mean(X^4) / stddev^4
            // Note, this is the Fisher definition of Kurtosis, so subtract 3
            // (see https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
            float s_sum = 0;
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	67fb      	str	r3, [r7, #124]	; 0x7c
            float k_sum = 0;
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	67bb      	str	r3, [r7, #120]	; 0x78
            float temp;
            for (size_t i = 0; i < data_size; i++) {
 8004354:	2300      	movs	r3, #0
 8004356:	677b      	str	r3, [r7, #116]	; 0x74
 8004358:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800435a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800435c:	429a      	cmp	r2, r3
 800435e:	d233      	bcs.n	80043c8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x244>
                temp = data_window[i] * data_window[i] * data_window[i];
 8004360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004366:	4413      	add	r3, r2
 8004368:	ed93 7a00 	vldr	s14, [r3]
 800436c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004372:	4413      	add	r3, r2
 8004374:	edd3 7a00 	vldr	s15, [r3]
 8004378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800437c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004382:	4413      	add	r3, r2
 8004384:	edd3 7a00 	vldr	s15, [r3]
 8004388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                s_sum += temp;
 8004390:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8004394:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800439c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                k_sum += temp * data_window[i];
 80043a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043a6:	4413      	add	r3, r2
 80043a8:	ed93 7a00 	vldr	s14, [r3]
 80043ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80043b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80043b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043bc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (size_t i = 0; i < data_size; i++) {
 80043c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c2:	3301      	adds	r3, #1
 80043c4:	677b      	str	r3, [r7, #116]	; 0x74
 80043c6:	e7c7      	b.n	8004358 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d4>
            }
            // Skewness out
            temp = stddev * stddev * stddev;
 80043c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80043cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80043d0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80043d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            *feature_out++ = (s_sum / data_size) / temp;
 80043dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80043ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043f2:	1d1a      	adds	r2, r3, #4
 80043f4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80043f8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80043fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004400:	edc3 7a00 	vstr	s15, [r3]
            // Kurtosis out
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 8004404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8004412:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004416:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800441a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800441e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004426:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800442a:	1d1a      	adds	r2, r3, #4
 800442c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004430:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004434:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004438:	edc3 7a00 	vstr	s15, [r3]

            EI_TRY(numpy::welch_max_hold(
 800443c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800443e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	69d2      	ldr	r2, [r2, #28]
 8004444:	4610      	mov	r0, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800444c:	9202      	str	r2, [sp, #8]
 800444e:	9001      	str	r0, [sp, #4]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	460b      	mov	r3, r1
 8004454:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004458:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800445a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800445c:	f7fd ffd2 	bl	8002404 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8004460:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d009      	beq.n	800447c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f8>
 8004468:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800446a:	2500      	movs	r5, #0
 800446c:	e02a      	b.n	80044c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>
 800446e:	bf00      	nop
 8004470:	08026d60 	.word	0x08026d60
 8004474:	08026d64 	.word	0x08026d64
 8004478:	2edbe6ff 	.word	0x2edbe6ff
                feature_out,
                start_bin,
                stop_bin,
                config->fft_length,
                config->do_fft_overlap));
            if (config->do_log) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x330>
                numpy::zero_handling(feature_out, num_bins);
 8004486:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004488:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800448c:	f7fe f86c 	bl	8002568 <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 8004490:	f107 0014 	add.w	r0, r7, #20
 8004494:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004498:	2201      	movs	r2, #1
 800449a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800449c:	f7fd f8b7 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
                numpy::log10(&temp);
 80044a0:	f107 0314 	add.w	r3, r7, #20
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fd fe1b 	bl	80020e0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>
                ei_matrix temp(num_bins, 1, feature_out);
 80044aa:	f107 0314 	add.w	r3, r7, #20
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fd f8d8 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
            }
            feature_out += num_bins;
 80044b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80044bc:	4413      	add	r3, r2
 80044be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044c2:	2501      	movs	r5, #1
 80044c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fd f8cb 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 80044ce:	2d01      	cmp	r5, #1
 80044d0:	d001      	beq.n	80044d6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x352>
 80044d2:	2500      	movs	r5, #0
 80044d4:	e000      	b.n	80044d8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x354>
 80044d6:	2501      	movs	r5, #1
 80044d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fd f8c1 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 80044e2:	2d01      	cmp	r5, #1
 80044e4:	d106      	bne.n	80044f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80044e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ea:	3301      	adds	r3, #1
 80044ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f0:	e6e7      	b.n	80042c2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
        }
        return EIDSP_OK;
 80044f2:	2400      	movs	r4, #0
    }
 80044f4:	4623      	mov	r3, r4
 80044f6:	4618      	mov	r0, r3
 80044f8:	3790      	adds	r7, #144	; 0x90
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bdb0      	pop	{r4, r5, r7, pc}
 80044fe:	bf00      	nop

08004500 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fd f85b 	bl	80015c6 <_ZNSt14_Function_baseD1Ev>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4618      	mov	r0, r3
 8004526:	f001 ff63 	bl	80063f0 <_ZNSt8functionIFijjPfEEC1Ev>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <_ZN2ei11ei_signal_tD1Ev>:
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ffde 	bl	8004500 <_ZNSt8functionIFijjPfEED1Ev>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectral_analysis_features(
    signal_t *signal,
    matrix_t *output_matrix,
    void *config_ptr,
    const float frequency)
{
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	b08b      	sub	sp, #44	; 0x2c
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t *config = (ei_dsp_config_spectral_analysis_t *)config_ptr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	627b      	str	r3, [r7, #36]	; 0x24

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456a:	6852      	ldr	r2, [r2, #4]
 800456c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	461a      	mov	r2, r3
 8004576:	f107 0014 	add.w	r0, r7, #20
 800457a:	2300      	movs	r3, #0
 800457c:	f7fd f847 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004586:	4c1b      	ldr	r4, [pc, #108]	; (80045f4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa4>)
 8004588:	e02a      	b.n	80045e0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2100      	movs	r1, #0
 8004594:	f001 fe36 	bl	8006204 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        return spectral::wavelet::extract_wavelet_features(&input_matrix, output_matrix, config, frequency);
    }
#endif

#if EI_DSP_PARAMS_SPECTRAL_ANALYSIS_ANALYSIS_TYPE_FFT || EI_DSP_PARAMS_ALL
    if (strcmp(config->analysis_type, "FFT") == 0) {
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4916      	ldr	r1, [pc, #88]	; (80045f8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa8>)
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fb fe66 	bl	8000270 <strcmp>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d119      	bne.n	80045de <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8e>
        if (config->implementation_version == 1) {
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d10a      	bne.n	80045c8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x78>
            return spectral::feature::extract_spectral_analysis_features_v1(
 80045b2:	f107 0314 	add.w	r3, r7, #20
 80045b6:	ed97 0a00 	vldr	s0, [r7]
 80045ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fc46 	bl	8003e50 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80045c4:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80045c6:	e00b      	b.n	80045e0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
        } else {
            return spectral::feature::extract_spectral_analysis_features_v2(
 80045c8:	f107 0314 	add.w	r3, r7, #20
 80045cc:	ed97 0a00 	vldr	s0, [r7]
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fdd5 	bl	8004184 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80045da:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80045dc:	e000      	b.n	80045e0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
            output_matrix,
            config,
            frequency);
    }
#endif
    return EIDSP_NOT_SUPPORTED;
 80045de:	4c07      	ldr	r4, [pc, #28]	; (80045fc <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xac>)
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 80045e0:	f107 0314 	add.w	r3, r7, #20
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fd f83d 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
}
 80045ea:	4623      	mov	r3, r4
 80045ec:	4618      	mov	r0, r3
 80045ee:	372c      	adds	r7, #44	; 0x2c
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd90      	pop	{r4, r7, pc}
 80045f4:	fffffc16 	.word	0xfffffc16
 80045f8:	08026db8 	.word	0x08026db8
 80045fc:	fffffc0a 	.word	0xfffffc0a

08004600 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8004600:	b5b0      	push	{r4, r5, r7, lr}
 8004602:	b098      	sub	sp, #96	; 0x60
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004616:	ca07      	ldmia	r2, {r0, r1, r2}
 8004618:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	4967      	ldr	r1, [pc, #412]	; (80047bc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb fe25 	bl	8000270 <strcmp>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8004630:	2303      	movs	r3, #3
 8004632:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 800463a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004646:	2300      	movs	r3, #0
 8004648:	65bb      	str	r3, [r7, #88]	; 0x58
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004650:	429a      	cmp	r2, r3
 8004652:	f080 80ac 	bcs.w	80047ae <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465c:	d803      	bhi.n	8004666 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 800465e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	e001      	b.n	800466a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 8004666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800466a:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466e:	461a      	mov	r2, r3
 8004670:	f107 0014 	add.w	r0, r7, #20
 8004674:	2300      	movs	r3, #0
 8004676:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004678:	f7fc ffc9 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004682:	4d4f      	ldr	r5, [pc, #316]	; (80047c0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 8004684:	2400      	movs	r4, #0
 8004686:	e086      	b.n	8004796 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800468e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004690:	f001 fdb8 	bl	8006204 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004694:	2300      	movs	r3, #0
 8004696:	657b      	str	r3, [r7, #84]	; 0x54
 8004698:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800469a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469c:	429a      	cmp	r2, r3
 800469e:	d275      	bcs.n	800478c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b0:	ee17 3a90 	vmov	r3, s15
 80046b4:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80046b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	ee07 3a90 	vmov	s15, r3
 80046c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046c4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80047c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80046c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046cc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 80046d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046de:	eddf 6a39 	vldr	s13, [pc, #228]	; 80047c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80046e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046e6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 80046ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046f6:	eddf 6a33 	vldr	s13, [pc, #204]	; 80047c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80046fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046fe:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8004702:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004706:	2b03      	cmp	r3, #3
 8004708:	d11b      	bne.n	8004742 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004710:	1c59      	adds	r1, r3, #1
 8004712:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800471a:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004722:	1c59      	adds	r1, r3, #1
 8004724:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800472c:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004734:	1c59      	adds	r1, r3, #1
 8004736:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	e020      	b.n	8004784 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004742:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004746:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80047c8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 800474a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800474e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004752:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80047cc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 8004756:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800475a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800475e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004762:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80047d0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 8004766:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800476a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800476e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	1c59      	adds	r1, r3, #1
 800477a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004782:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004786:	3301      	adds	r3, #1
 8004788:	657b      	str	r3, [r7, #84]	; 0x54
 800478a:	e785      	b.n	8004698 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 800478c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	2401      	movs	r4, #1
 8004796:	f107 0314 	add.w	r3, r7, #20
 800479a:	4618      	mov	r0, r3
 800479c:	f7fc ff62 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 80047a0:	2c01      	cmp	r4, #1
 80047a2:	d105      	bne.n	80047b0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80047a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80047ac:	e74d      	b.n	800464a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 80047ae:	2500      	movs	r5, #0
}
 80047b0:	462b      	mov	r3, r5
 80047b2:	4618      	mov	r0, r3
 80047b4:	3760      	adds	r7, #96	; 0x60
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ba:	bf00      	nop
 80047bc:	08026fe8 	.word	0x08026fe8
 80047c0:	fffffc16 	.word	0xfffffc16
 80047c4:	437f0000 	.word	0x437f0000
 80047c8:	3e991687 	.word	0x3e991687
 80047cc:	3f1645a2 	.word	0x3f1645a2
 80047d0:	3de978d5 	.word	0x3de978d5

080047d4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 80047d4:	b5b0      	push	{r4, r5, r7, lr}
 80047d6:	b0a6      	sub	sp, #152	; 0x98
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6178      	str	r0, [r7, #20]
 80047dc:	6139      	str	r1, [r7, #16]
 80047de:	60fa      	str	r2, [r7, #12]
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80047ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 80047f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f4:	49ab      	ldr	r1, [pc, #684]	; (8004aa4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fb fd3a 	bl	8000270 <strcmp>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 8004806:	2303      	movs	r3, #3
 8004808:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8004812:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8004816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 800481a:	f249 6345 	movw	r3, #38469	; 0x9645
 800481e:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8004820:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8004824:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8004826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482a:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004832:	2300      	movs	r3, #0
 8004834:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004840:	429a      	cmp	r2, r3
 8004842:	f080 821d 	bcs.w	8004c80 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d803      	bhi.n	8004856 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 800484e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	e001      	b.n	800485a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 8004856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800485a:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	461a      	mov	r2, r3
 8004860:	f107 0018 	add.w	r0, r7, #24
 8004864:	2300      	movs	r3, #0
 8004866:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004868:	f7fc fed1 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004872:	4d8d      	ldr	r5, [pc, #564]	; (8004aa8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 8004874:	2400      	movs	r4, #0
 8004876:	e1f5      	b.n	8004c64 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004878:	6938      	ldr	r0, [r7, #16]
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800487e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004882:	f001 fcbf 	bl	8006204 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004886:	2300      	movs	r3, #0
 8004888:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800488c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004892:	429a      	cmp	r2, r3
 8004894:	f080 81e1 	bcs.w	8004c5a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	edd3 7a00 	vldr	s15, [r3]
 80048a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048aa:	ee17 3a90 	vmov	r3, s15
 80048ae:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 80048b0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	f040 8105 	bne.w	8004ac4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80048c0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004aac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 80048c4:	eef4 7a47 	vcmp.f32	s15, s14
 80048c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048cc:	d160      	bne.n	8004990 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80048d4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004ab0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 80048d8:	eef4 7a47 	vcmp.f32	s15, s14
 80048dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e0:	d156      	bne.n	8004990 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 80048ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ec:	0a1b      	lsrs	r3, r3, #8
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 80048f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 80048f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004914:	1c59      	adds	r1, r3, #1
 8004916:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800491a:	4413      	add	r3, r2
 800491c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004920:	edc7 7a00 	vstr	s15, [r7]
 8004924:	783a      	ldrb	r2, [r7, #0]
 8004926:	b252      	sxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 800492a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800493a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800494c:	4413      	add	r3, r2
 800494e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004952:	edc7 7a00 	vstr	s15, [r7]
 8004956:	783a      	ldrb	r2, [r7, #0]
 8004958:	b252      	sxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 800495c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800496c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004978:	1c59      	adds	r1, r3, #1
 800497a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800497e:	4413      	add	r3, r2
 8004980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004984:	edc7 7a00 	vstr	s15, [r7]
 8004988:	783a      	ldrb	r2, [r7, #0]
 800498a:	b252      	sxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	e15e      	b.n	8004c4e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004992:	0c1b      	lsrs	r3, r3, #16
 8004994:	b2db      	uxtb	r3, r3
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800499e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 80049a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049a6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 80049aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049b8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 80049bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049c0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 80049c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049d0:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 80049d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049d8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80049e2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80049e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80049ea:	eeb0 0a66 	vmov.f32	s0, s13
 80049ee:	f7fc feb6 	bl	800175e <_ZSt5roundf>
 80049f2:	eeb0 7a40 	vmov.f32	s14, s0
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80049fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a08:	1c59      	adds	r1, r3, #1
 8004a0a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004a0e:	4413      	add	r3, r2
 8004a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a14:	edc7 7a00 	vstr	s15, [r7]
 8004a18:	783a      	ldrb	r2, [r7, #0]
 8004a1a:	b252      	sxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004a24:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004a28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a2c:	eeb0 0a66 	vmov.f32	s0, s13
 8004a30:	f7fc fe95 	bl	800175e <_ZSt5roundf>
 8004a34:	eeb0 7a40 	vmov.f32	s14, s0
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a4a:	1c59      	adds	r1, r3, #1
 8004a4c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004a50:	4413      	add	r3, r2
 8004a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a56:	edc7 7a00 	vstr	s15, [r7]
 8004a5a:	783a      	ldrb	r2, [r7, #0]
 8004a5c:	b252      	sxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004a66:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004a6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a6e:	eeb0 0a66 	vmov.f32	s0, s13
 8004a72:	f7fc fe74 	bl	800175e <_ZSt5roundf>
 8004a76:	eeb0 7a40 	vmov.f32	s14, s0
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a8c:	1c59      	adds	r1, r3, #1
 8004a8e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004a92:	4413      	add	r3, r2
 8004a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a98:	edc7 7a00 	vstr	s15, [r7]
 8004a9c:	783a      	ldrb	r2, [r7, #0]
 8004a9e:	b252      	sxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	e0d4      	b.n	8004c4e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 8004aa4:	08026fe8 	.word	0x08026fe8
 8004aa8:	fffffc16 	.word	0xfffffc16
 8004aac:	3b808081 	.word	0x3b808081
 8004ab0:	c3000000 	.word	0xc3000000
 8004ab4:	437f0000 	.word	0x437f0000
 8004ab8:	3e991687 	.word	0x3e991687
 8004abc:	3f1645a2 	.word	0x3f1645a2
 8004ac0:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004aca:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8004aac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8004ace:	eef4 7a47 	vcmp.f32	s15, s14
 8004ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad6:	d15b      	bne.n	8004b90 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004ade:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8004ab0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8004ae2:	eef4 7a47 	vcmp.f32	s15, s14
 8004ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aea:	d151      	bne.n	8004b90 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8004aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8004afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 8004b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b04:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8004b08:	fb03 f202 	mul.w	r2, r3, r2
 8004b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b0e:	f249 6145 	movw	r1, #38469	; 0x9645
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	441a      	add	r2, r3
 8004b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b1a:	f641 512f 	movw	r1, #7471	; 0x1d2f
 8004b1e:	fb01 f303 	mul.w	r3, r1, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 8004b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b2c:	141b      	asrs	r3, r3, #16
 8004b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 8004b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b4c:	ee17 3a90 	vmov	r3, s15
 8004b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 8004b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b58:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004b5c:	da04      	bge.n	8004b68 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8004b5e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b66:	e006      	b.n	8004b76 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8004b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b6e:	dd02      	ble.n	8004b76 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8004b70:	237f      	movs	r3, #127	; 0x7f
 8004b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b7e:	1c59      	adds	r1, r3, #1
 8004b80:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004b84:	4413      	add	r3, r2
 8004b86:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004b8a:	b252      	sxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	e05e      	b.n	8004c4e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b92:	0c1b      	lsrs	r3, r3, #16
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b9e:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ba6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bac:	0a1b      	lsrs	r3, r3, #8
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bb8:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bc0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	ee07 3a90 	vmov	s15, r3
 8004bcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bd0:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004bd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bd8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004bdc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004be0:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8004ab8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 8004be4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004be8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004bec:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8004abc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8004bf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bf8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004bfc:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8004ac0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 8004c00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c08:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004c12:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004c16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c1a:	eeb0 0a66 	vmov.f32	s0, s13
 8004c1e:	f7fc fd9e 	bl	800175e <_ZSt5roundf>
 8004c22:	eeb0 7a40 	vmov.f32	s14, s0
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c38:	1c59      	adds	r1, r3, #1
 8004c3a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c3e:	4413      	add	r3, r2
 8004c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c44:	edc7 7a00 	vstr	s15, [r7]
 8004c48:	783a      	ldrb	r2, [r7, #0]
 8004c4a:	b252      	sxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c52:	3301      	adds	r3, #1
 8004c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c58:	e618      	b.n	800488c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8004c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c62:	2401      	movs	r4, #1
 8004c64:	f107 0318 	add.w	r3, r7, #24
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fc fcfb 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8004c6e:	2c01      	cmp	r4, #1
 8004c70:	d107      	bne.n	8004c82 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c7e:	e5db      	b.n	8004838 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8004c80:	2500      	movs	r5, #0
}
 8004c82:	462b      	mov	r3, r5
 8004c84:	4618      	mov	r0, r3
 8004c86:	3798      	adds	r7, #152	; 0x98
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bdb0      	pop	{r4, r5, r7, pc}

08004c8c <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3310      	adds	r3, #16
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fc2f 	bl	800451a <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	f000 f832 	bl	8004d46 <_ZN14SignalWithAxes8get_dataEjjPf>
 8004ce2:	4603      	mov	r3, r0
        };
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d102      	bne.n	8004d08 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	e01a      	b.n	8004d3e <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6892      	ldr	r2, [r2, #8]
 8004d1c:	fb03 f202 	mul.w	r2, r3, r2
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	621a      	str	r2, [r3, #32]
        };
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f103 0210 	add.w	r2, r3, #16
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	f107 030c 	add.w	r3, r7, #12
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f001 fb88 	bl	800644a <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3310      	adds	r3, #16
    }
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b08a      	sub	sp, #40	; 0x28
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	6992      	ldr	r2, [r2, #24]
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	68d2      	ldr	r2, [r2, #12]
 8004d78:	6992      	ldr	r2, [r2, #24]
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	623b      	str	r3, [r7, #32]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	6a3a      	ldr	r2, [r7, #32]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d22b      	bcs.n	8004dec <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d21d      	bcs.n	8004dde <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	18d1      	adds	r1, r2, r3
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	627a      	str	r2, [r7, #36]	; 0x24
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f001 fa1d 	bl	8006204 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8004dca:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	e00b      	b.n	8004dee <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	e7dc      	b.n	8004d98 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	4413      	add	r3, r2
 8004de8:	623b      	str	r3, [r7, #32]
 8004dea:	e7cd      	b.n	8004d88 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 8004dec:	2300      	movs	r3, #0
    }
 8004dee:	4618      	mov	r0, r3
 8004df0:	3728      	adds	r7, #40	; 0x28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8004df6:	b480      	push	{r7}
 8004df8:	b085      	sub	sp, #20
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004e04:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6178      	str	r0, [r7, #20]
 8004e1c:	6139      	str	r1, [r7, #16]
 8004e1e:	60fa      	str	r2, [r7, #12]
 8004e20:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e24:	edc7 0a01 	vstr	s1, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004e2a:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6178      	str	r0, [r7, #20]
 8004e44:	6139      	str	r1, [r7, #16]
 8004e46:	60fa      	str	r2, [r7, #12]
 8004e48:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e4c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004e50:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d23f      	bcs.n	8004ee2 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	4413      	add	r3, r2
 8004e68:	f993 3000 	ldrsb.w	r3, [r3]
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e74:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e84:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d011      	beq.n	8004eb2 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4813      	ldr	r0, [pc, #76]	; (8004eec <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 8004ea0:	f000 fec5 	bl	8005c2e <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004ea4:	ed97 0a06 	vldr	s0, [r7, #24]
 8004ea8:	f014 ff42 	bl	8019d30 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004eac:	4810      	ldr	r0, [pc, #64]	; (8004ef0 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 8004eae:	f000 febe 	bl	8005c2e <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	3201      	adds	r2, #1
 8004ec6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3301      	adds	r3, #1
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e7b9      	b.n	8004e56 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	08026ff4 	.word	0x08026ff4
 8004ef0:	08026ffc 	.word	0x08026ffc

08004ef4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d232      	bcs.n	8004f78 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	613b      	str	r3, [r7, #16]

        if (debug) {
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d011      	beq.n	8004f48 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4619      	mov	r1, r3
 8004f34:	4813      	ldr	r0, [pc, #76]	; (8004f84 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8004f36:	f000 fe7a 	bl	8005c2e <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004f3a:	ed97 0a04 	vldr	s0, [r7, #16]
 8004f3e:	f014 fef7 	bl	8019d30 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004f42:	4811      	ldr	r0, [pc, #68]	; (8004f88 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 8004f44:	f000 fe73 	bl	8005c2e <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	6819      	ldr	r1, [r3, #0]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	3201      	adds	r2, #1
 8004f5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	3301      	adds	r3, #1
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4413      	add	r3, r2
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	3301      	adds	r3, #1
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e7c6      	b.n	8004f06 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	08026ff4 	.word	0x08026ff4
 8004f88:	08026ffc 	.word	0x08026ffc

08004f8c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 8004f9a:	f014 feb5 	bl	8019d08 <_Z16ei_read_timer_usv>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 8004fa8:	486e      	ldr	r0, [pc, #440]	; (8005164 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 8004faa:	f019 fe73 	bl	801ec94 <_Z18trained_model_initPFPvjjE>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	486a      	ldr	r0, [pc, #424]	; (8005168 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 8004fbe:	f000 fe36 	bl	8005c2e <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8004fc2:	f06f 0305 	mvn.w	r3, #5
 8004fc6:	e0c8      	b.n	800515a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fce:	2000      	movs	r0, #0
 8004fd0:	4798      	blx	r3
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	2000      	movs	r0, #0
 8004fe0:	4798      	blx	r3
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d115      	bne.n	800501e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8004ffe:	4610      	mov	r0, r2
 8005000:	4798      	blx	r3
 8005002:	4602      	mov	r2, r0
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8005014:	4610      	mov	r0, r2
 8005016:	4798      	blx	r3
 8005018:	4602      	mov	r2, r0
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 800501e:	4b53      	ldr	r3, [pc, #332]	; (800516c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8098 	beq.w	8005158 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005034:	429a      	cmp	r2, r3
 8005036:	d005      	beq.n	8005044 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8005038:	4b4d      	ldr	r3, [pc, #308]	; (8005170 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 800503a:	4a4e      	ldr	r2, [pc, #312]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800503c:	2159      	movs	r1, #89	; 0x59
 800503e:	484e      	ldr	r0, [pc, #312]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005040:	f01d fbb0 	bl	80227a4 <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	781a      	ldrb	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005050:	429a      	cmp	r2, r3
 8005052:	d005      	beq.n	8005060 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 8005054:	4b49      	ldr	r3, [pc, #292]	; (800517c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 8005056:	4a47      	ldr	r2, [pc, #284]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005058:	215a      	movs	r1, #90	; 0x5a
 800505a:	4847      	ldr	r0, [pc, #284]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800505c:	f01d fba2 	bl	80227a4 <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8005066:	2b01      	cmp	r3, #1
 8005068:	d11b      	bne.n	80050a2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	781a      	ldrb	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005076:	429a      	cmp	r2, r3
 8005078:	d005      	beq.n	8005086 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 800507a:	4b41      	ldr	r3, [pc, #260]	; (8005180 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 800507c:	4a3d      	ldr	r2, [pc, #244]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800507e:	215c      	movs	r1, #92	; 0x5c
 8005080:	483d      	ldr	r0, [pc, #244]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005082:	f01d fb8f 	bl	80227a4 <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	781a      	ldrb	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005092:	429a      	cmp	r2, r3
 8005094:	d005      	beq.n	80050a2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 8005096:	4b3b      	ldr	r3, [pc, #236]	; (8005184 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 8005098:	4a36      	ldr	r2, [pc, #216]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800509a:	215d      	movs	r1, #93	; 0x5d
 800509c:	4836      	ldr	r0, [pc, #216]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800509e:	f01d fb81 	bl	80227a4 <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d026      	beq.n	80050fa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80050ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80050be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c2:	d005      	beq.n	80050d0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 80050c4:	4b30      	ldr	r3, [pc, #192]	; (8005188 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 80050c6:	4a2b      	ldr	r2, [pc, #172]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80050c8:	2160      	movs	r1, #96	; 0x60
 80050ca:	482b      	ldr	r0, [pc, #172]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80050cc:	f01d fb6a 	bl	80227a4 <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80050e4:	eeb4 7a67 	vcmp.f32	s14, s15
 80050e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ec:	d005      	beq.n	80050fa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 80050ee:	4b27      	ldr	r3, [pc, #156]	; (800518c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 80050f0:	4a20      	ldr	r2, [pc, #128]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80050f2:	2161      	movs	r1, #97	; 0x61
 80050f4:	4820      	ldr	r0, [pc, #128]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80050f6:	f01d fb55 	bl	80227a4 <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005100:	2b00      	cmp	r3, #0
 8005102:	d026      	beq.n	8005152 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	ed93 7a03 	vldr	s14, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8005112:	eeb4 7a67 	vcmp.f32	s14, s15
 8005116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511a:	d005      	beq.n	8005128 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 800511c:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005120:	2164      	movs	r1, #100	; 0x64
 8005122:	4815      	ldr	r0, [pc, #84]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005124:	f01d fb3e 	bl	80227a4 <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800513c:	eeb4 7a67 	vcmp.f32	s14, s15
 8005140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005144:	d005      	beq.n	8005152 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 8005146:	4b13      	ldr	r3, [pc, #76]	; (8005194 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 8005148:	4a0a      	ldr	r2, [pc, #40]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800514a:	2165      	movs	r1, #101	; 0x65
 800514c:	480a      	ldr	r0, [pc, #40]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800514e:	f01d fb29 	bl	80227a4 <__assert_func>
        }
        tflite_first_run = false;
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	080012e1 	.word	0x080012e1
 8005168:	08027000 	.word	0x08027000
 800516c:	2000005c 	.word	0x2000005c
 8005170:	08027034 	.word	0x08027034
 8005174:	08027068 	.word	0x08027068
 8005178:	08027104 	.word	0x08027104
 800517c:	08027194 	.word	0x08027194
 8005180:	080271c8 	.word	0x080271c8
 8005184:	08027204 	.word	0x08027204
 8005188:	08027240 	.word	0x08027240
 800518c:	08027278 	.word	0x08027278
 8005190:	080272b8 	.word	0x080272b8
 8005194:	080272f0 	.word	0x080272f0

08005198 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8005198:	b5b0      	push	{r4, r5, r7, lr}
 800519a:	b08c      	sub	sp, #48	; 0x30
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 80051a4:	f019 ffda 	bl	801f15c <_Z20trained_model_invokev>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf14      	ite	ne
 80051ae:	2301      	movne	r3, #1
 80051b0:	2300      	moveq	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 80051b8:	f06f 0302 	mvn.w	r3, #2
 80051bc:	e0ea      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 80051be:	f014 fda3 	bl	8019d08 <_Z16ei_read_timer_usv>
 80051c2:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 80051c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80051ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ce:	1a84      	subs	r4, r0, r2
 80051d0:	eb61 0503 	sbc.w	r5, r1, r3
 80051d4:	4622      	mov	r2, r4
 80051d6:	462b      	mov	r3, r5
 80051d8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051da:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 80051de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e0:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80051e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	f7fb fd56 	bl	8000c9c <__aeabi_ldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 80051fa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d006      	beq.n	8005210 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8005202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005208:	4619      	mov	r1, r3
 800520a:	4864      	ldr	r0, [pc, #400]	; (800539c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 800520c:	f000 fd0f 	bl	8005c2e <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d072      	beq.n	8005306 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8005226:	3b01      	subs	r3, #1
 8005228:	2b04      	cmp	r3, #4
 800522a:	d862      	bhi.n	80052f2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	080052bf 	.word	0x080052bf
 8005238:	08005249 	.word	0x08005249
 800523c:	080052cb 	.word	0x080052cb
 8005240:	080052df 	.word	0x080052df
 8005244:	080052cb 	.word	0x080052cb
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b09      	cmp	r3, #9
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 8005256:	7dbb      	ldrb	r3, [r7, #22]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01e      	beq.n	800529a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	ee07 3a90 	vmov	s15, r3
 8005268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	6899      	ldr	r1, [r3, #8]
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	460b      	mov	r3, r1
 8005282:	eef0 0a47 	vmov.f32	s1, s14
 8005286:	eeb0 0a67 	vmov.f32	s0, s15
 800528a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff fdc1 	bl	8004e14 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 8005292:	4603      	mov	r3, r0
 8005294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 8005298:	e063      	b.n	8005362 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	6899      	ldr	r1, [r3, #8]
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	460b      	mov	r3, r1
 80052ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff fda0 	bl	8004df6 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80052bc:	e051      	b.n	8005362 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 80052be:	4838      	ldr	r0, [pc, #224]	; (80053a0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 80052c0:	f000 fcb5 	bl	8005c2e <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80052c4:	f06f 0309 	mvn.w	r3, #9
 80052c8:	e064      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 80052d0:	4619      	mov	r1, r3
 80052d2:	4834      	ldr	r0, [pc, #208]	; (80053a4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 80052d4:	f000 fcab 	bl	8005c2e <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80052d8:	f06f 0309 	mvn.w	r3, #9
 80052dc:	e05a      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 80052e4:	4619      	mov	r1, r3
 80052e6:	4830      	ldr	r0, [pc, #192]	; (80053a8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 80052e8:	f000 fca1 	bl	8005c2e <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80052ec:	f06f 0309 	mvn.w	r3, #9
 80052f0:	e050      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 80052f8:	4619      	mov	r1, r3
 80052fa:	482c      	ldr	r0, [pc, #176]	; (80053ac <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 80052fc:	f000 fc97 	bl	8005c2e <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005300:	f06f 0309 	mvn.w	r3, #9
 8005304:	e046      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b09      	cmp	r3, #9
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d018      	beq.n	800534c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005330:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005334:	eef0 0a47 	vmov.f32	s1, s14
 8005338:	eeb0 0a67 	vmov.f32	s0, s15
 800533c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7ff fd7c 	bl	8004e3c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800534a:	e00a      	b.n	8005362 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005354:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff fdcc 	bl	8004ef4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800535c:	4603      	mov	r3, r0
 800535e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 8005362:	4813      	ldr	r0, [pc, #76]	; (80053b0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 8005364:	f019 ff30 	bl	801f1c8 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 8005368:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 8005370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005374:	e00e      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005376:	f014 fcbf 	bl	8019cf8 <_Z29ei_run_impulse_check_canceledv>
 800537a:	4603      	mov	r3, r0
 800537c:	f113 0f02 	cmn.w	r3, #2
 8005380:	bf0c      	ite	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2300      	movne	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 800538c:	f06f 0301 	mvn.w	r3, #1
 8005390:	e000      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3728      	adds	r7, #40	; 0x28
 8005398:	46bd      	mov	sp, r7
 800539a:	bdb0      	pop	{r4, r5, r7, pc}
 800539c:	08027334 	.word	0x08027334
 80053a0:	08027354 	.word	0x08027354
 80053a4:	080273ac 	.word	0x080273ac
 80053a8:	080273fc 	.word	0x080273fc
 80053ac:	0802744c 	.word	0x0802744c
 80053b0:	08001365 	.word	0x08001365

080053b4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80053b4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80053b8:	b09e      	sub	sp, #120	; 0x78
 80053ba:	af06      	add	r7, sp, #24
 80053bc:	6178      	str	r0, [r7, #20]
 80053be:	6139      	str	r1, [r7, #16]
 80053c0:	60fa      	str	r2, [r7, #12]
 80053c2:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 80053c4:	f014 fca0 	bl	8019d08 <_Z16ei_read_timer_usv>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80053d0:	4b7b      	ldr	r3, [pc, #492]	; (80055c0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80053d8:	f107 0318 	add.w	r3, r7, #24
 80053dc:	2100      	movs	r1, #0
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fead 	bl	800613e <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 80053e4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80053e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80053ec:	f107 0120 	add.w	r1, r7, #32
 80053f0:	f107 0318 	add.w	r3, r7, #24
 80053f4:	9302      	str	r3, [sp, #8]
 80053f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	4603      	mov	r3, r0
 8005404:	6978      	ldr	r0, [r7, #20]
 8005406:	f7ff fdc1 	bl	8004f8c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800540a:	4603      	mov	r3, r0
 800540c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8005410:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8005418:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 800541c:	e0c5      	b.n	80055aa <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 800541e:	f107 0318 	add.w	r3, r7, #24
 8005422:	4618      	mov	r0, r3
 8005424:	f001 f830 	bl	8006488 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005428:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b09      	cmp	r3, #9
 8005430:	d022      	beq.n	8005478 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 8005432:	2b09      	cmp	r3, #9
 8005434:	f300 8083 	bgt.w	800553e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 8005438:	2b01      	cmp	r3, #1
 800543a:	d002      	beq.n	8005442 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 800543c:	2b03      	cmp	r3, #3
 800543e:	d051      	beq.n	80054e4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 8005440:	e07d      	b.n	800553e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005442:	2300      	movs	r3, #0
 8005444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	6892      	ldr	r2, [r2, #8]
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005454:	429a      	cmp	r2, r3
 8005456:	d27b      	bcs.n	8005550 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	6859      	ldr	r1, [r3, #4]
 8005466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005472:	3301      	adds	r3, #1
 8005474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005476:	e7e6      	b.n	8005446 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005478:	2300      	movs	r3, #0
 800547a:	65bb      	str	r3, [r7, #88]	; 0x58
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	6892      	ldr	r2, [r2, #8]
 8005484:	fb02 f303 	mul.w	r3, r2, r3
 8005488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800548a:	429a      	cmp	r2, r3
 800548c:	d262      	bcs.n	8005554 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	edd3 7a03 	vldr	s15, [r3, #12]
 80054a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80054a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80054aa:	eeb0 0a66 	vmov.f32	s0, s13
 80054ae:	f7fc f956 	bl	800175e <_ZSt5roundf>
 80054b2:	eeb0 7a40 	vmov.f32	s14, s0
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054cc:	4413      	add	r3, r2
 80054ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80054d6:	793a      	ldrb	r2, [r7, #4]
 80054d8:	b252      	sxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80054dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054de:	3301      	adds	r3, #1
 80054e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054e2:	e7cb      	b.n	800547c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80054e4:	2300      	movs	r3, #0
 80054e6:	657b      	str	r3, [r7, #84]	; 0x54
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	6892      	ldr	r2, [r2, #8]
 80054f0:	fb02 f303 	mul.w	r3, r2, r3
 80054f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d221      	bcs.n	800553e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800550e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800551c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005526:	4413      	add	r3, r2
 8005528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800552c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005530:	793a      	ldrb	r2, [r7, #4]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005538:	3301      	adds	r3, #1
 800553a:	657b      	str	r3, [r7, #84]	; 0x54
 800553c:	e7d4      	b.n	80054e8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	4619      	mov	r1, r3
 8005544:	481f      	ldr	r0, [pc, #124]	; (80055c4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 8005546:	f000 fb72 	bl	8005c2e <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 800554a:	f06f 040c 	mvn.w	r4, #12
 800554e:	e02c      	b.n	80055aa <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 8005554:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 8005556:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 800555a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800555c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800555e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8005560:	7afb      	ldrb	r3, [r7, #11]
 8005562:	9305      	str	r3, [sp, #20]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556a:	9303      	str	r3, [sp, #12]
 800556c:	9602      	str	r6, [sp, #8]
 800556e:	9001      	str	r0, [sp, #4]
 8005570:	9100      	str	r1, [sp, #0]
 8005572:	465a      	mov	r2, fp
 8005574:	4663      	mov	r3, ip
 8005576:	6978      	ldr	r0, [r7, #20]
 8005578:	f7ff fe0e 	bl	8005198 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8005582:	f014 fbc1 	bl	8019d08 <_Z16ei_read_timer_usv>
 8005586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800558a:	1a84      	subs	r4, r0, r2
 800558c:	eb61 0503 	sbc.w	r5, r1, r3
 8005590:	4622      	mov	r2, r4
 8005592:	462b      	mov	r3, r5
 8005594:	68f9      	ldr	r1, [r7, #12]
 8005596:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 800559a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 80055a2:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 80055a6:	e000      	b.n	80055aa <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 80055a8:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80055aa:	f107 0318 	add.w	r3, r7, #24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fdda 	bl	8006168 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80055b4:	4623      	mov	r3, r4
 80055b6:	4618      	mov	r0, r3
 80055b8:	3760      	adds	r7, #96	; 0x60
 80055ba:	46bd      	mov	sp, r7
 80055bc:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80055c0:	08001365 	.word	0x08001365
 80055c4:	08027480 	.word	0x08027480

080055c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 80055c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055cc:	b0a1      	sub	sp, #132	; 0x84
 80055ce:	af06      	add	r7, sp, #24
 80055d0:	6178      	str	r0, [r7, #20]
 80055d2:	6139      	str	r1, [r7, #16]
 80055d4:	60fa      	str	r2, [r7, #12]
 80055d6:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 80055d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055dc:	2100      	movs	r1, #0
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f01d f982 	bl	80228e8 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80055e4:	4b7b      	ldr	r3, [pc, #492]	; (80057d4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 80055e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80055ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055f0:	2100      	movs	r1, #0
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fda3 	bl	800613e <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 80055f8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80055fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005600:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005608:	9302      	str	r3, [sp, #8]
 800560a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800560e:	9301      	str	r3, [sp, #4]
 8005610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	4603      	mov	r3, r0
 8005618:	6978      	ldr	r0, [r7, #20]
 800561a:	f7ff fcb7 	bl	8004f8c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800561e:	4603      	mov	r3, r0
 8005620:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8005624:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 800562c:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 8005630:	e0c4      	b.n	80057bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8005632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b09      	cmp	r3, #9
 8005638:	d002      	beq.n	8005640 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800563a:	f06f 0408 	mvn.w	r4, #8
 800563e:	e0bd      	b.n	80057bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8005640:	f014 fb62 	bl	8019d08 <_Z16ei_read_timer_usv>
 8005644:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f107 0018 	add.w	r0, r7, #24
 8005654:	2101      	movs	r1, #1
 8005656:	f7fc f82f 	bl	80016b8 <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 800565a:	4b5f      	ldr	r3, [pc, #380]	; (80057d8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 800565c:	6899      	ldr	r1, [r3, #8]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005664:	f107 0218 	add.w	r2, r7, #24
 8005668:	eeb0 0a67 	vmov.f32	s0, s15
 800566c:	460b      	mov	r3, r1
 800566e:	6939      	ldr	r1, [r7, #16]
 8005670:	6978      	ldr	r0, [r7, #20]
 8005672:	f7ff f8af 	bl	80047d4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 8005676:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 8005678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800567a:	2b00      	cmp	r3, #0
 800567c:	d006      	beq.n	800568c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 800567e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005680:	4856      	ldr	r0, [pc, #344]	; (80057dc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 8005682:	f000 fad4 	bl	8005c2e <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 8005686:	f06f 0404 	mvn.w	r4, #4
 800568a:	e092      	b.n	80057b2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800568c:	f014 fb34 	bl	8019cf8 <_Z29ei_run_impulse_check_canceledv>
 8005690:	4603      	mov	r3, r0
 8005692:	f113 0f02 	cmn.w	r3, #2
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 80056a2:	f06f 0401 	mvn.w	r4, #1
 80056a6:	e084      	b.n	80057b2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80056a8:	f014 fb2e 	bl	8019d08 <_Z16ei_read_timer_usv>
 80056ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056b0:	ebb0 0802 	subs.w	r8, r0, r2
 80056b4:	eb61 0903 	sbc.w	r9, r1, r3
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	68f9      	ldr	r1, [r7, #12]
 80056be:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 80056c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	f7fb fae4 	bl	8000c9c <__aeabi_ldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 80056de:	7afb      	ldrb	r3, [r7, #11]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d02d      	beq.n	8005740 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80056ea:	4619      	mov	r1, r3
 80056ec:	483c      	ldr	r0, [pc, #240]	; (80057e0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 80056ee:	f000 fa9e 	bl	8005c2e <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80056f2:	2300      	movs	r3, #0
 80056f4:	667b      	str	r3, [r7, #100]	; 0x64
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d21d      	bcs.n	800573a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005702:	4413      	add	r3, r2
 8005704:	f993 3000 	ldrsb.w	r3, [r3]
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005716:	ee37 7a67 	vsub.f32	s14, s14, s15
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005724:	eeb0 0a67 	vmov.f32	s0, s15
 8005728:	f014 fb02 	bl	8019d30 <_Z15ei_printf_floatf>
            ei_printf(" ");
 800572c:	482d      	ldr	r0, [pc, #180]	; (80057e4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 800572e:	f000 fa7e 	bl	8005c2e <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005734:	3301      	adds	r3, #1
 8005736:	667b      	str	r3, [r7, #100]	; 0x64
 8005738:	e7dd      	b.n	80056f6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 800573a:	482b      	ldr	r0, [pc, #172]	; (80057e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 800573c:	f000 fa77 	bl	8005c2e <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8005740:	f014 fae2 	bl	8019d08 <_Z16ei_read_timer_usv>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 800574c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005750:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005758:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 800575a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fe92 	bl	8006488 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005764:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	9305      	str	r3, [sp, #20]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	9203      	str	r2, [sp, #12]
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	9202      	str	r2, [sp, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	9301      	str	r3, [sp, #4]
 8005778:	9600      	str	r6, [sp, #0]
 800577a:	4642      	mov	r2, r8
 800577c:	464b      	mov	r3, r9
 800577e:	6978      	ldr	r0, [r7, #20]
 8005780:	f7ff fd0a 	bl	8005198 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 800578a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 8005792:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8005796:	e00c      	b.n	80057b2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8005798:	f014 fab6 	bl	8019d08 <_Z16ei_read_timer_usv>
 800579c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057a0:	1a84      	subs	r4, r0, r2
 80057a2:	eb61 0503 	sbc.w	r5, r1, r3
 80057a6:	4622      	mov	r2, r4
 80057a8:	462b      	mov	r3, r5
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 80057b0:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 80057b2:	f107 0318 	add.w	r3, r7, #24
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fb ffa8 	bl	800170c <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80057bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fcd1 	bl	8006168 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80057c6:	4623      	mov	r3, r4
 80057c8:	4618      	mov	r0, r3
 80057ca:	376c      	adds	r7, #108	; 0x6c
 80057cc:	46bd      	mov	sp, r7
 80057ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057d2:	bf00      	nop
 80057d4:	08001365 	.word	0x08001365
 80057d8:	20000048 	.word	0x20000048
 80057dc:	080274a4 	.word	0x080274a4
 80057e0:	080274cc 	.word	0x080274cc
 80057e4:	080274e0 	.word	0x080274e0
 80057e8:	08026ffc 	.word	0x08026ffc

080057ec <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff fdd7 	bl	80053b4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 8005806:	4603      	mov	r3, r0
 8005808:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 800580a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <run_inference+0x2c>
        return nn_res;
 8005812:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005816:	e00e      	b.n	8005836 <run_inference+0x4a>
            return anomaly_res;
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005818:	f014 fa6e 	bl	8019cf8 <_Z29ei_run_impulse_check_canceledv>
 800581c:	4603      	mov	r3, r0
 800581e:	f113 0f02 	cmn.w	r3, #2
 8005822:	bf0c      	ite	eq
 8005824:	2301      	moveq	r3, #1
 8005826:	2300      	movne	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 800582e:	f06f 0301 	mvn.w	r3, #1
 8005832:	e000      	b.n	8005836 <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3310      	adds	r3, #16
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe fe72 	bl	8004534 <_ZN2ei11ei_signal_tD1Ev>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 800585c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005860:	b0a5      	sub	sp, #148	; 0x94
 8005862:	af02      	add	r7, sp, #8
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
 800586a:	70fb      	strb	r3, [r7, #3]
 800586c:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 f928 	bl	8005ac4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	bf0c      	ite	eq
 800587a:	2301      	moveq	r3, #1
 800587c:	2300      	movne	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f954 	bl	8005b38 <run_classifier_image_quantized>
 8005890:	4603      	mov	r3, r0
 8005892:	461e      	mov	r6, r3
 8005894:	e0ef      	b.n	8005a76 <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800589a:	2100      	movs	r1, #0
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f01d f823 	bl	80228e8 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	691a      	ldr	r2, [r3, #16]
 80058a6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80058aa:	2300      	movs	r3, #0
 80058ac:	2101      	movs	r1, #1
 80058ae:	f7fb feae 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 80058b2:	f014 fa29 	bl	8019d08 <_Z16ei_read_timer_usv>
 80058b6:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 80058c0:	2300      	movs	r3, #0
 80058c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d27c      	bcs.n	80059cc <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80058d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80058e8:	461d      	mov	r5, r3
 80058ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058ee:	682b      	ldr	r3, [r5, #0]
 80058f0:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 80058f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058f8:	441a      	add	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d905      	bls.n	800590e <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 8005902:	4860      	ldr	r0, [pc, #384]	; (8005a84 <process_impulse+0x228>)
 8005904:	f000 f993 	bl	8005c2e <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005908:	f06f 0604 	mvn.w	r6, #4
 800590c:	e0ad      	b.n	8005a6a <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 800590e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005912:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800591e:	460a      	mov	r2, r1
 8005920:	2101      	movs	r1, #1
 8005922:	f7fb fe74 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8005926:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005928:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800592a:	f107 0014 	add.w	r0, r7, #20
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	460b      	mov	r3, r1
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	f7ff f9a9 	bl	8004c8c <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 800593a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff f9d3 	bl	8004cec <_ZN14SignalWithAxes10get_signalEv>
 8005946:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800594e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005952:	eeb0 0a67 	vmov.f32	s0, s15
 8005956:	4619      	mov	r1, r3
 8005958:	47a0      	blx	r4
 800595a:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 800595c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8005962:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005964:	4848      	ldr	r0, [pc, #288]	; (8005a88 <process_impulse+0x22c>)
 8005966:	f000 f962 	bl	8005c2e <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 800596a:	f06f 0604 	mvn.w	r6, #4
 800596e:	2400      	movs	r4, #0
 8005970:	e015      	b.n	800599e <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005972:	f014 f9c1 	bl	8019cf8 <_Z29ei_run_impulse_check_canceledv>
 8005976:	4603      	mov	r3, r0
 8005978:	f113 0f02 	cmn.w	r3, #2
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8005988:	f06f 0601 	mvn.w	r6, #1
 800598c:	2400      	movs	r4, #0
 800598e:	e006      	b.n	800599e <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005996:	4413      	add	r3, r2
 8005998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800599c:	2401      	movs	r4, #1
 800599e:	f107 0314 	add.w	r3, r7, #20
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff ff4b 	bl	800583e <_ZN14SignalWithAxesD1Ev>
 80059a8:	2c01      	cmp	r4, #1
 80059aa:	d001      	beq.n	80059b0 <process_impulse+0x154>
 80059ac:	2400      	movs	r4, #0
 80059ae:	e000      	b.n	80059b2 <process_impulse+0x156>
 80059b0:	2401      	movs	r4, #1
 80059b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fb fe54 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 80059bc:	2c01      	cmp	r4, #1
 80059be:	d154      	bne.n	8005a6a <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 80059c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059c4:	3301      	adds	r3, #1
 80059c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059ca:	e77c      	b.n	80058c6 <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80059cc:	f014 f99c 	bl	8019d08 <_Z16ei_read_timer_usv>
 80059d0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80059d4:	ebb0 0802 	subs.w	r8, r0, r2
 80059d8:	eb61 0903 	sbc.w	r9, r1, r3
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 80059ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	f7fb f952 	bl	8000c9c <__aeabi_ldivmod>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d020      	beq.n	8005a4a <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005a0e:	4619      	mov	r1, r3
 8005a10:	481e      	ldr	r0, [pc, #120]	; (8005a8c <process_impulse+0x230>)
 8005a12:	f000 f90c 	bl	8005c2e <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005a16:	2300      	movs	r3, #0
 8005a18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d210      	bcs.n	8005a44 <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 8005a22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	edd3 7a00 	vldr	s15, [r3]
 8005a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a32:	f014 f97d 	bl	8019d30 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005a36:	4816      	ldr	r0, [pc, #88]	; (8005a90 <process_impulse+0x234>)
 8005a38:	f000 f8f9 	bl	8005c2e <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005a3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a3e:	3301      	adds	r3, #1
 8005a40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a42:	e7ea      	b.n	8005a1a <process_impulse+0x1be>
        }
        ei_printf("\n");
 8005a44:	4813      	ldr	r0, [pc, #76]	; (8005a94 <process_impulse+0x238>)
 8005a46:	f000 f8f2 	bl	8005c2e <_Z9ei_printfPKcz>
    }

    if (debug) {
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 8005a50:	4811      	ldr	r0, [pc, #68]	; (8005a98 <process_impulse+0x23c>)
 8005a52:	f000 f8ec 	bl	8005c2e <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff fec4 	bl	80057ec <run_inference>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461e      	mov	r6, r3
 8005a68:	e000      	b.n	8005a6c <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8005a6a:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8005a6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fb fdf7 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>

}
 8005a76:	4633      	mov	r3, r6
 8005a78:	4618      	mov	r0, r3
 8005a7a:	378c      	adds	r7, #140	; 0x8c
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a82:	bf00      	nop
 8005a84:	080274e4 	.word	0x080274e4
 8005a88:	080274a4 	.word	0x080274a4
 8005a8c:	080274cc 	.word	0x080274cc
 8005a90:	080274e0 	.word	0x080274e0
 8005a94:	08026ffc 	.word	0x08026ffc
 8005a98:	08027510 	.word	0x08027510

08005a9c <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a06      	ldr	r2, [pc, #24]	; (8005ac0 <ei_construct_impulse+0x24>)
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	4611      	mov	r1, r2
 8005aac:	23a4      	movs	r3, #164	; 0xa4
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f01c fef2 	bl	8022898 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 8005ab4:	bf00      	nop
}
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	08027588 	.word	0x08027588

08005ac4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d00a      	beq.n	8005aea <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad8:	2b05      	cmp	r3, #5
 8005ada:	d006      	beq.n	8005aea <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae0:	2b07      	cmp	r3, #7
 8005ae2:	d002      	beq.n	8005aea <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005ae4:	f06f 0309 	mvn.w	r3, #9
 8005ae8:	e01d      	b.n	8005b26 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d102      	bne.n	8005afa <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005af4:	f06f 0308 	mvn.w	r3, #8
 8005af8:	e015      	b.n	8005b26 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d002      	beq.n	8005b0a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005b04:	f06f 0308 	mvn.w	r3, #8
 8005b08:	e00d      	b.n	8005b26 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d105      	bne.n	8005b1e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4a06      	ldr	r2, [pc, #24]	; (8005b34 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d002      	beq.n	8005b24 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005b1e:	f06f 0308 	mvn.w	r3, #8
 8005b22:	e000      	b.n	8005b26 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	08004601 	.word	0x08004601

08005b38 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff ffbc 	bl	8005ac4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 8005b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <run_classifier_image_quantized+0x26>
        return verify_res;
 8005b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b5c:	e00d      	b.n	8005b7a <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b62:	2100      	movs	r1, #0
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f01c febf 	bl	80228e8 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7ff fd29 	bl	80055c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 8005b76:	4603      	mov	r3, r0
 8005b78:	bf00      	nop

}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b0ae      	sub	sp, #184	; 0xb8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff ff81 	bl	8005a9c <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	f107 0014 	add.w	r0, r7, #20
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	f7ff fe5a 	bl	800585c <process_impulse>
 8005ba8:	4603      	mov	r3, r0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	37b8      	adds	r7, #184	; 0xb8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <_Z16get_feature_datajjPf>:
using namespace ei;

// paste the raw features here
static const float features[] = {55.9577, -5.4036, 525.5946, 56.7960, -5.4996, 533.3694, 57.5427, -5.5881, 540.2832, 58.1988, -5.6693, 546.3459, 58.7658, -5.7433, 551.5727, 59.2458, -5.8103, 555.9843, 59.6413, -5.8706, 559.6060, 59.9556, -5.9245, 562.4681, 60.1920, -5.9723, 564.6053, 60.3548, -6.0144, 566.0564, 60.4481, -6.0511, 566.8639, 60.4769, -6.0829, 567.0737, 60.4462, -6.1103, 566.7347, 60.3614, -6.1337, 565.8982, 60.2279, -6.1536, 564.6177, 60.0516, -6.1706, 562.9483, 59.8384, -6.1850, 560.9461, 59.5942, -6.1975, 558.6678, 59.3249, -6.2084, 556.1706, 59.0366, -6.2184, 553.5108, 58.7351, -6.2279, 550.7444, 58.4260, -6.2373, 547.9257, 58.1151, -6.2472, 545.1075, 57.8075, -6.2578, 542.3402, 57.5084, -6.2696, 539.6715, 57.2226, -6.2829, 537.1464, 56.9543, -6.2981, 534.8059, 56.7077, -6.3154, 532.6877, 56.4862, -6.3351, 530.8252, 56.2931, -6.3572, 529.2474, 56.1309, -6.3820, 527.9787, 56.0019, -6.4095, 527.0385, 55.9076, -6.4398, 526.4416, 55.8491, -6.4728, 526.1972, 55.8270, -6.5084, 526.3096, 55.8413, -6.5466, 526.7776, 55.8914, -6.5872, 527.5951, 55.9763, -6.6298, 528.7505, 56.0943, -6.6743, 530.2273, 56.2433, -6.7204, 532.0039, 56.4207, -6.7675, 534.0541, 56.6234, -6.8154, 536.3470, 56.8478, -6.8637, 538.8476, 57.0899, -6.9117, 541.5165, 57.3455, -6.9590, 544.3112, 57.6096, -7.0050, 547.1855, 57.8775, -7.0492, 550.0904, 58.1437, -7.0910, 552.9744, 58.4027, -7.1298, 555.7840, 58.6490, -7.1650, 558.4640, 58.8767, -7.1960, 560.9581, 59.0799, -7.2221, 563.2094, 59.2528, -7.2427, 565.1608, 59.3894, -7.2574, 566.7555, 59.4841, -7.2654, 567.9376, 59.5311, -7.2662, 568.6524, 59.5250, -7.2594, 568.8470, 59.4605, -7.2443, 568.4708, 59.3327, -7.2206, 567.4758, 59.1370, -7.1879, 565.8173, 58.8689, -7.1456, 563.4540, 58.5248, -7.0937, 560.3483, 58.1010, -7.0317, 556.4672, 57.5946, -6.9594, 551.7821, 57.0032, -6.8766, 546.2691, 56.3248, -6.7834, 539.9097, 55.5579, -6.6796, 532.6905, 54.7018, -6.5652, 524.6034, 53.7561, -6.4403, 515.6462, 52.7213, -6.3051, 505.8221, 51.5981, -6.1597, 495.1402, 50.3881, -6.0045, 483.6150, 49.0935, -5.8397, 471.2668, 47.7167, -5.6659, 458.1215, 46.2610, -5.4833, 444.2103, 44.7303, -5.2925, 429.5696, 43.1287, -5.0941, 414.2408, 41.4611, -4.8887, 398.2700, 39.7325, -4.6769, 381.7079, 37.9489, -4.4595, 364.6091, 36.1160, -4.2371, 347.0323, 34.2404, -4.0105, 329.0392, 32.3288, -3.7805, 310.6947, 30.3881, -3.5480, 292.0661, 28.4256, -3.3137, 273.2231, 26.4485, -3.0786, 254.2366, 24.4644, -2.8434, 235.1788, 22.4808, -2.6090, 216.1229, 20.5053, -2.3764, 197.1417, 18.5455, -2.1463, 178.3082, 16.6087, -1.9195, 159.6943, 14.7024, -1.6969, 141.3707, 12.8336, -1.4793, 123.4065, 11.0094, -1.2674, 105.8685, 9.2362, -1.0619, 88.8208, 7.5206, -0.8636, 72.3247, 5.8685, -0.6731, 56.4379, 4.2854, -0.4910, 41.2144, 2.7766, -0.3177, 26.7041, 1.3467, -0.1539, 12.9523};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4a06      	ldr	r2, [pc, #24]	; (8005be0 <_Z16get_feature_datajjPf+0x2c>)
 8005bc6:	1899      	adds	r1, r3, r2
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f01c fe62 	bl	8022898 <memcpy>
    return 0;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	08028820 	.word	0x08028820

08005be4 <_Z6vprintPKcSt9__va_list>:
	char *message[500] = {};
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b0b4      	sub	sp, #208	; 0xd0
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8005bee:	f107 0308 	add.w	r3, r7, #8
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f01e fbe6 	bl	80243c8 <vsiprintf>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfcc      	ite	gt
 8005c02:	2301      	movgt	r3, #1
 8005c04:	2300      	movle	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00c      	beq.n	8005c26 <_Z6vprintPKcSt9__va_list+0x42>
    {

    //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	 CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8005c0c:	f107 0308 	add.w	r3, r7, #8
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fa fb37 	bl	8000284 <strlen>
 8005c16:	4603      	mov	r3, r0
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	f107 0308 	add.w	r3, r7, #8
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f019 fbff 	bl	801f424 <CDC_Transmit_FS>
    }
}
 8005c26:	bf00      	nop
 8005c28:	37d0      	adds	r7, #208	; 0xd0
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8005c2e:	b40f      	push	{r0, r1, r2, r3}
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8005c36:	f107 0314 	add.w	r3, r7, #20
 8005c3a:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	6938      	ldr	r0, [r7, #16]
 8005c40:	f7ff ffd0 	bl	8005be4 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c4e:	b004      	add	sp, #16
 8005c50:	4770      	bx	lr
	...

08005c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b0cc      	sub	sp, #304	; 0x130
 8005c58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c5a:	f003 f84b 	bl	8008cf4 <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 8005c5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fc59 	bl	800451a <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]);
 8005c68:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005c6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  signal.get_data = &get_feature_data;
 8005c70:	4b43      	ldr	r3, [pc, #268]	; (8005d80 <main+0x12c>)
 8005c72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c76:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8005c7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c7e:	4611      	mov	r1, r2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fbc2 	bl	800640a <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c86:	f000 f88b 	bl	8005da0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c8a:	f000 f951 	bl	8005f30 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 8005c8e:	f019 fb0b 	bl	801f2a8 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8005c92:	f000 f911 	bl	8005eb8 <_ZL12MX_SPI1_Initv>
  MX_CRC_Init();
 8005c96:	f000 f8f7 	bl	8005e88 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
  myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 8005c9a:	4b3a      	ldr	r3, [pc, #232]	; (8005d84 <main+0x130>)
 8005c9c:	2240      	movs	r2, #64	; 0x40
 8005c9e:	701a      	strb	r2, [r3, #0]
  	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8005ca0:	4b38      	ldr	r3, [pc, #224]	; (8005d84 <main+0x130>)
 8005ca2:	2208      	movs	r2, #8
 8005ca4:	705a      	strb	r2, [r3, #1]
  	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;//update rate
 8005ca6:	4b37      	ldr	r3, [pc, #220]	; (8005d84 <main+0x130>)
 8005ca8:	22c0      	movs	r2, #192	; 0xc0
 8005caa:	709a      	strb	r2, [r3, #2]
  	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8005cac:	4b35      	ldr	r3, [pc, #212]	; (8005d84 <main+0x130>)
 8005cae:	2207      	movs	r2, #7
 8005cb0:	70da      	strb	r2, [r3, #3]
  	myAccConfigDef.interruptEnable = false;
 8005cb2:	4b34      	ldr	r3, [pc, #208]	; (8005d84 <main+0x130>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	711a      	strb	r2, [r3, #4]
  	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8005cb8:	4932      	ldr	r1, [pc, #200]	; (8005d84 <main+0x130>)
 8005cba:	4833      	ldr	r0, [pc, #204]	; (8005d88 <main+0x134>)
 8005cbc:	f7fb fa20 	bl	8001100 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	while (1)
  	{
  	      ei_impulse_result_t result = { 0 };
 8005cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cce:	461a      	mov	r2, r3
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	f01c fe09 	bl	80228e8 <memset>
  	      EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 8005cd6:	4639      	mov	r1, r7
 8005cd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cdc:	2201      	movs	r2, #1
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff ff4f 	bl	8005b82 <run_classifier>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  	      ei_printf("run_classifier returned: %d\n", res);
 8005cea:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4826      	ldr	r0, [pc, #152]	; (8005d8c <main+0x138>)
 8005cf2:	f7ff ff9c 	bl	8005c2e <_Z9ei_printfPKcz>

  	      ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8005cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfe:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8005d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d1a:	481d      	ldr	r0, [pc, #116]	; (8005d90 <main+0x13c>)
 8005d1c:	f7ff ff87 	bl	8005c2e <_Z9ei_printfPKcz>
  	          result.timing.dsp, result.timing.classification, result.timing.anomaly);

  	      // print the predictions
  	      ei_printf("[");
 8005d20:	481c      	ldr	r0, [pc, #112]	; (8005d94 <main+0x140>)
 8005d22:	f7ff ff84 	bl	8005c2e <_Z9ei_printfPKcz>
  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8005d26:	2300      	movs	r3, #0
 8005d28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d81c      	bhi.n	8005d6e <main+0x11a>
  	    	  ei_printf_float(result.classification[ix].value);
 8005d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d38:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8005d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d40:	3301      	adds	r3, #1
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4413      	add	r3, r2
 8005d46:	3304      	adds	r3, #4
 8005d48:	edd3 7a00 	vldr	s15, [r3]
 8005d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d50:	f013 ffee 	bl	8019d30 <_Z15ei_printf_floatf>
  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
  	          ei_printf(", ");
  	  #else
  	          if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 8005d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d002      	beq.n	8005d62 <main+0x10e>
  	              ei_printf(", ");
 8005d5c:	480e      	ldr	r0, [pc, #56]	; (8005d98 <main+0x144>)
 8005d5e:	f7ff ff66 	bl	8005c2e <_Z9ei_printfPKcz>
  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8005d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d66:	3301      	adds	r3, #1
 8005d68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005d6c:	e7de      	b.n	8005d2c <main+0xd8>
  	  #endif
  	      }
  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
  	      ei_printf_float(result.anomaly);
  	  #endif
  	      ei_printf("]\n\n\n");
 8005d6e:	480b      	ldr	r0, [pc, #44]	; (8005d9c <main+0x148>)
 8005d70:	f7ff ff5d 	bl	8005c2e <_Z9ei_printfPKcz>

  	    HAL_Delay(5000);
 8005d74:	f241 3088 	movw	r0, #5000	; 0x1388
 8005d78:	f003 f82e 	bl	8008dd8 <HAL_Delay>
  	}
 8005d7c:	e7a0      	b.n	8005cc0 <main+0x6c>
 8005d7e:	bf00      	nop
 8005d80:	08005bb5 	.word	0x08005bb5
 8005d84:	20000500 	.word	0x20000500
 8005d88:	20000510 	.word	0x20000510
 8005d8c:	08027660 	.word	0x08027660
 8005d90:	08027680 	.word	0x08027680
 8005d94:	080276c8 	.word	0x080276c8
 8005d98:	080276cc 	.word	0x080276cc
 8005d9c:	080276d0 	.word	0x080276d0

08005da0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b094      	sub	sp, #80	; 0x50
 8005da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005da6:	f107 0320 	add.w	r3, r7, #32
 8005daa:	2230      	movs	r2, #48	; 0x30
 8005dac:	2100      	movs	r1, #0
 8005dae:	4618      	mov	r0, r3
 8005db0:	f01c fd9a 	bl	80228e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005db4:	f107 030c 	add.w	r3, r7, #12
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60bb      	str	r3, [r7, #8]
 8005dc8:	4b2d      	ldr	r3, [pc, #180]	; (8005e80 <_Z18SystemClock_Configv+0xe0>)
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	4a2c      	ldr	r2, [pc, #176]	; (8005e80 <_Z18SystemClock_Configv+0xe0>)
 8005dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8005dd4:	4b2a      	ldr	r3, [pc, #168]	; (8005e80 <_Z18SystemClock_Configv+0xe0>)
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005de0:	2300      	movs	r3, #0
 8005de2:	607b      	str	r3, [r7, #4]
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <_Z18SystemClock_Configv+0xe4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <_Z18SystemClock_Configv+0xe4>)
 8005dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <_Z18SystemClock_Configv+0xe4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e06:	2302      	movs	r3, #2
 8005e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005e10:	2304      	movs	r3, #4
 8005e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005e14:	23a8      	movs	r3, #168	; 0xa8
 8005e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005e1c:	2307      	movs	r3, #7
 8005e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e20:	f107 0320 	add.w	r3, r7, #32
 8005e24:	4618      	mov	r0, r3
 8005e26:	f004 fd5b 	bl	800a8e0 <HAL_RCC_OscConfig>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8005e3a:	f000 f8d7 	bl	8005fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e3e:	230f      	movs	r3, #15
 8005e40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e42:	2302      	movs	r3, #2
 8005e44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005e4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005e4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005e56:	f107 030c 	add.w	r3, r7, #12
 8005e5a:	2105      	movs	r1, #5
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f004 ffb7 	bl	800add0 <HAL_RCC_ClockConfig>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bf14      	ite	ne
 8005e68:	2301      	movne	r3, #1
 8005e6a:	2300      	moveq	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8005e72:	f000 f8bb 	bl	8005fec <Error_Handler>
  }
}
 8005e76:	bf00      	nop
 8005e78:	3750      	adds	r7, #80	; 0x50
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40023800 	.word	0x40023800
 8005e84:	40007000 	.word	0x40007000

08005e88 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005e8c:	4b08      	ldr	r3, [pc, #32]	; (8005eb0 <_ZL11MX_CRC_Initv+0x28>)
 8005e8e:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <_ZL11MX_CRC_Initv+0x2c>)
 8005e90:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005e92:	4807      	ldr	r0, [pc, #28]	; (8005eb0 <_ZL11MX_CRC_Initv+0x28>)
 8005e94:	f003 f8d5 	bl	8009042 <HAL_CRC_Init>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bf14      	ite	ne
 8005e9e:	2301      	movne	r3, #1
 8005ea0:	2300      	moveq	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8005ea8:	f000 f8a0 	bl	8005fec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005eac:	bf00      	nop
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000508 	.word	0x20000508
 8005eb4:	40023000 	.word	0x40023000

08005eb8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005ebc:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005ebe:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <_ZL12MX_SPI1_Initv+0x74>)
 8005ec0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005ec2:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005ec4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ec8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005eca:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005ed0:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ed6:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005edc:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005ee2:	4b11      	ldr	r3, [pc, #68]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eea:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ef6:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005f02:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005f04:	220a      	movs	r2, #10
 8005f06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005f08:	4807      	ldr	r0, [pc, #28]	; (8005f28 <_ZL12MX_SPI1_Initv+0x70>)
 8005f0a:	f005 f959 	bl	800b1c0 <HAL_SPI_Init>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bf14      	ite	ne
 8005f14:	2301      	movne	r3, #1
 8005f16:	2300      	moveq	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8005f1e:	f000 f865 	bl	8005fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005f22:	bf00      	nop
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000510 	.word	0x20000510
 8005f2c:	40013000 	.word	0x40013000

08005f30 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	; 0x28
 8005f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f36:	f107 0314 	add.w	r3, r7, #20
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	605a      	str	r2, [r3, #4]
 8005f40:	609a      	str	r2, [r3, #8]
 8005f42:	60da      	str	r2, [r3, #12]
 8005f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f46:	2300      	movs	r3, #0
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	4a25      	ldr	r2, [pc, #148]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f50:	f043 0310 	orr.w	r3, r3, #16
 8005f54:	6313      	str	r3, [r2, #48]	; 0x30
 8005f56:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	f003 0310 	and.w	r3, r3, #16
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	4b1f      	ldr	r3, [pc, #124]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	4a1e      	ldr	r2, [pc, #120]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f70:	6313      	str	r3, [r2, #48]	; 0x30
 8005f72:	4b1c      	ldr	r3, [pc, #112]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	4b18      	ldr	r3, [pc, #96]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	4a17      	ldr	r2, [pc, #92]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f8e:	4b15      	ldr	r3, [pc, #84]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	607b      	str	r3, [r7, #4]
 8005f9e:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	4a10      	ldr	r2, [pc, #64]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005fa4:	f043 0302 	orr.w	r3, r3, #2
 8005fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb4>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	607b      	str	r3, [r7, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2109      	movs	r1, #9
 8005fba:	480b      	ldr	r0, [pc, #44]	; (8005fe8 <_ZL12MX_GPIO_Initv+0xb8>)
 8005fbc:	f003 f9fa 	bl	80093b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8005fc0:	2309      	movs	r3, #9
 8005fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005fd0:	f107 0314 	add.w	r3, r7, #20
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4804      	ldr	r0, [pc, #16]	; (8005fe8 <_ZL12MX_GPIO_Initv+0xb8>)
 8005fd8:	f003 f850 	bl	800907c <HAL_GPIO_Init>

}
 8005fdc:	bf00      	nop
 8005fde:	3728      	adds	r7, #40	; 0x28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	40021000 	.word	0x40021000

08005fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ff0:	b672      	cpsid	i
}
 8005ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005ff4:	e7fe      	b.n	8005ff4 <Error_Handler+0x8>

08005ff6 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
 8006002:	603b      	str	r3, [r7, #0]
#else
      explicit
      vector(size_type __n, const bool& __value = bool(),
	     const allocator_type& __a = allocator_type())
#endif
      : _Base(__a)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fa4a 	bl	80064a2 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>
      {
	_M_initialize(__n);
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fa69 	bl	80064e8 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>
	_M_initialize_value(__value);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	4619      	mov	r1, r3
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 fab1 	bl	8006584 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>
      }
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>:
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      ~vector() _GLIBCXX_NOEXCEPT { }
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fa4a 	bl	80064d0 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>:
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      reference
      operator[](size_type __n)
 8006046:	b580      	push	{r7, lr}
 8006048:	b086      	sub	sp, #24
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
      {
	return *iterator(this->_M_impl._M_start._M_p
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	681a      	ldr	r2, [r3, #0]
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	009b      	lsls	r3, r3, #2
	return *iterator(this->_M_impl._M_start._M_p
 800605c:	18d1      	adds	r1, r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f003 021f 	and.w	r2, r3, #31
 8006064:	f107 0310 	add.w	r3, r7, #16
 8006068:	4618      	mov	r0, r3
 800606a:	f7fb fa3f 	bl	80014ec <_ZNSt13_Bit_iteratorC1EPmj>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f107 0210 	add.w	r2, r7, #16
 8006074:	4611      	mov	r1, r2
 8006076:	4618      	mov	r0, r3
 8006078:	f7fb fa49 	bl	800150e <_ZNKSt13_Bit_iteratordeEv>
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 800607c:	bf00      	nop
      }
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff ffed 	bl	8006086 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80060ac:	4603      	mov	r3, r0
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80060b2:	6838      	ldr	r0, [r7, #0]
 80060b4:	f7ff ffe7 	bl	8006086 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80060b8:	4603      	mov	r3, r0
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80060c0:	f107 030c 	add.w	r3, r7, #12
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff ffde 	bl	8006086 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80060ca:	4603      	mov	r3, r0
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	601a      	str	r2, [r3, #0]
    }
 80060d2:	bf00      	nop
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80060da:	b5b0      	push	{r4, r5, r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80060e4:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fa fa38 	bl	800055c <__aeabi_f2d>
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	6838      	ldr	r0, [r7, #0]
 80060f2:	f7fa fa21 	bl	8000538 <__aeabi_i2d>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	ec43 2b11 	vmov	d1, r2, r3
 80060fe:	ec45 4b10 	vmov	d0, r4, r5
 8006102:	f01a f837 	bl	8020174 <pow>
 8006106:	eeb0 7a40 	vmov.f32	s14, s0
 800610a:	eef0 7a60 	vmov.f32	s15, s1
    }
 800610e:	eeb0 0a47 	vmov.f32	s0, s14
 8006112:	eef0 0a67 	vmov.f32	s1, s15
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bdb0      	pop	{r4, r5, r7, pc}

0800611c <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fa77 	bl	8006622 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 800613e:	b590      	push	{r4, r7, lr}
 8006140:	b085      	sub	sp, #20
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 800614a:	68fc      	ldr	r4, [r7, #12]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fa5d 	bl	800660c <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8006152:	4603      	mov	r3, r0
 8006154:	461a      	mov	r2, r3
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	4620      	mov	r0, r4
 800615a:	f7ff ffdf 	bl	800611c <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	bd90      	pop	{r4, r7, pc}

08006168 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8006168:	b590      	push	{r4, r7, lr}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fa6b 	bl	800664e <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006178:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa70 	bl	8006668 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8006188:	4603      	mov	r3, r0
 800618a:	681c      	ldr	r4, [r3, #0]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fa78 	bl	8006682 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8006192:	4603      	mov	r3, r0
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	47a0      	blx	r4
	__ptr = pointer();
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
      }
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd90      	pop	{r4, r7, pc}

080061aa <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 80061aa:	b590      	push	{r4, r7, lr}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 80061b4:	687c      	ldr	r4, [r7, #4]
 80061b6:	463b      	mov	r3, r7
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fa62 	bl	8006682 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 80061be:	4603      	mov	r3, r0
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4619      	mov	r1, r3
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fa67 	bl	8006698 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>
      }
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd90      	pop	{r4, r7, pc}

080061d2 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	ed93 7a00 	vldr	s14, [r3]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	edd3 7a00 	vldr	s15, [r3]
 80061e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f0:	d501      	bpl.n	80061f6 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	e000      	b.n	80061f8 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80061f6:	687b      	ldr	r3, [r7, #4]
    }
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8006204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
 8006212:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fb f9e8 	bl	80015ec <_ZNKSt14_Function_base8_M_emptyEv>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8006222:	f7fb fa89 	bl	8001738 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	68dc      	ldr	r4, [r3, #12]
 800622a:	68fd      	ldr	r5, [r7, #12]
 800622c:	f107 0308 	add.w	r3, r7, #8
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fa50 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006236:	4606      	mov	r6, r0
 8006238:	1d3b      	adds	r3, r7, #4
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fa4b 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006240:	4680      	mov	r8, r0
 8006242:	463b      	mov	r3, r7
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fa51 	bl	80066ec <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800624a:	4603      	mov	r3, r0
 800624c:	4642      	mov	r2, r8
 800624e:	4631      	mov	r1, r6
 8006250:	4628      	mov	r0, r5
 8006252:	47a0      	blx	r4
 8006254:	4603      	mov	r3, r0
    }
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006260 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7fa f965 	bl	8000538 <__aeabi_i2d>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	ec43 2b17 	vmov	d7, r2, r3
 8006276:	eeb0 0a47 	vmov.f32	s0, s14
 800627a:	eef0 0a67 	vmov.f32	s1, s15
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fa37 	bl	8006702 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>
	{ }
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800629e:	b580      	push	{r7, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80062b6:	461a      	mov	r2, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fa36 	bl	800672a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      }
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80062c8:	b5b0      	push	{r4, r5, r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681c      	ldr	r4, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fa38 	bl	8006750 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80062e0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80062e2:	461a      	mov	r2, r3
 80062e4:	4629      	mov	r1, r5
 80062e6:	4620      	mov	r0, r4
 80062e8:	f000 fa3d 	bl	8006766 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff ffd5 	bl	800629e <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bdb0      	pop	{r4, r5, r7, pc}

080062fe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	429a      	cmp	r2, r3
 8006312:	d00d      	beq.n	8006330 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	4619      	mov	r1, r3
 800631e:	f000 fa3c 	bl	800679a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
				     __x);
	    ++this->_M_impl._M_finish;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f103 0208 	add.w	r2, r3, #8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800632e:	e008      	b.n	8006342 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f81a 	bl	800636a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 8006336:	4603      	mov	r3, r0
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fa55 	bl	80067ec <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	f107 030c 	add.w	r3, r7, #12
 8006358:	4611      	mov	r1, r2
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fb02 	bl	8006964 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	1d1a      	adds	r2, r3, #4
 8006376:	f107 030c 	add.w	r3, r7, #12
 800637a:	4611      	mov	r1, r2
 800637c:	4618      	mov	r0, r3
 800637e:	f000 faf1 	bl	8006964 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800638c:	b590      	push	{r4, r7, lr}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	713a      	strb	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8006398:	4618      	mov	r0, r3
 800639a:	f000 faf3 	bl	8006984 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 800639e:	4622      	mov	r2, r4
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fb01 	bl	80069aa <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80063a8:	bf00      	nop
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd90      	pop	{r4, r7, pc}

080063b0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	10db      	asrs	r3, r3, #3
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	4413      	add	r3, r2
      }
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fb f8d5 	bl	80015aa <_ZNSt14_Function_baseC1Ev>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 800640a:	b580      	push	{r7, lr}
 800640c:	b086      	sub	sp, #24
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8006414:	6838      	ldr	r0, [r7, #0]
 8006416:	f000 faf5 	bl	8006a04 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800641a:	4603      	mov	r3, r0
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	f107 0308 	add.w	r3, r7, #8
 8006422:	4611      	mov	r1, r2
 8006424:	4618      	mov	r0, r3
 8006426:	f000 faf9 	bl	8006a1c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f8ca 	bl	80065ca <_ZNSt8functionIFijjPfEE4swapERS2_>
 8006436:	f107 0308 	add.w	r3, r7, #8
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe f860 	bl	8004500 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8006440:	687b      	ldr	r3, [r7, #4]
	}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 800644a:	b580      	push	{r7, lr}
 800644c:	b086      	sub	sp, #24
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8006454:	6838      	ldr	r0, [r7, #0]
 8006456:	f000 fb0b 	bl	8006a70 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800645a:	4602      	mov	r2, r0
 800645c:	f107 0308 	add.w	r3, r7, #8
 8006460:	6811      	ldr	r1, [r2, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fb10 	bl	8006a88 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8006468:	f107 0308 	add.w	r3, r7, #8
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 f8ab 	bl	80065ca <_ZNSt8functionIFijjPfEE4swapERS2_>
 8006474:	f107 0308 	add.w	r3, r7, #8
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe f841 	bl	8004500 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800647e:	687b      	ldr	r3, [r7, #4]
	}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fb22 	bl	8006adc <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006498:	4603      	mov	r3, r0
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>:
      _Bvector_base(const allocator_type& __a)
 80064a2:	b590      	push	{r4, r7, lr}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80064ac:	687c      	ldr	r4, [r7, #4]
 80064ae:	f107 030c 	add.w	r3, r7, #12
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fb1f 	bl	8006af8 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>
 80064ba:	f107 030c 	add.w	r3, r7, #12
 80064be:	4619      	mov	r1, r3
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fb25 	bl	8006b10 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd90      	pop	{r4, r7, pc}

080064d0 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>:
      ~_Bvector_base()
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fb27 	bl	8006b2c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>:
	return std::copy(const_iterator(__last._M_p, 0), __last,
			 iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
 80064e8:	b590      	push	{r4, r7, lr}
 80064ea:	b08b      	sub	sp, #44	; 0x2c
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
      {
	if (__n)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d021      	beq.n	800653c <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x54>
	  {
	    _Bit_pointer __q = this->_M_allocate(__n);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fb3a 	bl	8006b76 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>
 8006502:	6278      	str	r0, [r7, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 8006504:	68b8      	ldr	r0, [r7, #8]
 8006506:	f000 fb49 	bl	8006b9c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 800650a:	4603      	mov	r3, r0
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006510:	441a      	add	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
 8006516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006518:	f000 fb4d 	bl	8006bb6 <_ZSt11__addressofImEPT_RS0_>
 800651c:	4601      	mov	r1, r0
 800651e:	f107 0314 	add.w	r3, r7, #20
 8006522:	2200      	movs	r2, #0
 8006524:	4618      	mov	r0, r3
 8006526:	f7fa ffe1 	bl	80014ec <_ZNSt13_Bit_iteratorC1EPmj>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	461a      	mov	r2, r3
 800652e:	f107 0314 	add.w	r3, r7, #20
 8006532:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006536:	e882 0003 	stmia.w	r2, {r0, r1}
 800653a:	e011      	b.n	8006560 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x78>
	  }
	else
	  {
	    this->_M_impl._M_end_of_storage = _Bit_pointer();
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(0, 0);
 8006542:	f107 031c 	add.w	r3, r7, #28
 8006546:	2200      	movs	r2, #0
 8006548:	2100      	movs	r1, #0
 800654a:	4618      	mov	r0, r3
 800654c:	f7fa ffce 	bl	80014ec <_ZNSt13_Bit_iteratorC1EPmj>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	461a      	mov	r2, r3
 8006554:	f107 031c 	add.w	r3, r7, #28
 8006558:	e893 0003 	ldmia.w	r3, {r0, r1}
 800655c:	e882 0003 	stmia.w	r2, {r0, r1}
	  }
	this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
 8006560:	68f9      	ldr	r1, [r7, #12]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	68fc      	ldr	r4, [r7, #12]
 8006566:	463b      	mov	r3, r7
 8006568:	4618      	mov	r0, r3
 800656a:	f7fa fff3 	bl	8001554 <_ZStplRKSt13_Bit_iteratori>
 800656e:	f104 0308 	add.w	r3, r4, #8
 8006572:	463a      	mov	r2, r7
 8006574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006578:	e883 0003 	stmia.w	r3, {r0, r1}

      }
 800657c:	bf00      	nop
 800657e:	372c      	adds	r7, #44	; 0x2c
 8006580:	46bd      	mov	sp, r7
 8006582:	bd90      	pop	{r4, r7, pc}

08006584 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>:

      void
      _M_initialize_value(bool __x)
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	70fb      	strb	r3, [r7, #3]
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d012      	beq.n	80065c2 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x3e>
	  __builtin_memset(__p, __x ? ~0 : 0,
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x24>
 80065a2:	f04f 34ff 	mov.w	r4, #4294967295
 80065a6:	e000      	b.n	80065aa <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x26>
 80065a8:	2400      	movs	r4, #0
			   (this->_M_impl._M_end_addr() - __p)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fb0d 	bl	8006bcc <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 80065b2:	4602      	mov	r2, r0
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	1ad3      	subs	r3, r2, r3
	  __builtin_memset(__p, __x ? ~0 : 0,
 80065b8:	461a      	mov	r2, r3
 80065ba:	4621      	mov	r1, r4
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f01c f993 	bl	80228e8 <memset>
			   * sizeof(_Bit_type));
      }
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd90      	pop	{r4, r7, pc}

080065ca <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	4611      	mov	r1, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fb17 	bl	8006c0e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f103 0208 	add.w	r2, r3, #8
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	3308      	adds	r3, #8
 80065ea:	4619      	mov	r1, r3
 80065ec:	4610      	mov	r0, r2
 80065ee:	f000 fb40 	bl	8006c72 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f103 020c 	add.w	r2, r3, #12
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f000 fb61 	bl	8006cc6 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8006622:	b590      	push	{r4, r7, lr}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800662e:	68fc      	ldr	r4, [r7, #12]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fb67 	bl	8006d04 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006636:	4602      	mov	r2, r0
 8006638:	f107 0308 	add.w	r3, r7, #8
 800663c:	4619      	mov	r1, r3
 800663e:	4620      	mov	r0, r4
 8006640:	f000 fb6b 	bl	8006d1a <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	bd90      	pop	{r4, r7, pc}

0800664e <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fb77 	bl	8006d4c <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800665e:	4603      	mov	r3, r0
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fb77 	bl	8006d66 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8006678:	4603      	mov	r3, r0
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>:
      void reset(pointer __p) noexcept
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff ffd3 	bl	800664e <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80066a8:	4603      	mov	r3, r0
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff ffcd 	bl	800664e <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80066b4:	4602      	mov	r2, r0
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6013      	str	r3, [r2, #0]
	if (__old_p)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d006      	beq.n	80066ce <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_+0x36>
	  _M_deleter()(__old_p);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fb50 	bl	8006d66 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 80066c6:	4603      	mov	r3, r0
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	4798      	blx	r3
      }
 80066ce:	bf00      	nop
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	605a      	str	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	609a      	str	r2, [r3, #8]
	{ }
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
	if (__p)
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fb1c 	bl	8006d80 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>
      }
 8006748:	bf00      	nop
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>:
   * destroy() even if _Tp has a trivial destructor.
   */

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	60b9      	str	r1, [r7, #8]
 8006770:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	429a      	cmp	r2, r3
 8006778:	d00b      	beq.n	8006792 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0x2c>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fb0f 	bl	8006d9e <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8006780:	4603      	mov	r3, r0
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fb15 	bl	8006db4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
      for (; __first != __last; ++__first)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3308      	adds	r3, #8
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	e7ef      	b.n	8006772 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0xc>
					      std::__addressof(*__first));
#endif
    }
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fb12 	bl	8006dd0 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 80067ac:	4603      	mov	r3, r0
 80067ae:	461a      	mov	r2, r3
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 fb17 	bl	8006de6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>
 80067b8:	bf00      	nop
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>:
      _S_use_relocate()
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 f805 	bl	80067d6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80067cc:	4603      	mov	r3, r0
      }
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80067de:	2301      	movs	r3, #1
      }
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80067ec:	b5b0      	push	{r4, r5, r7, lr}
 80067ee:	b08c      	sub	sp, #48	; 0x30
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80067f8:	4a59      	ldr	r2, [pc, #356]	; (8006960 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x174>)
 80067fa:	2101      	movs	r1, #1
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fb0b 	bl	8006e18 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>
 8006802:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff fd9a 	bl	800634a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 8006816:	4603      	mov	r3, r0
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	f107 0214 	add.w	r2, r7, #20
 800681e:	f107 0308 	add.w	r3, r7, #8
 8006822:	4611      	mov	r1, r2
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fb3e 	bl	8006ea6 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800682a:	4603      	mov	r3, r0
 800682c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fb4c 	bl	8006ed0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>
 8006838:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800683e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	18d5      	adds	r5, r2, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fac1 	bl	8006dd0 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800684e:	4603      	mov	r3, r0
 8006850:	461a      	mov	r2, r3
 8006852:	4629      	mov	r1, r5
 8006854:	4620      	mov	r0, r4
 8006856:	f7ff ffa0 	bl	800679a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800685a:	2300      	movs	r3, #0
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800685e:	f7ff ffaf 	bl	80067c0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d027      	beq.n	80068b8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006868:	f107 0308 	add.w	r3, r7, #8
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fb57 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006872:	4603      	mov	r3, r0
 8006874:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff ff69 	bl	8006750 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800687e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	4621      	mov	r1, r4
 8006884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006886:	f000 fb37 	bl	8006ef8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 800688a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	3308      	adds	r3, #8
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006892:	f107 0308 	add.w	r3, r7, #8
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fb42 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800689c:	4603      	mov	r3, r0
 800689e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff ff54 	bl	8006750 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80068a8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80068aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ac:	6a39      	ldr	r1, [r7, #32]
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 fb22 	bl	8006ef8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 80068b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80068b6:	e026      	b.n	8006906 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80068b8:	f107 0308 	add.w	r3, r7, #8
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fb2f 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80068c2:	4603      	mov	r3, r0
 80068c4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff ff41 	bl	8006750 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80068ce:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	4621      	mov	r1, r4
 80068d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068d6:	f000 fb2e 	bl	8006f36 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 80068da:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	3308      	adds	r3, #8
 80068e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80068e2:	f107 0308 	add.w	r3, r7, #8
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fb1a 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80068ec:	4603      	mov	r3, r0
 80068ee:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff ff2c 	bl	8006750 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80068f8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80068fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068fc:	6a39      	ldr	r1, [r7, #32]
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 fb19 	bl	8006f36 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8006904:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006906:	f7ff ff5b 	bl	80067c0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800690a:	4603      	mov	r3, r0
 800690c:	f083 0301 	eor.w	r3, r3, #1
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff ff19 	bl	8006750 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800691e:	4603      	mov	r3, r0
 8006920:	461a      	mov	r2, r3
 8006922:	6a39      	ldr	r1, [r7, #32]
 8006924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006926:	f7ff ff1e 	bl	8006766 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800692a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8006936:	461a      	mov	r2, r3
 8006938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800693a:	f7ff fef6 	bl	800672a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006948:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	441a      	add	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	609a      	str	r2, [r3, #8]
    }
 8006956:	bf00      	nop
 8006958:	3730      	adds	r7, #48	; 0x30
 800695a:	46bd      	mov	sp, r7
 800695c:	bdb0      	pop	{r4, r5, r7, pc}
 800695e:	bf00      	nop
 8006960:	080276d8 	.word	0x080276d8

08006964 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 8006984:	b5b0      	push	{r4, r5, r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800698c:	1d3b      	adds	r3, r7, #4
 800698e:	4618      	mov	r0, r3
 8006990:	f000 faea 	bl	8006f68 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 8006994:	f107 030c 	add.w	r3, r7, #12
 8006998:	4629      	mov	r1, r5
 800699a:	4618      	mov	r0, r3
 800699c:	f000 faef 	bl	8006f7e <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 80069a0:	bf00      	nop
 80069a2:	4620      	mov	r0, r4
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bdb0      	pop	{r4, r5, r7, pc}

080069aa <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 80069b6:	f107 0208 	add.w	r2, r7, #8
 80069ba:	f107 030c 	add.w	r3, r7, #12
 80069be:	4611      	mov	r1, r2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 faea 	bl	8006f9a <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d017      	beq.n	80069fc <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x52>
				std::__lg(__last - __first) * 2,
 80069cc:	f107 020c 	add.w	r2, r7, #12
 80069d0:	f107 0308 	add.w	r3, r7, #8
 80069d4:	4611      	mov	r1, r2
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 fa65 	bl	8006ea6 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80069dc:	4603      	mov	r3, r0
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fa fc62 	bl	80012a8 <_ZSt4__lgi>
 80069e4:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 80069e6:	005a      	lsls	r2, r3, #1
 80069e8:	793b      	ldrb	r3, [r7, #4]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 faec 	bl	8006fca <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 80069f2:	793a      	ldrb	r2, [r7, #4]
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fb1e 	bl	8007038 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006a1c:	b590      	push	{r4, r7, lr}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fa fdbe 	bl	80015aa <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fb39 	bl	80070a8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00f      	beq.n	8006a5c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006a3c:	687c      	ldr	r4, [r7, #4]
 8006a3e:	463b      	mov	r3, r7
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 fb41 	bl	80070c8 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006a46:	4603      	mov	r3, r0
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 fb47 	bl	80070de <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a05      	ldr	r2, [pc, #20]	; (8006a68 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8006a54:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a04      	ldr	r2, [pc, #16]	; (8006a6c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8006a5a:	609a      	str	r2, [r3, #8]
      }
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd90      	pop	{r4, r7, pc}
 8006a66:	bf00      	nop
 8006a68:	08007103 	.word	0x08007103
 8006a6c:	08007145 	.word	0x08007145

08006a70 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
	...

08006a88 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006a88:	b590      	push	{r4, r7, lr}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fa fd88 	bl	80015aa <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fb70 	bl	8007182 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00f      	beq.n	8006ac8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006aa8:	687c      	ldr	r4, [r7, #4]
 8006aaa:	463b      	mov	r3, r7
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fb73 	bl	8007198 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 fb79 	bl	80071ae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a05      	ldr	r2, [pc, #20]	; (8006ad4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8006ac0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a04      	ldr	r2, [pc, #16]	; (8006ad8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8006ac6:	609a      	str	r2, [r3, #8]
      }
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd90      	pop	{r4, r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	080071d3 	.word	0x080071d3
 8006ad8:	08007215 	.word	0x08007215

08006adc <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fbb3 	bl	8007252 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8006aec:	4603      	mov	r3, r0
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>:
struct EiAlloc
{
    typedef T value_type;
    EiAlloc() = default;
    template <class U>
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>:
	  _Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
	  : _Bit_alloc_type(__a)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fba5 	bl	800726c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
	  { }
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>:
      _M_deallocate()
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d018      	beq.n	8006b6e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 f844 	bl	8006bcc <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 8006b44:	4602      	mov	r2, r0
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	109b      	asrs	r3, r3, #2
 8006b4e:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8006b50:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691a      	ldr	r2, [r3, #16]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 8006b5c:	4413      	add	r3, r2
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	4619      	mov	r1, r3
 8006b62:	f000 fb98 	bl	8007296 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
	    _M_impl._M_reset();
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fba3 	bl	80072b4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>
      }
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006b76:	b590      	push	{r4, r7, lr}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 8006b80:	687c      	ldr	r4, [r7, #4]
 8006b82:	6838      	ldr	r0, [r7, #0]
 8006b84:	f000 f80a 	bl	8006b9c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 fbb1 	bl	80072f4 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 8006b92:	4603      	mov	r3, r0
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd90      	pop	{r4, r7, pc}

08006b9c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>:
      _S_nword(size_t __n)
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	331f      	adds	r3, #31
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d008      	beq.n	8006bee <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	3b04      	subs	r3, #4
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff ffe7 	bl	8006bb6 <_ZSt11__addressofImEPT_RS0_>
 8006be8:	4603      	mov	r3, r0
 8006bea:	3304      	adds	r3, #4
 8006bec:	e000      	b.n	8006bf0 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 8006bee:	2300      	movs	r3, #0
	}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff ffed 	bl	8006bf8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	f107 0308 	add.w	r3, r7, #8
 8006c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c28:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8006c2c:	6838      	ldr	r0, [r7, #0]
 8006c2e:	f7ff ffe3 	bl	8006bf8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006c32:	4602      	mov	r2, r0
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c3a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006c3e:	f107 0308 	add.w	r3, r7, #8
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff ffd8 	bl	8006bf8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c50:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006c54:	bf00      	nop
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff ffed 	bl	8006c5c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006c82:	4603      	mov	r3, r0
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006c88:	6838      	ldr	r0, [r7, #0]
 8006c8a:	f7ff ffe7 	bl	8006c5c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006c96:	f107 030c 	add.w	r3, r7, #12
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff ffde 	bl	8006c5c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	601a      	str	r2, [r3, #0]
    }
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ffed 	bl	8006cb0 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006cdc:	6838      	ldr	r0, [r7, #0]
 8006cde:	f7ff ffe7 	bl	8006cb0 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006cea:	f107 030c 	add.w	r3, r7, #12
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff ffde 	bl	8006cb0 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	601a      	str	r2, [r3, #0]
    }
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8006d1a:	b5b0      	push	{r4, r5, r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8006d26:	68fc      	ldr	r4, [r7, #12]
 8006d28:	68b8      	ldr	r0, [r7, #8]
 8006d2a:	f000 faf1 	bl	8007310 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d2e:	4605      	mov	r5, r0
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff ffe7 	bl	8006d04 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d36:	4603      	mov	r3, r0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 faf2 	bl	8007326 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bdb0      	pop	{r4, r5, r7, pc}

08006d4c <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fb03 	bl	8007362 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fb02 	bl	800737a <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8006d76:	4603      	mov	r3, r0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 faff 	bl	8007394 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 faf3 	bl	80073ae <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 8006de6:	b590      	push	{r4, r7, lr}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff ffec 	bl	8006dd0 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006df8:	4604      	mov	r4, r0
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	2008      	movs	r0, #8
 8006e00:	f7fa fa61 	bl	80012c6 <_ZnwjPv>
 8006e04:	4603      	mov	r3, r0
 8006e06:	4622      	mov	r2, r4
 8006e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e0c:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd90      	pop	{r4, r7, pc}

08006e18 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8006e18:	b590      	push	{r4, r7, lr}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fad1 	bl	80073cc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f7ff fabf 	bl	80063b0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006e32:	4603      	mov	r3, r0
 8006e34:	1ae2      	subs	r2, r4, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	bf34      	ite	cc
 8006e3c:	2301      	movcc	r3, #1
 8006e3e:	2300      	movcs	r3, #0
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f018 ff5d 	bl	801fd06 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f7ff faaf 	bl	80063b0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006e52:	4604      	mov	r4, r0
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f7ff faab 	bl	80063b0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	f107 0208 	add.w	r2, r7, #8
 8006e62:	f107 0310 	add.w	r3, r7, #16
 8006e66:	4611      	mov	r1, r2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fac0 	bl	80073ee <_ZSt3maxIjERKT_S2_S2_>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4423      	add	r3, r4
 8006e74:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f7ff fa9a 	bl	80063b0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d306      	bcc.n	8006e92 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x7a>
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 faa1 	bl	80073cc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d904      	bls.n	8006e9c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x84>
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fa9a 	bl	80073cc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	e000      	b.n	8006e9e <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x86>
 8006e9c:	697b      	ldr	r3, [r7, #20]
      }
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd90      	pop	{r4, r7, pc}

08006ea6 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006ea6:	b590      	push	{r4, r7, lr}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f835 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	681c      	ldr	r4, [r3, #0]
 8006eba:	6838      	ldr	r0, [r7, #0]
 8006ebc:	f000 f830 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	1ae3      	subs	r3, r4, r3
 8006ec6:	10db      	asrs	r3, r3, #3
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd90      	pop	{r4, r7, pc}

08006ed0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d006      	beq.n	8006eee <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x1e>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fa96 	bl	8007416 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>
 8006eea:	4603      	mov	r3, r0
 8006eec:	e000      	b.n	8006ef0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x20>
 8006eee:	2300      	movs	r3, #0
      }
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8006ef8:	b590      	push	{r4, r7, lr}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006f06:	f88d 4000 	strb.w	r4, [sp]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	68b9      	ldr	r1, [r7, #8]
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 fa8e 	bl	8007432 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>
 8006f16:	4603      	mov	r3, r0
      }
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd90      	pop	{r4, r7, pc}

08006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006f36:	b590      	push	{r4, r7, lr}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	607a      	str	r2, [r7, #4]
 8006f42:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fa86 	bl	8007456 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	68b8      	ldr	r0, [r7, #8]
 8006f4e:	f000 fa82 	bl	8007456 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 8006f52:	4601      	mov	r1, r0
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 fa8b 	bl	8007474 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>
 8006f5e:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd90      	pop	{r4, r7, pc}

08006f68 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8006f88:	463b      	mov	r3, r7
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff ffec 	bl	8006f68 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006f9a:	b590      	push	{r4, r7, lr}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff ffbb 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006faa:	4603      	mov	r3, r0
 8006fac:	681c      	ldr	r4, [r3, #0]
 8006fae:	6838      	ldr	r0, [r7, #0]
 8006fb0:	f7ff ffb6 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	429c      	cmp	r4, r3
 8006fba:	bf14      	ite	ne
 8006fbc:	2301      	movne	r3, #1
 8006fbe:	2300      	moveq	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd90      	pop	{r4, r7, pc}

08006fca <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b086      	sub	sp, #24
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8006fd8:	f107 020c 	add.w	r2, r7, #12
 8006fdc:	f107 0308 	add.w	r3, r7, #8
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff ff5f 	bl	8006ea6 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b10      	cmp	r3, #16
 8006fec:	bfcc      	ite	gt
 8006fee:	2301      	movgt	r3, #1
 8006ff0:	2300      	movle	r3, #0
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d01c      	beq.n	8007032 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  if (__depth_limit == 0)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 8006ffe:	783b      	ldrb	r3, [r7, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 fa66 	bl	80074d6 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
 800700a:	e012      	b.n	8007032 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  --__depth_limit;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3b01      	subs	r3, #1
 8007010:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8007012:	783a      	ldrb	r2, [r7, #0]
 8007014:	68b9      	ldr	r1, [r7, #8]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 fa74 	bl	8007504 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>
 800701c:	4603      	mov	r3, r0
 800701e:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8007020:	783b      	ldrb	r3, [r7, #0]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	6978      	ldr	r0, [r7, #20]
 8007028:	f7ff ffcf 	bl	8006fca <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  __last = __cut;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8007030:	e7d2      	b.n	8006fd8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xe>
    }
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8007044:	f107 020c 	add.w	r2, r7, #12
 8007048:	f107 0308 	add.w	r3, r7, #8
 800704c:	4611      	mov	r1, r2
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff ff29 	bl	8006ea6 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007054:	4603      	mov	r3, r0
 8007056:	2b10      	cmp	r3, #16
 8007058:	bfcc      	ite	gt
 800705a:	2301      	movgt	r3, #1
 800705c:	2300      	movle	r3, #0
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d018      	beq.n	8007096 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8007064:	f107 030c 	add.w	r3, r7, #12
 8007068:	2110      	movs	r1, #16
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fa8c 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007070:	4603      	mov	r3, r0
 8007072:	793a      	ldrb	r2, [r7, #4]
 8007074:	4619      	mov	r1, r3
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fa9e 	bl	80075b8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800707c:	f107 030c 	add.w	r3, r7, #12
 8007080:	2110      	movs	r1, #16
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fa80 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007088:	4603      	mov	r3, r0
 800708a:	793a      	ldrb	r2, [r7, #4]
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fafe 	bl	8007690 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 8007094:	e004      	b.n	80070a0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 8007096:	793a      	ldrb	r2, [r7, #4]
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fa8c 	bl	80075b8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	bf14      	ite	ne
 80070b6:	2301      	movne	r3, #1
 80070b8:	2300      	moveq	r3, #0
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80070de:	b590      	push	{r4, r7, lr}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80070e8:	6838      	ldr	r0, [r7, #0]
 80070ea:	f7ff ffed 	bl	80070c8 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80070ee:	4603      	mov	r3, r0
 80070f0:	4622      	mov	r2, r4
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fb03 	bl	8007700 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd90      	pop	{r4, r7, pc}

08007102 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007104:	b085      	sub	sp, #20
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fb0e 	bl	8007732 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8007116:	4604      	mov	r4, r0
 8007118:	68b8      	ldr	r0, [r7, #8]
 800711a:	f7ff fadc 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800711e:	4605      	mov	r5, r0
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff fad8 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007126:	4606      	mov	r6, r0
 8007128:	6838      	ldr	r0, [r7, #0]
 800712a:	f7ff fadf 	bl	80066ec <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800712e:	4603      	mov	r3, r0
 8007130:	4632      	mov	r2, r6
 8007132:	4629      	mov	r1, r5
 8007134:	4620      	mov	r0, r4
 8007136:	f000 fb0d 	bl	8007754 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800713a:	4603      	mov	r3, r0
      }
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007144 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007144:	b590      	push	{r4, r7, lr}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	4613      	mov	r3, r2
 8007150:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d109      	bne.n	800716c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fb20 	bl	800779e <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800715e:	4604      	mov	r4, r0
 8007160:	68b8      	ldr	r0, [r7, #8]
 8007162:	f000 fae6 	bl	8007732 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8007166:	4603      	mov	r3, r0
 8007168:	6023      	str	r3, [r4, #0]
	    break;
 800716a:	e005      	b.n	8007178 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	461a      	mov	r2, r3
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fb1f 	bl	80077b6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8007178:	2300      	movs	r3, #0
      }
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	bd90      	pop	{r4, r7, pc}

08007182 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
	  { return true; }
 800718a:	2301      	movs	r3, #1
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80071ae:	b590      	push	{r4, r7, lr}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80071b8:	6838      	ldr	r0, [r7, #0]
 80071ba:	f7ff ffed 	bl	8007198 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80071be:	4603      	mov	r3, r0
 80071c0:	4622      	mov	r2, r4
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fb21 	bl	800780c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd90      	pop	{r4, r7, pc}

080071d2 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80071d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	60f8      	str	r0, [r7, #12]
 80071da:	60b9      	str	r1, [r7, #8]
 80071dc:	607a      	str	r2, [r7, #4]
 80071de:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 fb2c 	bl	800783e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80071e6:	4604      	mov	r4, r0
 80071e8:	68b8      	ldr	r0, [r7, #8]
 80071ea:	f7ff fa74 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80071ee:	4605      	mov	r5, r0
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff fa70 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80071f6:	4606      	mov	r6, r0
 80071f8:	6838      	ldr	r0, [r7, #0]
 80071fa:	f7ff fa77 	bl	80066ec <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80071fe:	4603      	mov	r3, r0
 8007200:	4632      	mov	r2, r6
 8007202:	4629      	mov	r1, r5
 8007204:	4620      	mov	r0, r4
 8007206:	f000 fb2b 	bl	8007860 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800720a:	4603      	mov	r3, r0
      }
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007214 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007214:	b590      	push	{r4, r7, lr}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d109      	bne.n	800723c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 fb3e 	bl	80078aa <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800722e:	4604      	mov	r4, r0
 8007230:	68b8      	ldr	r0, [r7, #8]
 8007232:	f000 fb04 	bl	800783e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8007236:	4603      	mov	r3, r0
 8007238:	6023      	str	r3, [r4, #0]
	    break;
 800723a:	e005      	b.n	8007248 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800723c:	79fb      	ldrb	r3, [r7, #7]
 800723e:	461a      	mov	r2, r3
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fb3d 	bl	80078c2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8007248:	2300      	movs	r3, #0
      }
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	bd90      	pop	{r4, r7, pc}

08007252 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4618      	mov	r0, r3
 800725e:	f000 fb5b 	bl	8007918 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007262:	4603      	mov	r3, r0
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4618      	mov	r0, r3
 8007278:	f7fa f929 	bl	80014ce <_ZNSt13_Bit_iteratorC1Ev>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3308      	adds	r3, #8
 8007280:	4618      	mov	r0, r3
 8007282:	f7fa f924 	bl	80014ce <_ZNSt13_Bit_iteratorC1Ev>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	611a      	str	r2, [r3, #16]
	{ }
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 fb42 	bl	8007930 <_ZN2ei7EiAllocImE10deallocateEPmj>
 80072ac:	bf00      	nop
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
	  _M_start = _M_finish = _Bit_iterator();
 80072bc:	f107 0308 	add.w	r3, r7, #8
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fa f904 	bl	80014ce <_ZNSt13_Bit_iteratorC1Ev>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3308      	adds	r3, #8
 80072ca:	f107 0208 	add.w	r2, r7, #8
 80072ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80072d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f103 0208 	add.w	r2, r3, #8
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80072e2:	e883 0003 	stmia.w	r3, {r0, r1}
	  _M_end_of_storage = _Bit_pointer();
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	611a      	str	r2, [r3, #16]
	}
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fb22 	bl	800794a <_ZN2ei7EiAllocImE8allocateEj>
 8007306:	4603      	mov	r3, r0
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8007326:	b590      	push	{r4, r7, lr}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8007332:	68fc      	ldr	r4, [r7, #12]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fce5 	bl	8006d04 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800733a:	4603      	mov	r3, r0
 800733c:	4619      	mov	r1, r3
 800733e:	4620      	mov	r0, r4
 8007340:	f000 fb14 	bl	800796c <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	1d1c      	adds	r4, r3, #4
 8007348:	68b8      	ldr	r0, [r7, #8]
 800734a:	f7ff ffe1 	bl	8007310 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800734e:	4603      	mov	r3, r0
 8007350:	4619      	mov	r1, r3
 8007352:	4620      	mov	r0, r4
 8007354:	f000 fb1d 	bl	8007992 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	bd90      	pop	{r4, r7, pc}

08007362 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fb22 	bl	80079b4 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8007370:	4603      	mov	r3, r0
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fb23 	bl	80079d0 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800738a:	4603      	mov	r3, r0
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>:
        allocs[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = allocs.find(p);
        ei_dsp_free(p,size_p->second);
        allocs.erase(size_p);
#else
        ei_dsp_free(p,0);
 80073a0:	68b8      	ldr	r0, [r7, #8]
 80073a2:	f012 fdef 	bl	8019f84 <_Z7ei_freePv>
#endif
    }
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 80073ae:	b40e      	push	{r1, r2, r3}
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 80073b8:	6978      	ldr	r0, [r7, #20]
 80073ba:	f000 fb15 	bl	80079e8 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073c8:	b003      	add	sp, #12
 80073ca:	4770      	bx	lr

080073cc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fb2a 	bl	8007a30 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80073dc:	4603      	mov	r3, r0
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 fb0c 	bl	80079fc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>
 80073e4:	4603      	mov	r3, r0
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d201      	bcs.n	8007408 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	e000      	b.n	800740a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007408:	687b      	ldr	r3, [r7, #4]
    }
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>:
      allocate(_Alloc& __a, size_type __n)
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fb0f 	bl	8007a46 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>
 8007428:	4603      	mov	r3, r0
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
 800743e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	68b9      	ldr	r1, [r7, #8]
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fb0e 	bl	8007a68 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800744c:	4603      	mov	r3, r0
      }
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800745e:	f107 030c 	add.w	r3, r7, #12
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fb1c 	bl	8007aa2 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007474:	b590      	push	{r4, r7, lr}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 8007486:	f107 0208 	add.w	r2, r7, #8
 800748a:	f107 030c 	add.w	r3, r7, #12
 800748e:	4611      	mov	r1, r2
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fb18 	bl	8007ac6 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d017      	beq.n	80074cc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x58>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800749c:	6978      	ldr	r0, [r7, #20]
 800749e:	f7ff fc7e 	bl	8006d9e <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80074a2:	4604      	mov	r4, r0
 80074a4:	f107 030c 	add.w	r3, r7, #12
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fb2e 	bl	8007b0a <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>
 80074ae:	4603      	mov	r3, r0
 80074b0:	461a      	mov	r2, r3
 80074b2:	4621      	mov	r1, r4
 80074b4:	6838      	ldr	r0, [r7, #0]
 80074b6:	f000 fb34 	bl	8007b22 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
	  for (; __first != __last; ++__first, (void)++__cur)
 80074ba:	f107 030c 	add.w	r3, r7, #12
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fb12 	bl	8007ae8 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	3308      	adds	r3, #8
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	e7dc      	b.n	8007486 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x12>
	  return __cur;
 80074cc:	697b      	ldr	r3, [r7, #20]
    }
 80074ce:	4618      	mov	r0, r3
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd90      	pop	{r4, r7, pc}

080074d6 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
 80074e2:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 80074e4:	783b      	ldrb	r3, [r7, #0]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 fb2c 	bl	8007b48 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
      std::__sort_heap(__first, __middle, __comp);
 80074f0:	463b      	mov	r3, r7
 80074f2:	461a      	mov	r2, r3
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fb58 	bl	8007bac <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
    }
 80074fc:	bf00      	nop
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8007510:	f107 020c 	add.w	r2, r7, #12
 8007514:	f107 0308 	add.w	r3, r7, #8
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff fcc3 	bl	8006ea6 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007520:	4603      	mov	r3, r0
 8007522:	0fda      	lsrs	r2, r3, #31
 8007524:	4413      	add	r3, r2
 8007526:	105b      	asrs	r3, r3, #1
 8007528:	461a      	mov	r2, r3
 800752a:	f107 030c 	add.w	r3, r7, #12
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f000 f829 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007536:	4603      	mov	r3, r0
 8007538:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800753a:	f107 030c 	add.w	r3, r7, #12
 800753e:	2101      	movs	r1, #1
 8007540:	4618      	mov	r0, r3
 8007542:	f000 f821 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007546:	4604      	mov	r4, r0
 8007548:	f107 0308 	add.w	r3, r7, #8
 800754c:	2101      	movs	r1, #1
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fb52 	bl	8007bf8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>
 8007554:	4602      	mov	r2, r0
 8007556:	793b      	ldrb	r3, [r7, #4]
 8007558:	f88d 3000 	strb.w	r3, [sp]
 800755c:	4613      	mov	r3, r2
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	4621      	mov	r1, r4
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fb7d 	bl	8007c62 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	2101      	movs	r1, #1
 800756e:	4618      	mov	r0, r3
 8007570:	f000 f80a 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007574:	793b      	ldrb	r3, [r7, #4]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	f000 fbc7 	bl	8007d0c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>
 800757e:	4603      	mov	r3, r0
    }
 8007580:	4618      	mov	r0, r3
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	bd90      	pop	{r4, r7, pc}

08007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	4413      	add	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	f107 020c 	add.w	r2, r7, #12
 80075a2:	f107 0308 	add.w	r3, r7, #8
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff f9db 	bl	8006964 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 80075b8:	b5b0      	push	{r4, r5, r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 80075c4:	f107 0208 	add.w	r2, r7, #8
 80075c8:	f107 030c 	add.w	r3, r7, #12
 80075cc:	4611      	mov	r1, r2
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fbe4 	bl	8007d9c <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d156      	bne.n	8007688 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd0>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80075da:	f107 030c 	add.w	r3, r7, #12
 80075de:	2101      	movs	r1, #1
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff ffd1 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80075e6:	4603      	mov	r3, r0
 80075e8:	61fb      	str	r3, [r7, #28]
 80075ea:	f107 0208 	add.w	r2, r7, #8
 80075ee:	f107 031c 	add.w	r3, r7, #28
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff fcd0 	bl	8006f9a <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d044      	beq.n	800768a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd2>
	  if (__comp(__i, __first))
 8007600:	1d3b      	adds	r3, r7, #4
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	69f9      	ldr	r1, [r7, #28]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fb0f 	bl	8007c2a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d02d      	beq.n	800766e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xb6>
		__val = _GLIBCXX_MOVE(*__i);
 8007612:	f107 031c 	add.w	r3, r7, #28
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fbe9 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800761c:	4603      	mov	r3, r0
 800761e:	4618      	mov	r0, r3
 8007620:	f000 fbf1 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007624:	4602      	mov	r2, r0
 8007626:	f107 0314 	add.w	r3, r7, #20
 800762a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800762e:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8007632:	f107 031c 	add.w	r3, r7, #28
 8007636:	2101      	movs	r1, #1
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff ffa5 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800763e:	4603      	mov	r3, r0
 8007640:	461a      	mov	r2, r3
 8007642:	69f9      	ldr	r1, [r7, #28]
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 fbe9 	bl	8007e1c <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>
	      *__first = _GLIBCXX_MOVE(__val);
 800764a:	f107 0314 	add.w	r3, r7, #20
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fbd9 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007654:	4604      	mov	r4, r0
 8007656:	f107 030c 	add.w	r3, r7, #12
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fbc7 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007660:	4603      	mov	r3, r0
 8007662:	4622      	mov	r2, r4
 8007664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007668:	e883 0003 	stmia.w	r3, {r0, r1}
 800766c:	e006      	b.n	800767c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xc4>
	    std::__unguarded_linear_insert(__i,
 800766e:	7938      	ldrb	r0, [r7, #4]
 8007670:	f000 fbec 	bl	8007e4c <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8007674:	4629      	mov	r1, r5
 8007676:	69f8      	ldr	r0, [r7, #28]
 8007678:	f000 fbfc 	bl	8007e74 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800767c:	f107 031c 	add.w	r3, r7, #28
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fba3 	bl	8007dcc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 8007686:	e7b0      	b.n	80075ea <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x32>
      if (__first == __last) return;
 8007688:	bf00      	nop
    }
 800768a:	3720      	adds	r7, #32
 800768c:	46bd      	mov	sp, r7
 800768e:	bdb0      	pop	{r4, r5, r7, pc}

08007690 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8007690:	b590      	push	{r4, r7, lr}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	f107 0208 	add.w	r2, r7, #8
 80076a4:	f107 0314 	add.w	r3, r7, #20
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fc75 	bl	8006f9a <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00c      	beq.n	80076d0 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x40>
	std::__unguarded_linear_insert(__i,
 80076b6:	7938      	ldrb	r0, [r7, #4]
 80076b8:	f000 fbc8 	bl	8007e4c <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 80076bc:	4621      	mov	r1, r4
 80076be:	6978      	ldr	r0, [r7, #20]
 80076c0:	f000 fbd8 	bl	8007e74 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80076c4:	f107 0314 	add.w	r3, r7, #20
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fb7f 	bl	8007dcc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 80076ce:	e7e7      	b.n	80076a0 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x10>
    }
 80076d0:	bf00      	nop
 80076d2:	371c      	adds	r7, #28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd90      	pop	{r4, r7, pc}

080076d8 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d201      	bcs.n	80076f2 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	e000      	b.n	80076f4 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80076f2:	687b      	ldr	r3, [r7, #4]
    }
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8007700:	b590      	push	{r4, r7, lr}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800770c:	68b8      	ldr	r0, [r7, #8]
 800770e:	f7ff fcdb 	bl	80070c8 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8007712:	4603      	mov	r3, r0
 8007714:	681c      	ldr	r4, [r3, #0]
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7f9 ff31 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 800771c:	4603      	mov	r3, r0
 800771e:	4619      	mov	r1, r3
 8007720:	2004      	movs	r0, #4
 8007722:	f7f9 fdd0 	bl	80012c6 <_ZnwjPv>
 8007726:	4603      	mov	r3, r0
 8007728:	601c      	str	r4, [r3, #0]
 800772a:	bf00      	nop
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	bd90      	pop	{r4, r7, pc}

08007732 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fbef 	bl	8007f1e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8007740:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fbf7 	bl	8007f36 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8007748:	4603      	mov	r3, r0
 800774a:	bf00      	nop
	}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007758:	b086      	sub	sp, #24
 800775a:	af02      	add	r7, sp, #8
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fbf1 	bl	8007f4c <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800776a:	4604      	mov	r4, r0
 800776c:	68b8      	ldr	r0, [r7, #8]
 800776e:	f7fe ffb2 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007772:	4605      	mov	r5, r0
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7fe ffae 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800777a:	4606      	mov	r6, r0
 800777c:	6838      	ldr	r0, [r7, #0]
 800777e:	f7fe ffb5 	bl	80066ec <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007782:	4603      	mov	r3, r0
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	4633      	mov	r3, r6
 8007788:	462a      	mov	r2, r5
 800778a:	4621      	mov	r1, r4
 800778c:	4640      	mov	r0, r8
 800778e:	f000 fbe8 	bl	8007f62 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8007792:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800779e <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7f9 fee9 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 80077ac:	4603      	mov	r3, r0
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80077b6:	b5b0      	push	{r4, r5, r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	4613      	mov	r3, r2
 80077c2:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d016      	beq.n	80077f8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	dc19      	bgt.n	8007802 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d002      	beq.n	80077d8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d00a      	beq.n	80077ec <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80077d6:	e014      	b.n	8007802 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7ff ffe0 	bl	800779e <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 80077de:	4604      	mov	r4, r0
 80077e0:	68b8      	ldr	r0, [r7, #8]
 80077e2:	f7ff ffa6 	bl	8007732 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80077e6:	4603      	mov	r3, r0
 80077e8:	6023      	str	r3, [r4, #0]
	      break;
 80077ea:	e00a      	b.n	8007802 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80077ec:	462a      	mov	r2, r5
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fbda 	bl	8007faa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80077f6:	e004      	b.n	8007802 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80077f8:	4621      	mov	r1, r4
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 fbee 	bl	8007fdc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007800:	bf00      	nop
	  return false;
 8007802:	2300      	movs	r3, #0
	}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bdb0      	pop	{r4, r5, r7, pc}

0800780c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007818:	68b8      	ldr	r0, [r7, #8]
 800781a:	f7ff fcbd 	bl	8007198 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 800781e:	4604      	mov	r4, r0
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7f9 feac 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 8007826:	4603      	mov	r3, r0
 8007828:	4619      	mov	r1, r3
 800782a:	2004      	movs	r0, #4
 800782c:	f7f9 fd4b 	bl	80012c6 <_ZnwjPv>
 8007830:	4602      	mov	r2, r0
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	bd90      	pop	{r4, r7, pc}

0800783e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800783e:	b580      	push	{r7, lr}
 8007840:	b084      	sub	sp, #16
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fbd4 	bl	8007ff4 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800784c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 fbdc 	bl	800800c <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8007854:	4603      	mov	r3, r0
 8007856:	bf00      	nop
	}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007864:	b086      	sub	sp, #24
 8007866:	af02      	add	r7, sp, #8
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 fbd6 	bl	8008022 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8007876:	4604      	mov	r4, r0
 8007878:	68b8      	ldr	r0, [r7, #8]
 800787a:	f7fe ff2c 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800787e:	4605      	mov	r5, r0
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7fe ff28 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007886:	4606      	mov	r6, r0
 8007888:	6838      	ldr	r0, [r7, #0]
 800788a:	f7fe ff2f 	bl	80066ec <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800788e:	4603      	mov	r3, r0
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	4633      	mov	r3, r6
 8007894:	462a      	mov	r2, r5
 8007896:	4621      	mov	r1, r4
 8007898:	4640      	mov	r0, r8
 800789a:	f000 fbcd 	bl	8008038 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 800789e:	4603      	mov	r3, r0
    }
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080078aa <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7f9 fe63 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 80078b8:	4603      	mov	r3, r0
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80078c2:	b5b0      	push	{r4, r5, r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	4613      	mov	r3, r2
 80078ce:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d016      	beq.n	8007904 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	dc19      	bgt.n	800790e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d002      	beq.n	80078e4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d00a      	beq.n	80078f8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80078e2:	e014      	b.n	800790e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7ff ffe0 	bl	80078aa <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 80078ea:	4604      	mov	r4, r0
 80078ec:	68b8      	ldr	r0, [r7, #8]
 80078ee:	f7ff ffa6 	bl	800783e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80078f2:	4603      	mov	r3, r0
 80078f4:	6023      	str	r3, [r4, #0]
	      break;
 80078f6:	e00a      	b.n	800790e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80078f8:	462a      	mov	r2, r5
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fbbf 	bl	8008080 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8007902:	e004      	b.n	800790e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8007904:	4621      	mov	r1, r4
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 fbd3 	bl	80080b2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800790c:	bf00      	nop
	  return false;
 800790e:	2300      	movs	r3, #0
	}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bdb0      	pop	{r4, r5, r7, pc}

08007918 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fbd2 	bl	80080ca <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8007926:	4603      	mov	r3, r0
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <_ZN2ei7EiAllocImE10deallocateEPmj>:
    void deallocate(T *p, size_t n) noexcept
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800793c:	68b8      	ldr	r0, [r7, #8]
 800793e:	f012 fb21 	bl	8019f84 <_Z7ei_freePv>
    }
 8007942:	bf00      	nop
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f012 faf8 	bl	8019f50 <_Z9ei_mallocj>
 8007960:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 8007962:	68bb      	ldr	r3, [r7, #8]
    }
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8007976:	687c      	ldr	r4, [r7, #4]
 8007978:	6838      	ldr	r0, [r7, #0]
 800797a:	f7ff f9c3 	bl	8006d04 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800797e:	4603      	mov	r3, r0
 8007980:	4619      	mov	r1, r3
 8007982:	4620      	mov	r0, r4
 8007984:	f000 fbaf 	bl	80080e6 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	bd90      	pop	{r4, r7, pc}

08007992 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800799c:	6838      	ldr	r0, [r7, #0]
 800799e:	f7ff fcb7 	bl	8007310 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 80079a2:	4603      	mov	r3, r0
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3304      	adds	r3, #4
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fba1 	bl	8008108 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 80079c6:	4603      	mov	r3, r0
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fba0 	bl	800811e <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 80079de:	4603      	mov	r3, r0
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8007a04:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007a08:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fb94 	bl	8008138 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>
 8007a10:	4603      	mov	r3, r0
 8007a12:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007a14:	f107 0208 	add.w	r2, r7, #8
 8007a18:	f107 030c 	add.w	r3, r7, #12
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff fe5a 	bl	80076d8 <_ZSt3minIjERKT_S2_S2_>
 8007a24:	4603      	mov	r3, r0
 8007a26:	681b      	ldr	r3, [r3, #0]
      }
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>:
    T *allocate(size_t n)
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f012 fa7a 	bl	8019f50 <_Z9ei_mallocj>
 8007a5c:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
    }
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007a68:	b5b0      	push	{r4, r5, r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 fb6b 	bl	8008152 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	68b8      	ldr	r0, [r7, #8]
 8007a80:	f000 fb67 	bl	8008152 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007a84:	4605      	mov	r5, r0
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fb63 	bl	8008152 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	4629      	mov	r1, r5
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 fb68 	bl	8008168 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8007a98:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bdb0      	pop	{r4, r5, r7, pc}

08007aa2 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007aac:	463b      	mov	r3, r7
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fb80 	bl	80081b4 <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fb79 	bl	80081ca <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f083 0301 	eor.w	r3, r3, #1
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>:
      operator++()
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f103 0208 	add.w	r2, r3, #8
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	601a      	str	r2, [r3, #0]
	return *this;
 8007afc:	687b      	ldr	r3, [r7, #4]
      }
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>:
      operator*() const
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4618      	mov	r0, r3
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fb61 	bl	80081f6 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007b34:	4603      	mov	r3, r0
 8007b36:	461a      	mov	r2, r3
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 fb66 	bl	800820c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8007b56:	463b      	mov	r3, r7
 8007b58:	461a      	mov	r2, r3
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fb6e 	bl	800823e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	617b      	str	r3, [r7, #20]
 8007b66:	1d3a      	adds	r2, r7, #4
 8007b68:	f107 0314 	add.w	r3, r7, #20
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fbc4 	bl	80082fc <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d014      	beq.n	8007ba4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x5c>
	if (__comp(__i, __first))
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	6979      	ldr	r1, [r7, #20]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 f852 	bl	8007c2a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8007b8c:	463b      	mov	r3, r7
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 fbca 	bl	800832c <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8007b98:	f107 0314 	add.w	r3, r7, #20
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 f915 	bl	8007dcc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 8007ba2:	e7e0      	b.n	8007b66 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x1e>
    }
 8007ba4:	bf00      	nop
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8007bb8:	f107 020c 	add.w	r2, r7, #12
 8007bbc:	f107 0308 	add.w	r3, r7, #8
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff f96f 	bl	8006ea6 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	bfcc      	ite	gt
 8007bce:	2301      	movgt	r3, #1
 8007bd0:	2300      	movle	r3, #0
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x44>
	{
	  --__last;
 8007bd8:	f107 0308 	add.w	r3, r7, #8
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fbf1 	bl	80083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 fb9f 	bl	800832c <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 8007bee:	e7e3      	b.n	8007bb8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xc>
	}
    }
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	425b      	negs	r3, r3
 8007c0c:	4413      	add	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	f107 020c 	add.w	r2, r7, #12
 8007c14:	f107 0308 	add.w	r3, r7, #8
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fea2 	bl	8006964 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 8007c2a:	b5b0      	push	{r4, r5, r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 8007c36:	68fc      	ldr	r4, [r7, #12]
 8007c38:	f107 0308 	add.w	r3, r7, #8
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f8d6 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007c42:	4605      	mov	r5, r0
 8007c44:	1d3b      	adds	r3, r7, #4
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 f8d1 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	461a      	mov	r2, r3
 8007c50:	4629      	mov	r1, r5
 8007c52:	4620      	mov	r0, r4
 8007c54:	f7fb fa46 	bl	80030e4 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bdb0      	pop	{r4, r5, r7, pc}

08007c62 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	607a      	str	r2, [r7, #4]
 8007c6e:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	68b9      	ldr	r1, [r7, #8]
 8007c74:	f107 0018 	add.w	r0, r7, #24
 8007c78:	f7ff ffd7 	bl	8007c2a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d020      	beq.n	8007cc4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x62>
	  if (__comp(__b, __c))
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	f107 0018 	add.w	r0, r7, #24
 8007c8a:	f7ff ffce 	bl	8007c2a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d004      	beq.n	8007c9e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 fba5 	bl	80083e6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007c9c:	e032      	b.n	8007d04 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	  else if (__comp(__a, __c))
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	68b9      	ldr	r1, [r7, #8]
 8007ca2:	f107 0018 	add.w	r0, r7, #24
 8007ca6:	f7ff ffc0 	bl	8007c2a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d004      	beq.n	8007cba <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x58>
	    std::iter_swap(__result, __c);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fb97 	bl	80083e6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007cb8:	e024      	b.n	8007d04 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fb92 	bl	80083e6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007cc2:	e01f      	b.n	8007d04 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__a, __c))
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	f107 0018 	add.w	r0, r7, #24
 8007ccc:	f7ff ffad 	bl	8007c2a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x7e>
	std::iter_swap(__result, __a);
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fb84 	bl	80083e6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007cde:	e011      	b.n	8007d04 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__b, __c))
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	6879      	ldr	r1, [r7, #4]
 8007ce4:	f107 0018 	add.w	r0, r7, #24
 8007ce8:	f7ff ff9f 	bl	8007c2a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x9a>
	std::iter_swap(__result, __c);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fb76 	bl	80083e6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007cfa:	e003      	b.n	8007d04 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	std::iter_swap(__result, __b);
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 fb71 	bl	80083e6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007d04:	bf00      	nop
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	68f9      	ldr	r1, [r7, #12]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff ff82 	bl	8007c2a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x2c>
	    ++__first;
 8007d2c:	f107 030c 	add.w	r3, r7, #12
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 f84b 	bl	8007dcc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 8007d36:	e7f0      	b.n	8007d1a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
	  --__last;
 8007d38:	f107 0308 	add.w	r3, r7, #8
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fb41 	bl	80083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 8007d42:	463b      	mov	r3, r7
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff ff6e 	bl	8007c2a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x54>
	    --__last;
 8007d54:	f107 0308 	add.w	r3, r7, #8
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 fb33 	bl	80083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 8007d5e:	e7f0      	b.n	8007d42 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x36>
	  if (!(__first < __last))
 8007d60:	f107 0208 	add.w	r2, r7, #8
 8007d64:	f107 030c 	add.w	r3, r7, #12
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fac6 	bl	80082fc <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f083 0301 	eor.w	r3, r3, #1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x74>
	    return __first;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	e009      	b.n	8007d94 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x88>
	  std::iter_swap(__first, __last);
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 fb2f 	bl	80083e6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
	  ++__first;
 8007d88:	f107 030c 	add.w	r3, r7, #12
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f81d 	bl	8007dcc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 8007d92:	e7c2      	b.n	8007d1a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
    }
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007d9c:	b590      	push	{r4, r7, lr}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7ff f8ba 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8007dac:	4603      	mov	r3, r0
 8007dae:	681c      	ldr	r4, [r3, #0]
 8007db0:	6838      	ldr	r0, [r7, #0]
 8007db2:	f7ff f8b5 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8007db6:	4603      	mov	r3, r0
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	429c      	cmp	r4, r3
 8007dbc:	bf0c      	ite	eq
 8007dbe:	2301      	moveq	r3, #1
 8007dc0:	2300      	movne	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd90      	pop	{r4, r7, pc}

08007dcc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f103 0208 	add.w	r2, r3, #8
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]
	return *this;
 8007de0:	687b      	ldr	r3, [r7, #4]
      }
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 faf3 	bl	8008414 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 8007e2e:	4604      	mov	r4, r0
 8007e30:	68b8      	ldr	r0, [r7, #8]
 8007e32:	f000 faef 	bl	8008414 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 8007e36:	4603      	mov	r3, r0
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f000 faf4 	bl	800842a <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>
 8007e42:	4603      	mov	r3, r0
    }
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd90      	pop	{r4, r7, pc}

08007e4c <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8007e4c:	b590      	push	{r4, r7, lr}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8007e54:	1d3b      	adds	r3, r7, #4
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fb08 	bl	800846c <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	f107 030c 	add.w	r3, r7, #12
 8007e62:	4611      	mov	r1, r2
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fb0c 	bl	8008482 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 8007e6a:	bf00      	nop
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd90      	pop	{r4, r7, pc}

08007e74 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8007e74:	b590      	push	{r4, r7, lr}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 8007e7e:	1d3b      	adds	r3, r7, #4
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7ff ffb4 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007e86:	4603      	mov	r3, r0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff ffbc 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	f107 0310 	add.w	r3, r7, #16
 8007e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e98:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60fb      	str	r3, [r7, #12]
      --__next;
 8007ea0:	f107 030c 	add.w	r3, r7, #12
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fa8d 	bl	80083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 8007eaa:	f107 0110 	add.w	r1, r7, #16
 8007eae:	463b      	mov	r3, r7
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 faf3 	bl	800849e <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01b      	beq.n	8007ef6 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x82>
	  *__last = _GLIBCXX_MOVE(*__next);
 8007ebe:	f107 030c 	add.w	r3, r7, #12
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff ff93 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff ff9b 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	1d3b      	adds	r3, r7, #4
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff ff8a 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007eda:	4603      	mov	r3, r0
 8007edc:	4622      	mov	r2, r4
 8007ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ee2:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	607b      	str	r3, [r7, #4]
	  --__next;
 8007eea:	f107 030c 	add.w	r3, r7, #12
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fa68 	bl	80083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 8007ef4:	e7d9      	b.n	8007eaa <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x36>
      *__last = _GLIBCXX_MOVE(__val);
 8007ef6:	f107 0310 	add.w	r3, r7, #16
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff ff83 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007f00:	4604      	mov	r4, r0
 8007f02:	1d3b      	adds	r3, r7, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7ff ff72 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f12:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd90      	pop	{r4, r7, pc}

08007f1e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7f9 fb34 	bl	8001594 <_ZNKSt9_Any_data9_M_accessEv>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007f36:	b480      	push	{r7}
 8007f38:	b083      	sub	sp, #12
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8007f62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f64:	b085      	sub	sp, #20
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	7338      	strb	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	607a      	str	r2, [r7, #4]
 8007f6e:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8007f70:	68b8      	ldr	r0, [r7, #8]
 8007f72:	f7ff ffeb 	bl	8007f4c <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007f76:	4603      	mov	r3, r0
 8007f78:	681c      	ldr	r4, [r3, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7fe fbab 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007f80:	4603      	mov	r3, r0
 8007f82:	681d      	ldr	r5, [r3, #0]
 8007f84:	6838      	ldr	r0, [r7, #0]
 8007f86:	f7fe fba6 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	681e      	ldr	r6, [r3, #0]
 8007f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f90:	f7fe fbac 	bl	80066ec <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007f94:	4603      	mov	r3, r0
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47a0      	blx	r4
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007faa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8007faa:	b590      	push	{r4, r7, lr}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	60b9      	str	r1, [r7, #8]
 8007fb4:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8007fb6:	68b8      	ldr	r0, [r7, #8]
 8007fb8:	f7ff ffb1 	bl	8007f1e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	681c      	ldr	r4, [r3, #0]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f7f9 fadc 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4619      	mov	r1, r3
 8007fca:	2004      	movs	r0, #4
 8007fcc:	f7f9 f97b 	bl	80012c6 <_ZnwjPv>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	601c      	str	r4, [r3, #0]
	}
 8007fd4:	bf00      	nop
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd90      	pop	{r4, r7, pc}

08007fdc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fa6f 	bl	80084ca <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7f9 fac9 	bl	8001594 <_ZNKSt9_Any_data9_M_accessEv>
 8008002:	4603      	mov	r3, r0
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	7338      	strb	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008046:	68b8      	ldr	r0, [r7, #8]
 8008048:	f7ff ffeb 	bl	8008022 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800804c:	4606      	mov	r6, r0
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7fe fb41 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8008054:	4603      	mov	r3, r0
 8008056:	681c      	ldr	r4, [r3, #0]
 8008058:	6838      	ldr	r0, [r7, #0]
 800805a:	f7fe fb3c 	bl	80066d6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800805e:	4603      	mov	r3, r0
 8008060:	681d      	ldr	r5, [r3, #0]
 8008062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008064:	f7fe fb42 	bl	80066ec <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8008068:	4603      	mov	r3, r0
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	462a      	mov	r2, r5
 800806e:	4621      	mov	r1, r4
 8008070:	4630      	mov	r0, r6
 8008072:	f7fc fe28 	bl	8004cc6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8008076:	4603      	mov	r3, r0
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008080 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8008080:	b590      	push	{r4, r7, lr}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800808c:	68b8      	ldr	r0, [r7, #8]
 800808e:	f7ff ffb1 	bl	8007ff4 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8008092:	4604      	mov	r4, r0
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7f9 fa72 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 800809a:	4603      	mov	r3, r0
 800809c:	4619      	mov	r1, r3
 800809e:	2004      	movs	r0, #4
 80080a0:	f7f9 f911 	bl	80012c6 <_ZnwjPv>
 80080a4:	4602      	mov	r2, r0
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	6013      	str	r3, [r2, #0]
	}
 80080aa:	bf00      	nop
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd90      	pop	{r4, r7, pc}

080080b2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa10 	bl	80084e2 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 80080c2:	bf00      	nop
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 fa0f 	bl	80084fa <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 80080dc:	4603      	mov	r3, r0
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80080f0:	6838      	ldr	r0, [r7, #0]
 80080f2:	f7fe fe07 	bl	8006d04 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80080f6:	4603      	mov	r3, r0
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 f9f1 	bl	8008510 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800812e:	4603      	mov	r3, r0
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>:
      max_size(const _Alloc& __a) noexcept
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 8008140:	2100      	movs	r1, #0
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f9ef 	bl	8008526 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>
 8008148:	4603      	mov	r3, r0
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
    { return __it; }
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	429a      	cmp	r2, r3
 8008180:	d013      	beq.n	80081aa <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8008182:	6978      	ldr	r0, [r7, #20]
 8008184:	f7fe fe0b 	bl	8006d9e <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8008188:	4604      	mov	r4, r0
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7fe fe07 	bl	8006d9e <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8008190:	4603      	mov	r3, r0
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	4619      	mov	r1, r3
 8008196:	4620      	mov	r0, r4
 8008198:	f000 f9d0 	bl	800853c <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3308      	adds	r3, #8
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	3308      	adds	r3, #8
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e7e7      	b.n	800817a <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x12>
      return __cur;
 80081aa:	697b      	ldr	r3, [r7, #20]
    }
 80081ac:	4618      	mov	r0, r3
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd90      	pop	{r4, r7, pc}

080081b4 <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 80081ca:	b590      	push	{r4, r7, lr}
 80081cc:	b083      	sub	sp, #12
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f9cc 	bl	8008572 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 80081da:	4604      	mov	r4, r0
 80081dc:	6838      	ldr	r0, [r7, #0]
 80081de:	f000 f9c8 	bl	8008572 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 80081e2:	4603      	mov	r3, r0
 80081e4:	429c      	cmp	r4, r3
 80081e6:	bf0c      	ite	eq
 80081e8:	2301      	moveq	r3, #1
 80081ea:	2300      	movne	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	4618      	mov	r0, r3
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd90      	pop	{r4, r7, pc}

080081f6 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800820c:	b590      	push	{r4, r7, lr}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff ffec 	bl	80081f6 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800821e:	4604      	mov	r4, r0
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4619      	mov	r1, r3
 8008224:	2008      	movs	r0, #8
 8008226:	f7f9 f84e 	bl	80012c6 <_ZnwjPv>
 800822a:	4603      	mov	r3, r0
 800822c:	4622      	mov	r2, r4
 800822e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008232:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 8008236:	bf00      	nop
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	bd90      	pop	{r4, r7, pc}

0800823e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800823e:	b580      	push	{r7, lr}
 8008240:	b08a      	sub	sp, #40	; 0x28
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	60b9      	str	r1, [r7, #8]
 8008248:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800824a:	f107 020c 	add.w	r2, r7, #12
 800824e:	f107 0308 	add.w	r3, r7, #8
 8008252:	4611      	mov	r1, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fe26 	bl	8006ea6 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800825a:	4603      	mov	r3, r0
 800825c:	2b01      	cmp	r3, #1
 800825e:	bfd4      	ite	le
 8008260:	2301      	movle	r3, #1
 8008262:	2300      	movgt	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d142      	bne.n	80082f0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb2>
      const _DistanceType __len = __last - __first;
 800826a:	f107 020c 	add.w	r2, r7, #12
 800826e:	f107 0308 	add.w	r3, r7, #8
 8008272:	4611      	mov	r1, r2
 8008274:	4618      	mov	r0, r3
 8008276:	f7fe fe16 	bl	8006ea6 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800827a:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	3b02      	subs	r3, #2
 8008280:	0fda      	lsrs	r2, r3, #31
 8008282:	4413      	add	r3, r2
 8008284:	105b      	asrs	r3, r3, #1
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8008288:	f107 030c 	add.w	r3, r7, #12
 800828c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff f97a 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008294:	4603      	mov	r3, r0
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	f107 031c 	add.w	r3, r7, #28
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff fda6 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80082a2:	4603      	mov	r3, r0
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff fdae 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80082aa:	4602      	mov	r2, r0
 80082ac:	f107 0314 	add.w	r3, r7, #20
 80082b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082b4:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80082b8:	f107 0314 	add.w	r3, r7, #20
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff fda2 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80082c2:	4603      	mov	r3, r0
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	ed93 7a00 	vldr	s14, [r3]
 80082ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80082ce:	7813      	ldrb	r3, [r2, #0]
 80082d0:	eeb0 0a47 	vmov.f32	s0, s14
 80082d4:	eef0 0a67 	vmov.f32	s1, s15
 80082d8:	6a3a      	ldr	r2, [r7, #32]
 80082da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 f954 	bl	800858a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
	  if (__parent == 0)
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb6>
	  __parent--;
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	3b01      	subs	r3, #1
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 80082ee:	e7cb      	b.n	8008288 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x4a>
	return;
 80082f0:	bf00      	nop
 80082f2:	e000      	b.n	80082f6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb8>
	    return;
 80082f4:	bf00      	nop
    }
 80082f6:	3728      	adds	r7, #40	; 0x28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 80082fc:	b590      	push	{r4, r7, lr}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7fe fe0a 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800830c:	4603      	mov	r3, r0
 800830e:	681c      	ldr	r4, [r3, #0]
 8008310:	6838      	ldr	r0, [r7, #0]
 8008312:	f7fe fe05 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8008316:	4603      	mov	r3, r0
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	429c      	cmp	r4, r3
 800831c:	bf34      	ite	cc
 800831e:	2301      	movcc	r3, #1
 8008320:	2300      	movcs	r3, #0
 8008322:	b2db      	uxtb	r3, r3
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	bd90      	pop	{r4, r7, pc}

0800832c <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800832c:	b590      	push	{r4, r7, lr}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800833a:	1d3b      	adds	r3, r7, #4
 800833c:	4618      	mov	r0, r3
 800833e:	f7ff fd56 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008342:	4603      	mov	r3, r0
 8008344:	4618      	mov	r0, r3
 8008346:	f7ff fd5e 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800834a:	4602      	mov	r2, r0
 800834c:	f107 0310 	add.w	r3, r7, #16
 8008350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008354:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8008358:	f107 030c 	add.w	r3, r7, #12
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff fd46 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008362:	4603      	mov	r3, r0
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fd4e 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800836a:	4604      	mov	r4, r0
 800836c:	1d3b      	adds	r3, r7, #4
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff fd3d 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008374:	4603      	mov	r3, r0
 8008376:	4622      	mov	r2, r4
 8008378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800837c:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 8008380:	f107 020c 	add.w	r2, r7, #12
 8008384:	f107 0308 	add.w	r3, r7, #8
 8008388:	4611      	mov	r1, r2
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fd8b 	bl	8006ea6 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8008390:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 8008392:	f107 0310 	add.w	r3, r7, #16
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff fd35 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800839c:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	ed93 7a00 	vldr	s14, [r3]
 80083a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80083a8:	7813      	ldrb	r3, [r2, #0]
 80083aa:	eeb0 0a47 	vmov.f32	s0, s14
 80083ae:	eef0 0a67 	vmov.f32	s1, s15
 80083b2:	4622      	mov	r2, r4
 80083b4:	2100      	movs	r1, #0
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f8e7 	bl	800858a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
    }
 80083bc:	bf00      	nop
 80083be:	371c      	adds	r7, #28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd90      	pop	{r4, r7, pc}

080083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
	--_M_current;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f1a3 0208 	sub.w	r2, r3, #8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	601a      	str	r2, [r3, #0]
	return *this;
 80083d8:	687b      	ldr	r3, [r7, #4]
      }
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 80083e6:	b590      	push	{r4, r7, lr}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 80083f0:	1d3b      	adds	r3, r7, #4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff fcfb 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80083f8:	4604      	mov	r4, r0
 80083fa:	463b      	mov	r3, r7
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff fcf6 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008402:	4603      	mov	r3, r0
 8008404:	4619      	mov	r1, r3
 8008406:	4620      	mov	r0, r4
 8008408:	f000 f982 	bl	8008710 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	bd90      	pop	{r4, r7, pc}

08008414 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4618      	mov	r0, r3
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800842a:	b5b0      	push	{r4, r5, r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 f991 	bl	800875e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800843c:	4604      	mov	r4, r0
 800843e:	68b8      	ldr	r0, [r7, #8]
 8008440:	f000 f98d 	bl	800875e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008444:	4605      	mov	r5, r0
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f989 	bl	800875e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	4629      	mov	r1, r5
 8008452:	4620      	mov	r0, r4
 8008454:	f000 f991 	bl	800877a <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8008458:	4603      	mov	r3, r0
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f99c 	bl	800879a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>
 8008462:	4603      	mov	r3, r0
    }
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bdb0      	pop	{r4, r5, r7, pc}

0800846c <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fd6a 	bl	8006f68 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 800849e:	b590      	push	{r4, r7, lr}
 80084a0:	b085      	sub	sp, #20
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 80084aa:	68fc      	ldr	r4, [r7, #12]
 80084ac:	1d3b      	adds	r3, r7, #4
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff fc9d 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80084b4:	4603      	mov	r3, r0
 80084b6:	461a      	mov	r2, r3
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	4620      	mov	r0, r4
 80084bc:	f7fa fe12 	bl	80030e4 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 80084c0:	4603      	mov	r3, r0
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd90      	pop	{r4, r7, pc}

080084ca <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7f9 f853 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 80084d8:	4603      	mov	r3, r0
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b082      	sub	sp, #8
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7f9 f847 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 80084f0:	4603      	mov	r3, r0
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4618      	mov	r0, r3
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 8008526:	b40f      	push	{r0, r1, r2, r3}
 8008528:	b480      	push	{r7}
 800852a:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800852c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
	}
 8008530:	4618      	mov	r0, r3
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	b004      	add	sp, #16
 800853a:	4770      	bx	lr

0800853c <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8008548:	68b8      	ldr	r0, [r7, #8]
 800854a:	f7ff fc5c 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800854e:	4603      	mov	r3, r0
 8008550:	461a      	mov	r2, r3
 8008552:	68f9      	ldr	r1, [r7, #12]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff fae4 	bl	8007b22 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800855a:	68b8      	ldr	r0, [r7, #8]
 800855c:	f7fe fc1f 	bl	8006d9e <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8008560:	4603      	mov	r3, r0
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7fe fc25 	bl	8006db4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
    }
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800858a:	b590      	push	{r4, r7, lr}
 800858c:	b08f      	sub	sp, #60	; 0x3c
 800858e:	af00      	add	r7, sp, #0
 8008590:	6178      	str	r0, [r7, #20]
 8008592:	6139      	str	r1, [r7, #16]
 8008594:	60fa      	str	r2, [r7, #12]
 8008596:	eeb0 7a40 	vmov.f32	s14, s0
 800859a:	eef0 7a60 	vmov.f32	s15, s1
 800859e:	703b      	strb	r3, [r7, #0]
 80085a0:	ed87 7a01 	vstr	s14, [r7, #4]
 80085a4:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	0fda      	lsrs	r2, r3, #31
 80085b6:	4413      	add	r3, r2
 80085b8:	105b      	asrs	r3, r3, #1
 80085ba:	461a      	mov	r2, r3
 80085bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085be:	4293      	cmp	r3, r2
 80085c0:	da46      	bge.n	8008650 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xc6>
	  __secondChild = 2 * (__secondChild + 1);
 80085c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c4:	3301      	adds	r3, #1
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 80085ca:	f107 0314 	add.w	r3, r7, #20
 80085ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fe ffd9 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80085d6:	4604      	mov	r4, r0
 80085d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085da:	1e5a      	subs	r2, r3, #1
 80085dc:	f107 0314 	add.w	r3, r7, #20
 80085e0:	4611      	mov	r1, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe ffd0 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80085e8:	4602      	mov	r2, r0
 80085ea:	463b      	mov	r3, r7
 80085ec:	4621      	mov	r1, r4
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff fb1b 	bl	8007c2a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x76>
	    __secondChild--;
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	3b01      	subs	r3, #1
 80085fe:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8008600:	f107 0314 	add.w	r3, r7, #20
 8008604:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008606:	4618      	mov	r0, r3
 8008608:	f7fe ffbe 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800860c:	4603      	mov	r3, r0
 800860e:	623b      	str	r3, [r7, #32]
 8008610:	f107 0320 	add.w	r3, r7, #32
 8008614:	4618      	mov	r0, r3
 8008616:	f7ff fbea 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800861a:	4603      	mov	r3, r0
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff fbf2 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008622:	4604      	mov	r4, r0
 8008624:	f107 0314 	add.w	r3, r7, #20
 8008628:	6939      	ldr	r1, [r7, #16]
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe ffac 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008630:	4603      	mov	r3, r0
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
 8008634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fbd8 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800863e:	4603      	mov	r3, r0
 8008640:	4622      	mov	r2, r4
 8008642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008646:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 800864a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864c:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800864e:	e7af      	b.n	80085b0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x26>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	d136      	bne.n	80086c8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3b02      	subs	r3, #2
 800865e:	0fda      	lsrs	r2, r3, #31
 8008660:	4413      	add	r3, r2
 8008662:	105b      	asrs	r3, r3, #1
 8008664:	461a      	mov	r2, r3
 8008666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008668:	4293      	cmp	r3, r2
 800866a:	d12d      	bne.n	80086c8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
	  __secondChild = 2 * (__secondChild + 1);
 800866c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866e:	3301      	adds	r3, #1
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8008674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008676:	1e5a      	subs	r2, r3, #1
 8008678:	f107 0314 	add.w	r3, r7, #20
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe ff82 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008684:	4603      	mov	r3, r0
 8008686:	62bb      	str	r3, [r7, #40]	; 0x28
 8008688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff fbae 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008692:	4603      	mov	r3, r0
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff fbb6 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800869a:	4604      	mov	r4, r0
 800869c:	f107 0314 	add.w	r3, r7, #20
 80086a0:	6939      	ldr	r1, [r7, #16]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe ff70 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80086a8:	4603      	mov	r3, r0
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7ff fb9c 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80086b6:	4603      	mov	r3, r0
 80086b8:	4622      	mov	r2, r4
 80086ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80086be:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 80086c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c4:	3b01      	subs	r3, #1
 80086c6:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 80086c8:	463b      	mov	r3, r7
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff fece 	bl	800846c <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 80086d0:	4602      	mov	r2, r0
 80086d2:	f107 031c 	add.w	r3, r7, #28
 80086d6:	4611      	mov	r1, r2
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f875 	bl	80087c8 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 80086de:	1d3b      	adds	r3, r7, #4
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff fb90 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80086e6:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 80086e8:	f107 021c 	add.w	r2, r7, #28
 80086ec:	ed93 7a00 	vldr	s14, [r3]
 80086f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80086f4:	4613      	mov	r3, r2
 80086f6:	eeb0 0a47 	vmov.f32	s0, s14
 80086fa:	eef0 0a67 	vmov.f32	s1, s15
 80086fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008700:	6939      	ldr	r1, [r7, #16]
 8008702:	6978      	ldr	r0, [r7, #20]
 8008704:	f000 f86e 	bl	80087e4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>
    }
 8008708:	bf00      	nop
 800870a:	373c      	adds	r7, #60	; 0x3c
 800870c:	46bd      	mov	sp, r7
 800870e:	bd90      	pop	{r4, r7, pc}

08008710 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff fb73 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008720:	4602      	mov	r2, r0
 8008722:	f107 0308 	add.w	r3, r7, #8
 8008726:	e892 0003 	ldmia.w	r2, {r0, r1}
 800872a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800872e:	6838      	ldr	r0, [r7, #0]
 8008730:	f7ff fb69 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008734:	4602      	mov	r2, r0
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800873c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8008740:	f107 0308 	add.w	r3, r7, #8
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff fb5e 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800874a:	4602      	mov	r2, r0
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008752:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8008766:	1d3b      	adds	r3, r7, #4
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe fbd9 	bl	8006f20 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800876e:	4603      	mov	r3, r0
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 f8a1 	bl	80088d2 <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8008790:	4603      	mov	r3, r0
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>:
    __niter_wrap(_From __from, _To __res)
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7ff ffda 	bl	800875e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 80087aa:	4602      	mov	r2, r0
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	1a9b      	subs	r3, r3, r2
 80087b0:	10db      	asrs	r3, r3, #3
 80087b2:	461a      	mov	r2, r3
 80087b4:	1d3b      	adds	r3, r7, #4
 80087b6:	4611      	mov	r1, r2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe fee5 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80087be:	4603      	mov	r3, r0
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe fbc7 	bl	8006f68 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4618      	mov	r0, r3
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 80087e4:	b590      	push	{r4, r7, lr}
 80087e6:	b08b      	sub	sp, #44	; 0x2c
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6178      	str	r0, [r7, #20]
 80087ec:	6139      	str	r1, [r7, #16]
 80087ee:	60fa      	str	r2, [r7, #12]
 80087f0:	eeb0 7a40 	vmov.f32	s14, s0
 80087f4:	eef0 7a60 	vmov.f32	s15, s1
 80087f8:	603b      	str	r3, [r7, #0]
 80087fa:	ed87 7a01 	vstr	s14, [r7, #4]
 80087fe:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	3b01      	subs	r3, #1
 8008806:	0fda      	lsrs	r2, r3, #31
 8008808:	4413      	add	r3, r2
 800880a:	105b      	asrs	r3, r3, #1
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	429a      	cmp	r2, r3
 8008814:	dd10      	ble.n	8008838 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008816:	f107 0314 	add.w	r3, r7, #20
 800881a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe feb3 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008822:	4601      	mov	r1, r0
 8008824:	1d3b      	adds	r3, r7, #4
 8008826:	461a      	mov	r2, r3
 8008828:	6838      	ldr	r0, [r7, #0]
 800882a:	f000 f862 	bl	80088f2 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008834:	2301      	movs	r3, #1
 8008836:	e000      	b.n	800883a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x56>
 8008838:	2300      	movs	r3, #0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d02d      	beq.n	800889a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800883e:	f107 0314 	add.w	r3, r7, #20
 8008842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe fe9f 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800884a:	4603      	mov	r3, r0
 800884c:	61bb      	str	r3, [r7, #24]
 800884e:	f107 0318 	add.w	r3, r7, #24
 8008852:	4618      	mov	r0, r3
 8008854:	f7ff facb 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008858:	4603      	mov	r3, r0
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff fad3 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008860:	4604      	mov	r4, r0
 8008862:	f107 0314 	add.w	r3, r7, #20
 8008866:	6939      	ldr	r1, [r7, #16]
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fe8d 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800886e:	4603      	mov	r3, r0
 8008870:	61fb      	str	r3, [r7, #28]
 8008872:	f107 031c 	add.w	r3, r7, #28
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff fab9 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800887c:	4603      	mov	r3, r0
 800887e:	4622      	mov	r2, r4
 8008880:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008884:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	3b01      	subs	r3, #1
 8008890:	0fda      	lsrs	r2, r3, #31
 8008892:	4413      	add	r3, r2
 8008894:	105b      	asrs	r3, r3, #1
 8008896:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8008898:	e7b9      	b.n	800880e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x2a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800889a:	1d3b      	adds	r3, r7, #4
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fab2 	bl	8007e06 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80088a2:	4604      	mov	r4, r0
 80088a4:	f107 0314 	add.w	r3, r7, #20
 80088a8:	6939      	ldr	r1, [r7, #16]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fe6c 	bl	8007588 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80088b0:	4603      	mov	r3, r0
 80088b2:	623b      	str	r3, [r7, #32]
 80088b4:	f107 0320 	add.w	r3, r7, #32
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff fa98 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80088be:	4603      	mov	r3, r0
 80088c0:	4622      	mov	r2, r4
 80088c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088c6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80088ca:	bf00      	nop
 80088cc:	372c      	adds	r7, #44	; 0x2c
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd90      	pop	{r4, r7, pc}

080088d2 <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 f81c 	bl	8008920 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 80088e8:	4603      	mov	r3, r0
    }
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 80088f2:	b590      	push	{r4, r7, lr}
 80088f4:	b085      	sub	sp, #20
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 80088fe:	68fc      	ldr	r4, [r7, #12]
 8008900:	f107 0308 	add.w	r3, r7, #8
 8008904:	4618      	mov	r0, r3
 8008906:	f7ff fa72 	bl	8007dee <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800890a:	4603      	mov	r3, r0
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	4619      	mov	r1, r3
 8008910:	4620      	mov	r0, r4
 8008912:	f7fa fbe7 	bl	80030e4 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8008916:	4603      	mov	r3, r0
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	bd90      	pop	{r4, r7, pc}

08008920 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	10db      	asrs	r3, r3, #3
 8008934:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	425b      	negs	r3, r3
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	18d0      	adds	r0, r2, r3
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	461a      	mov	r2, r3
 800894c:	68f9      	ldr	r1, [r7, #12]
 800894e:	f019 ffb1 	bl	80228b4 <memmove>
	  return __result - _Num;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	425b      	negs	r3, r3
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	4413      	add	r3, r2
	}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800896a:	2300      	movs	r3, #0
 800896c:	607b      	str	r3, [r7, #4]
 800896e:	4b10      	ldr	r3, [pc, #64]	; (80089b0 <HAL_MspInit+0x4c>)
 8008970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008972:	4a0f      	ldr	r2, [pc, #60]	; (80089b0 <HAL_MspInit+0x4c>)
 8008974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008978:	6453      	str	r3, [r2, #68]	; 0x44
 800897a:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <HAL_MspInit+0x4c>)
 800897c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008982:	607b      	str	r3, [r7, #4]
 8008984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008986:	2300      	movs	r3, #0
 8008988:	603b      	str	r3, [r7, #0]
 800898a:	4b09      	ldr	r3, [pc, #36]	; (80089b0 <HAL_MspInit+0x4c>)
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	4a08      	ldr	r2, [pc, #32]	; (80089b0 <HAL_MspInit+0x4c>)
 8008990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008994:	6413      	str	r3, [r2, #64]	; 0x40
 8008996:	4b06      	ldr	r3, [pc, #24]	; (80089b0 <HAL_MspInit+0x4c>)
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	40023800 	.word	0x40023800

080089b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a0b      	ldr	r2, [pc, #44]	; (80089f0 <HAL_CRC_MspInit+0x3c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d10d      	bne.n	80089e2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	4b0a      	ldr	r3, [pc, #40]	; (80089f4 <HAL_CRC_MspInit+0x40>)
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	4a09      	ldr	r2, [pc, #36]	; (80089f4 <HAL_CRC_MspInit+0x40>)
 80089d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089d4:	6313      	str	r3, [r2, #48]	; 0x30
 80089d6:	4b07      	ldr	r3, [pc, #28]	; (80089f4 <HAL_CRC_MspInit+0x40>)
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80089e2:	bf00      	nop
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	40023000 	.word	0x40023000
 80089f4:	40023800 	.word	0x40023800

080089f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08a      	sub	sp, #40	; 0x28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a00:	f107 0314 	add.w	r3, r7, #20
 8008a04:	2200      	movs	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	605a      	str	r2, [r3, #4]
 8008a0a:	609a      	str	r2, [r3, #8]
 8008a0c:	60da      	str	r2, [r3, #12]
 8008a0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a19      	ldr	r2, [pc, #100]	; (8008a7c <HAL_SPI_MspInit+0x84>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d12b      	bne.n	8008a72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	613b      	str	r3, [r7, #16]
 8008a1e:	4b18      	ldr	r3, [pc, #96]	; (8008a80 <HAL_SPI_MspInit+0x88>)
 8008a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a22:	4a17      	ldr	r2, [pc, #92]	; (8008a80 <HAL_SPI_MspInit+0x88>)
 8008a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a28:	6453      	str	r3, [r2, #68]	; 0x44
 8008a2a:	4b15      	ldr	r3, [pc, #84]	; (8008a80 <HAL_SPI_MspInit+0x88>)
 8008a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a32:	613b      	str	r3, [r7, #16]
 8008a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a36:	2300      	movs	r3, #0
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	4b11      	ldr	r3, [pc, #68]	; (8008a80 <HAL_SPI_MspInit+0x88>)
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	4a10      	ldr	r2, [pc, #64]	; (8008a80 <HAL_SPI_MspInit+0x88>)
 8008a40:	f043 0301 	orr.w	r3, r3, #1
 8008a44:	6313      	str	r3, [r2, #48]	; 0x30
 8008a46:	4b0e      	ldr	r3, [pc, #56]	; (8008a80 <HAL_SPI_MspInit+0x88>)
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008a52:	23e0      	movs	r3, #224	; 0xe0
 8008a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a56:	2302      	movs	r3, #2
 8008a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008a62:	2305      	movs	r3, #5
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a66:	f107 0314 	add.w	r3, r7, #20
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4805      	ldr	r0, [pc, #20]	; (8008a84 <HAL_SPI_MspInit+0x8c>)
 8008a6e:	f000 fb05 	bl	800907c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008a72:	bf00      	nop
 8008a74:	3728      	adds	r7, #40	; 0x28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	40013000 	.word	0x40013000
 8008a80:	40023800 	.word	0x40023800
 8008a84:	40020000 	.word	0x40020000

08008a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008a8c:	e7fe      	b.n	8008a8c <NMI_Handler+0x4>

08008a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a92:	e7fe      	b.n	8008a92 <HardFault_Handler+0x4>

08008a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a98:	e7fe      	b.n	8008a98 <MemManage_Handler+0x4>

08008a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a9e:	e7fe      	b.n	8008a9e <BusFault_Handler+0x4>

08008aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008aa4:	e7fe      	b.n	8008aa4 <UsageFault_Handler+0x4>

08008aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008aaa:	bf00      	nop
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ab8:	bf00      	nop
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ac6:	bf00      	nop
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ad4:	f000 f960 	bl	8008d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ad8:	bf00      	nop
 8008ada:	bd80      	pop	{r7, pc}

08008adc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008ae0:	4802      	ldr	r0, [pc, #8]	; (8008aec <OTG_FS_IRQHandler+0x10>)
 8008ae2:	f000 fdd0 	bl	8009686 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008ae6:	bf00      	nop
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20002040 	.word	0x20002040

08008af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
	return 1;
 8008af4:	2301      	movs	r3, #1
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <_kill>:

int _kill(int pid, int sig)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008b0a:	f019 fe75 	bl	80227f8 <__errno>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2216      	movs	r2, #22
 8008b12:	601a      	str	r2, [r3, #0]
	return -1;
 8008b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <_exit>:

void _exit (int status)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008b28:	f04f 31ff 	mov.w	r1, #4294967295
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff ffe7 	bl	8008b00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008b32:	e7fe      	b.n	8008b32 <_exit+0x12>

08008b34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e00a      	b.n	8008b5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008b46:	f3af 8000 	nop.w
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	60ba      	str	r2, [r7, #8]
 8008b52:	b2ca      	uxtb	r2, r1
 8008b54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	dbf0      	blt.n	8008b46 <_read+0x12>
	}

return len;
 8008b64:	687b      	ldr	r3, [r7, #4]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b086      	sub	sp, #24
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e009      	b.n	8008b94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	60ba      	str	r2, [r7, #8]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	3301      	adds	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	dbf1      	blt.n	8008b80 <_write+0x12>
	}
	return len;
 8008b9c:	687b      	ldr	r3, [r7, #4]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <_close>:

int _close(int file)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
	return -1;
 8008bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008bce:	605a      	str	r2, [r3, #4]
	return 0;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <_isatty>:

int _isatty(int file)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
	return 1;
 8008be6:	2301      	movs	r3, #1
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
	return 0;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008c18:	4a14      	ldr	r2, [pc, #80]	; (8008c6c <_sbrk+0x5c>)
 8008c1a:	4b15      	ldr	r3, [pc, #84]	; (8008c70 <_sbrk+0x60>)
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008c24:	4b13      	ldr	r3, [pc, #76]	; (8008c74 <_sbrk+0x64>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d102      	bne.n	8008c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008c2c:	4b11      	ldr	r3, [pc, #68]	; (8008c74 <_sbrk+0x64>)
 8008c2e:	4a12      	ldr	r2, [pc, #72]	; (8008c78 <_sbrk+0x68>)
 8008c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008c32:	4b10      	ldr	r3, [pc, #64]	; (8008c74 <_sbrk+0x64>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d207      	bcs.n	8008c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008c40:	f019 fdda 	bl	80227f8 <__errno>
 8008c44:	4603      	mov	r3, r0
 8008c46:	220c      	movs	r2, #12
 8008c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4e:	e009      	b.n	8008c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008c50:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <_sbrk+0x64>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008c56:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <_sbrk+0x64>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	4a05      	ldr	r2, [pc, #20]	; (8008c74 <_sbrk+0x64>)
 8008c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008c62:	68fb      	ldr	r3, [r7, #12]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20020000 	.word	0x20020000
 8008c70:	00000400 	.word	0x00000400
 8008c74:	20000568 	.word	0x20000568
 8008c78:	20002780 	.word	0x20002780

08008c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008c80:	4b06      	ldr	r3, [pc, #24]	; (8008c9c <SystemInit+0x20>)
 8008c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c86:	4a05      	ldr	r2, [pc, #20]	; (8008c9c <SystemInit+0x20>)
 8008c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008c90:	bf00      	nop
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	e000ed00 	.word	0xe000ed00

08008ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008cd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008ca4:	480d      	ldr	r0, [pc, #52]	; (8008cdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008ca6:	490e      	ldr	r1, [pc, #56]	; (8008ce0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008ca8:	4a0e      	ldr	r2, [pc, #56]	; (8008ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008cac:	e002      	b.n	8008cb4 <LoopCopyDataInit>

08008cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008cb2:	3304      	adds	r3, #4

08008cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008cb8:	d3f9      	bcc.n	8008cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008cba:	4a0b      	ldr	r2, [pc, #44]	; (8008ce8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008cbc:	4c0b      	ldr	r4, [pc, #44]	; (8008cec <LoopFillZerobss+0x26>)
  movs r3, #0
 8008cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008cc0:	e001      	b.n	8008cc6 <LoopFillZerobss>

08008cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008cc4:	3204      	adds	r2, #4

08008cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008cc8:	d3fb      	bcc.n	8008cc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008cca:	f7ff ffd7 	bl	8008c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008cce:	f019 fdab 	bl	8022828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008cd2:	f7fc ffbf 	bl	8005c54 <main>
  bx  lr    
 8008cd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ce0:	2000048c 	.word	0x2000048c
  ldr r2, =_sidata
 8008ce4:	0804c308 	.word	0x0804c308
  ldr r2, =_sbss
 8008ce8:	2000048c 	.word	0x2000048c
  ldr r4, =_ebss
 8008cec:	20002780 	.word	0x20002780

08008cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008cf0:	e7fe      	b.n	8008cf0 <ADC_IRQHandler>
	...

08008cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008cf8:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <HAL_Init+0x40>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a0d      	ldr	r2, [pc, #52]	; (8008d34 <HAL_Init+0x40>)
 8008cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d04:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <HAL_Init+0x40>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a0a      	ldr	r2, [pc, #40]	; (8008d34 <HAL_Init+0x40>)
 8008d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d10:	4b08      	ldr	r3, [pc, #32]	; (8008d34 <HAL_Init+0x40>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a07      	ldr	r2, [pc, #28]	; (8008d34 <HAL_Init+0x40>)
 8008d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d1c:	2003      	movs	r0, #3
 8008d1e:	f000 f94f 	bl	8008fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d22:	200f      	movs	r0, #15
 8008d24:	f000 f808 	bl	8008d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d28:	f7ff fe1c 	bl	8008964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	40023c00 	.word	0x40023c00

08008d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d40:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <HAL_InitTick+0x54>)
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <HAL_InitTick+0x58>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 f967 	bl	800902a <HAL_SYSTICK_Config>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e00e      	b.n	8008d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b0f      	cmp	r3, #15
 8008d6a:	d80a      	bhi.n	8008d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	f000 f92f 	bl	8008fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d78:	4a06      	ldr	r2, [pc, #24]	; (8008d94 <HAL_InitTick+0x5c>)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e000      	b.n	8008d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20000060 	.word	0x20000060
 8008d90:	20000068 	.word	0x20000068
 8008d94:	20000064 	.word	0x20000064

08008d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <HAL_IncTick+0x20>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <HAL_IncTick+0x24>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4413      	add	r3, r2
 8008da8:	4a04      	ldr	r2, [pc, #16]	; (8008dbc <HAL_IncTick+0x24>)
 8008daa:	6013      	str	r3, [r2, #0]
}
 8008dac:	bf00      	nop
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	20000068 	.word	0x20000068
 8008dbc:	2000056c 	.word	0x2000056c

08008dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8008dc4:	4b03      	ldr	r3, [pc, #12]	; (8008dd4 <HAL_GetTick+0x14>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	2000056c 	.word	0x2000056c

08008dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008de0:	f7ff ffee 	bl	8008dc0 <HAL_GetTick>
 8008de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d005      	beq.n	8008dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008df2:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <HAL_Delay+0x44>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008dfe:	bf00      	nop
 8008e00:	f7ff ffde 	bl	8008dc0 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d8f7      	bhi.n	8008e00 <HAL_Delay+0x28>
  {
  }
}
 8008e10:	bf00      	nop
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000068 	.word	0x20000068

08008e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f003 0307 	and.w	r3, r3, #7
 8008e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e30:	4b0c      	ldr	r3, [pc, #48]	; (8008e64 <__NVIC_SetPriorityGrouping+0x44>)
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e52:	4a04      	ldr	r2, [pc, #16]	; (8008e64 <__NVIC_SetPriorityGrouping+0x44>)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	60d3      	str	r3, [r2, #12]
}
 8008e58:	bf00      	nop
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	e000ed00 	.word	0xe000ed00

08008e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e6c:	4b04      	ldr	r3, [pc, #16]	; (8008e80 <__NVIC_GetPriorityGrouping+0x18>)
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	0a1b      	lsrs	r3, r3, #8
 8008e72:	f003 0307 	and.w	r3, r3, #7
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	e000ed00 	.word	0xe000ed00

08008e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	db0b      	blt.n	8008eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e96:	79fb      	ldrb	r3, [r7, #7]
 8008e98:	f003 021f 	and.w	r2, r3, #31
 8008e9c:	4907      	ldr	r1, [pc, #28]	; (8008ebc <__NVIC_EnableIRQ+0x38>)
 8008e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ea2:	095b      	lsrs	r3, r3, #5
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8008eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	e000e100 	.word	0xe000e100

08008ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	6039      	str	r1, [r7, #0]
 8008eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	db0a      	blt.n	8008eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	490c      	ldr	r1, [pc, #48]	; (8008f0c <__NVIC_SetPriority+0x4c>)
 8008eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ede:	0112      	lsls	r2, r2, #4
 8008ee0:	b2d2      	uxtb	r2, r2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ee8:	e00a      	b.n	8008f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	4908      	ldr	r1, [pc, #32]	; (8008f10 <__NVIC_SetPriority+0x50>)
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	3b04      	subs	r3, #4
 8008ef8:	0112      	lsls	r2, r2, #4
 8008efa:	b2d2      	uxtb	r2, r2
 8008efc:	440b      	add	r3, r1
 8008efe:	761a      	strb	r2, [r3, #24]
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	e000e100 	.word	0xe000e100
 8008f10:	e000ed00 	.word	0xe000ed00

08008f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b089      	sub	sp, #36	; 0x24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f003 0307 	and.w	r3, r3, #7
 8008f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	f1c3 0307 	rsb	r3, r3, #7
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	bf28      	it	cs
 8008f32:	2304      	movcs	r3, #4
 8008f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	2b06      	cmp	r3, #6
 8008f3c:	d902      	bls.n	8008f44 <NVIC_EncodePriority+0x30>
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	3b03      	subs	r3, #3
 8008f42:	e000      	b.n	8008f46 <NVIC_EncodePriority+0x32>
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f48:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	43da      	mvns	r2, r3
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	401a      	ands	r2, r3
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	fa01 f303 	lsl.w	r3, r1, r3
 8008f66:	43d9      	mvns	r1, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f6c:	4313      	orrs	r3, r2
         );
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3724      	adds	r7, #36	; 0x24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
	...

08008f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f8c:	d301      	bcc.n	8008f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e00f      	b.n	8008fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f92:	4a0a      	ldr	r2, [pc, #40]	; (8008fbc <SysTick_Config+0x40>)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008f9a:	210f      	movs	r1, #15
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa0:	f7ff ff8e 	bl	8008ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008fa4:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <SysTick_Config+0x40>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008faa:	4b04      	ldr	r3, [pc, #16]	; (8008fbc <SysTick_Config+0x40>)
 8008fac:	2207      	movs	r2, #7
 8008fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	e000e010 	.word	0xe000e010

08008fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff ff29 	bl	8008e20 <__NVIC_SetPriorityGrouping>
}
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b086      	sub	sp, #24
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	4603      	mov	r3, r0
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008fe8:	f7ff ff3e 	bl	8008e68 <__NVIC_GetPriorityGrouping>
 8008fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	68b9      	ldr	r1, [r7, #8]
 8008ff2:	6978      	ldr	r0, [r7, #20]
 8008ff4:	f7ff ff8e 	bl	8008f14 <NVIC_EncodePriority>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ffe:	4611      	mov	r1, r2
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff ff5d 	bl	8008ec0 <__NVIC_SetPriority>
}
 8009006:	bf00      	nop
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	4603      	mov	r3, r0
 8009016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800901c:	4618      	mov	r0, r3
 800901e:	f7ff ff31 	bl	8008e84 <__NVIC_EnableIRQ>
}
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff ffa2 	bl	8008f7c <SysTick_Config>
 8009038:	4603      	mov	r3, r0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e00e      	b.n	8009072 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	795b      	ldrb	r3, [r3, #5]
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d105      	bne.n	800906a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7ff fca5 	bl	80089b4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800907c:	b480      	push	{r7}
 800907e:	b089      	sub	sp, #36	; 0x24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009086:	2300      	movs	r3, #0
 8009088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800908a:	2300      	movs	r3, #0
 800908c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800908e:	2300      	movs	r3, #0
 8009090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009092:	2300      	movs	r3, #0
 8009094:	61fb      	str	r3, [r7, #28]
 8009096:	e16b      	b.n	8009370 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009098:	2201      	movs	r2, #1
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	fa02 f303 	lsl.w	r3, r2, r3
 80090a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	4013      	ands	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	f040 815a 	bne.w	800936a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d005      	beq.n	80090ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d130      	bne.n	8009130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	2203      	movs	r2, #3
 80090da:	fa02 f303 	lsl.w	r3, r2, r3
 80090de:	43db      	mvns	r3, r3
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	4013      	ands	r3, r2
 80090e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68da      	ldr	r2, [r3, #12]
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	fa02 f303 	lsl.w	r3, r2, r3
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009104:	2201      	movs	r2, #1
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	fa02 f303 	lsl.w	r3, r2, r3
 800910c:	43db      	mvns	r3, r3
 800910e:	69ba      	ldr	r2, [r7, #24]
 8009110:	4013      	ands	r3, r2
 8009112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	091b      	lsrs	r3, r3, #4
 800911a:	f003 0201 	and.w	r2, r3, #1
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	fa02 f303 	lsl.w	r3, r2, r3
 8009124:	69ba      	ldr	r2, [r7, #24]
 8009126:	4313      	orrs	r3, r2
 8009128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f003 0303 	and.w	r3, r3, #3
 8009138:	2b03      	cmp	r3, #3
 800913a:	d017      	beq.n	800916c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	2203      	movs	r2, #3
 8009148:	fa02 f303 	lsl.w	r3, r2, r3
 800914c:	43db      	mvns	r3, r3
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	4013      	ands	r3, r2
 8009152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	fa02 f303 	lsl.w	r3, r2, r3
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	4313      	orrs	r3, r2
 8009164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	69ba      	ldr	r2, [r7, #24]
 800916a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f003 0303 	and.w	r3, r3, #3
 8009174:	2b02      	cmp	r3, #2
 8009176:	d123      	bne.n	80091c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	08da      	lsrs	r2, r3, #3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3208      	adds	r2, #8
 8009180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	220f      	movs	r2, #15
 8009190:	fa02 f303 	lsl.w	r3, r2, r3
 8009194:	43db      	mvns	r3, r3
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	4013      	ands	r3, r2
 800919a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	691a      	ldr	r2, [r3, #16]
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ac:	69ba      	ldr	r2, [r7, #24]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	08da      	lsrs	r2, r3, #3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	3208      	adds	r2, #8
 80091ba:	69b9      	ldr	r1, [r7, #24]
 80091bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	2203      	movs	r2, #3
 80091cc:	fa02 f303 	lsl.w	r3, r2, r3
 80091d0:	43db      	mvns	r3, r3
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	4013      	ands	r3, r2
 80091d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f003 0203 	and.w	r2, r3, #3
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	fa02 f303 	lsl.w	r3, r2, r3
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80b4 	beq.w	800936a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	4b60      	ldr	r3, [pc, #384]	; (8009388 <HAL_GPIO_Init+0x30c>)
 8009208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920a:	4a5f      	ldr	r2, [pc, #380]	; (8009388 <HAL_GPIO_Init+0x30c>)
 800920c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009210:	6453      	str	r3, [r2, #68]	; 0x44
 8009212:	4b5d      	ldr	r3, [pc, #372]	; (8009388 <HAL_GPIO_Init+0x30c>)
 8009214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800921e:	4a5b      	ldr	r2, [pc, #364]	; (800938c <HAL_GPIO_Init+0x310>)
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	089b      	lsrs	r3, r3, #2
 8009224:	3302      	adds	r3, #2
 8009226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800922a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	220f      	movs	r2, #15
 8009236:	fa02 f303 	lsl.w	r3, r2, r3
 800923a:	43db      	mvns	r3, r3
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	4013      	ands	r3, r2
 8009240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a52      	ldr	r2, [pc, #328]	; (8009390 <HAL_GPIO_Init+0x314>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d02b      	beq.n	80092a2 <HAL_GPIO_Init+0x226>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a51      	ldr	r2, [pc, #324]	; (8009394 <HAL_GPIO_Init+0x318>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d025      	beq.n	800929e <HAL_GPIO_Init+0x222>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a50      	ldr	r2, [pc, #320]	; (8009398 <HAL_GPIO_Init+0x31c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d01f      	beq.n	800929a <HAL_GPIO_Init+0x21e>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a4f      	ldr	r2, [pc, #316]	; (800939c <HAL_GPIO_Init+0x320>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d019      	beq.n	8009296 <HAL_GPIO_Init+0x21a>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a4e      	ldr	r2, [pc, #312]	; (80093a0 <HAL_GPIO_Init+0x324>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d013      	beq.n	8009292 <HAL_GPIO_Init+0x216>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a4d      	ldr	r2, [pc, #308]	; (80093a4 <HAL_GPIO_Init+0x328>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d00d      	beq.n	800928e <HAL_GPIO_Init+0x212>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a4c      	ldr	r2, [pc, #304]	; (80093a8 <HAL_GPIO_Init+0x32c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d007      	beq.n	800928a <HAL_GPIO_Init+0x20e>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a4b      	ldr	r2, [pc, #300]	; (80093ac <HAL_GPIO_Init+0x330>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d101      	bne.n	8009286 <HAL_GPIO_Init+0x20a>
 8009282:	2307      	movs	r3, #7
 8009284:	e00e      	b.n	80092a4 <HAL_GPIO_Init+0x228>
 8009286:	2308      	movs	r3, #8
 8009288:	e00c      	b.n	80092a4 <HAL_GPIO_Init+0x228>
 800928a:	2306      	movs	r3, #6
 800928c:	e00a      	b.n	80092a4 <HAL_GPIO_Init+0x228>
 800928e:	2305      	movs	r3, #5
 8009290:	e008      	b.n	80092a4 <HAL_GPIO_Init+0x228>
 8009292:	2304      	movs	r3, #4
 8009294:	e006      	b.n	80092a4 <HAL_GPIO_Init+0x228>
 8009296:	2303      	movs	r3, #3
 8009298:	e004      	b.n	80092a4 <HAL_GPIO_Init+0x228>
 800929a:	2302      	movs	r3, #2
 800929c:	e002      	b.n	80092a4 <HAL_GPIO_Init+0x228>
 800929e:	2301      	movs	r3, #1
 80092a0:	e000      	b.n	80092a4 <HAL_GPIO_Init+0x228>
 80092a2:	2300      	movs	r3, #0
 80092a4:	69fa      	ldr	r2, [r7, #28]
 80092a6:	f002 0203 	and.w	r2, r2, #3
 80092aa:	0092      	lsls	r2, r2, #2
 80092ac:	4093      	lsls	r3, r2
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80092b4:	4935      	ldr	r1, [pc, #212]	; (800938c <HAL_GPIO_Init+0x310>)
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	089b      	lsrs	r3, r3, #2
 80092ba:	3302      	adds	r3, #2
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80092c2:	4b3b      	ldr	r3, [pc, #236]	; (80093b0 <HAL_GPIO_Init+0x334>)
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	43db      	mvns	r3, r3
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	4013      	ands	r3, r2
 80092d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80092e6:	4a32      	ldr	r2, [pc, #200]	; (80093b0 <HAL_GPIO_Init+0x334>)
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80092ec:	4b30      	ldr	r3, [pc, #192]	; (80093b0 <HAL_GPIO_Init+0x334>)
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	43db      	mvns	r3, r3
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	4013      	ands	r3, r2
 80092fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d003      	beq.n	8009310 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	4313      	orrs	r3, r2
 800930e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009310:	4a27      	ldr	r2, [pc, #156]	; (80093b0 <HAL_GPIO_Init+0x334>)
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009316:	4b26      	ldr	r3, [pc, #152]	; (80093b0 <HAL_GPIO_Init+0x334>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	43db      	mvns	r3, r3
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	4013      	ands	r3, r2
 8009324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	4313      	orrs	r3, r2
 8009338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800933a:	4a1d      	ldr	r2, [pc, #116]	; (80093b0 <HAL_GPIO_Init+0x334>)
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009340:	4b1b      	ldr	r3, [pc, #108]	; (80093b0 <HAL_GPIO_Init+0x334>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	43db      	mvns	r3, r3
 800934a:	69ba      	ldr	r2, [r7, #24]
 800934c:	4013      	ands	r3, r2
 800934e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	4313      	orrs	r3, r2
 8009362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009364:	4a12      	ldr	r2, [pc, #72]	; (80093b0 <HAL_GPIO_Init+0x334>)
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	3301      	adds	r3, #1
 800936e:	61fb      	str	r3, [r7, #28]
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	2b0f      	cmp	r3, #15
 8009374:	f67f ae90 	bls.w	8009098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009378:	bf00      	nop
 800937a:	bf00      	nop
 800937c:	3724      	adds	r7, #36	; 0x24
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	40023800 	.word	0x40023800
 800938c:	40013800 	.word	0x40013800
 8009390:	40020000 	.word	0x40020000
 8009394:	40020400 	.word	0x40020400
 8009398:	40020800 	.word	0x40020800
 800939c:	40020c00 	.word	0x40020c00
 80093a0:	40021000 	.word	0x40021000
 80093a4:	40021400 	.word	0x40021400
 80093a8:	40021800 	.word	0x40021800
 80093ac:	40021c00 	.word	0x40021c00
 80093b0:	40013c00 	.word	0x40013c00

080093b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	807b      	strh	r3, [r7, #2]
 80093c0:	4613      	mov	r3, r2
 80093c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80093c4:	787b      	ldrb	r3, [r7, #1]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093ca:	887a      	ldrh	r2, [r7, #2]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80093d0:	e003      	b.n	80093da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80093d2:	887b      	ldrh	r3, [r7, #2]
 80093d4:	041a      	lsls	r2, r3, #16
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	619a      	str	r2, [r3, #24]
}
 80093da:	bf00      	nop
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80093e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093e8:	b08f      	sub	sp, #60	; 0x3c
 80093ea:	af0a      	add	r7, sp, #40	; 0x28
 80093ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e10f      	b.n	8009618 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f016 f94e 	bl	801f6b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2203      	movs	r2, #3
 800941c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009428:	2b00      	cmp	r3, #0
 800942a:	d102      	bne.n	8009432 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4618      	mov	r0, r3
 8009438:	f002 fa67 	bl	800b90a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	603b      	str	r3, [r7, #0]
 8009442:	687e      	ldr	r6, [r7, #4]
 8009444:	466d      	mov	r5, sp
 8009446:	f106 0410 	add.w	r4, r6, #16
 800944a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800944c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800944e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009452:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009456:	e885 0003 	stmia.w	r5, {r0, r1}
 800945a:	1d33      	adds	r3, r6, #4
 800945c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800945e:	6838      	ldr	r0, [r7, #0]
 8009460:	f002 f93e 	bl	800b6e0 <USB_CoreInit>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d005      	beq.n	8009476 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2202      	movs	r2, #2
 800946e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e0d0      	b.n	8009618 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2100      	movs	r1, #0
 800947c:	4618      	mov	r0, r3
 800947e:	f002 fa55 	bl	800b92c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
 8009486:	e04a      	b.n	800951e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009488:	7bfa      	ldrb	r2, [r7, #15]
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	4613      	mov	r3, r2
 800948e:	00db      	lsls	r3, r3, #3
 8009490:	4413      	add	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	440b      	add	r3, r1
 8009496:	333d      	adds	r3, #61	; 0x3d
 8009498:	2201      	movs	r2, #1
 800949a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800949c:	7bfa      	ldrb	r2, [r7, #15]
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	4613      	mov	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	333c      	adds	r3, #60	; 0x3c
 80094ac:	7bfa      	ldrb	r2, [r7, #15]
 80094ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80094b0:	7bfa      	ldrb	r2, [r7, #15]
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	b298      	uxth	r0, r3
 80094b6:	6879      	ldr	r1, [r7, #4]
 80094b8:	4613      	mov	r3, r2
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	3344      	adds	r3, #68	; 0x44
 80094c4:	4602      	mov	r2, r0
 80094c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80094c8:	7bfa      	ldrb	r2, [r7, #15]
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	4613      	mov	r3, r2
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	440b      	add	r3, r1
 80094d6:	3340      	adds	r3, #64	; 0x40
 80094d8:	2200      	movs	r2, #0
 80094da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80094dc:	7bfa      	ldrb	r2, [r7, #15]
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	4613      	mov	r3, r2
 80094e2:	00db      	lsls	r3, r3, #3
 80094e4:	4413      	add	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	440b      	add	r3, r1
 80094ea:	3348      	adds	r3, #72	; 0x48
 80094ec:	2200      	movs	r2, #0
 80094ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80094f0:	7bfa      	ldrb	r2, [r7, #15]
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	4613      	mov	r3, r2
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	440b      	add	r3, r1
 80094fe:	334c      	adds	r3, #76	; 0x4c
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009504:	7bfa      	ldrb	r2, [r7, #15]
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	4613      	mov	r3, r2
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	440b      	add	r3, r1
 8009512:	3354      	adds	r3, #84	; 0x54
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	3301      	adds	r3, #1
 800951c:	73fb      	strb	r3, [r7, #15]
 800951e:	7bfa      	ldrb	r2, [r7, #15]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	429a      	cmp	r2, r3
 8009526:	d3af      	bcc.n	8009488 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]
 800952c:	e044      	b.n	80095b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800952e:	7bfa      	ldrb	r2, [r7, #15]
 8009530:	6879      	ldr	r1, [r7, #4]
 8009532:	4613      	mov	r3, r2
 8009534:	00db      	lsls	r3, r3, #3
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	440b      	add	r3, r1
 800953c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009540:	2200      	movs	r2, #0
 8009542:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009544:	7bfa      	ldrb	r2, [r7, #15]
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4613      	mov	r3, r2
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	440b      	add	r3, r1
 8009552:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009556:	7bfa      	ldrb	r2, [r7, #15]
 8009558:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800955a:	7bfa      	ldrb	r2, [r7, #15]
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	4613      	mov	r3, r2
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800956c:	2200      	movs	r2, #0
 800956e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009570:	7bfa      	ldrb	r2, [r7, #15]
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	4613      	mov	r3, r2
 8009576:	00db      	lsls	r3, r3, #3
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009586:	7bfa      	ldrb	r2, [r7, #15]
 8009588:	6879      	ldr	r1, [r7, #4]
 800958a:	4613      	mov	r3, r2
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	4413      	add	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	440b      	add	r3, r1
 8009594:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800959c:	7bfa      	ldrb	r2, [r7, #15]
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	4613      	mov	r3, r2
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	4413      	add	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	440b      	add	r3, r1
 80095aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	3301      	adds	r3, #1
 80095b6:	73fb      	strb	r3, [r7, #15]
 80095b8:	7bfa      	ldrb	r2, [r7, #15]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d3b5      	bcc.n	800952e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	687e      	ldr	r6, [r7, #4]
 80095ca:	466d      	mov	r5, sp
 80095cc:	f106 0410 	add.w	r4, r6, #16
 80095d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80095e0:	1d33      	adds	r3, r6, #4
 80095e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095e4:	6838      	ldr	r0, [r7, #0]
 80095e6:	f002 f9ed 	bl	800b9c4 <USB_DevInit>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e00d      	b.n	8009618 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4618      	mov	r0, r3
 8009612:	f003 fb3c 	bl	800cc8e <USB_DevDisconnect>

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009620 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009634:	2b01      	cmp	r3, #1
 8009636:	d101      	bne.n	800963c <HAL_PCD_Start+0x1c>
 8009638:	2302      	movs	r3, #2
 800963a:	e020      	b.n	800967e <HAL_PCD_Start+0x5e>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009648:	2b01      	cmp	r3, #1
 800964a:	d109      	bne.n	8009660 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009650:	2b01      	cmp	r3, #1
 8009652:	d005      	beq.n	8009660 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4618      	mov	r0, r3
 8009666:	f002 f93f 	bl	800b8e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4618      	mov	r0, r3
 8009670:	f003 faec 	bl	800cc4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009686:	b590      	push	{r4, r7, lr}
 8009688:	b08d      	sub	sp, #52	; 0x34
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f003 fbaa 	bl	800cdf6 <USB_GetMode>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f040 848a 	bne.w	8009fbe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f003 fb0e 	bl	800ccd0 <USB_ReadInterrupts>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 8480 	beq.w	8009fbc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	0a1b      	lsrs	r3, r3, #8
 80096c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f003 fafb 	bl	800ccd0 <USB_ReadInterrupts>
 80096da:	4603      	mov	r3, r0
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d107      	bne.n	80096f4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	695a      	ldr	r2, [r3, #20]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f002 0202 	and.w	r2, r2, #2
 80096f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f003 fae9 	bl	800ccd0 <USB_ReadInterrupts>
 80096fe:	4603      	mov	r3, r0
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b10      	cmp	r3, #16
 8009706:	d161      	bne.n	80097cc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	699a      	ldr	r2, [r3, #24]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0210 	bic.w	r2, r2, #16
 8009716:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	6a1b      	ldr	r3, [r3, #32]
 800971c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	f003 020f 	and.w	r2, r3, #15
 8009724:	4613      	mov	r3, r2
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	4413      	add	r3, r2
 8009734:	3304      	adds	r3, #4
 8009736:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	0c5b      	lsrs	r3, r3, #17
 800973c:	f003 030f 	and.w	r3, r3, #15
 8009740:	2b02      	cmp	r3, #2
 8009742:	d124      	bne.n	800978e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800974a:	4013      	ands	r3, r2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d035      	beq.n	80097bc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	091b      	lsrs	r3, r3, #4
 8009758:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800975a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800975e:	b29b      	uxth	r3, r3
 8009760:	461a      	mov	r2, r3
 8009762:	6a38      	ldr	r0, [r7, #32]
 8009764:	f003 f920 	bl	800c9a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	691a      	ldr	r2, [r3, #16]
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	091b      	lsrs	r3, r3, #4
 8009770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009774:	441a      	add	r2, r3
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	6a1a      	ldr	r2, [r3, #32]
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	091b      	lsrs	r3, r3, #4
 8009782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009786:	441a      	add	r2, r3
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	621a      	str	r2, [r3, #32]
 800978c:	e016      	b.n	80097bc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	0c5b      	lsrs	r3, r3, #17
 8009792:	f003 030f 	and.w	r3, r3, #15
 8009796:	2b06      	cmp	r3, #6
 8009798:	d110      	bne.n	80097bc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80097a0:	2208      	movs	r2, #8
 80097a2:	4619      	mov	r1, r3
 80097a4:	6a38      	ldr	r0, [r7, #32]
 80097a6:	f003 f8ff 	bl	800c9a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	6a1a      	ldr	r2, [r3, #32]
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	091b      	lsrs	r3, r3, #4
 80097b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097b6:	441a      	add	r2, r3
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	699a      	ldr	r2, [r3, #24]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f042 0210 	orr.w	r2, r2, #16
 80097ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f003 fa7d 	bl	800ccd0 <USB_ReadInterrupts>
 80097d6:	4603      	mov	r3, r0
 80097d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80097e0:	f040 80a7 	bne.w	8009932 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80097e4:	2300      	movs	r3, #0
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f003 fa82 	bl	800ccf6 <USB_ReadDevAllOutEpInterrupt>
 80097f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80097f4:	e099      	b.n	800992a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 808e 	beq.w	800991e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f003 faa6 	bl	800cd5e <USB_ReadDevOutEPInterrupt>
 8009812:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00c      	beq.n	8009838 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	4413      	add	r3, r2
 8009826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800982a:	461a      	mov	r2, r3
 800982c:	2301      	movs	r3, #1
 800982e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fec2 	bl	800a5bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f003 0308 	and.w	r3, r3, #8
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00c      	beq.n	800985c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800984e:	461a      	mov	r2, r3
 8009850:	2308      	movs	r3, #8
 8009852:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 ff98 	bl	800a78c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f003 0310 	and.w	r3, r3, #16
 8009862:	2b00      	cmp	r3, #0
 8009864:	d008      	beq.n	8009878 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	4413      	add	r3, r2
 800986e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009872:	461a      	mov	r2, r3
 8009874:	2310      	movs	r3, #16
 8009876:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b00      	cmp	r3, #0
 8009880:	d030      	beq.n	80098e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800988a:	2b80      	cmp	r3, #128	; 0x80
 800988c:	d109      	bne.n	80098a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	69fa      	ldr	r2, [r7, #28]
 8009898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800989c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80098a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a4:	4613      	mov	r3, r2
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	4413      	add	r3, r2
 80098b4:	3304      	adds	r3, #4
 80098b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	78db      	ldrb	r3, [r3, #3]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d108      	bne.n	80098d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	2200      	movs	r2, #0
 80098c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f015 fff7 	bl	801f8c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098de:	461a      	mov	r2, r3
 80098e0:	2302      	movs	r3, #2
 80098e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f003 0320 	and.w	r3, r3, #32
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d008      	beq.n	8009900 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fa:	461a      	mov	r2, r3
 80098fc:	2320      	movs	r3, #32
 80098fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d009      	beq.n	800991e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009916:	461a      	mov	r2, r3
 8009918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800991c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009920:	3301      	adds	r3, #1
 8009922:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	085b      	lsrs	r3, r3, #1
 8009928:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	2b00      	cmp	r3, #0
 800992e:	f47f af62 	bne.w	80097f6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4618      	mov	r0, r3
 8009938:	f003 f9ca 	bl	800ccd0 <USB_ReadInterrupts>
 800993c:	4603      	mov	r3, r0
 800993e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009942:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009946:	f040 80db 	bne.w	8009b00 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4618      	mov	r0, r3
 8009950:	f003 f9eb 	bl	800cd2a <USB_ReadDevAllInEpInterrupt>
 8009954:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009956:	2300      	movs	r3, #0
 8009958:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800995a:	e0cd      	b.n	8009af8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 80c2 	beq.w	8009aec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996e:	b2d2      	uxtb	r2, r2
 8009970:	4611      	mov	r1, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f003 fa11 	bl	800cd9a <USB_ReadDevInEPInterrupt>
 8009978:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d057      	beq.n	8009a34 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	f003 030f 	and.w	r3, r3, #15
 800998a:	2201      	movs	r2, #1
 800998c:	fa02 f303 	lsl.w	r3, r2, r3
 8009990:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	43db      	mvns	r3, r3
 800999e:	69f9      	ldr	r1, [r7, #28]
 80099a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099a4:	4013      	ands	r3, r2
 80099a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b4:	461a      	mov	r2, r3
 80099b6:	2301      	movs	r3, #1
 80099b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d132      	bne.n	8009a28 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c6:	4613      	mov	r3, r2
 80099c8:	00db      	lsls	r3, r3, #3
 80099ca:	4413      	add	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	440b      	add	r3, r1
 80099d0:	334c      	adds	r3, #76	; 0x4c
 80099d2:	6819      	ldr	r1, [r3, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d8:	4613      	mov	r3, r2
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	4413      	add	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4403      	add	r3, r0
 80099e2:	3348      	adds	r3, #72	; 0x48
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4419      	add	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ec:	4613      	mov	r3, r2
 80099ee:	00db      	lsls	r3, r3, #3
 80099f0:	4413      	add	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4403      	add	r3, r0
 80099f6:	334c      	adds	r3, #76	; 0x4c
 80099f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d113      	bne.n	8009a28 <HAL_PCD_IRQHandler+0x3a2>
 8009a00:	6879      	ldr	r1, [r7, #4]
 8009a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a04:	4613      	mov	r3, r2
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	4413      	add	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	440b      	add	r3, r1
 8009a0e:	3354      	adds	r3, #84	; 0x54
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d108      	bne.n	8009a28 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6818      	ldr	r0, [r3, #0]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a20:	461a      	mov	r2, r3
 8009a22:	2101      	movs	r1, #1
 8009a24:	f003 fa18 	bl	800ce58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f015 fec1 	bl	801f7b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	f003 0308 	and.w	r3, r3, #8
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d008      	beq.n	8009a50 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	2308      	movs	r3, #8
 8009a4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f003 0310 	and.w	r3, r3, #16
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d008      	beq.n	8009a6c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a66:	461a      	mov	r2, r3
 8009a68:	2310      	movs	r3, #16
 8009a6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d008      	beq.n	8009a88 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	015a      	lsls	r2, r3, #5
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a82:	461a      	mov	r2, r3
 8009a84:	2340      	movs	r3, #64	; 0x40
 8009a86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d023      	beq.n	8009ada <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009a92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a94:	6a38      	ldr	r0, [r7, #32]
 8009a96:	f002 f8f9 	bl	800bc8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	00db      	lsls	r3, r3, #3
 8009aa0:	4413      	add	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	3338      	adds	r3, #56	; 0x38
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	3304      	adds	r3, #4
 8009aac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	78db      	ldrb	r3, [r3, #3]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d108      	bne.n	8009ac8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f015 ff0e 	bl	801f8e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fcdb 	bl	800a4a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	3301      	adds	r3, #1
 8009af0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af4:	085b      	lsrs	r3, r3, #1
 8009af6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f47f af2e 	bne.w	800995c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f003 f8e3 	bl	800ccd0 <USB_ReadInterrupts>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b14:	d122      	bne.n	8009b5c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	69fa      	ldr	r2, [r7, #28]
 8009b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b24:	f023 0301 	bic.w	r3, r3, #1
 8009b28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d108      	bne.n	8009b46 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fec2 	bl	800a8c8 <HAL_PCDEx_LPM_Callback>
 8009b44:	e002      	b.n	8009b4c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f015 feac 	bl	801f8a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	695a      	ldr	r2, [r3, #20]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f003 f8b5 	bl	800ccd0 <USB_ReadInterrupts>
 8009b66:	4603      	mov	r3, r0
 8009b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b70:	d112      	bne.n	8009b98 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d102      	bne.n	8009b88 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f015 fe68 	bl	801f858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	695a      	ldr	r2, [r3, #20]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009b96:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f003 f897 	bl	800ccd0 <USB_ReadInterrupts>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bac:	f040 80b7 	bne.w	8009d1e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	69fa      	ldr	r2, [r7, #28]
 8009bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bbe:	f023 0301 	bic.w	r3, r3, #1
 8009bc2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2110      	movs	r1, #16
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f002 f85e 	bl	800bc8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bd4:	e046      	b.n	8009c64 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be2:	461a      	mov	r2, r3
 8009be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009be8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bfa:	0151      	lsls	r1, r2, #5
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	440a      	add	r2, r1
 8009c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c16:	461a      	mov	r2, r3
 8009c18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c1c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c2e:	0151      	lsls	r1, r2, #5
 8009c30:	69fa      	ldr	r2, [r7, #28]
 8009c32:	440a      	add	r2, r1
 8009c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c4e:	0151      	lsls	r1, r2, #5
 8009c50:	69fa      	ldr	r2, [r7, #28]
 8009c52:	440a      	add	r2, r1
 8009c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	3301      	adds	r3, #1
 8009c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d3b3      	bcc.n	8009bd6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	69fa      	ldr	r2, [r7, #28]
 8009c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009c80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d016      	beq.n	8009cb8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c94:	69fa      	ldr	r2, [r7, #28]
 8009c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c9a:	f043 030b 	orr.w	r3, r3, #11
 8009c9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009caa:	69fa      	ldr	r2, [r7, #28]
 8009cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cb0:	f043 030b 	orr.w	r3, r3, #11
 8009cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8009cb6:	e015      	b.n	8009ce4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	69fa      	ldr	r2, [r7, #28]
 8009cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009cca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009cce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	69fa      	ldr	r2, [r7, #28]
 8009cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cde:	f043 030b 	orr.w	r3, r3, #11
 8009ce2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	69fa      	ldr	r2, [r7, #28]
 8009cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009cf6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6818      	ldr	r0, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009d08:	461a      	mov	r2, r3
 8009d0a:	f003 f8a5 	bl	800ce58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	695a      	ldr	r2, [r3, #20]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f002 ffd4 	bl	800ccd0 <USB_ReadInterrupts>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d32:	d124      	bne.n	8009d7e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f003 f86a 	bl	800ce12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f002 f81f 	bl	800bd86 <USB_GetDevSpeed>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681c      	ldr	r4, [r3, #0]
 8009d54:	f001 fa28 	bl	800b1a8 <HAL_RCC_GetHCLKFreq>
 8009d58:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	461a      	mov	r2, r3
 8009d62:	4620      	mov	r0, r4
 8009d64:	f001 fd1e 	bl	800b7a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f015 fd4c 	bl	801f806 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	695a      	ldr	r2, [r3, #20]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f002 ffa4 	bl	800ccd0 <USB_ReadInterrupts>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	f003 0308 	and.w	r3, r3, #8
 8009d8e:	2b08      	cmp	r3, #8
 8009d90:	d10a      	bne.n	8009da8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f015 fd29 	bl	801f7ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	695a      	ldr	r2, [r3, #20]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f002 0208 	and.w	r2, r2, #8
 8009da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f002 ff8f 	bl	800ccd0 <USB_ReadInterrupts>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db8:	2b80      	cmp	r3, #128	; 0x80
 8009dba:	d122      	bne.n	8009e02 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009dc8:	2301      	movs	r3, #1
 8009dca:	627b      	str	r3, [r7, #36]	; 0x24
 8009dcc:	e014      	b.n	8009df8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009dce:	6879      	ldr	r1, [r7, #4]
 8009dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	00db      	lsls	r3, r3, #3
 8009dd6:	4413      	add	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	440b      	add	r3, r1
 8009ddc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d105      	bne.n	8009df2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fb27 	bl	800a440 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	3301      	adds	r3, #1
 8009df6:	627b      	str	r3, [r7, #36]	; 0x24
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d3e5      	bcc.n	8009dce <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f002 ff62 	bl	800ccd0 <USB_ReadInterrupts>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e16:	d13b      	bne.n	8009e90 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e18:	2301      	movs	r3, #1
 8009e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009e1c:	e02b      	b.n	8009e76 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	015a      	lsls	r2, r3, #5
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	4413      	add	r3, r2
 8009e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e2e:	6879      	ldr	r1, [r7, #4]
 8009e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e32:	4613      	mov	r3, r2
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	4413      	add	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	440b      	add	r3, r1
 8009e3c:	3340      	adds	r3, #64	; 0x40
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d115      	bne.n	8009e70 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009e44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	da12      	bge.n	8009e70 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4e:	4613      	mov	r3, r2
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	4413      	add	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	440b      	add	r3, r1
 8009e58:	333f      	adds	r3, #63	; 0x3f
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fae8 	bl	800a440 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	3301      	adds	r3, #1
 8009e74:	627b      	str	r3, [r7, #36]	; 0x24
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d3ce      	bcc.n	8009e1e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	695a      	ldr	r2, [r3, #20]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f002 ff1b 	bl	800ccd0 <USB_ReadInterrupts>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ea4:	d155      	bne.n	8009f52 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8009eaa:	e045      	b.n	8009f38 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	015a      	lsls	r2, r3, #5
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009ebc:	6879      	ldr	r1, [r7, #4]
 8009ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	440b      	add	r3, r1
 8009eca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d12e      	bne.n	8009f32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009ed4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	da2b      	bge.n	8009f32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009ee6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d121      	bne.n	8009f32 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	00db      	lsls	r3, r3, #3
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	440b      	add	r3, r1
 8009efc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009f00:	2201      	movs	r2, #1
 8009f02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	695b      	ldr	r3, [r3, #20]
 8009f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10a      	bne.n	8009f32 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	69fa      	ldr	r2, [r7, #28]
 8009f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f2e:	6053      	str	r3, [r2, #4]
            break;
 8009f30:	e007      	b.n	8009f42 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	3301      	adds	r3, #1
 8009f36:	627b      	str	r3, [r7, #36]	; 0x24
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d3b4      	bcc.n	8009eac <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	695a      	ldr	r2, [r3, #20]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f002 feba 	bl	800ccd0 <USB_ReadInterrupts>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f66:	d10a      	bne.n	8009f7e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f015 fccd 	bl	801f908 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	695a      	ldr	r2, [r3, #20]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4618      	mov	r0, r3
 8009f84:	f002 fea4 	bl	800ccd0 <USB_ReadInterrupts>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f003 0304 	and.w	r3, r3, #4
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d115      	bne.n	8009fbe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	f003 0304 	and.w	r3, r3, #4
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f015 fcbd 	bl	801f924 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6859      	ldr	r1, [r3, #4]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	69ba      	ldr	r2, [r7, #24]
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	605a      	str	r2, [r3, #4]
 8009fba:	e000      	b.n	8009fbe <HAL_PCD_IRQHandler+0x938>
      return;
 8009fbc:	bf00      	nop
    }
  }
}
 8009fbe:	3734      	adds	r7, #52	; 0x34
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd90      	pop	{r4, r7, pc}

08009fc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <HAL_PCD_SetAddress+0x1a>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e013      	b.n	800a006 <HAL_PCD_SetAddress+0x42>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	78fa      	ldrb	r2, [r7, #3]
 8009fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	78fa      	ldrb	r2, [r7, #3]
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f002 fe02 	bl	800cc00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	4608      	mov	r0, r1
 800a018:	4611      	mov	r1, r2
 800a01a:	461a      	mov	r2, r3
 800a01c:	4603      	mov	r3, r0
 800a01e:	70fb      	strb	r3, [r7, #3]
 800a020:	460b      	mov	r3, r1
 800a022:	803b      	strh	r3, [r7, #0]
 800a024:	4613      	mov	r3, r2
 800a026:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a02c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a030:	2b00      	cmp	r3, #0
 800a032:	da0f      	bge.n	800a054 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a034:	78fb      	ldrb	r3, [r7, #3]
 800a036:	f003 020f 	and.w	r2, r3, #15
 800a03a:	4613      	mov	r3, r2
 800a03c:	00db      	lsls	r3, r3, #3
 800a03e:	4413      	add	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	3338      	adds	r3, #56	; 0x38
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	4413      	add	r3, r2
 800a048:	3304      	adds	r3, #4
 800a04a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	705a      	strb	r2, [r3, #1]
 800a052:	e00f      	b.n	800a074 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	f003 020f 	and.w	r2, r3, #15
 800a05a:	4613      	mov	r3, r2
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	4413      	add	r3, r2
 800a06a:	3304      	adds	r3, #4
 800a06c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	f003 030f 	and.w	r3, r3, #15
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a080:	883a      	ldrh	r2, [r7, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	78ba      	ldrb	r2, [r7, #2]
 800a08a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	785b      	ldrb	r3, [r3, #1]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d004      	beq.n	800a09e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	b29a      	uxth	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a09e:	78bb      	ldrb	r3, [r7, #2]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d102      	bne.n	800a0aa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d101      	bne.n	800a0b8 <HAL_PCD_EP_Open+0xaa>
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	e00e      	b.n	800a0d6 <HAL_PCD_EP_Open+0xc8>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68f9      	ldr	r1, [r7, #12]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 fe82 	bl	800bdd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a0d4:	7afb      	ldrb	r3, [r7, #11]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a0ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	da0f      	bge.n	800a112 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0f2:	78fb      	ldrb	r3, [r7, #3]
 800a0f4:	f003 020f 	and.w	r2, r3, #15
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	4413      	add	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	3338      	adds	r3, #56	; 0x38
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	4413      	add	r3, r2
 800a106:	3304      	adds	r3, #4
 800a108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2201      	movs	r2, #1
 800a10e:	705a      	strb	r2, [r3, #1]
 800a110:	e00f      	b.n	800a132 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	f003 020f 	and.w	r2, r3, #15
 800a118:	4613      	mov	r3, r2
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	4413      	add	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	4413      	add	r3, r2
 800a128:	3304      	adds	r3, #4
 800a12a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a132:	78fb      	ldrb	r3, [r7, #3]
 800a134:	f003 030f 	and.w	r3, r3, #15
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a144:	2b01      	cmp	r3, #1
 800a146:	d101      	bne.n	800a14c <HAL_PCD_EP_Close+0x6e>
 800a148:	2302      	movs	r3, #2
 800a14a:	e00e      	b.n	800a16a <HAL_PCD_EP_Close+0x8c>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68f9      	ldr	r1, [r7, #12]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f001 fec0 	bl	800bee0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	603b      	str	r3, [r7, #0]
 800a17e:	460b      	mov	r3, r1
 800a180:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a182:	7afb      	ldrb	r3, [r7, #11]
 800a184:	f003 020f 	and.w	r2, r3, #15
 800a188:	4613      	mov	r3, r2
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	4413      	add	r3, r2
 800a198:	3304      	adds	r3, #4
 800a19a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1b4:	7afb      	ldrb	r3, [r7, #11]
 800a1b6:	f003 030f 	and.w	r3, r3, #15
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d102      	bne.n	800a1ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a1ce:	7afb      	ldrb	r3, [r7, #11]
 800a1d0:	f003 030f 	and.w	r3, r3, #15
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d109      	bne.n	800a1ec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6818      	ldr	r0, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	6979      	ldr	r1, [r7, #20]
 800a1e6:	f002 f99f 	bl	800c528 <USB_EP0StartXfer>
 800a1ea:	e008      	b.n	800a1fe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6818      	ldr	r0, [r3, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	6979      	ldr	r1, [r7, #20]
 800a1fa:	f001 ff4d 	bl	800c098 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	460b      	mov	r3, r1
 800a212:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	f003 020f 	and.w	r2, r3, #15
 800a21a:	6879      	ldr	r1, [r7, #4]
 800a21c:	4613      	mov	r3, r2
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	4413      	add	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	440b      	add	r3, r1
 800a226:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a22a:	681b      	ldr	r3, [r3, #0]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	607a      	str	r2, [r7, #4]
 800a242:	603b      	str	r3, [r7, #0]
 800a244:	460b      	mov	r3, r1
 800a246:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a248:	7afb      	ldrb	r3, [r7, #11]
 800a24a:	f003 020f 	and.w	r2, r3, #15
 800a24e:	4613      	mov	r3, r2
 800a250:	00db      	lsls	r3, r3, #3
 800a252:	4413      	add	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	3338      	adds	r3, #56	; 0x38
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	3304      	adds	r3, #4
 800a25e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2200      	movs	r2, #0
 800a270:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2201      	movs	r2, #1
 800a276:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a278:	7afb      	ldrb	r3, [r7, #11]
 800a27a:	f003 030f 	and.w	r3, r3, #15
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d102      	bne.n	800a292 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a292:	7afb      	ldrb	r3, [r7, #11]
 800a294:	f003 030f 	and.w	r3, r3, #15
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d109      	bne.n	800a2b0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6818      	ldr	r0, [r3, #0]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	6979      	ldr	r1, [r7, #20]
 800a2aa:	f002 f93d 	bl	800c528 <USB_EP0StartXfer>
 800a2ae:	e008      	b.n	800a2c2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6818      	ldr	r0, [r3, #0]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	6979      	ldr	r1, [r7, #20]
 800a2be:	f001 feeb 	bl	800c098 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a2d8:	78fb      	ldrb	r3, [r7, #3]
 800a2da:	f003 020f 	and.w	r2, r3, #15
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d901      	bls.n	800a2ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e050      	b.n	800a38c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a2ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	da0f      	bge.n	800a312 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2f2:	78fb      	ldrb	r3, [r7, #3]
 800a2f4:	f003 020f 	and.w	r2, r3, #15
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	4413      	add	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	3338      	adds	r3, #56	; 0x38
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	4413      	add	r3, r2
 800a306:	3304      	adds	r3, #4
 800a308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	705a      	strb	r2, [r3, #1]
 800a310:	e00d      	b.n	800a32e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a312:	78fa      	ldrb	r2, [r7, #3]
 800a314:	4613      	mov	r3, r2
 800a316:	00db      	lsls	r3, r3, #3
 800a318:	4413      	add	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	4413      	add	r3, r2
 800a324:	3304      	adds	r3, #4
 800a326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a334:	78fb      	ldrb	r3, [r7, #3]
 800a336:	f003 030f 	and.w	r3, r3, #15
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a346:	2b01      	cmp	r3, #1
 800a348:	d101      	bne.n	800a34e <HAL_PCD_EP_SetStall+0x82>
 800a34a:	2302      	movs	r3, #2
 800a34c:	e01e      	b.n	800a38c <HAL_PCD_EP_SetStall+0xc0>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68f9      	ldr	r1, [r7, #12]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f002 fb7b 	bl	800ca58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a362:	78fb      	ldrb	r3, [r7, #3]
 800a364:	f003 030f 	and.w	r3, r3, #15
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6818      	ldr	r0, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	b2d9      	uxtb	r1, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a37c:	461a      	mov	r2, r3
 800a37e:	f002 fd6b 	bl	800ce58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	460b      	mov	r3, r1
 800a39e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a3a0:	78fb      	ldrb	r3, [r7, #3]
 800a3a2:	f003 020f 	and.w	r2, r3, #15
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d901      	bls.n	800a3b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e042      	b.n	800a438 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a3b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	da0f      	bge.n	800a3da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3ba:	78fb      	ldrb	r3, [r7, #3]
 800a3bc:	f003 020f 	and.w	r2, r3, #15
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	4413      	add	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	3338      	adds	r3, #56	; 0x38
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	705a      	strb	r2, [r3, #1]
 800a3d8:	e00f      	b.n	800a3fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	f003 020f 	and.w	r2, r3, #15
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	00db      	lsls	r3, r3, #3
 800a3e4:	4413      	add	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	f003 030f 	and.w	r3, r3, #15
 800a406:	b2da      	uxtb	r2, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a412:	2b01      	cmp	r3, #1
 800a414:	d101      	bne.n	800a41a <HAL_PCD_EP_ClrStall+0x86>
 800a416:	2302      	movs	r3, #2
 800a418:	e00e      	b.n	800a438 <HAL_PCD_EP_ClrStall+0xa4>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68f9      	ldr	r1, [r7, #12]
 800a428:	4618      	mov	r0, r3
 800a42a:	f002 fb83 	bl	800cb34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a44c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a450:	2b00      	cmp	r3, #0
 800a452:	da0c      	bge.n	800a46e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a454:	78fb      	ldrb	r3, [r7, #3]
 800a456:	f003 020f 	and.w	r2, r3, #15
 800a45a:	4613      	mov	r3, r2
 800a45c:	00db      	lsls	r3, r3, #3
 800a45e:	4413      	add	r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	3338      	adds	r3, #56	; 0x38
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	4413      	add	r3, r2
 800a468:	3304      	adds	r3, #4
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	e00c      	b.n	800a488 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a46e:	78fb      	ldrb	r3, [r7, #3]
 800a470:	f003 020f 	and.w	r2, r3, #15
 800a474:	4613      	mov	r3, r2
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	4413      	add	r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	4413      	add	r3, r2
 800a484:	3304      	adds	r3, #4
 800a486:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68f9      	ldr	r1, [r7, #12]
 800a48e:	4618      	mov	r0, r3
 800a490:	f002 f9a2 	bl	800c7d8 <USB_EPStopXfer>
 800a494:	4603      	mov	r3, r0
 800a496:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a498:	7afb      	ldrb	r3, [r7, #11]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b08a      	sub	sp, #40	; 0x28
 800a4a6:	af02      	add	r7, sp, #8
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	4413      	add	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	3338      	adds	r3, #56	; 0x38
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6a1a      	ldr	r2, [r3, #32]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d901      	bls.n	800a4da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e06c      	b.n	800a5b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	699a      	ldr	r2, [r3, #24]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	69fa      	ldr	r2, [r7, #28]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d902      	bls.n	800a4f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	3303      	adds	r3, #3
 800a4fa:	089b      	lsrs	r3, r3, #2
 800a4fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a4fe:	e02b      	b.n	800a558 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	699a      	ldr	r2, [r3, #24]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6a1b      	ldr	r3, [r3, #32]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	69fa      	ldr	r2, [r7, #28]
 800a512:	429a      	cmp	r2, r3
 800a514:	d902      	bls.n	800a51c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	3303      	adds	r3, #3
 800a520:	089b      	lsrs	r3, r3, #2
 800a522:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6919      	ldr	r1, [r3, #16]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a534:	b2db      	uxtb	r3, r3
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	4603      	mov	r3, r0
 800a53a:	6978      	ldr	r0, [r7, #20]
 800a53c:	f002 f9f6 	bl	800c92c <USB_WritePacket>

    ep->xfer_buff  += len;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	691a      	ldr	r2, [r3, #16]
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	441a      	add	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6a1a      	ldr	r2, [r3, #32]
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	441a      	add	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	015a      	lsls	r2, r3, #5
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	b29b      	uxth	r3, r3
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d809      	bhi.n	800a582 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6a1a      	ldr	r2, [r3, #32]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a576:	429a      	cmp	r2, r3
 800a578:	d203      	bcs.n	800a582 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1be      	bne.n	800a500 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	699a      	ldr	r2, [r3, #24]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d811      	bhi.n	800a5b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	f003 030f 	and.w	r3, r3, #15
 800a594:	2201      	movs	r2, #1
 800a596:	fa02 f303 	lsl.w	r3, r2, r3
 800a59a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	43db      	mvns	r3, r3
 800a5a8:	6939      	ldr	r1, [r7, #16]
 800a5aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3720      	adds	r7, #32
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	333c      	adds	r3, #60	; 0x3c
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	015a      	lsls	r2, r3, #5
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d17b      	bne.n	800a6ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	f003 0308 	and.w	r3, r3, #8
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d015      	beq.n	800a628 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	4a61      	ldr	r2, [pc, #388]	; (800a784 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a600:	4293      	cmp	r3, r2
 800a602:	f240 80b9 	bls.w	800a778 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 80b3 	beq.w	800a778 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a61e:	461a      	mov	r2, r3
 800a620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a624:	6093      	str	r3, [r2, #8]
 800a626:	e0a7      	b.n	800a778 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f003 0320 	and.w	r3, r3, #32
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d009      	beq.n	800a646 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	015a      	lsls	r2, r3, #5
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	4413      	add	r3, r2
 800a63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63e:	461a      	mov	r2, r3
 800a640:	2320      	movs	r3, #32
 800a642:	6093      	str	r3, [r2, #8]
 800a644:	e098      	b.n	800a778 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f040 8093 	bne.w	800a778 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	4a4b      	ldr	r2, [pc, #300]	; (800a784 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d90f      	bls.n	800a67a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00a      	beq.n	800a67a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a670:	461a      	mov	r2, r3
 800a672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a676:	6093      	str	r3, [r2, #8]
 800a678:	e07e      	b.n	800a778 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	4613      	mov	r3, r2
 800a67e:	00db      	lsls	r3, r3, #3
 800a680:	4413      	add	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	4413      	add	r3, r2
 800a68c:	3304      	adds	r3, #4
 800a68e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	69da      	ldr	r2, [r3, #28]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	0159      	lsls	r1, r3, #5
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	440b      	add	r3, r1
 800a69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6a6:	1ad2      	subs	r2, r2, r3
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d114      	bne.n	800a6dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	f002 fbc6 	bl	800ce58 <USB_EP0_OutStart>
 800a6cc:	e006      	b.n	800a6dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	691a      	ldr	r2, [r3, #16]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	441a      	add	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f015 f84c 	bl	801f780 <HAL_PCD_DataOutStageCallback>
 800a6e8:	e046      	b.n	800a778 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	4a26      	ldr	r2, [pc, #152]	; (800a788 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d124      	bne.n	800a73c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00a      	beq.n	800a712 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a708:	461a      	mov	r2, r3
 800a70a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a70e:	6093      	str	r3, [r2, #8]
 800a710:	e032      	b.n	800a778 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	f003 0320 	and.w	r3, r3, #32
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d008      	beq.n	800a72e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	015a      	lsls	r2, r3, #5
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	4413      	add	r3, r2
 800a724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a728:	461a      	mov	r2, r3
 800a72a:	2320      	movs	r3, #32
 800a72c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	b2db      	uxtb	r3, r3
 800a732:	4619      	mov	r1, r3
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f015 f823 	bl	801f780 <HAL_PCD_DataOutStageCallback>
 800a73a:	e01d      	b.n	800a778 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d114      	bne.n	800a76c <PCD_EP_OutXfrComplete_int+0x1b0>
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	4613      	mov	r3, r2
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	4413      	add	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	440b      	add	r3, r1
 800a750:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d108      	bne.n	800a76c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6818      	ldr	r0, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a764:	461a      	mov	r2, r3
 800a766:	2100      	movs	r1, #0
 800a768:	f002 fb76 	bl	800ce58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f015 f804 	bl	801f780 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3720      	adds	r7, #32
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	4f54300a 	.word	0x4f54300a
 800a788:	4f54310a 	.word	0x4f54310a

0800a78c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	333c      	adds	r3, #60	; 0x3c
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	4a15      	ldr	r2, [pc, #84]	; (800a814 <PCD_EP_OutSetupPacket_int+0x88>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d90e      	bls.n	800a7e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d009      	beq.n	800a7e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d8:	461a      	mov	r2, r3
 800a7da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f014 ffbb 	bl	801f75c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4a0a      	ldr	r2, [pc, #40]	; (800a814 <PCD_EP_OutSetupPacket_int+0x88>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d90c      	bls.n	800a808 <PCD_EP_OutSetupPacket_int+0x7c>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d108      	bne.n	800a808 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a800:	461a      	mov	r2, r3
 800a802:	2101      	movs	r1, #1
 800a804:	f002 fb28 	bl	800ce58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	4f54300a 	.word	0x4f54300a

0800a818 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	460b      	mov	r3, r1
 800a822:	70fb      	strb	r3, [r7, #3]
 800a824:	4613      	mov	r3, r2
 800a826:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d107      	bne.n	800a846 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a836:	883b      	ldrh	r3, [r7, #0]
 800a838:	0419      	lsls	r1, r3, #16
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	430a      	orrs	r2, r1
 800a842:	629a      	str	r2, [r3, #40]	; 0x28
 800a844:	e028      	b.n	800a898 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a84c:	0c1b      	lsrs	r3, r3, #16
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	4413      	add	r3, r2
 800a852:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a854:	2300      	movs	r3, #0
 800a856:	73fb      	strb	r3, [r7, #15]
 800a858:	e00d      	b.n	800a876 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	3340      	adds	r3, #64	; 0x40
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	0c1b      	lsrs	r3, r3, #16
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	4413      	add	r3, r2
 800a86e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	3301      	adds	r3, #1
 800a874:	73fb      	strb	r3, [r7, #15]
 800a876:	7bfa      	ldrb	r2, [r7, #15]
 800a878:	78fb      	ldrb	r3, [r7, #3]
 800a87a:	3b01      	subs	r3, #1
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d3ec      	bcc.n	800a85a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a880:	883b      	ldrh	r3, [r7, #0]
 800a882:	0418      	lsls	r0, r3, #16
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6819      	ldr	r1, [r3, #0]
 800a888:	78fb      	ldrb	r3, [r7, #3]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	4302      	orrs	r2, r0
 800a890:	3340      	adds	r3, #64	; 0x40
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	440b      	add	r3, r1
 800a896:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	887a      	ldrh	r2, [r7, #2]
 800a8b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b086      	sub	sp, #24
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d101      	bne.n	800a8f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e267      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0301 	and.w	r3, r3, #1
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d075      	beq.n	800a9ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a8fe:	4b88      	ldr	r3, [pc, #544]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f003 030c 	and.w	r3, r3, #12
 800a906:	2b04      	cmp	r3, #4
 800a908:	d00c      	beq.n	800a924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a90a:	4b85      	ldr	r3, [pc, #532]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a912:	2b08      	cmp	r3, #8
 800a914:	d112      	bne.n	800a93c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a916:	4b82      	ldr	r3, [pc, #520]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a91e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a922:	d10b      	bne.n	800a93c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a924:	4b7e      	ldr	r3, [pc, #504]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d05b      	beq.n	800a9e8 <HAL_RCC_OscConfig+0x108>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d157      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e242      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a944:	d106      	bne.n	800a954 <HAL_RCC_OscConfig+0x74>
 800a946:	4b76      	ldr	r3, [pc, #472]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a75      	ldr	r2, [pc, #468]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a94c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	e01d      	b.n	800a990 <HAL_RCC_OscConfig+0xb0>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a95c:	d10c      	bne.n	800a978 <HAL_RCC_OscConfig+0x98>
 800a95e:	4b70      	ldr	r3, [pc, #448]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a6f      	ldr	r2, [pc, #444]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	4b6d      	ldr	r3, [pc, #436]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a6c      	ldr	r2, [pc, #432]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	e00b      	b.n	800a990 <HAL_RCC_OscConfig+0xb0>
 800a978:	4b69      	ldr	r3, [pc, #420]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a68      	ldr	r2, [pc, #416]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a97e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	4b66      	ldr	r3, [pc, #408]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a65      	ldr	r2, [pc, #404]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a98a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a98e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d013      	beq.n	800a9c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a998:	f7fe fa12 	bl	8008dc0 <HAL_GetTick>
 800a99c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a99e:	e008      	b.n	800a9b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a9a0:	f7fe fa0e 	bl	8008dc0 <HAL_GetTick>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	2b64      	cmp	r3, #100	; 0x64
 800a9ac:	d901      	bls.n	800a9b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e207      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9b2:	4b5b      	ldr	r3, [pc, #364]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d0f0      	beq.n	800a9a0 <HAL_RCC_OscConfig+0xc0>
 800a9be:	e014      	b.n	800a9ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9c0:	f7fe f9fe 	bl	8008dc0 <HAL_GetTick>
 800a9c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9c6:	e008      	b.n	800a9da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a9c8:	f7fe f9fa 	bl	8008dc0 <HAL_GetTick>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	2b64      	cmp	r3, #100	; 0x64
 800a9d4:	d901      	bls.n	800a9da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e1f3      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9da:	4b51      	ldr	r3, [pc, #324]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f0      	bne.n	800a9c8 <HAL_RCC_OscConfig+0xe8>
 800a9e6:	e000      	b.n	800a9ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0302 	and.w	r3, r3, #2
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d063      	beq.n	800aabe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a9f6:	4b4a      	ldr	r3, [pc, #296]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f003 030c 	and.w	r3, r3, #12
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00b      	beq.n	800aa1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa02:	4b47      	ldr	r3, [pc, #284]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aa0a:	2b08      	cmp	r3, #8
 800aa0c:	d11c      	bne.n	800aa48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa0e:	4b44      	ldr	r3, [pc, #272]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d116      	bne.n	800aa48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa1a:	4b41      	ldr	r3, [pc, #260]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 0302 	and.w	r3, r3, #2
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d005      	beq.n	800aa32 <HAL_RCC_OscConfig+0x152>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d001      	beq.n	800aa32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e1c7      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa32:	4b3b      	ldr	r3, [pc, #236]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	4937      	ldr	r1, [pc, #220]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa46:	e03a      	b.n	800aabe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d020      	beq.n	800aa92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa50:	4b34      	ldr	r3, [pc, #208]	; (800ab24 <HAL_RCC_OscConfig+0x244>)
 800aa52:	2201      	movs	r2, #1
 800aa54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa56:	f7fe f9b3 	bl	8008dc0 <HAL_GetTick>
 800aa5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa5c:	e008      	b.n	800aa70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa5e:	f7fe f9af 	bl	8008dc0 <HAL_GetTick>
 800aa62:	4602      	mov	r2, r0
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	1ad3      	subs	r3, r2, r3
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d901      	bls.n	800aa70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	e1a8      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa70:	4b2b      	ldr	r3, [pc, #172]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0302 	and.w	r3, r3, #2
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d0f0      	beq.n	800aa5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa7c:	4b28      	ldr	r3, [pc, #160]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	00db      	lsls	r3, r3, #3
 800aa8a:	4925      	ldr	r1, [pc, #148]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	600b      	str	r3, [r1, #0]
 800aa90:	e015      	b.n	800aabe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa92:	4b24      	ldr	r3, [pc, #144]	; (800ab24 <HAL_RCC_OscConfig+0x244>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa98:	f7fe f992 	bl	8008dc0 <HAL_GetTick>
 800aa9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa9e:	e008      	b.n	800aab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aaa0:	f7fe f98e 	bl	8008dc0 <HAL_GetTick>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d901      	bls.n	800aab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e187      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aab2:	4b1b      	ldr	r3, [pc, #108]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 0302 	and.w	r3, r3, #2
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1f0      	bne.n	800aaa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0308 	and.w	r3, r3, #8
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d036      	beq.n	800ab38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d016      	beq.n	800ab00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aad2:	4b15      	ldr	r3, [pc, #84]	; (800ab28 <HAL_RCC_OscConfig+0x248>)
 800aad4:	2201      	movs	r2, #1
 800aad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aad8:	f7fe f972 	bl	8008dc0 <HAL_GetTick>
 800aadc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aade:	e008      	b.n	800aaf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aae0:	f7fe f96e 	bl	8008dc0 <HAL_GetTick>
 800aae4:	4602      	mov	r2, r0
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d901      	bls.n	800aaf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e167      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaf2:	4b0b      	ldr	r3, [pc, #44]	; (800ab20 <HAL_RCC_OscConfig+0x240>)
 800aaf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0f0      	beq.n	800aae0 <HAL_RCC_OscConfig+0x200>
 800aafe:	e01b      	b.n	800ab38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab00:	4b09      	ldr	r3, [pc, #36]	; (800ab28 <HAL_RCC_OscConfig+0x248>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab06:	f7fe f95b 	bl	8008dc0 <HAL_GetTick>
 800ab0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab0c:	e00e      	b.n	800ab2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab0e:	f7fe f957 	bl	8008dc0 <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d907      	bls.n	800ab2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e150      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
 800ab20:	40023800 	.word	0x40023800
 800ab24:	42470000 	.word	0x42470000
 800ab28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab2c:	4b88      	ldr	r3, [pc, #544]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ab2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab30:	f003 0302 	and.w	r3, r3, #2
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1ea      	bne.n	800ab0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 8097 	beq.w	800ac74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab46:	2300      	movs	r3, #0
 800ab48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab4a:	4b81      	ldr	r3, [pc, #516]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10f      	bne.n	800ab76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab56:	2300      	movs	r3, #0
 800ab58:	60bb      	str	r3, [r7, #8]
 800ab5a:	4b7d      	ldr	r3, [pc, #500]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ab5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5e:	4a7c      	ldr	r2, [pc, #496]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ab60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab64:	6413      	str	r3, [r2, #64]	; 0x40
 800ab66:	4b7a      	ldr	r3, [pc, #488]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ab68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab6e:	60bb      	str	r3, [r7, #8]
 800ab70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab72:	2301      	movs	r3, #1
 800ab74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab76:	4b77      	ldr	r3, [pc, #476]	; (800ad54 <HAL_RCC_OscConfig+0x474>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d118      	bne.n	800abb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab82:	4b74      	ldr	r3, [pc, #464]	; (800ad54 <HAL_RCC_OscConfig+0x474>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a73      	ldr	r2, [pc, #460]	; (800ad54 <HAL_RCC_OscConfig+0x474>)
 800ab88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab8e:	f7fe f917 	bl	8008dc0 <HAL_GetTick>
 800ab92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab94:	e008      	b.n	800aba8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab96:	f7fe f913 	bl	8008dc0 <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d901      	bls.n	800aba8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e10c      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aba8:	4b6a      	ldr	r3, [pc, #424]	; (800ad54 <HAL_RCC_OscConfig+0x474>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d0f0      	beq.n	800ab96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d106      	bne.n	800abca <HAL_RCC_OscConfig+0x2ea>
 800abbc:	4b64      	ldr	r3, [pc, #400]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800abbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc0:	4a63      	ldr	r2, [pc, #396]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800abc2:	f043 0301 	orr.w	r3, r3, #1
 800abc6:	6713      	str	r3, [r2, #112]	; 0x70
 800abc8:	e01c      	b.n	800ac04 <HAL_RCC_OscConfig+0x324>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	2b05      	cmp	r3, #5
 800abd0:	d10c      	bne.n	800abec <HAL_RCC_OscConfig+0x30c>
 800abd2:	4b5f      	ldr	r3, [pc, #380]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800abd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd6:	4a5e      	ldr	r2, [pc, #376]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800abd8:	f043 0304 	orr.w	r3, r3, #4
 800abdc:	6713      	str	r3, [r2, #112]	; 0x70
 800abde:	4b5c      	ldr	r3, [pc, #368]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800abe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe2:	4a5b      	ldr	r2, [pc, #364]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800abe4:	f043 0301 	orr.w	r3, r3, #1
 800abe8:	6713      	str	r3, [r2, #112]	; 0x70
 800abea:	e00b      	b.n	800ac04 <HAL_RCC_OscConfig+0x324>
 800abec:	4b58      	ldr	r3, [pc, #352]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800abee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf0:	4a57      	ldr	r2, [pc, #348]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800abf2:	f023 0301 	bic.w	r3, r3, #1
 800abf6:	6713      	str	r3, [r2, #112]	; 0x70
 800abf8:	4b55      	ldr	r3, [pc, #340]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800abfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abfc:	4a54      	ldr	r2, [pc, #336]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800abfe:	f023 0304 	bic.w	r3, r3, #4
 800ac02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d015      	beq.n	800ac38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac0c:	f7fe f8d8 	bl	8008dc0 <HAL_GetTick>
 800ac10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac12:	e00a      	b.n	800ac2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac14:	f7fe f8d4 	bl	8008dc0 <HAL_GetTick>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d901      	bls.n	800ac2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e0cb      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac2a:	4b49      	ldr	r3, [pc, #292]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ac2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2e:	f003 0302 	and.w	r3, r3, #2
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0ee      	beq.n	800ac14 <HAL_RCC_OscConfig+0x334>
 800ac36:	e014      	b.n	800ac62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac38:	f7fe f8c2 	bl	8008dc0 <HAL_GetTick>
 800ac3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac3e:	e00a      	b.n	800ac56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac40:	f7fe f8be 	bl	8008dc0 <HAL_GetTick>
 800ac44:	4602      	mov	r2, r0
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d901      	bls.n	800ac56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e0b5      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac56:	4b3e      	ldr	r3, [pc, #248]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ac58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1ee      	bne.n	800ac40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d105      	bne.n	800ac74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac68:	4b39      	ldr	r3, [pc, #228]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ac6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6c:	4a38      	ldr	r2, [pc, #224]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ac6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 80a1 	beq.w	800adc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ac7e:	4b34      	ldr	r3, [pc, #208]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f003 030c 	and.w	r3, r3, #12
 800ac86:	2b08      	cmp	r3, #8
 800ac88:	d05c      	beq.n	800ad44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d141      	bne.n	800ad16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac92:	4b31      	ldr	r3, [pc, #196]	; (800ad58 <HAL_RCC_OscConfig+0x478>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac98:	f7fe f892 	bl	8008dc0 <HAL_GetTick>
 800ac9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac9e:	e008      	b.n	800acb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aca0:	f7fe f88e 	bl	8008dc0 <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d901      	bls.n	800acb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e087      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acb2:	4b27      	ldr	r3, [pc, #156]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1f0      	bne.n	800aca0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	69da      	ldr	r2, [r3, #28]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	431a      	orrs	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800accc:	019b      	lsls	r3, r3, #6
 800acce:	431a      	orrs	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd4:	085b      	lsrs	r3, r3, #1
 800acd6:	3b01      	subs	r3, #1
 800acd8:	041b      	lsls	r3, r3, #16
 800acda:	431a      	orrs	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace0:	061b      	lsls	r3, r3, #24
 800ace2:	491b      	ldr	r1, [pc, #108]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ace4:	4313      	orrs	r3, r2
 800ace6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ace8:	4b1b      	ldr	r3, [pc, #108]	; (800ad58 <HAL_RCC_OscConfig+0x478>)
 800acea:	2201      	movs	r2, #1
 800acec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acee:	f7fe f867 	bl	8008dc0 <HAL_GetTick>
 800acf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acf4:	e008      	b.n	800ad08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800acf6:	f7fe f863 	bl	8008dc0 <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d901      	bls.n	800ad08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e05c      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad08:	4b11      	ldr	r3, [pc, #68]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d0f0      	beq.n	800acf6 <HAL_RCC_OscConfig+0x416>
 800ad14:	e054      	b.n	800adc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad16:	4b10      	ldr	r3, [pc, #64]	; (800ad58 <HAL_RCC_OscConfig+0x478>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad1c:	f7fe f850 	bl	8008dc0 <HAL_GetTick>
 800ad20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad22:	e008      	b.n	800ad36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad24:	f7fe f84c 	bl	8008dc0 <HAL_GetTick>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d901      	bls.n	800ad36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e045      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad36:	4b06      	ldr	r3, [pc, #24]	; (800ad50 <HAL_RCC_OscConfig+0x470>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1f0      	bne.n	800ad24 <HAL_RCC_OscConfig+0x444>
 800ad42:	e03d      	b.n	800adc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d107      	bne.n	800ad5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e038      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
 800ad50:	40023800 	.word	0x40023800
 800ad54:	40007000 	.word	0x40007000
 800ad58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ad5c:	4b1b      	ldr	r3, [pc, #108]	; (800adcc <HAL_RCC_OscConfig+0x4ec>)
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d028      	beq.n	800adbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d121      	bne.n	800adbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d11a      	bne.n	800adbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ad92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d111      	bne.n	800adbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada2:	085b      	lsrs	r3, r3, #1
 800ada4:	3b01      	subs	r3, #1
 800ada6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d107      	bne.n	800adbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800adb8:	429a      	cmp	r2, r3
 800adba:	d001      	beq.n	800adc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e000      	b.n	800adc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3718      	adds	r7, #24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	40023800 	.word	0x40023800

0800add0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e0cc      	b.n	800af7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ade4:	4b68      	ldr	r3, [pc, #416]	; (800af88 <HAL_RCC_ClockConfig+0x1b8>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 0307 	and.w	r3, r3, #7
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d90c      	bls.n	800ae0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adf2:	4b65      	ldr	r3, [pc, #404]	; (800af88 <HAL_RCC_ClockConfig+0x1b8>)
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	b2d2      	uxtb	r2, r2
 800adf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adfa:	4b63      	ldr	r3, [pc, #396]	; (800af88 <HAL_RCC_ClockConfig+0x1b8>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d001      	beq.n	800ae0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e0b8      	b.n	800af7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0302 	and.w	r3, r3, #2
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d020      	beq.n	800ae5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0304 	and.w	r3, r3, #4
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d005      	beq.n	800ae30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae24:	4b59      	ldr	r3, [pc, #356]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	4a58      	ldr	r2, [pc, #352]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800ae2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ae2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 0308 	and.w	r3, r3, #8
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d005      	beq.n	800ae48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae3c:	4b53      	ldr	r3, [pc, #332]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	4a52      	ldr	r2, [pc, #328]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800ae42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ae46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae48:	4b50      	ldr	r3, [pc, #320]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	494d      	ldr	r1, [pc, #308]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800ae56:	4313      	orrs	r3, r2
 800ae58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d044      	beq.n	800aef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d107      	bne.n	800ae7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae6e:	4b47      	ldr	r3, [pc, #284]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d119      	bne.n	800aeae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e07f      	b.n	800af7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d003      	beq.n	800ae8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d107      	bne.n	800ae9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae8e:	4b3f      	ldr	r3, [pc, #252]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d109      	bne.n	800aeae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e06f      	b.n	800af7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae9e:	4b3b      	ldr	r3, [pc, #236]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d101      	bne.n	800aeae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e067      	b.n	800af7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aeae:	4b37      	ldr	r3, [pc, #220]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f023 0203 	bic.w	r2, r3, #3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	4934      	ldr	r1, [pc, #208]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800aebc:	4313      	orrs	r3, r2
 800aebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aec0:	f7fd ff7e 	bl	8008dc0 <HAL_GetTick>
 800aec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aec6:	e00a      	b.n	800aede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aec8:	f7fd ff7a 	bl	8008dc0 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d901      	bls.n	800aede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e04f      	b.n	800af7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aede:	4b2b      	ldr	r3, [pc, #172]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f003 020c 	and.w	r2, r3, #12
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d1eb      	bne.n	800aec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aef0:	4b25      	ldr	r3, [pc, #148]	; (800af88 <HAL_RCC_ClockConfig+0x1b8>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 0307 	and.w	r3, r3, #7
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d20c      	bcs.n	800af18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aefe:	4b22      	ldr	r3, [pc, #136]	; (800af88 <HAL_RCC_ClockConfig+0x1b8>)
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	b2d2      	uxtb	r2, r2
 800af04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af06:	4b20      	ldr	r3, [pc, #128]	; (800af88 <HAL_RCC_ClockConfig+0x1b8>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 0307 	and.w	r3, r3, #7
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d001      	beq.n	800af18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e032      	b.n	800af7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0304 	and.w	r3, r3, #4
 800af20:	2b00      	cmp	r3, #0
 800af22:	d008      	beq.n	800af36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af24:	4b19      	ldr	r3, [pc, #100]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	4916      	ldr	r1, [pc, #88]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800af32:	4313      	orrs	r3, r2
 800af34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 0308 	and.w	r3, r3, #8
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d009      	beq.n	800af56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af42:	4b12      	ldr	r3, [pc, #72]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	00db      	lsls	r3, r3, #3
 800af50:	490e      	ldr	r1, [pc, #56]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800af52:	4313      	orrs	r3, r2
 800af54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800af56:	f000 f821 	bl	800af9c <HAL_RCC_GetSysClockFreq>
 800af5a:	4602      	mov	r2, r0
 800af5c:	4b0b      	ldr	r3, [pc, #44]	; (800af8c <HAL_RCC_ClockConfig+0x1bc>)
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	091b      	lsrs	r3, r3, #4
 800af62:	f003 030f 	and.w	r3, r3, #15
 800af66:	490a      	ldr	r1, [pc, #40]	; (800af90 <HAL_RCC_ClockConfig+0x1c0>)
 800af68:	5ccb      	ldrb	r3, [r1, r3]
 800af6a:	fa22 f303 	lsr.w	r3, r2, r3
 800af6e:	4a09      	ldr	r2, [pc, #36]	; (800af94 <HAL_RCC_ClockConfig+0x1c4>)
 800af70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800af72:	4b09      	ldr	r3, [pc, #36]	; (800af98 <HAL_RCC_ClockConfig+0x1c8>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4618      	mov	r0, r3
 800af78:	f7fd fede 	bl	8008d38 <HAL_InitTick>

  return HAL_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	40023c00 	.word	0x40023c00
 800af8c:	40023800 	.word	0x40023800
 800af90:	08028cd0 	.word	0x08028cd0
 800af94:	20000060 	.word	0x20000060
 800af98:	20000064 	.word	0x20000064

0800af9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afa0:	b094      	sub	sp, #80	; 0x50
 800afa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800afa4:	2300      	movs	r3, #0
 800afa6:	647b      	str	r3, [r7, #68]	; 0x44
 800afa8:	2300      	movs	r3, #0
 800afaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afac:	2300      	movs	r3, #0
 800afae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800afb0:	2300      	movs	r3, #0
 800afb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afb4:	4b79      	ldr	r3, [pc, #484]	; (800b19c <HAL_RCC_GetSysClockFreq+0x200>)
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	f003 030c 	and.w	r3, r3, #12
 800afbc:	2b08      	cmp	r3, #8
 800afbe:	d00d      	beq.n	800afdc <HAL_RCC_GetSysClockFreq+0x40>
 800afc0:	2b08      	cmp	r3, #8
 800afc2:	f200 80e1 	bhi.w	800b188 <HAL_RCC_GetSysClockFreq+0x1ec>
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d002      	beq.n	800afd0 <HAL_RCC_GetSysClockFreq+0x34>
 800afca:	2b04      	cmp	r3, #4
 800afcc:	d003      	beq.n	800afd6 <HAL_RCC_GetSysClockFreq+0x3a>
 800afce:	e0db      	b.n	800b188 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800afd0:	4b73      	ldr	r3, [pc, #460]	; (800b1a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800afd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800afd4:	e0db      	b.n	800b18e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800afd6:	4b73      	ldr	r3, [pc, #460]	; (800b1a4 <HAL_RCC_GetSysClockFreq+0x208>)
 800afd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800afda:	e0d8      	b.n	800b18e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800afdc:	4b6f      	ldr	r3, [pc, #444]	; (800b19c <HAL_RCC_GetSysClockFreq+0x200>)
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afe4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800afe6:	4b6d      	ldr	r3, [pc, #436]	; (800b19c <HAL_RCC_GetSysClockFreq+0x200>)
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d063      	beq.n	800b0ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aff2:	4b6a      	ldr	r3, [pc, #424]	; (800b19c <HAL_RCC_GetSysClockFreq+0x200>)
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	099b      	lsrs	r3, r3, #6
 800aff8:	2200      	movs	r2, #0
 800affa:	63bb      	str	r3, [r7, #56]	; 0x38
 800affc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b004:	633b      	str	r3, [r7, #48]	; 0x30
 800b006:	2300      	movs	r3, #0
 800b008:	637b      	str	r3, [r7, #52]	; 0x34
 800b00a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b00e:	4622      	mov	r2, r4
 800b010:	462b      	mov	r3, r5
 800b012:	f04f 0000 	mov.w	r0, #0
 800b016:	f04f 0100 	mov.w	r1, #0
 800b01a:	0159      	lsls	r1, r3, #5
 800b01c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b020:	0150      	lsls	r0, r2, #5
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4621      	mov	r1, r4
 800b028:	1a51      	subs	r1, r2, r1
 800b02a:	6139      	str	r1, [r7, #16]
 800b02c:	4629      	mov	r1, r5
 800b02e:	eb63 0301 	sbc.w	r3, r3, r1
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	f04f 0200 	mov.w	r2, #0
 800b038:	f04f 0300 	mov.w	r3, #0
 800b03c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b040:	4659      	mov	r1, fp
 800b042:	018b      	lsls	r3, r1, #6
 800b044:	4651      	mov	r1, sl
 800b046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b04a:	4651      	mov	r1, sl
 800b04c:	018a      	lsls	r2, r1, #6
 800b04e:	4651      	mov	r1, sl
 800b050:	ebb2 0801 	subs.w	r8, r2, r1
 800b054:	4659      	mov	r1, fp
 800b056:	eb63 0901 	sbc.w	r9, r3, r1
 800b05a:	f04f 0200 	mov.w	r2, #0
 800b05e:	f04f 0300 	mov.w	r3, #0
 800b062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b06a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b06e:	4690      	mov	r8, r2
 800b070:	4699      	mov	r9, r3
 800b072:	4623      	mov	r3, r4
 800b074:	eb18 0303 	adds.w	r3, r8, r3
 800b078:	60bb      	str	r3, [r7, #8]
 800b07a:	462b      	mov	r3, r5
 800b07c:	eb49 0303 	adc.w	r3, r9, r3
 800b080:	60fb      	str	r3, [r7, #12]
 800b082:	f04f 0200 	mov.w	r2, #0
 800b086:	f04f 0300 	mov.w	r3, #0
 800b08a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b08e:	4629      	mov	r1, r5
 800b090:	024b      	lsls	r3, r1, #9
 800b092:	4621      	mov	r1, r4
 800b094:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b098:	4621      	mov	r1, r4
 800b09a:	024a      	lsls	r2, r1, #9
 800b09c:	4610      	mov	r0, r2
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b0ac:	f7f5 fe46 	bl	8000d3c <__aeabi_uldivmod>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0b8:	e058      	b.n	800b16c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0ba:	4b38      	ldr	r3, [pc, #224]	; (800b19c <HAL_RCC_GetSysClockFreq+0x200>)
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	099b      	lsrs	r3, r3, #6
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b0ca:	623b      	str	r3, [r7, #32]
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	627b      	str	r3, [r7, #36]	; 0x24
 800b0d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b0d4:	4642      	mov	r2, r8
 800b0d6:	464b      	mov	r3, r9
 800b0d8:	f04f 0000 	mov.w	r0, #0
 800b0dc:	f04f 0100 	mov.w	r1, #0
 800b0e0:	0159      	lsls	r1, r3, #5
 800b0e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b0e6:	0150      	lsls	r0, r2, #5
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4641      	mov	r1, r8
 800b0ee:	ebb2 0a01 	subs.w	sl, r2, r1
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	eb63 0b01 	sbc.w	fp, r3, r1
 800b0f8:	f04f 0200 	mov.w	r2, #0
 800b0fc:	f04f 0300 	mov.w	r3, #0
 800b100:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b104:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b108:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b10c:	ebb2 040a 	subs.w	r4, r2, sl
 800b110:	eb63 050b 	sbc.w	r5, r3, fp
 800b114:	f04f 0200 	mov.w	r2, #0
 800b118:	f04f 0300 	mov.w	r3, #0
 800b11c:	00eb      	lsls	r3, r5, #3
 800b11e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b122:	00e2      	lsls	r2, r4, #3
 800b124:	4614      	mov	r4, r2
 800b126:	461d      	mov	r5, r3
 800b128:	4643      	mov	r3, r8
 800b12a:	18e3      	adds	r3, r4, r3
 800b12c:	603b      	str	r3, [r7, #0]
 800b12e:	464b      	mov	r3, r9
 800b130:	eb45 0303 	adc.w	r3, r5, r3
 800b134:	607b      	str	r3, [r7, #4]
 800b136:	f04f 0200 	mov.w	r2, #0
 800b13a:	f04f 0300 	mov.w	r3, #0
 800b13e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b142:	4629      	mov	r1, r5
 800b144:	028b      	lsls	r3, r1, #10
 800b146:	4621      	mov	r1, r4
 800b148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b14c:	4621      	mov	r1, r4
 800b14e:	028a      	lsls	r2, r1, #10
 800b150:	4610      	mov	r0, r2
 800b152:	4619      	mov	r1, r3
 800b154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b156:	2200      	movs	r2, #0
 800b158:	61bb      	str	r3, [r7, #24]
 800b15a:	61fa      	str	r2, [r7, #28]
 800b15c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b160:	f7f5 fdec 	bl	8000d3c <__aeabi_uldivmod>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	4613      	mov	r3, r2
 800b16a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b16c:	4b0b      	ldr	r3, [pc, #44]	; (800b19c <HAL_RCC_GetSysClockFreq+0x200>)
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	0c1b      	lsrs	r3, r3, #16
 800b172:	f003 0303 	and.w	r3, r3, #3
 800b176:	3301      	adds	r3, #1
 800b178:	005b      	lsls	r3, r3, #1
 800b17a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b17c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b180:	fbb2 f3f3 	udiv	r3, r2, r3
 800b184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b186:	e002      	b.n	800b18e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b188:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800b18a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b18c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b18e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b190:	4618      	mov	r0, r3
 800b192:	3750      	adds	r7, #80	; 0x50
 800b194:	46bd      	mov	sp, r7
 800b196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b19a:	bf00      	nop
 800b19c:	40023800 	.word	0x40023800
 800b1a0:	00f42400 	.word	0x00f42400
 800b1a4:	007a1200 	.word	0x007a1200

0800b1a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b1ac:	4b03      	ldr	r3, [pc, #12]	; (800b1bc <HAL_RCC_GetHCLKFreq+0x14>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	20000060 	.word	0x20000060

0800b1c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e07b      	b.n	800b2ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d108      	bne.n	800b1ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1e2:	d009      	beq.n	800b1f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	61da      	str	r2, [r3, #28]
 800b1ea:	e005      	b.n	800b1f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d106      	bne.n	800b218 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7fd fbf0 	bl	80089f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2202      	movs	r2, #2
 800b21c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b22e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b240:	431a      	orrs	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b24a:	431a      	orrs	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	f003 0302 	and.w	r3, r3, #2
 800b254:	431a      	orrs	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	431a      	orrs	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b268:	431a      	orrs	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	69db      	ldr	r3, [r3, #28]
 800b26e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b272:	431a      	orrs	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b27c:	ea42 0103 	orr.w	r1, r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b284:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	430a      	orrs	r2, r1
 800b28e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	0c1b      	lsrs	r3, r3, #16
 800b296:	f003 0104 	and.w	r1, r3, #4
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	f003 0210 	and.w	r2, r3, #16
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	69da      	ldr	r2, [r3, #28]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b088      	sub	sp, #32
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	60f8      	str	r0, [r7, #12]
 800b2da:	60b9      	str	r1, [r7, #8]
 800b2dc:	603b      	str	r3, [r7, #0]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d101      	bne.n	800b2f4 <HAL_SPI_Transmit+0x22>
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	e126      	b.n	800b542 <HAL_SPI_Transmit+0x270>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2fc:	f7fd fd60 	bl	8008dc0 <HAL_GetTick>
 800b300:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b302:	88fb      	ldrh	r3, [r7, #6]
 800b304:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d002      	beq.n	800b318 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b312:	2302      	movs	r3, #2
 800b314:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b316:	e10b      	b.n	800b530 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d002      	beq.n	800b324 <HAL_SPI_Transmit+0x52>
 800b31e:	88fb      	ldrh	r3, [r7, #6]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d102      	bne.n	800b32a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b328:	e102      	b.n	800b530 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2203      	movs	r2, #3
 800b32e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	88fa      	ldrh	r2, [r7, #6]
 800b342:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	88fa      	ldrh	r2, [r7, #6]
 800b348:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b370:	d10f      	bne.n	800b392 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b380:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b390:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39c:	2b40      	cmp	r3, #64	; 0x40
 800b39e:	d007      	beq.n	800b3b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3b8:	d14b      	bne.n	800b452 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <HAL_SPI_Transmit+0xf6>
 800b3c2:	8afb      	ldrh	r3, [r7, #22]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d13e      	bne.n	800b446 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3cc:	881a      	ldrh	r2, [r3, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d8:	1c9a      	adds	r2, r3, #2
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b3ec:	e02b      	b.n	800b446 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d112      	bne.n	800b422 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b400:	881a      	ldrh	r2, [r3, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40c:	1c9a      	adds	r2, r3, #2
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b416:	b29b      	uxth	r3, r3
 800b418:	3b01      	subs	r3, #1
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b420:	e011      	b.n	800b446 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b422:	f7fd fccd 	bl	8008dc0 <HAL_GetTick>
 800b426:	4602      	mov	r2, r0
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d803      	bhi.n	800b43a <HAL_SPI_Transmit+0x168>
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b438:	d102      	bne.n	800b440 <HAL_SPI_Transmit+0x16e>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b444:	e074      	b.n	800b530 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1ce      	bne.n	800b3ee <HAL_SPI_Transmit+0x11c>
 800b450:	e04c      	b.n	800b4ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d002      	beq.n	800b460 <HAL_SPI_Transmit+0x18e>
 800b45a:	8afb      	ldrh	r3, [r7, #22]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d140      	bne.n	800b4e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	330c      	adds	r3, #12
 800b46a:	7812      	ldrb	r2, [r2, #0]
 800b46c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	3b01      	subs	r3, #1
 800b480:	b29a      	uxth	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b486:	e02c      	b.n	800b4e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	2b02      	cmp	r3, #2
 800b494:	d113      	bne.n	800b4be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	330c      	adds	r3, #12
 800b4a0:	7812      	ldrb	r2, [r2, #0]
 800b4a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	86da      	strh	r2, [r3, #54]	; 0x36
 800b4bc:	e011      	b.n	800b4e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4be:	f7fd fc7f 	bl	8008dc0 <HAL_GetTick>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d803      	bhi.n	800b4d6 <HAL_SPI_Transmit+0x204>
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d4:	d102      	bne.n	800b4dc <HAL_SPI_Transmit+0x20a>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d102      	bne.n	800b4e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b4e0:	e026      	b.n	800b530 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1cd      	bne.n	800b488 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b4ec:	69ba      	ldr	r2, [r7, #24]
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f000 f8b3 	bl	800b65c <SPI_EndRxTxTransaction>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d002      	beq.n	800b502 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2220      	movs	r2, #32
 800b500:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10a      	bne.n	800b520 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b50a:	2300      	movs	r3, #0
 800b50c:	613b      	str	r3, [r7, #16]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	613b      	str	r3, [r7, #16]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	613b      	str	r3, [r7, #16]
 800b51e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	77fb      	strb	r3, [r7, #31]
 800b52c:	e000      	b.n	800b530 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b52e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b540:	7ffb      	ldrb	r3, [r7, #31]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3720      	adds	r7, #32
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
	...

0800b54c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b088      	sub	sp, #32
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	4613      	mov	r3, r2
 800b55a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b55c:	f7fd fc30 	bl	8008dc0 <HAL_GetTick>
 800b560:	4602      	mov	r2, r0
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	1a9b      	subs	r3, r3, r2
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	4413      	add	r3, r2
 800b56a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b56c:	f7fd fc28 	bl	8008dc0 <HAL_GetTick>
 800b570:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b572:	4b39      	ldr	r3, [pc, #228]	; (800b658 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	015b      	lsls	r3, r3, #5
 800b578:	0d1b      	lsrs	r3, r3, #20
 800b57a:	69fa      	ldr	r2, [r7, #28]
 800b57c:	fb02 f303 	mul.w	r3, r2, r3
 800b580:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b582:	e054      	b.n	800b62e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58a:	d050      	beq.n	800b62e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b58c:	f7fd fc18 	bl	8008dc0 <HAL_GetTick>
 800b590:	4602      	mov	r2, r0
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	69fa      	ldr	r2, [r7, #28]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d902      	bls.n	800b5a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d13d      	bne.n	800b61e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b5b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5ba:	d111      	bne.n	800b5e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5c4:	d004      	beq.n	800b5d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5ce:	d107      	bne.n	800b5e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5e8:	d10f      	bne.n	800b60a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5f8:	601a      	str	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e017      	b.n	800b64e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b624:	2300      	movs	r3, #0
 800b626:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	3b01      	subs	r3, #1
 800b62c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	689a      	ldr	r2, [r3, #8]
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	4013      	ands	r3, r2
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	bf0c      	ite	eq
 800b63e:	2301      	moveq	r3, #1
 800b640:	2300      	movne	r3, #0
 800b642:	b2db      	uxtb	r3, r3
 800b644:	461a      	mov	r2, r3
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d19b      	bne.n	800b584 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3720      	adds	r7, #32
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	20000060 	.word	0x20000060

0800b65c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af02      	add	r7, sp, #8
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b668:	4b1b      	ldr	r3, [pc, #108]	; (800b6d8 <SPI_EndRxTxTransaction+0x7c>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a1b      	ldr	r2, [pc, #108]	; (800b6dc <SPI_EndRxTxTransaction+0x80>)
 800b66e:	fba2 2303 	umull	r2, r3, r2, r3
 800b672:	0d5b      	lsrs	r3, r3, #21
 800b674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b678:	fb02 f303 	mul.w	r3, r2, r3
 800b67c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b686:	d112      	bne.n	800b6ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2200      	movs	r2, #0
 800b690:	2180      	movs	r1, #128	; 0x80
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f7ff ff5a 	bl	800b54c <SPI_WaitFlagStateUntilTimeout>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d016      	beq.n	800b6cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a2:	f043 0220 	orr.w	r2, r3, #32
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e00f      	b.n	800b6ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00a      	beq.n	800b6ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6c4:	2b80      	cmp	r3, #128	; 0x80
 800b6c6:	d0f2      	beq.n	800b6ae <SPI_EndRxTxTransaction+0x52>
 800b6c8:	e000      	b.n	800b6cc <SPI_EndRxTxTransaction+0x70>
        break;
 800b6ca:	bf00      	nop
  }

  return HAL_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20000060 	.word	0x20000060
 800b6dc:	165e9f81 	.word	0x165e9f81

0800b6e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b084      	sub	sp, #16
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	f107 001c 	add.w	r0, r7, #28
 800b6ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d122      	bne.n	800b73e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b70c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b722:	2b01      	cmp	r3, #1
 800b724:	d105      	bne.n	800b732 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f001 fbee 	bl	800cf14 <USB_CoreReset>
 800b738:	4603      	mov	r3, r0
 800b73a:	73fb      	strb	r3, [r7, #15]
 800b73c:	e01a      	b.n	800b774 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f001 fbe2 	bl	800cf14 <USB_CoreReset>
 800b750:	4603      	mov	r3, r0
 800b752:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b756:	2b00      	cmp	r3, #0
 800b758:	d106      	bne.n	800b768 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	639a      	str	r2, [r3, #56]	; 0x38
 800b766:	e005      	b.n	800b774 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b776:	2b01      	cmp	r3, #1
 800b778:	d10b      	bne.n	800b792 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	f043 0206 	orr.w	r2, r3, #6
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f043 0220 	orr.w	r2, r3, #32
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b792:	7bfb      	ldrb	r3, [r7, #15]
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b79e:	b004      	add	sp, #16
 800b7a0:	4770      	bx	lr
	...

0800b7a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b087      	sub	sp, #28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b7b2:	79fb      	ldrb	r3, [r7, #7]
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d165      	bne.n	800b884 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4a41      	ldr	r2, [pc, #260]	; (800b8c0 <USB_SetTurnaroundTime+0x11c>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d906      	bls.n	800b7ce <USB_SetTurnaroundTime+0x2a>
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4a40      	ldr	r2, [pc, #256]	; (800b8c4 <USB_SetTurnaroundTime+0x120>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d202      	bcs.n	800b7ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b7c8:	230f      	movs	r3, #15
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	e062      	b.n	800b894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	4a3c      	ldr	r2, [pc, #240]	; (800b8c4 <USB_SetTurnaroundTime+0x120>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d306      	bcc.n	800b7e4 <USB_SetTurnaroundTime+0x40>
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	4a3b      	ldr	r2, [pc, #236]	; (800b8c8 <USB_SetTurnaroundTime+0x124>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d202      	bcs.n	800b7e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b7de:	230e      	movs	r3, #14
 800b7e0:	617b      	str	r3, [r7, #20]
 800b7e2:	e057      	b.n	800b894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	4a38      	ldr	r2, [pc, #224]	; (800b8c8 <USB_SetTurnaroundTime+0x124>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d306      	bcc.n	800b7fa <USB_SetTurnaroundTime+0x56>
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	4a37      	ldr	r2, [pc, #220]	; (800b8cc <USB_SetTurnaroundTime+0x128>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d202      	bcs.n	800b7fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b7f4:	230d      	movs	r3, #13
 800b7f6:	617b      	str	r3, [r7, #20]
 800b7f8:	e04c      	b.n	800b894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	4a33      	ldr	r2, [pc, #204]	; (800b8cc <USB_SetTurnaroundTime+0x128>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d306      	bcc.n	800b810 <USB_SetTurnaroundTime+0x6c>
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	4a32      	ldr	r2, [pc, #200]	; (800b8d0 <USB_SetTurnaroundTime+0x12c>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d802      	bhi.n	800b810 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b80a:	230c      	movs	r3, #12
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	e041      	b.n	800b894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	4a2f      	ldr	r2, [pc, #188]	; (800b8d0 <USB_SetTurnaroundTime+0x12c>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d906      	bls.n	800b826 <USB_SetTurnaroundTime+0x82>
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	4a2e      	ldr	r2, [pc, #184]	; (800b8d4 <USB_SetTurnaroundTime+0x130>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d802      	bhi.n	800b826 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b820:	230b      	movs	r3, #11
 800b822:	617b      	str	r3, [r7, #20]
 800b824:	e036      	b.n	800b894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	4a2a      	ldr	r2, [pc, #168]	; (800b8d4 <USB_SetTurnaroundTime+0x130>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d906      	bls.n	800b83c <USB_SetTurnaroundTime+0x98>
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	4a29      	ldr	r2, [pc, #164]	; (800b8d8 <USB_SetTurnaroundTime+0x134>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d802      	bhi.n	800b83c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b836:	230a      	movs	r3, #10
 800b838:	617b      	str	r3, [r7, #20]
 800b83a:	e02b      	b.n	800b894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	4a26      	ldr	r2, [pc, #152]	; (800b8d8 <USB_SetTurnaroundTime+0x134>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d906      	bls.n	800b852 <USB_SetTurnaroundTime+0xae>
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	4a25      	ldr	r2, [pc, #148]	; (800b8dc <USB_SetTurnaroundTime+0x138>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d202      	bcs.n	800b852 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b84c:	2309      	movs	r3, #9
 800b84e:	617b      	str	r3, [r7, #20]
 800b850:	e020      	b.n	800b894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	4a21      	ldr	r2, [pc, #132]	; (800b8dc <USB_SetTurnaroundTime+0x138>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d306      	bcc.n	800b868 <USB_SetTurnaroundTime+0xc4>
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	4a20      	ldr	r2, [pc, #128]	; (800b8e0 <USB_SetTurnaroundTime+0x13c>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d802      	bhi.n	800b868 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b862:	2308      	movs	r3, #8
 800b864:	617b      	str	r3, [r7, #20]
 800b866:	e015      	b.n	800b894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	4a1d      	ldr	r2, [pc, #116]	; (800b8e0 <USB_SetTurnaroundTime+0x13c>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d906      	bls.n	800b87e <USB_SetTurnaroundTime+0xda>
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	4a1c      	ldr	r2, [pc, #112]	; (800b8e4 <USB_SetTurnaroundTime+0x140>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d202      	bcs.n	800b87e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b878:	2307      	movs	r3, #7
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e00a      	b.n	800b894 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b87e:	2306      	movs	r3, #6
 800b880:	617b      	str	r3, [r7, #20]
 800b882:	e007      	b.n	800b894 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b884:	79fb      	ldrb	r3, [r7, #7]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d102      	bne.n	800b890 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b88a:	2309      	movs	r3, #9
 800b88c:	617b      	str	r3, [r7, #20]
 800b88e:	e001      	b.n	800b894 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b890:	2309      	movs	r3, #9
 800b892:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	68da      	ldr	r2, [r3, #12]
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	029b      	lsls	r3, r3, #10
 800b8a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b8ac:	431a      	orrs	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	371c      	adds	r7, #28
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	00d8acbf 	.word	0x00d8acbf
 800b8c4:	00e4e1c0 	.word	0x00e4e1c0
 800b8c8:	00f42400 	.word	0x00f42400
 800b8cc:	01067380 	.word	0x01067380
 800b8d0:	011a499f 	.word	0x011a499f
 800b8d4:	01312cff 	.word	0x01312cff
 800b8d8:	014ca43f 	.word	0x014ca43f
 800b8dc:	016e3600 	.word	0x016e3600
 800b8e0:	01a6ab1f 	.word	0x01a6ab1f
 800b8e4:	01e84800 	.word	0x01e84800

0800b8e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f043 0201 	orr.w	r2, r3, #1
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	370c      	adds	r7, #12
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	f023 0201 	bic.w	r2, r3, #1
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	460b      	mov	r3, r1
 800b936:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b938:	2300      	movs	r3, #0
 800b93a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b948:	78fb      	ldrb	r3, [r7, #3]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d115      	bne.n	800b97a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b95a:	2001      	movs	r0, #1
 800b95c:	f7fd fa3c 	bl	8008dd8 <HAL_Delay>
      ms++;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	3301      	adds	r3, #1
 800b964:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f001 fa45 	bl	800cdf6 <USB_GetMode>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d01e      	beq.n	800b9b0 <USB_SetCurrentMode+0x84>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2b31      	cmp	r3, #49	; 0x31
 800b976:	d9f0      	bls.n	800b95a <USB_SetCurrentMode+0x2e>
 800b978:	e01a      	b.n	800b9b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b97a:	78fb      	ldrb	r3, [r7, #3]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d115      	bne.n	800b9ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b98c:	2001      	movs	r0, #1
 800b98e:	f7fd fa23 	bl	8008dd8 <HAL_Delay>
      ms++;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	3301      	adds	r3, #1
 800b996:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f001 fa2c 	bl	800cdf6 <USB_GetMode>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d005      	beq.n	800b9b0 <USB_SetCurrentMode+0x84>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2b31      	cmp	r3, #49	; 0x31
 800b9a8:	d9f0      	bls.n	800b98c <USB_SetCurrentMode+0x60>
 800b9aa:	e001      	b.n	800b9b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e005      	b.n	800b9bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b32      	cmp	r3, #50	; 0x32
 800b9b4:	d101      	bne.n	800b9ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e000      	b.n	800b9bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9c4:	b084      	sub	sp, #16
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b086      	sub	sp, #24
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b9d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b9de:	2300      	movs	r3, #0
 800b9e0:	613b      	str	r3, [r7, #16]
 800b9e2:	e009      	b.n	800b9f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	3340      	adds	r3, #64	; 0x40
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	4413      	add	r3, r2
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	613b      	str	r3, [r7, #16]
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	2b0e      	cmp	r3, #14
 800b9fc:	d9f2      	bls.n	800b9e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b9fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d11c      	bne.n	800ba3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba12:	f043 0302 	orr.w	r3, r3, #2
 800ba16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	639a      	str	r2, [r3, #56]	; 0x38
 800ba3c:	e00b      	b.n	800ba56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	2300      	movs	r3, #0
 800ba60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba68:	4619      	mov	r1, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba70:	461a      	mov	r2, r3
 800ba72:	680b      	ldr	r3, [r1, #0]
 800ba74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d10c      	bne.n	800ba96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d104      	bne.n	800ba8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ba82:	2100      	movs	r1, #0
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f965 	bl	800bd54 <USB_SetDevSpeed>
 800ba8a:	e008      	b.n	800ba9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f960 	bl	800bd54 <USB_SetDevSpeed>
 800ba94:	e003      	b.n	800ba9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ba96:	2103      	movs	r1, #3
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f95b 	bl	800bd54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ba9e:	2110      	movs	r1, #16
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f8f3 	bl	800bc8c <USB_FlushTxFifo>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f91f 	bl	800bcf4 <USB_FlushRxFifo>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bac6:	461a      	mov	r2, r3
 800bac8:	2300      	movs	r3, #0
 800baca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad2:	461a      	mov	r2, r3
 800bad4:	2300      	movs	r3, #0
 800bad6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bade:	461a      	mov	r2, r3
 800bae0:	2300      	movs	r3, #0
 800bae2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bae4:	2300      	movs	r3, #0
 800bae6:	613b      	str	r3, [r7, #16]
 800bae8:	e043      	b.n	800bb72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	015a      	lsls	r2, r3, #5
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4413      	add	r3, r2
 800baf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bafc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb00:	d118      	bne.n	800bb34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10a      	bne.n	800bb1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	015a      	lsls	r2, r3, #5
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb14:	461a      	mov	r2, r3
 800bb16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	e013      	b.n	800bb46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	015a      	lsls	r2, r3, #5
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	4413      	add	r3, r2
 800bb26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	e008      	b.n	800bb46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	015a      	lsls	r2, r3, #5
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb40:	461a      	mov	r2, r3
 800bb42:	2300      	movs	r3, #0
 800bb44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	015a      	lsls	r2, r3, #5
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb52:	461a      	mov	r2, r3
 800bb54:	2300      	movs	r3, #0
 800bb56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	015a      	lsls	r2, r3, #5
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb64:	461a      	mov	r2, r3
 800bb66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	613b      	str	r3, [r7, #16]
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d3b7      	bcc.n	800baea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	613b      	str	r3, [r7, #16]
 800bb7e:	e043      	b.n	800bc08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb96:	d118      	bne.n	800bbca <USB_DevInit+0x206>
    {
      if (i == 0U)
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10a      	bne.n	800bbb4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	015a      	lsls	r2, r3, #5
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	4413      	add	r3, r2
 800bba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbaa:	461a      	mov	r2, r3
 800bbac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bbb0:	6013      	str	r3, [r2, #0]
 800bbb2:	e013      	b.n	800bbdc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bbc6:	6013      	str	r3, [r2, #0]
 800bbc8:	e008      	b.n	800bbdc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	2300      	movs	r3, #0
 800bbda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	015a      	lsls	r2, r3, #5
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe8:	461a      	mov	r2, r3
 800bbea:	2300      	movs	r3, #0
 800bbec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	015a      	lsls	r2, r3, #5
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	3301      	adds	r3, #1
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d3b7      	bcc.n	800bb80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bc30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d105      	bne.n	800bc44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	699b      	ldr	r3, [r3, #24]
 800bc3c:	f043 0210 	orr.w	r2, r3, #16
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	699a      	ldr	r2, [r3, #24]
 800bc48:	4b0f      	ldr	r3, [pc, #60]	; (800bc88 <USB_DevInit+0x2c4>)
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bc50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d005      	beq.n	800bc62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	f043 0208 	orr.w	r2, r3, #8
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bc62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d107      	bne.n	800bc78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	699b      	ldr	r3, [r3, #24]
 800bc6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc70:	f043 0304 	orr.w	r3, r3, #4
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3718      	adds	r7, #24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc84:	b004      	add	sp, #16
 800bc86:	4770      	bx	lr
 800bc88:	803c3800 	.word	0x803c3800

0800bc8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bc96:	2300      	movs	r3, #0
 800bc98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4a13      	ldr	r2, [pc, #76]	; (800bcf0 <USB_FlushTxFifo+0x64>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d901      	bls.n	800bcac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	e01b      	b.n	800bce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	daf2      	bge.n	800bc9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	019b      	lsls	r3, r3, #6
 800bcbc:	f043 0220 	orr.w	r2, r3, #32
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	4a08      	ldr	r2, [pc, #32]	; (800bcf0 <USB_FlushTxFifo+0x64>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d901      	bls.n	800bcd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	e006      	b.n	800bce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	f003 0320 	and.w	r3, r3, #32
 800bcde:	2b20      	cmp	r3, #32
 800bce0:	d0f0      	beq.n	800bcc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	00030d40 	.word	0x00030d40

0800bcf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	3301      	adds	r3, #1
 800bd04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4a11      	ldr	r2, [pc, #68]	; (800bd50 <USB_FlushRxFifo+0x5c>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d901      	bls.n	800bd12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	e018      	b.n	800bd44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	daf2      	bge.n	800bd00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2210      	movs	r2, #16
 800bd22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3301      	adds	r3, #1
 800bd28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	4a08      	ldr	r2, [pc, #32]	; (800bd50 <USB_FlushRxFifo+0x5c>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d901      	bls.n	800bd36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bd32:	2303      	movs	r3, #3
 800bd34:	e006      	b.n	800bd44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	f003 0310 	and.w	r3, r3, #16
 800bd3e:	2b10      	cmp	r3, #16
 800bd40:	d0f0      	beq.n	800bd24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	00030d40 	.word	0x00030d40

0800bd54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	78fb      	ldrb	r3, [r7, #3]
 800bd6e:	68f9      	ldr	r1, [r7, #12]
 800bd70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd74:	4313      	orrs	r3, r2
 800bd76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b087      	sub	sp, #28
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f003 0306 	and.w	r3, r3, #6
 800bd9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d102      	bne.n	800bdac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bda6:	2300      	movs	r3, #0
 800bda8:	75fb      	strb	r3, [r7, #23]
 800bdaa:	e00a      	b.n	800bdc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d002      	beq.n	800bdb8 <USB_GetDevSpeed+0x32>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2b06      	cmp	r3, #6
 800bdb6:	d102      	bne.n	800bdbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bdb8:	2302      	movs	r3, #2
 800bdba:	75fb      	strb	r3, [r7, #23]
 800bdbc:	e001      	b.n	800bdc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bdbe:	230f      	movs	r3, #15
 800bdc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	371c      	adds	r7, #28
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	785b      	ldrb	r3, [r3, #1]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d13a      	bne.n	800be62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdf2:	69da      	ldr	r2, [r3, #28]
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	f003 030f 	and.w	r3, r3, #15
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	fa01 f303 	lsl.w	r3, r1, r3
 800be02:	b29b      	uxth	r3, r3
 800be04:	68f9      	ldr	r1, [r7, #12]
 800be06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be0a:	4313      	orrs	r3, r2
 800be0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	015a      	lsls	r2, r3, #5
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	4413      	add	r3, r2
 800be16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d155      	bne.n	800bed0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	015a      	lsls	r2, r3, #5
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	4413      	add	r3, r2
 800be2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	791b      	ldrb	r3, [r3, #4]
 800be3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800be40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	059b      	lsls	r3, r3, #22
 800be46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800be48:	4313      	orrs	r3, r2
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	0151      	lsls	r1, r2, #5
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	440a      	add	r2, r1
 800be52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be5e:	6013      	str	r3, [r2, #0]
 800be60:	e036      	b.n	800bed0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be68:	69da      	ldr	r2, [r3, #28]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	f003 030f 	and.w	r3, r3, #15
 800be72:	2101      	movs	r1, #1
 800be74:	fa01 f303 	lsl.w	r3, r1, r3
 800be78:	041b      	lsls	r3, r3, #16
 800be7a:	68f9      	ldr	r1, [r7, #12]
 800be7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be80:	4313      	orrs	r3, r2
 800be82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	015a      	lsls	r2, r3, #5
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4413      	add	r3, r2
 800be8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be96:	2b00      	cmp	r3, #0
 800be98:	d11a      	bne.n	800bed0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	015a      	lsls	r2, r3, #5
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	4413      	add	r3, r2
 800bea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	791b      	ldrb	r3, [r3, #4]
 800beb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800beb6:	430b      	orrs	r3, r1
 800beb8:	4313      	orrs	r3, r2
 800beba:	68ba      	ldr	r2, [r7, #8]
 800bebc:	0151      	lsls	r1, r2, #5
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	440a      	add	r2, r1
 800bec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800beca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bece:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3714      	adds	r7, #20
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
	...

0800bee0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	785b      	ldrb	r3, [r3, #1]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d161      	bne.n	800bfc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	015a      	lsls	r2, r3, #5
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4413      	add	r3, r2
 800bf04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf12:	d11f      	bne.n	800bf54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	015a      	lsls	r2, r3, #5
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	0151      	lsls	r1, r2, #5
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	440a      	add	r2, r1
 800bf2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	015a      	lsls	r2, r3, #5
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	0151      	lsls	r1, r2, #5
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	440a      	add	r2, r1
 800bf4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	f003 030f 	and.w	r3, r3, #15
 800bf64:	2101      	movs	r1, #1
 800bf66:	fa01 f303 	lsl.w	r3, r1, r3
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	43db      	mvns	r3, r3
 800bf6e:	68f9      	ldr	r1, [r7, #12]
 800bf70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf74:	4013      	ands	r3, r2
 800bf76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf7e:	69da      	ldr	r2, [r3, #28]
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	f003 030f 	and.w	r3, r3, #15
 800bf88:	2101      	movs	r1, #1
 800bf8a:	fa01 f303 	lsl.w	r3, r1, r3
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	43db      	mvns	r3, r3
 800bf92:	68f9      	ldr	r1, [r7, #12]
 800bf94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf98:	4013      	ands	r3, r2
 800bf9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	015a      	lsls	r2, r3, #5
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	0159      	lsls	r1, r3, #5
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	440b      	add	r3, r1
 800bfb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	4b35      	ldr	r3, [pc, #212]	; (800c090 <USB_DeactivateEndpoint+0x1b0>)
 800bfba:	4013      	ands	r3, r2
 800bfbc:	600b      	str	r3, [r1, #0]
 800bfbe:	e060      	b.n	800c082 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	015a      	lsls	r2, r3, #5
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfd6:	d11f      	bne.n	800c018 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	015a      	lsls	r2, r3, #5
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4413      	add	r3, r2
 800bfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68ba      	ldr	r2, [r7, #8]
 800bfe8:	0151      	lsls	r1, r2, #5
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	440a      	add	r2, r1
 800bfee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bff2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bff6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	015a      	lsls	r2, r3, #5
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4413      	add	r3, r2
 800c000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	0151      	lsls	r1, r2, #5
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	440a      	add	r2, r1
 800c00e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c016:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	f003 030f 	and.w	r3, r3, #15
 800c028:	2101      	movs	r1, #1
 800c02a:	fa01 f303 	lsl.w	r3, r1, r3
 800c02e:	041b      	lsls	r3, r3, #16
 800c030:	43db      	mvns	r3, r3
 800c032:	68f9      	ldr	r1, [r7, #12]
 800c034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c038:	4013      	ands	r3, r2
 800c03a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c042:	69da      	ldr	r2, [r3, #28]
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	f003 030f 	and.w	r3, r3, #15
 800c04c:	2101      	movs	r1, #1
 800c04e:	fa01 f303 	lsl.w	r3, r1, r3
 800c052:	041b      	lsls	r3, r3, #16
 800c054:	43db      	mvns	r3, r3
 800c056:	68f9      	ldr	r1, [r7, #12]
 800c058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c05c:	4013      	ands	r3, r2
 800c05e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	015a      	lsls	r2, r3, #5
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	4413      	add	r3, r2
 800c068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	0159      	lsls	r1, r3, #5
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	440b      	add	r3, r1
 800c076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c07a:	4619      	mov	r1, r3
 800c07c:	4b05      	ldr	r3, [pc, #20]	; (800c094 <USB_DeactivateEndpoint+0x1b4>)
 800c07e:	4013      	ands	r3, r2
 800c080:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr
 800c090:	ec337800 	.word	0xec337800
 800c094:	eff37800 	.word	0xeff37800

0800c098 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b08a      	sub	sp, #40	; 0x28
 800c09c:	af02      	add	r7, sp, #8
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	785b      	ldrb	r3, [r3, #1]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	f040 815c 	bne.w	800c372 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	699b      	ldr	r3, [r3, #24]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d132      	bne.n	800c128 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	015a      	lsls	r2, r3, #5
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	69ba      	ldr	r2, [r7, #24]
 800c0d2:	0151      	lsls	r1, r2, #5
 800c0d4:	69fa      	ldr	r2, [r7, #28]
 800c0d6:	440a      	add	r2, r1
 800c0d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c0e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c0e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	69ba      	ldr	r2, [r7, #24]
 800c0f6:	0151      	lsls	r1, r2, #5
 800c0f8:	69fa      	ldr	r2, [r7, #28]
 800c0fa:	440a      	add	r2, r1
 800c0fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	0151      	lsls	r1, r2, #5
 800c118:	69fa      	ldr	r2, [r7, #28]
 800c11a:	440a      	add	r2, r1
 800c11c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c120:	0cdb      	lsrs	r3, r3, #19
 800c122:	04db      	lsls	r3, r3, #19
 800c124:	6113      	str	r3, [r2, #16]
 800c126:	e074      	b.n	800c212 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	015a      	lsls	r2, r3, #5
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	4413      	add	r3, r2
 800c130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	69ba      	ldr	r2, [r7, #24]
 800c138:	0151      	lsls	r1, r2, #5
 800c13a:	69fa      	ldr	r2, [r7, #28]
 800c13c:	440a      	add	r2, r1
 800c13e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c142:	0cdb      	lsrs	r3, r3, #19
 800c144:	04db      	lsls	r3, r3, #19
 800c146:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c154:	691b      	ldr	r3, [r3, #16]
 800c156:	69ba      	ldr	r2, [r7, #24]
 800c158:	0151      	lsls	r1, r2, #5
 800c15a:	69fa      	ldr	r2, [r7, #28]
 800c15c:	440a      	add	r2, r1
 800c15e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c162:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c166:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c16a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	015a      	lsls	r2, r3, #5
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	4413      	add	r3, r2
 800c174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c178:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	6999      	ldr	r1, [r3, #24]
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	440b      	add	r3, r1
 800c184:	1e59      	subs	r1, r3, #1
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c18e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c190:	4b9d      	ldr	r3, [pc, #628]	; (800c408 <USB_EPStartXfer+0x370>)
 800c192:	400b      	ands	r3, r1
 800c194:	69b9      	ldr	r1, [r7, #24]
 800c196:	0148      	lsls	r0, r1, #5
 800c198:	69f9      	ldr	r1, [r7, #28]
 800c19a:	4401      	add	r1, r0
 800c19c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	015a      	lsls	r2, r3, #5
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b0:	691a      	ldr	r2, [r3, #16]
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	699b      	ldr	r3, [r3, #24]
 800c1b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1ba:	69b9      	ldr	r1, [r7, #24]
 800c1bc:	0148      	lsls	r0, r1, #5
 800c1be:	69f9      	ldr	r1, [r7, #28]
 800c1c0:	4401      	add	r1, r0
 800c1c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	791b      	ldrb	r3, [r3, #4]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d11f      	bne.n	800c212 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	015a      	lsls	r2, r3, #5
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	4413      	add	r3, r2
 800c1da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	69ba      	ldr	r2, [r7, #24]
 800c1e2:	0151      	lsls	r1, r2, #5
 800c1e4:	69fa      	ldr	r2, [r7, #28]
 800c1e6:	440a      	add	r2, r1
 800c1e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c1f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	015a      	lsls	r2, r3, #5
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1fe:	691b      	ldr	r3, [r3, #16]
 800c200:	69ba      	ldr	r2, [r7, #24]
 800c202:	0151      	lsls	r1, r2, #5
 800c204:	69fa      	ldr	r2, [r7, #28]
 800c206:	440a      	add	r2, r1
 800c208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c20c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c210:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c212:	79fb      	ldrb	r3, [r7, #7]
 800c214:	2b01      	cmp	r3, #1
 800c216:	d14b      	bne.n	800c2b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	695b      	ldr	r3, [r3, #20]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d009      	beq.n	800c234 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	015a      	lsls	r2, r3, #5
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	4413      	add	r3, r2
 800c228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22c:	461a      	mov	r2, r3
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	791b      	ldrb	r3, [r3, #4]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d128      	bne.n	800c28e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d110      	bne.n	800c26e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	015a      	lsls	r2, r3, #5
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	4413      	add	r3, r2
 800c254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	69ba      	ldr	r2, [r7, #24]
 800c25c:	0151      	lsls	r1, r2, #5
 800c25e:	69fa      	ldr	r2, [r7, #28]
 800c260:	440a      	add	r2, r1
 800c262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c26a:	6013      	str	r3, [r2, #0]
 800c26c:	e00f      	b.n	800c28e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	015a      	lsls	r2, r3, #5
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	4413      	add	r3, r2
 800c276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	0151      	lsls	r1, r2, #5
 800c280:	69fa      	ldr	r2, [r7, #28]
 800c282:	440a      	add	r2, r1
 800c284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c28c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	015a      	lsls	r2, r3, #5
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	4413      	add	r3, r2
 800c296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	69ba      	ldr	r2, [r7, #24]
 800c29e:	0151      	lsls	r1, r2, #5
 800c2a0:	69fa      	ldr	r2, [r7, #28]
 800c2a2:	440a      	add	r2, r1
 800c2a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	e133      	b.n	800c518 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	015a      	lsls	r2, r3, #5
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	69ba      	ldr	r2, [r7, #24]
 800c2c0:	0151      	lsls	r1, r2, #5
 800c2c2:	69fa      	ldr	r2, [r7, #28]
 800c2c4:	440a      	add	r2, r1
 800c2c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c2ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	791b      	ldrb	r3, [r3, #4]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d015      	beq.n	800c304 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f000 811b 	beq.w	800c518 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	f003 030f 	and.w	r3, r3, #15
 800c2f2:	2101      	movs	r1, #1
 800c2f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c2f8:	69f9      	ldr	r1, [r7, #28]
 800c2fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2fe:	4313      	orrs	r3, r2
 800c300:	634b      	str	r3, [r1, #52]	; 0x34
 800c302:	e109      	b.n	800c518 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c310:	2b00      	cmp	r3, #0
 800c312:	d110      	bne.n	800c336 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	015a      	lsls	r2, r3, #5
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	4413      	add	r3, r2
 800c31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	69ba      	ldr	r2, [r7, #24]
 800c324:	0151      	lsls	r1, r2, #5
 800c326:	69fa      	ldr	r2, [r7, #28]
 800c328:	440a      	add	r2, r1
 800c32a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c32e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	e00f      	b.n	800c356 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	015a      	lsls	r2, r3, #5
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	4413      	add	r3, r2
 800c33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	69ba      	ldr	r2, [r7, #24]
 800c346:	0151      	lsls	r1, r2, #5
 800c348:	69fa      	ldr	r2, [r7, #28]
 800c34a:	440a      	add	r2, r1
 800c34c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c354:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	6919      	ldr	r1, [r3, #16]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	781a      	ldrb	r2, [r3, #0]
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	b298      	uxth	r0, r3
 800c364:	79fb      	ldrb	r3, [r7, #7]
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	4603      	mov	r3, r0
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f000 fade 	bl	800c92c <USB_WritePacket>
 800c370:	e0d2      	b.n	800c518 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	015a      	lsls	r2, r3, #5
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	4413      	add	r3, r2
 800c37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	69ba      	ldr	r2, [r7, #24]
 800c382:	0151      	lsls	r1, r2, #5
 800c384:	69fa      	ldr	r2, [r7, #28]
 800c386:	440a      	add	r2, r1
 800c388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c38c:	0cdb      	lsrs	r3, r3, #19
 800c38e:	04db      	lsls	r3, r3, #19
 800c390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	015a      	lsls	r2, r3, #5
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	4413      	add	r3, r2
 800c39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	69ba      	ldr	r2, [r7, #24]
 800c3a2:	0151      	lsls	r1, r2, #5
 800c3a4:	69fa      	ldr	r2, [r7, #28]
 800c3a6:	440a      	add	r2, r1
 800c3a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c3b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c3b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	699b      	ldr	r3, [r3, #24]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d126      	bne.n	800c40c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	015a      	lsls	r2, r3, #5
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ca:	691a      	ldr	r2, [r3, #16]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3d4:	69b9      	ldr	r1, [r7, #24]
 800c3d6:	0148      	lsls	r0, r1, #5
 800c3d8:	69f9      	ldr	r1, [r7, #28]
 800c3da:	4401      	add	r1, r0
 800c3dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	015a      	lsls	r2, r3, #5
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	69ba      	ldr	r2, [r7, #24]
 800c3f4:	0151      	lsls	r1, r2, #5
 800c3f6:	69fa      	ldr	r2, [r7, #28]
 800c3f8:	440a      	add	r2, r1
 800c3fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c402:	6113      	str	r3, [r2, #16]
 800c404:	e03a      	b.n	800c47c <USB_EPStartXfer+0x3e4>
 800c406:	bf00      	nop
 800c408:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	699a      	ldr	r2, [r3, #24]
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	4413      	add	r3, r2
 800c416:	1e5a      	subs	r2, r3, #1
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c420:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	8afa      	ldrh	r2, [r7, #22]
 800c428:	fb03 f202 	mul.w	r2, r3, r2
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	015a      	lsls	r2, r3, #5
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	4413      	add	r3, r2
 800c438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c43c:	691a      	ldr	r2, [r3, #16]
 800c43e:	8afb      	ldrh	r3, [r7, #22]
 800c440:	04d9      	lsls	r1, r3, #19
 800c442:	4b38      	ldr	r3, [pc, #224]	; (800c524 <USB_EPStartXfer+0x48c>)
 800c444:	400b      	ands	r3, r1
 800c446:	69b9      	ldr	r1, [r7, #24]
 800c448:	0148      	lsls	r0, r1, #5
 800c44a:	69f9      	ldr	r1, [r7, #28]
 800c44c:	4401      	add	r1, r0
 800c44e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c452:	4313      	orrs	r3, r2
 800c454:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	015a      	lsls	r2, r3, #5
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	4413      	add	r3, r2
 800c45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c462:	691a      	ldr	r2, [r3, #16]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	69db      	ldr	r3, [r3, #28]
 800c468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c46c:	69b9      	ldr	r1, [r7, #24]
 800c46e:	0148      	lsls	r0, r1, #5
 800c470:	69f9      	ldr	r1, [r7, #28]
 800c472:	4401      	add	r1, r0
 800c474:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c478:	4313      	orrs	r3, r2
 800c47a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c47c:	79fb      	ldrb	r3, [r7, #7]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d10d      	bne.n	800c49e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d009      	beq.n	800c49e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	6919      	ldr	r1, [r3, #16]
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	015a      	lsls	r2, r3, #5
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	4413      	add	r3, r2
 800c496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c49a:	460a      	mov	r2, r1
 800c49c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	791b      	ldrb	r3, [r3, #4]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d128      	bne.n	800c4f8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d110      	bne.n	800c4d8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	015a      	lsls	r2, r3, #5
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	4413      	add	r3, r2
 800c4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	69ba      	ldr	r2, [r7, #24]
 800c4c6:	0151      	lsls	r1, r2, #5
 800c4c8:	69fa      	ldr	r2, [r7, #28]
 800c4ca:	440a      	add	r2, r1
 800c4cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4d4:	6013      	str	r3, [r2, #0]
 800c4d6:	e00f      	b.n	800c4f8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	015a      	lsls	r2, r3, #5
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	4413      	add	r3, r2
 800c4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	69ba      	ldr	r2, [r7, #24]
 800c4e8:	0151      	lsls	r1, r2, #5
 800c4ea:	69fa      	ldr	r2, [r7, #28]
 800c4ec:	440a      	add	r2, r1
 800c4ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	015a      	lsls	r2, r3, #5
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	4413      	add	r3, r2
 800c500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	69ba      	ldr	r2, [r7, #24]
 800c508:	0151      	lsls	r1, r2, #5
 800c50a:	69fa      	ldr	r2, [r7, #28]
 800c50c:	440a      	add	r2, r1
 800c50e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c516:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3720      	adds	r7, #32
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	1ff80000 	.word	0x1ff80000

0800c528 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c528:	b480      	push	{r7}
 800c52a:	b087      	sub	sp, #28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	4613      	mov	r3, r2
 800c534:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	785b      	ldrb	r3, [r3, #1]
 800c544:	2b01      	cmp	r3, #1
 800c546:	f040 80ce 	bne.w	800c6e6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d132      	bne.n	800c5b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	015a      	lsls	r2, r3, #5
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	4413      	add	r3, r2
 800c55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	693a      	ldr	r2, [r7, #16]
 800c562:	0151      	lsls	r1, r2, #5
 800c564:	697a      	ldr	r2, [r7, #20]
 800c566:	440a      	add	r2, r1
 800c568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c56c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c570:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c574:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	015a      	lsls	r2, r3, #5
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	4413      	add	r3, r2
 800c57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	693a      	ldr	r2, [r7, #16]
 800c586:	0151      	lsls	r1, r2, #5
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	440a      	add	r2, r1
 800c58c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c594:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	015a      	lsls	r2, r3, #5
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	4413      	add	r3, r2
 800c59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	693a      	ldr	r2, [r7, #16]
 800c5a6:	0151      	lsls	r1, r2, #5
 800c5a8:	697a      	ldr	r2, [r7, #20]
 800c5aa:	440a      	add	r2, r1
 800c5ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5b0:	0cdb      	lsrs	r3, r3, #19
 800c5b2:	04db      	lsls	r3, r3, #19
 800c5b4:	6113      	str	r3, [r2, #16]
 800c5b6:	e04e      	b.n	800c656 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	015a      	lsls	r2, r3, #5
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	4413      	add	r3, r2
 800c5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	693a      	ldr	r2, [r7, #16]
 800c5c8:	0151      	lsls	r1, r2, #5
 800c5ca:	697a      	ldr	r2, [r7, #20]
 800c5cc:	440a      	add	r2, r1
 800c5ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5d2:	0cdb      	lsrs	r3, r3, #19
 800c5d4:	04db      	lsls	r3, r3, #19
 800c5d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	015a      	lsls	r2, r3, #5
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	4413      	add	r3, r2
 800c5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	693a      	ldr	r2, [r7, #16]
 800c5e8:	0151      	lsls	r1, r2, #5
 800c5ea:	697a      	ldr	r2, [r7, #20]
 800c5ec:	440a      	add	r2, r1
 800c5ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c5f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c5fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	699a      	ldr	r2, [r3, #24]
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	429a      	cmp	r2, r3
 800c606:	d903      	bls.n	800c610 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	68da      	ldr	r2, [r3, #12]
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	015a      	lsls	r2, r3, #5
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	4413      	add	r3, r2
 800c618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	0151      	lsls	r1, r2, #5
 800c622:	697a      	ldr	r2, [r7, #20]
 800c624:	440a      	add	r2, r1
 800c626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c62a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c62e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	015a      	lsls	r2, r3, #5
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	4413      	add	r3, r2
 800c638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c63c:	691a      	ldr	r2, [r3, #16]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c646:	6939      	ldr	r1, [r7, #16]
 800c648:	0148      	lsls	r0, r1, #5
 800c64a:	6979      	ldr	r1, [r7, #20]
 800c64c:	4401      	add	r1, r0
 800c64e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c652:	4313      	orrs	r3, r2
 800c654:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c656:	79fb      	ldrb	r3, [r7, #7]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d11e      	bne.n	800c69a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	695b      	ldr	r3, [r3, #20]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d009      	beq.n	800c678 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	015a      	lsls	r2, r3, #5
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	4413      	add	r3, r2
 800c66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c670:	461a      	mov	r2, r3
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	695b      	ldr	r3, [r3, #20]
 800c676:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	015a      	lsls	r2, r3, #5
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	4413      	add	r3, r2
 800c680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	693a      	ldr	r2, [r7, #16]
 800c688:	0151      	lsls	r1, r2, #5
 800c68a:	697a      	ldr	r2, [r7, #20]
 800c68c:	440a      	add	r2, r1
 800c68e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	e097      	b.n	800c7ca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	015a      	lsls	r2, r3, #5
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	693a      	ldr	r2, [r7, #16]
 800c6aa:	0151      	lsls	r1, r2, #5
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	440a      	add	r2, r1
 800c6b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c6b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	699b      	ldr	r3, [r3, #24]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 8083 	beq.w	800c7ca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	f003 030f 	and.w	r3, r3, #15
 800c6d4:	2101      	movs	r1, #1
 800c6d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c6da:	6979      	ldr	r1, [r7, #20]
 800c6dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	634b      	str	r3, [r1, #52]	; 0x34
 800c6e4:	e071      	b.n	800c7ca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	015a      	lsls	r2, r3, #5
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	693a      	ldr	r2, [r7, #16]
 800c6f6:	0151      	lsls	r1, r2, #5
 800c6f8:	697a      	ldr	r2, [r7, #20]
 800c6fa:	440a      	add	r2, r1
 800c6fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c700:	0cdb      	lsrs	r3, r3, #19
 800c702:	04db      	lsls	r3, r3, #19
 800c704:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	015a      	lsls	r2, r3, #5
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	4413      	add	r3, r2
 800c70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	0151      	lsls	r1, r2, #5
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	440a      	add	r2, r1
 800c71c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c720:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c724:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c728:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	699b      	ldr	r3, [r3, #24]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	68da      	ldr	r2, [r3, #12]
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	68da      	ldr	r2, [r3, #12]
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	015a      	lsls	r2, r3, #5
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	4413      	add	r3, r2
 800c74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c74e:	691b      	ldr	r3, [r3, #16]
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	0151      	lsls	r1, r2, #5
 800c754:	697a      	ldr	r2, [r7, #20]
 800c756:	440a      	add	r2, r1
 800c758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c75c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c760:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	015a      	lsls	r2, r3, #5
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	4413      	add	r3, r2
 800c76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c76e:	691a      	ldr	r2, [r3, #16]
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	69db      	ldr	r3, [r3, #28]
 800c774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c778:	6939      	ldr	r1, [r7, #16]
 800c77a:	0148      	lsls	r0, r1, #5
 800c77c:	6979      	ldr	r1, [r7, #20]
 800c77e:	4401      	add	r1, r0
 800c780:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c784:	4313      	orrs	r3, r2
 800c786:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c788:	79fb      	ldrb	r3, [r7, #7]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d10d      	bne.n	800c7aa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d009      	beq.n	800c7aa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	6919      	ldr	r1, [r3, #16]
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	015a      	lsls	r2, r3, #5
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a6:	460a      	mov	r2, r1
 800c7a8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	015a      	lsls	r2, r3, #5
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	0151      	lsls	r1, r2, #5
 800c7bc:	697a      	ldr	r2, [r7, #20]
 800c7be:	440a      	add	r2, r1
 800c7c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	371c      	adds	r7, #28
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b087      	sub	sp, #28
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	785b      	ldrb	r3, [r3, #1]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d14a      	bne.n	800c88c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	015a      	lsls	r2, r3, #5
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	4413      	add	r3, r2
 800c800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c80a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c80e:	f040 8086 	bne.w	800c91e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	7812      	ldrb	r2, [r2, #0]
 800c826:	0151      	lsls	r1, r2, #5
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	440a      	add	r2, r1
 800c82c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c830:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c834:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	015a      	lsls	r2, r3, #5
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	4413      	add	r3, r2
 800c840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	7812      	ldrb	r2, [r2, #0]
 800c84a:	0151      	lsls	r1, r2, #5
 800c84c:	693a      	ldr	r2, [r7, #16]
 800c84e:	440a      	add	r2, r1
 800c850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c858:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3301      	adds	r3, #1
 800c85e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f242 7210 	movw	r2, #10000	; 0x2710
 800c866:	4293      	cmp	r3, r2
 800c868:	d902      	bls.n	800c870 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	75fb      	strb	r3, [r7, #23]
          break;
 800c86e:	e056      	b.n	800c91e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	015a      	lsls	r2, r3, #5
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	4413      	add	r3, r2
 800c87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c888:	d0e7      	beq.n	800c85a <USB_EPStopXfer+0x82>
 800c88a:	e048      	b.n	800c91e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8a4:	d13b      	bne.n	800c91e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	015a      	lsls	r2, r3, #5
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	4413      	add	r3, r2
 800c8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	683a      	ldr	r2, [r7, #0]
 800c8b8:	7812      	ldrb	r2, [r2, #0]
 800c8ba:	0151      	lsls	r1, r2, #5
 800c8bc:	693a      	ldr	r2, [r7, #16]
 800c8be:	440a      	add	r2, r1
 800c8c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c8c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	015a      	lsls	r2, r3, #5
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	7812      	ldrb	r2, [r2, #0]
 800c8de:	0151      	lsls	r1, r2, #5
 800c8e0:	693a      	ldr	r2, [r7, #16]
 800c8e2:	440a      	add	r2, r1
 800c8e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f242 7210 	movw	r2, #10000	; 0x2710
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d902      	bls.n	800c904 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	75fb      	strb	r3, [r7, #23]
          break;
 800c902:	e00c      	b.n	800c91e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	015a      	lsls	r2, r3, #5
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	4413      	add	r3, r2
 800c90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c91c:	d0e7      	beq.n	800c8ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c91e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c920:	4618      	mov	r0, r3
 800c922:	371c      	adds	r7, #28
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b089      	sub	sp, #36	; 0x24
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	4611      	mov	r1, r2
 800c938:	461a      	mov	r2, r3
 800c93a:	460b      	mov	r3, r1
 800c93c:	71fb      	strb	r3, [r7, #7]
 800c93e:	4613      	mov	r3, r2
 800c940:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c94a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d123      	bne.n	800c99a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c952:	88bb      	ldrh	r3, [r7, #4]
 800c954:	3303      	adds	r3, #3
 800c956:	089b      	lsrs	r3, r3, #2
 800c958:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c95a:	2300      	movs	r3, #0
 800c95c:	61bb      	str	r3, [r7, #24]
 800c95e:	e018      	b.n	800c992 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c960:	79fb      	ldrb	r3, [r7, #7]
 800c962:	031a      	lsls	r2, r3, #12
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	4413      	add	r3, r2
 800c968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c96c:	461a      	mov	r2, r3
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	3301      	adds	r3, #1
 800c978:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	3301      	adds	r3, #1
 800c97e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	3301      	adds	r3, #1
 800c984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	3301      	adds	r3, #1
 800c98a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	3301      	adds	r3, #1
 800c990:	61bb      	str	r3, [r7, #24]
 800c992:	69ba      	ldr	r2, [r7, #24]
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	429a      	cmp	r2, r3
 800c998:	d3e2      	bcc.n	800c960 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3724      	adds	r7, #36	; 0x24
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b08b      	sub	sp, #44	; 0x2c
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c9be:	88fb      	ldrh	r3, [r7, #6]
 800c9c0:	089b      	lsrs	r3, r3, #2
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c9c6:	88fb      	ldrh	r3, [r7, #6]
 800c9c8:	f003 0303 	and.w	r3, r3, #3
 800c9cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	623b      	str	r3, [r7, #32]
 800c9d2:	e014      	b.n	800c9fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	601a      	str	r2, [r3, #0]
    pDest++;
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c9f8:	6a3b      	ldr	r3, [r7, #32]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	623b      	str	r3, [r7, #32]
 800c9fe:	6a3a      	ldr	r2, [r7, #32]
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d3e6      	bcc.n	800c9d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ca06:	8bfb      	ldrh	r3, [r7, #30]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d01e      	beq.n	800ca4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca16:	461a      	mov	r2, r3
 800ca18:	f107 0310 	add.w	r3, r7, #16
 800ca1c:	6812      	ldr	r2, [r2, #0]
 800ca1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	6a3b      	ldr	r3, [r7, #32]
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	00db      	lsls	r3, r3, #3
 800ca28:	fa22 f303 	lsr.w	r3, r2, r3
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca30:	701a      	strb	r2, [r3, #0]
      i++;
 800ca32:	6a3b      	ldr	r3, [r7, #32]
 800ca34:	3301      	adds	r3, #1
 800ca36:	623b      	str	r3, [r7, #32]
      pDest++;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ca3e:	8bfb      	ldrh	r3, [r7, #30]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ca44:	8bfb      	ldrh	r3, [r7, #30]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1ea      	bne.n	800ca20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	372c      	adds	r7, #44	; 0x2c
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	785b      	ldrb	r3, [r3, #1]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d12c      	bne.n	800cace <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	015a      	lsls	r2, r3, #5
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	db12      	blt.n	800caac <USB_EPSetStall+0x54>
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00f      	beq.n	800caac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	0151      	lsls	r1, r2, #5
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	440a      	add	r2, r1
 800caa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800caaa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	015a      	lsls	r2, r3, #5
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	4413      	add	r3, r2
 800cab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	0151      	lsls	r1, r2, #5
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	440a      	add	r2, r1
 800cac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800caca:	6013      	str	r3, [r2, #0]
 800cacc:	e02b      	b.n	800cb26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	015a      	lsls	r2, r3, #5
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	4413      	add	r3, r2
 800cad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	db12      	blt.n	800cb06 <USB_EPSetStall+0xae>
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00f      	beq.n	800cb06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	015a      	lsls	r2, r3, #5
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	4413      	add	r3, r2
 800caee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68ba      	ldr	r2, [r7, #8]
 800caf6:	0151      	lsls	r1, r2, #5
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	440a      	add	r2, r1
 800cafc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cb04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	015a      	lsls	r2, r3, #5
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	0151      	lsls	r1, r2, #5
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	440a      	add	r2, r1
 800cb1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3714      	adds	r7, #20
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	785b      	ldrb	r3, [r3, #1]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d128      	bne.n	800cba2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	015a      	lsls	r2, r3, #5
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4413      	add	r3, r2
 800cb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68ba      	ldr	r2, [r7, #8]
 800cb60:	0151      	lsls	r1, r2, #5
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	440a      	add	r2, r1
 800cb66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	791b      	ldrb	r3, [r3, #4]
 800cb74:	2b03      	cmp	r3, #3
 800cb76:	d003      	beq.n	800cb80 <USB_EPClearStall+0x4c>
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	791b      	ldrb	r3, [r3, #4]
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	d138      	bne.n	800cbf2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	68ba      	ldr	r2, [r7, #8]
 800cb90:	0151      	lsls	r1, r2, #5
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	440a      	add	r2, r1
 800cb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb9e:	6013      	str	r3, [r2, #0]
 800cba0:	e027      	b.n	800cbf2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	015a      	lsls	r2, r3, #5
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	4413      	add	r3, r2
 800cbaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	0151      	lsls	r1, r2, #5
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	440a      	add	r2, r1
 800cbb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cbc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	791b      	ldrb	r3, [r3, #4]
 800cbc6:	2b03      	cmp	r3, #3
 800cbc8:	d003      	beq.n	800cbd2 <USB_EPClearStall+0x9e>
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	791b      	ldrb	r3, [r3, #4]
 800cbce:	2b02      	cmp	r3, #2
 800cbd0:	d10f      	bne.n	800cbf2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	015a      	lsls	r2, r3, #5
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	4413      	add	r3, r2
 800cbda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	0151      	lsls	r1, r2, #5
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	440a      	add	r2, r1
 800cbe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbf0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3714      	adds	r7, #20
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	460b      	mov	r3, r1
 800cc0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cc22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	78fb      	ldrb	r3, [r7, #3]
 800cc2e:	011b      	lsls	r3, r3, #4
 800cc30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cc34:	68f9      	ldr	r1, [r7, #12]
 800cc36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3714      	adds	r7, #20
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b085      	sub	sp, #20
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc66:	f023 0303 	bic.w	r3, r3, #3
 800cc6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc7a:	f023 0302 	bic.w	r3, r3, #2
 800cc7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3714      	adds	r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr

0800cc8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc8e:	b480      	push	{r7}
 800cc90:	b085      	sub	sp, #20
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cca8:	f023 0303 	bic.w	r3, r3, #3
 800ccac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccbc:	f043 0302 	orr.w	r3, r3, #2
 800ccc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	695b      	ldr	r3, [r3, #20]
 800ccdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	699b      	ldr	r3, [r3, #24]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	4013      	ands	r3, r2
 800cce6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cce8:	68fb      	ldr	r3, [r7, #12]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	b085      	sub	sp, #20
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd08:	699b      	ldr	r3, [r3, #24]
 800cd0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd12:	69db      	ldr	r3, [r3, #28]
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	4013      	ands	r3, r2
 800cd18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	0c1b      	lsrs	r3, r3, #16
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3714      	adds	r7, #20
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b085      	sub	sp, #20
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd3c:	699b      	ldr	r3, [r3, #24]
 800cd3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd46:	69db      	ldr	r3, [r3, #28]
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	b29b      	uxth	r3, r3
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cd5e:	b480      	push	{r7}
 800cd60:	b085      	sub	sp, #20
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	460b      	mov	r3, r1
 800cd68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cd6e:	78fb      	ldrb	r3, [r7, #3]
 800cd70:	015a      	lsls	r2, r3, #5
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	4413      	add	r3, r2
 800cd76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd84:	695b      	ldr	r3, [r3, #20]
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	4013      	ands	r3, r2
 800cd8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cd8c:	68bb      	ldr	r3, [r7, #8]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr

0800cd9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cd9a:	b480      	push	{r7}
 800cd9c:	b087      	sub	sp, #28
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	460b      	mov	r3, r1
 800cda4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdb0:	691b      	ldr	r3, [r3, #16]
 800cdb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cdbe:	78fb      	ldrb	r3, [r7, #3]
 800cdc0:	f003 030f 	and.w	r3, r3, #15
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	fa22 f303 	lsr.w	r3, r2, r3
 800cdca:	01db      	lsls	r3, r3, #7
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cdd4:	78fb      	ldrb	r3, [r7, #3]
 800cdd6:	015a      	lsls	r2, r3, #5
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	4413      	add	r3, r2
 800cddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	4013      	ands	r3, r2
 800cde6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cde8:	68bb      	ldr	r3, [r7, #8]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	371c      	adds	r7, #28
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr

0800cdf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cdf6:	b480      	push	{r7}
 800cdf8:	b083      	sub	sp, #12
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	f003 0301 	and.w	r3, r3, #1
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr

0800ce12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ce12:	b480      	push	{r7}
 800ce14:	b085      	sub	sp, #20
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	68fa      	ldr	r2, [r7, #12]
 800ce28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ce30:	f023 0307 	bic.w	r3, r3, #7
 800ce34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3714      	adds	r7, #20
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	460b      	mov	r3, r1
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	333c      	adds	r3, #60	; 0x3c
 800ce6e:	3304      	adds	r3, #4
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	4a26      	ldr	r2, [pc, #152]	; (800cf10 <USB_EP0_OutStart+0xb8>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d90a      	bls.n	800ce92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce8c:	d101      	bne.n	800ce92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e037      	b.n	800cf02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce98:	461a      	mov	r2, r3
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea4:	691b      	ldr	r3, [r3, #16]
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ceb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cec0:	f043 0318 	orr.w	r3, r3, #24
 800cec4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ced4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ced8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ceda:	7afb      	ldrb	r3, [r7, #11]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d10f      	bne.n	800cf00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee6:	461a      	mov	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	697a      	ldr	r2, [r7, #20]
 800cef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cefa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cefe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	371c      	adds	r7, #28
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	4f54300a 	.word	0x4f54300a

0800cf14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	3301      	adds	r3, #1
 800cf24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	4a13      	ldr	r2, [pc, #76]	; (800cf78 <USB_CoreReset+0x64>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d901      	bls.n	800cf32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	e01b      	b.n	800cf6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	daf2      	bge.n	800cf20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	691b      	ldr	r3, [r3, #16]
 800cf42:	f043 0201 	orr.w	r2, r3, #1
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	4a09      	ldr	r2, [pc, #36]	; (800cf78 <USB_CoreReset+0x64>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d901      	bls.n	800cf5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	e006      	b.n	800cf6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	f003 0301 	and.w	r3, r3, #1
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d0f0      	beq.n	800cf4a <USB_CoreReset+0x36>

  return HAL_OK;
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	00030d40 	.word	0x00030d40

0800cf7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	460b      	mov	r3, r1
 800cf86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cf88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cf8c:	f012 fe62 	bl	801fc54 <USBD_static_malloc>
 800cf90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d109      	bne.n	800cfac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	32b0      	adds	r2, #176	; 0xb0
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	e0d4      	b.n	800d156 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cfac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f015 fc98 	bl	80228e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	32b0      	adds	r2, #176	; 0xb0
 800cfc2:	68f9      	ldr	r1, [r7, #12]
 800cfc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	32b0      	adds	r2, #176	; 0xb0
 800cfd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	7c1b      	ldrb	r3, [r3, #16]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d138      	bne.n	800d056 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cfe4:	4b5e      	ldr	r3, [pc, #376]	; (800d160 <USBD_CDC_Init+0x1e4>)
 800cfe6:	7819      	ldrb	r1, [r3, #0]
 800cfe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfec:	2202      	movs	r2, #2
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f012 fd0d 	bl	801fa0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cff4:	4b5a      	ldr	r3, [pc, #360]	; (800d160 <USBD_CDC_Init+0x1e4>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	f003 020f 	and.w	r2, r3, #15
 800cffc:	6879      	ldr	r1, [r7, #4]
 800cffe:	4613      	mov	r3, r2
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	4413      	add	r3, r2
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	440b      	add	r3, r1
 800d008:	3324      	adds	r3, #36	; 0x24
 800d00a:	2201      	movs	r2, #1
 800d00c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d00e:	4b55      	ldr	r3, [pc, #340]	; (800d164 <USBD_CDC_Init+0x1e8>)
 800d010:	7819      	ldrb	r1, [r3, #0]
 800d012:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d016:	2202      	movs	r2, #2
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f012 fcf8 	bl	801fa0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d01e:	4b51      	ldr	r3, [pc, #324]	; (800d164 <USBD_CDC_Init+0x1e8>)
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	f003 020f 	and.w	r2, r3, #15
 800d026:	6879      	ldr	r1, [r7, #4]
 800d028:	4613      	mov	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	4413      	add	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	440b      	add	r3, r1
 800d032:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d036:	2201      	movs	r2, #1
 800d038:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d03a:	4b4b      	ldr	r3, [pc, #300]	; (800d168 <USBD_CDC_Init+0x1ec>)
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	f003 020f 	and.w	r2, r3, #15
 800d042:	6879      	ldr	r1, [r7, #4]
 800d044:	4613      	mov	r3, r2
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	4413      	add	r3, r2
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	440b      	add	r3, r1
 800d04e:	3326      	adds	r3, #38	; 0x26
 800d050:	2210      	movs	r2, #16
 800d052:	801a      	strh	r2, [r3, #0]
 800d054:	e035      	b.n	800d0c2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d056:	4b42      	ldr	r3, [pc, #264]	; (800d160 <USBD_CDC_Init+0x1e4>)
 800d058:	7819      	ldrb	r1, [r3, #0]
 800d05a:	2340      	movs	r3, #64	; 0x40
 800d05c:	2202      	movs	r2, #2
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f012 fcd5 	bl	801fa0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d064:	4b3e      	ldr	r3, [pc, #248]	; (800d160 <USBD_CDC_Init+0x1e4>)
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	f003 020f 	and.w	r2, r3, #15
 800d06c:	6879      	ldr	r1, [r7, #4]
 800d06e:	4613      	mov	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4413      	add	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	440b      	add	r3, r1
 800d078:	3324      	adds	r3, #36	; 0x24
 800d07a:	2201      	movs	r2, #1
 800d07c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d07e:	4b39      	ldr	r3, [pc, #228]	; (800d164 <USBD_CDC_Init+0x1e8>)
 800d080:	7819      	ldrb	r1, [r3, #0]
 800d082:	2340      	movs	r3, #64	; 0x40
 800d084:	2202      	movs	r2, #2
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f012 fcc1 	bl	801fa0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d08c:	4b35      	ldr	r3, [pc, #212]	; (800d164 <USBD_CDC_Init+0x1e8>)
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	f003 020f 	and.w	r2, r3, #15
 800d094:	6879      	ldr	r1, [r7, #4]
 800d096:	4613      	mov	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4413      	add	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	440b      	add	r3, r1
 800d0a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d0a8:	4b2f      	ldr	r3, [pc, #188]	; (800d168 <USBD_CDC_Init+0x1ec>)
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	f003 020f 	and.w	r2, r3, #15
 800d0b0:	6879      	ldr	r1, [r7, #4]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	440b      	add	r3, r1
 800d0bc:	3326      	adds	r3, #38	; 0x26
 800d0be:	2210      	movs	r2, #16
 800d0c0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d0c2:	4b29      	ldr	r3, [pc, #164]	; (800d168 <USBD_CDC_Init+0x1ec>)
 800d0c4:	7819      	ldrb	r1, [r3, #0]
 800d0c6:	2308      	movs	r3, #8
 800d0c8:	2203      	movs	r2, #3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f012 fc9f 	bl	801fa0e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d0d0:	4b25      	ldr	r3, [pc, #148]	; (800d168 <USBD_CDC_Init+0x1ec>)
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	f003 020f 	and.w	r2, r3, #15
 800d0d8:	6879      	ldr	r1, [r7, #4]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4413      	add	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	440b      	add	r3, r1
 800d0e4:	3324      	adds	r3, #36	; 0x24
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	33b0      	adds	r3, #176	; 0xb0
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	4413      	add	r3, r2
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d120:	2302      	movs	r3, #2
 800d122:	e018      	b.n	800d156 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	7c1b      	ldrb	r3, [r3, #16]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d10a      	bne.n	800d142 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d12c:	4b0d      	ldr	r3, [pc, #52]	; (800d164 <USBD_CDC_Init+0x1e8>)
 800d12e:	7819      	ldrb	r1, [r3, #0]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f012 fd56 	bl	801fbec <USBD_LL_PrepareReceive>
 800d140:	e008      	b.n	800d154 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d142:	4b08      	ldr	r3, [pc, #32]	; (800d164 <USBD_CDC_Init+0x1e8>)
 800d144:	7819      	ldrb	r1, [r3, #0]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d14c:	2340      	movs	r3, #64	; 0x40
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f012 fd4c 	bl	801fbec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	200000f3 	.word	0x200000f3
 800d164:	200000f4 	.word	0x200000f4
 800d168:	200000f5 	.word	0x200000f5

0800d16c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	460b      	mov	r3, r1
 800d176:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d178:	4b3a      	ldr	r3, [pc, #232]	; (800d264 <USBD_CDC_DeInit+0xf8>)
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f012 fc6b 	bl	801fa5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d184:	4b37      	ldr	r3, [pc, #220]	; (800d264 <USBD_CDC_DeInit+0xf8>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	f003 020f 	and.w	r2, r3, #15
 800d18c:	6879      	ldr	r1, [r7, #4]
 800d18e:	4613      	mov	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	4413      	add	r3, r2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	440b      	add	r3, r1
 800d198:	3324      	adds	r3, #36	; 0x24
 800d19a:	2200      	movs	r2, #0
 800d19c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d19e:	4b32      	ldr	r3, [pc, #200]	; (800d268 <USBD_CDC_DeInit+0xfc>)
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f012 fc58 	bl	801fa5a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d1aa:	4b2f      	ldr	r3, [pc, #188]	; (800d268 <USBD_CDC_DeInit+0xfc>)
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	f003 020f 	and.w	r2, r3, #15
 800d1b2:	6879      	ldr	r1, [r7, #4]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4413      	add	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	440b      	add	r3, r1
 800d1be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d1c6:	4b29      	ldr	r3, [pc, #164]	; (800d26c <USBD_CDC_DeInit+0x100>)
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f012 fc44 	bl	801fa5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d1d2:	4b26      	ldr	r3, [pc, #152]	; (800d26c <USBD_CDC_DeInit+0x100>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	f003 020f 	and.w	r2, r3, #15
 800d1da:	6879      	ldr	r1, [r7, #4]
 800d1dc:	4613      	mov	r3, r2
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	440b      	add	r3, r1
 800d1e6:	3324      	adds	r3, #36	; 0x24
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d1ec:	4b1f      	ldr	r3, [pc, #124]	; (800d26c <USBD_CDC_DeInit+0x100>)
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	f003 020f 	and.w	r2, r3, #15
 800d1f4:	6879      	ldr	r1, [r7, #4]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	4413      	add	r3, r2
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	440b      	add	r3, r1
 800d200:	3326      	adds	r3, #38	; 0x26
 800d202:	2200      	movs	r2, #0
 800d204:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	32b0      	adds	r2, #176	; 0xb0
 800d210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d01f      	beq.n	800d258 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	33b0      	adds	r3, #176	; 0xb0
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	4413      	add	r3, r2
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	32b0      	adds	r2, #176	; 0xb0
 800d236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f012 fd18 	bl	801fc70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	32b0      	adds	r2, #176	; 0xb0
 800d24a:	2100      	movs	r1, #0
 800d24c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	200000f3 	.word	0x200000f3
 800d268:	200000f4 	.word	0x200000f4
 800d26c:	200000f5 	.word	0x200000f5

0800d270 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	32b0      	adds	r2, #176	; 0xb0
 800d284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d288:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d28a:	2300      	movs	r3, #0
 800d28c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d28e:	2300      	movs	r3, #0
 800d290:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d101      	bne.n	800d2a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d29c:	2303      	movs	r3, #3
 800d29e:	e0bf      	b.n	800d420 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d050      	beq.n	800d34e <USBD_CDC_Setup+0xde>
 800d2ac:	2b20      	cmp	r3, #32
 800d2ae:	f040 80af 	bne.w	800d410 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	88db      	ldrh	r3, [r3, #6]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d03a      	beq.n	800d330 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	b25b      	sxtb	r3, r3
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	da1b      	bge.n	800d2fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	33b0      	adds	r3, #176	; 0xb0
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	4413      	add	r3, r2
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	683a      	ldr	r2, [r7, #0]
 800d2d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d2da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d2dc:	683a      	ldr	r2, [r7, #0]
 800d2de:	88d2      	ldrh	r2, [r2, #6]
 800d2e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	88db      	ldrh	r3, [r3, #6]
 800d2e6:	2b07      	cmp	r3, #7
 800d2e8:	bf28      	it	cs
 800d2ea:	2307      	movcs	r3, #7
 800d2ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	89fa      	ldrh	r2, [r7, #14]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f001 fd89 	bl	800ee0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d2fa:	e090      	b.n	800d41e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	785a      	ldrb	r2, [r3, #1]
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	88db      	ldrh	r3, [r3, #6]
 800d30a:	2b3f      	cmp	r3, #63	; 0x3f
 800d30c:	d803      	bhi.n	800d316 <USBD_CDC_Setup+0xa6>
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	88db      	ldrh	r3, [r3, #6]
 800d312:	b2da      	uxtb	r2, r3
 800d314:	e000      	b.n	800d318 <USBD_CDC_Setup+0xa8>
 800d316:	2240      	movs	r2, #64	; 0x40
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d31e:	6939      	ldr	r1, [r7, #16]
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d326:	461a      	mov	r2, r3
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f001 fd9b 	bl	800ee64 <USBD_CtlPrepareRx>
      break;
 800d32e:	e076      	b.n	800d41e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	33b0      	adds	r3, #176	; 0xb0
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	683a      	ldr	r2, [r7, #0]
 800d344:	7850      	ldrb	r0, [r2, #1]
 800d346:	2200      	movs	r2, #0
 800d348:	6839      	ldr	r1, [r7, #0]
 800d34a:	4798      	blx	r3
      break;
 800d34c:	e067      	b.n	800d41e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	785b      	ldrb	r3, [r3, #1]
 800d352:	2b0b      	cmp	r3, #11
 800d354:	d851      	bhi.n	800d3fa <USBD_CDC_Setup+0x18a>
 800d356:	a201      	add	r2, pc, #4	; (adr r2, 800d35c <USBD_CDC_Setup+0xec>)
 800d358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d35c:	0800d38d 	.word	0x0800d38d
 800d360:	0800d409 	.word	0x0800d409
 800d364:	0800d3fb 	.word	0x0800d3fb
 800d368:	0800d3fb 	.word	0x0800d3fb
 800d36c:	0800d3fb 	.word	0x0800d3fb
 800d370:	0800d3fb 	.word	0x0800d3fb
 800d374:	0800d3fb 	.word	0x0800d3fb
 800d378:	0800d3fb 	.word	0x0800d3fb
 800d37c:	0800d3fb 	.word	0x0800d3fb
 800d380:	0800d3fb 	.word	0x0800d3fb
 800d384:	0800d3b7 	.word	0x0800d3b7
 800d388:	0800d3e1 	.word	0x0800d3e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d392:	b2db      	uxtb	r3, r3
 800d394:	2b03      	cmp	r3, #3
 800d396:	d107      	bne.n	800d3a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d398:	f107 030a 	add.w	r3, r7, #10
 800d39c:	2202      	movs	r2, #2
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f001 fd33 	bl	800ee0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3a6:	e032      	b.n	800d40e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f001 fcbd 	bl	800ed2a <USBD_CtlError>
            ret = USBD_FAIL;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	75fb      	strb	r3, [r7, #23]
          break;
 800d3b4:	e02b      	b.n	800d40e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	2b03      	cmp	r3, #3
 800d3c0:	d107      	bne.n	800d3d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d3c2:	f107 030d 	add.w	r3, r7, #13
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f001 fd1e 	bl	800ee0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3d0:	e01d      	b.n	800d40e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d3d2:	6839      	ldr	r1, [r7, #0]
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f001 fca8 	bl	800ed2a <USBD_CtlError>
            ret = USBD_FAIL;
 800d3da:	2303      	movs	r3, #3
 800d3dc:	75fb      	strb	r3, [r7, #23]
          break;
 800d3de:	e016      	b.n	800d40e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	d00f      	beq.n	800d40c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d3ec:	6839      	ldr	r1, [r7, #0]
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f001 fc9b 	bl	800ed2a <USBD_CtlError>
            ret = USBD_FAIL;
 800d3f4:	2303      	movs	r3, #3
 800d3f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d3f8:	e008      	b.n	800d40c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d3fa:	6839      	ldr	r1, [r7, #0]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f001 fc94 	bl	800ed2a <USBD_CtlError>
          ret = USBD_FAIL;
 800d402:	2303      	movs	r3, #3
 800d404:	75fb      	strb	r3, [r7, #23]
          break;
 800d406:	e002      	b.n	800d40e <USBD_CDC_Setup+0x19e>
          break;
 800d408:	bf00      	nop
 800d40a:	e008      	b.n	800d41e <USBD_CDC_Setup+0x1ae>
          break;
 800d40c:	bf00      	nop
      }
      break;
 800d40e:	e006      	b.n	800d41e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d410:	6839      	ldr	r1, [r7, #0]
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f001 fc89 	bl	800ed2a <USBD_CtlError>
      ret = USBD_FAIL;
 800d418:	2303      	movs	r3, #3
 800d41a:	75fb      	strb	r3, [r7, #23]
      break;
 800d41c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	460b      	mov	r3, r1
 800d432:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d43a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	32b0      	adds	r2, #176	; 0xb0
 800d446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d44e:	2303      	movs	r3, #3
 800d450:	e065      	b.n	800d51e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	32b0      	adds	r2, #176	; 0xb0
 800d45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d460:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d462:	78fb      	ldrb	r3, [r7, #3]
 800d464:	f003 020f 	and.w	r2, r3, #15
 800d468:	6879      	ldr	r1, [r7, #4]
 800d46a:	4613      	mov	r3, r2
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	4413      	add	r3, r2
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	440b      	add	r3, r1
 800d474:	3318      	adds	r3, #24
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d02f      	beq.n	800d4dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d47c:	78fb      	ldrb	r3, [r7, #3]
 800d47e:	f003 020f 	and.w	r2, r3, #15
 800d482:	6879      	ldr	r1, [r7, #4]
 800d484:	4613      	mov	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4413      	add	r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	440b      	add	r3, r1
 800d48e:	3318      	adds	r3, #24
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	78fb      	ldrb	r3, [r7, #3]
 800d494:	f003 010f 	and.w	r1, r3, #15
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	460b      	mov	r3, r1
 800d49c:	00db      	lsls	r3, r3, #3
 800d49e:	440b      	add	r3, r1
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	4403      	add	r3, r0
 800d4a4:	3348      	adds	r3, #72	; 0x48
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d4ac:	fb01 f303 	mul.w	r3, r1, r3
 800d4b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d112      	bne.n	800d4dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d4b6:	78fb      	ldrb	r3, [r7, #3]
 800d4b8:	f003 020f 	and.w	r2, r3, #15
 800d4bc:	6879      	ldr	r1, [r7, #4]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4413      	add	r3, r2
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	440b      	add	r3, r1
 800d4c8:	3318      	adds	r3, #24
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d4ce:	78f9      	ldrb	r1, [r7, #3]
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f012 fb68 	bl	801fbaa <USBD_LL_Transmit>
 800d4da:	e01f      	b.n	800d51c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	33b0      	adds	r3, #176	; 0xb0
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	691b      	ldr	r3, [r3, #16]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d010      	beq.n	800d51c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	33b0      	adds	r3, #176	; 0xb0
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	4413      	add	r3, r2
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	68ba      	ldr	r2, [r7, #8]
 800d50e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d518:	78fa      	ldrb	r2, [r7, #3]
 800d51a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b084      	sub	sp, #16
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
 800d52e:	460b      	mov	r3, r1
 800d530:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	32b0      	adds	r2, #176	; 0xb0
 800d53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d540:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	32b0      	adds	r2, #176	; 0xb0
 800d54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d101      	bne.n	800d558 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d554:	2303      	movs	r3, #3
 800d556:	e01a      	b.n	800d58e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d558:	78fb      	ldrb	r3, [r7, #3]
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f012 fb66 	bl	801fc2e <USBD_LL_GetRxDataSize>
 800d562:	4602      	mov	r2, r0
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	33b0      	adds	r3, #176	; 0xb0
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	4413      	add	r3, r2
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d588:	4611      	mov	r1, r2
 800d58a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d58c:	2300      	movs	r3, #0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b084      	sub	sp, #16
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	32b0      	adds	r2, #176	; 0xb0
 800d5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d101      	bne.n	800d5b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d5b4:	2303      	movs	r3, #3
 800d5b6:	e025      	b.n	800d604 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	33b0      	adds	r3, #176	; 0xb0
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d01a      	beq.n	800d602 <USBD_CDC_EP0_RxReady+0x6c>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d5d2:	2bff      	cmp	r3, #255	; 0xff
 800d5d4:	d015      	beq.n	800d602 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	33b0      	adds	r3, #176	; 0xb0
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	4413      	add	r3, r2
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d5ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d5f6:	b292      	uxth	r2, r2
 800d5f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	22ff      	movs	r2, #255	; 0xff
 800d5fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d602:	2300      	movs	r3, #0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d614:	2182      	movs	r1, #130	; 0x82
 800d616:	4818      	ldr	r0, [pc, #96]	; (800d678 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d618:	f000 fd4f 	bl	800e0ba <USBD_GetEpDesc>
 800d61c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d61e:	2101      	movs	r1, #1
 800d620:	4815      	ldr	r0, [pc, #84]	; (800d678 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d622:	f000 fd4a 	bl	800e0ba <USBD_GetEpDesc>
 800d626:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d628:	2181      	movs	r1, #129	; 0x81
 800d62a:	4813      	ldr	r0, [pc, #76]	; (800d678 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d62c:	f000 fd45 	bl	800e0ba <USBD_GetEpDesc>
 800d630:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d002      	beq.n	800d63e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	2210      	movs	r2, #16
 800d63c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d006      	beq.n	800d652 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	2200      	movs	r2, #0
 800d648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d64c:	711a      	strb	r2, [r3, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d006      	beq.n	800d666 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2200      	movs	r2, #0
 800d65c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d660:	711a      	strb	r2, [r3, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2243      	movs	r2, #67	; 0x43
 800d66a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d66c:	4b02      	ldr	r3, [pc, #8]	; (800d678 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3718      	adds	r7, #24
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	200000b0 	.word	0x200000b0

0800d67c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b086      	sub	sp, #24
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d684:	2182      	movs	r1, #130	; 0x82
 800d686:	4818      	ldr	r0, [pc, #96]	; (800d6e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d688:	f000 fd17 	bl	800e0ba <USBD_GetEpDesc>
 800d68c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d68e:	2101      	movs	r1, #1
 800d690:	4815      	ldr	r0, [pc, #84]	; (800d6e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d692:	f000 fd12 	bl	800e0ba <USBD_GetEpDesc>
 800d696:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d698:	2181      	movs	r1, #129	; 0x81
 800d69a:	4813      	ldr	r0, [pc, #76]	; (800d6e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d69c:	f000 fd0d 	bl	800e0ba <USBD_GetEpDesc>
 800d6a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2210      	movs	r2, #16
 800d6ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d006      	beq.n	800d6c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	711a      	strb	r2, [r3, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f042 0202 	orr.w	r2, r2, #2
 800d6c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d006      	beq.n	800d6d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	711a      	strb	r2, [r3, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f042 0202 	orr.w	r2, r2, #2
 800d6d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2243      	movs	r2, #67	; 0x43
 800d6da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d6dc:	4b02      	ldr	r3, [pc, #8]	; (800d6e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3718      	adds	r7, #24
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	200000b0 	.word	0x200000b0

0800d6ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b086      	sub	sp, #24
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d6f4:	2182      	movs	r1, #130	; 0x82
 800d6f6:	4818      	ldr	r0, [pc, #96]	; (800d758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d6f8:	f000 fcdf 	bl	800e0ba <USBD_GetEpDesc>
 800d6fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d6fe:	2101      	movs	r1, #1
 800d700:	4815      	ldr	r0, [pc, #84]	; (800d758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d702:	f000 fcda 	bl	800e0ba <USBD_GetEpDesc>
 800d706:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d708:	2181      	movs	r1, #129	; 0x81
 800d70a:	4813      	ldr	r0, [pc, #76]	; (800d758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d70c:	f000 fcd5 	bl	800e0ba <USBD_GetEpDesc>
 800d710:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d002      	beq.n	800d71e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	2210      	movs	r2, #16
 800d71c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d006      	beq.n	800d732 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	2200      	movs	r2, #0
 800d728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d72c:	711a      	strb	r2, [r3, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d006      	beq.n	800d746 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d740:	711a      	strb	r2, [r3, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2243      	movs	r2, #67	; 0x43
 800d74a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d74c:	4b02      	ldr	r3, [pc, #8]	; (800d758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3718      	adds	r7, #24
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	200000b0 	.word	0x200000b0

0800d75c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	220a      	movs	r2, #10
 800d768:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d76a:	4b03      	ldr	r3, [pc, #12]	; (800d778 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr
 800d778:	2000006c 	.word	0x2000006c

0800d77c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d78c:	2303      	movs	r3, #3
 800d78e:	e009      	b.n	800d7a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	33b0      	adds	r3, #176	; 0xb0
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4413      	add	r3, r2
 800d79e:	683a      	ldr	r2, [r7, #0]
 800d7a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b087      	sub	sp, #28
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	32b0      	adds	r2, #176	; 0xb0
 800d7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ca:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d101      	bne.n	800d7d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d7d2:	2303      	movs	r3, #3
 800d7d4:	e008      	b.n	800d7e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	371c      	adds	r7, #28
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	32b0      	adds	r2, #176	; 0xb0
 800d808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d80c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d101      	bne.n	800d818 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d814:	2303      	movs	r3, #3
 800d816:	e004      	b.n	800d822 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	683a      	ldr	r2, [r7, #0]
 800d81c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	3714      	adds	r7, #20
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr
	...

0800d830 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	32b0      	adds	r2, #176	; 0xb0
 800d842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d846:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d848:	2301      	movs	r3, #1
 800d84a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	32b0      	adds	r2, #176	; 0xb0
 800d856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d101      	bne.n	800d862 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d85e:	2303      	movs	r3, #3
 800d860:	e025      	b.n	800d8ae <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d11f      	bne.n	800d8ac <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	2201      	movs	r2, #1
 800d870:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d874:	4b10      	ldr	r3, [pc, #64]	; (800d8b8 <USBD_CDC_TransmitPacket+0x88>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	f003 020f 	and.w	r2, r3, #15
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	4613      	mov	r3, r2
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	4413      	add	r3, r2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4403      	add	r3, r0
 800d88e:	3318      	adds	r3, #24
 800d890:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d892:	4b09      	ldr	r3, [pc, #36]	; (800d8b8 <USBD_CDC_TransmitPacket+0x88>)
 800d894:	7819      	ldrb	r1, [r3, #0]
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f012 f981 	bl	801fbaa <USBD_LL_Transmit>

    ret = USBD_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	200000f3 	.word	0x200000f3

0800d8bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	32b0      	adds	r2, #176	; 0xb0
 800d8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	32b0      	adds	r2, #176	; 0xb0
 800d8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d101      	bne.n	800d8ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d8e6:	2303      	movs	r3, #3
 800d8e8:	e018      	b.n	800d91c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	7c1b      	ldrb	r3, [r3, #16]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10a      	bne.n	800d908 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d8f2:	4b0c      	ldr	r3, [pc, #48]	; (800d924 <USBD_CDC_ReceivePacket+0x68>)
 800d8f4:	7819      	ldrb	r1, [r3, #0]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d8fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f012 f973 	bl	801fbec <USBD_LL_PrepareReceive>
 800d906:	e008      	b.n	800d91a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d908:	4b06      	ldr	r3, [pc, #24]	; (800d924 <USBD_CDC_ReceivePacket+0x68>)
 800d90a:	7819      	ldrb	r1, [r3, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d912:	2340      	movs	r3, #64	; 0x40
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f012 f969 	bl	801fbec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	200000f4 	.word	0x200000f4

0800d928 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b086      	sub	sp, #24
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	4613      	mov	r3, r2
 800d934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d101      	bne.n	800d940 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d93c:	2303      	movs	r3, #3
 800d93e:	e01f      	b.n	800d980 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2200      	movs	r2, #0
 800d944:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2200      	movs	r2, #0
 800d94c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2200      	movs	r2, #0
 800d954:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d003      	beq.n	800d966 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2201      	movs	r2, #1
 800d96a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	79fa      	ldrb	r2, [r7, #7]
 800d972:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d974:	68f8      	ldr	r0, [r7, #12]
 800d976:	f011 ffe3 	bl	801f940 <USBD_LL_Init>
 800d97a:	4603      	mov	r3, r0
 800d97c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d97e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d992:	2300      	movs	r3, #0
 800d994:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d101      	bne.n	800d9a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d99c:	2303      	movs	r3, #3
 800d99e:	e025      	b.n	800d9ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	683a      	ldr	r2, [r7, #0]
 800d9a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	32ae      	adds	r2, #174	; 0xae
 800d9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00f      	beq.n	800d9dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	32ae      	adds	r2, #174	; 0xae
 800d9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	f107 020e 	add.w	r2, r7, #14
 800d9d0:	4610      	mov	r0, r2
 800d9d2:	4798      	blx	r3
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d9e2:	1c5a      	adds	r2, r3, #1
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3710      	adds	r7, #16
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f011 ffeb 	bl	801f9d8 <USBD_LL_Start>
 800da02:	4603      	mov	r3, r0
}
 800da04:	4618      	mov	r0, r3
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800da16:	4618      	mov	r0, r3
 800da18:	370c      	adds	r7, #12
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr

0800da22 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b084      	sub	sp, #16
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
 800da2a:	460b      	mov	r3, r1
 800da2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800da2e:	2300      	movs	r3, #0
 800da30:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d009      	beq.n	800da50 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	78fa      	ldrb	r2, [r7, #3]
 800da46:	4611      	mov	r1, r2
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	4798      	blx	r3
 800da4c:	4603      	mov	r3, r0
 800da4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800da50:	7bfb      	ldrb	r3, [r7, #15]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b084      	sub	sp, #16
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
 800da62:	460b      	mov	r3, r1
 800da64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800da66:	2300      	movs	r3, #0
 800da68:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	78fa      	ldrb	r2, [r7, #3]
 800da74:	4611      	mov	r1, r2
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	4798      	blx	r3
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d001      	beq.n	800da84 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800da80:	2303      	movs	r3, #3
 800da82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800da84:	7bfb      	ldrb	r3, [r7, #15]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b084      	sub	sp, #16
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
 800da96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da9e:	6839      	ldr	r1, [r7, #0]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f001 f908 	bl	800ecb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2201      	movs	r2, #1
 800daaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dab4:	461a      	mov	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dac2:	f003 031f 	and.w	r3, r3, #31
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d01a      	beq.n	800db00 <USBD_LL_SetupStage+0x72>
 800daca:	2b02      	cmp	r3, #2
 800dacc:	d822      	bhi.n	800db14 <USBD_LL_SetupStage+0x86>
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <USBD_LL_SetupStage+0x4a>
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d00a      	beq.n	800daec <USBD_LL_SetupStage+0x5e>
 800dad6:	e01d      	b.n	800db14 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dade:	4619      	mov	r1, r3
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 fb5f 	bl	800e1a4 <USBD_StdDevReq>
 800dae6:	4603      	mov	r3, r0
 800dae8:	73fb      	strb	r3, [r7, #15]
      break;
 800daea:	e020      	b.n	800db2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800daf2:	4619      	mov	r1, r3
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 fbc7 	bl	800e288 <USBD_StdItfReq>
 800dafa:	4603      	mov	r3, r0
 800dafc:	73fb      	strb	r3, [r7, #15]
      break;
 800dafe:	e016      	b.n	800db2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 fc29 	bl	800e360 <USBD_StdEPReq>
 800db0e:	4603      	mov	r3, r0
 800db10:	73fb      	strb	r3, [r7, #15]
      break;
 800db12:	e00c      	b.n	800db2e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f011 ffb8 	bl	801fa98 <USBD_LL_StallEP>
 800db28:	4603      	mov	r3, r0
 800db2a:	73fb      	strb	r3, [r7, #15]
      break;
 800db2c:	bf00      	nop
  }

  return ret;
 800db2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	460b      	mov	r3, r1
 800db42:	607a      	str	r2, [r7, #4]
 800db44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800db4a:	7afb      	ldrb	r3, [r7, #11]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d16e      	bne.n	800dc2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800db56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800db5e:	2b03      	cmp	r3, #3
 800db60:	f040 8098 	bne.w	800dc94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	689a      	ldr	r2, [r3, #8]
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d913      	bls.n	800db98 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	689a      	ldr	r2, [r3, #8]
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	1ad2      	subs	r2, r2, r3
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	68da      	ldr	r2, [r3, #12]
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	4293      	cmp	r3, r2
 800db88:	bf28      	it	cs
 800db8a:	4613      	movcs	r3, r2
 800db8c:	461a      	mov	r2, r3
 800db8e:	6879      	ldr	r1, [r7, #4]
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f001 f984 	bl	800ee9e <USBD_CtlContinueRx>
 800db96:	e07d      	b.n	800dc94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db9e:	f003 031f 	and.w	r3, r3, #31
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d014      	beq.n	800dbd0 <USBD_LL_DataOutStage+0x98>
 800dba6:	2b02      	cmp	r3, #2
 800dba8:	d81d      	bhi.n	800dbe6 <USBD_LL_DataOutStage+0xae>
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d002      	beq.n	800dbb4 <USBD_LL_DataOutStage+0x7c>
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d003      	beq.n	800dbba <USBD_LL_DataOutStage+0x82>
 800dbb2:	e018      	b.n	800dbe6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	75bb      	strb	r3, [r7, #22]
            break;
 800dbb8:	e018      	b.n	800dbec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	f000 fa5e 	bl	800e086 <USBD_CoreFindIF>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	75bb      	strb	r3, [r7, #22]
            break;
 800dbce:	e00d      	b.n	800dbec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	4619      	mov	r1, r3
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f000 fa60 	bl	800e0a0 <USBD_CoreFindEP>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	75bb      	strb	r3, [r7, #22]
            break;
 800dbe4:	e002      	b.n	800dbec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	75bb      	strb	r3, [r7, #22]
            break;
 800dbea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dbec:	7dbb      	ldrb	r3, [r7, #22]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d119      	bne.n	800dc26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	2b03      	cmp	r3, #3
 800dbfc:	d113      	bne.n	800dc26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dbfe:	7dba      	ldrb	r2, [r7, #22]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	32ae      	adds	r2, #174	; 0xae
 800dc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00b      	beq.n	800dc26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dc0e:	7dba      	ldrb	r2, [r7, #22]
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dc16:	7dba      	ldrb	r2, [r7, #22]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	32ae      	adds	r2, #174	; 0xae
 800dc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc20:	691b      	ldr	r3, [r3, #16]
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f001 f94a 	bl	800eec0 <USBD_CtlSendStatus>
 800dc2c:	e032      	b.n	800dc94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dc2e:	7afb      	ldrb	r3, [r7, #11]
 800dc30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	4619      	mov	r1, r3
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f000 fa31 	bl	800e0a0 <USBD_CoreFindEP>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc42:	7dbb      	ldrb	r3, [r7, #22]
 800dc44:	2bff      	cmp	r3, #255	; 0xff
 800dc46:	d025      	beq.n	800dc94 <USBD_LL_DataOutStage+0x15c>
 800dc48:	7dbb      	ldrb	r3, [r7, #22]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d122      	bne.n	800dc94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	2b03      	cmp	r3, #3
 800dc58:	d117      	bne.n	800dc8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dc5a:	7dba      	ldrb	r2, [r7, #22]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	32ae      	adds	r2, #174	; 0xae
 800dc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc64:	699b      	ldr	r3, [r3, #24]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00f      	beq.n	800dc8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dc6a:	7dba      	ldrb	r2, [r7, #22]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dc72:	7dba      	ldrb	r2, [r7, #22]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	32ae      	adds	r2, #174	; 0xae
 800dc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc7c:	699b      	ldr	r3, [r3, #24]
 800dc7e:	7afa      	ldrb	r2, [r7, #11]
 800dc80:	4611      	mov	r1, r2
 800dc82:	68f8      	ldr	r0, [r7, #12]
 800dc84:	4798      	blx	r3
 800dc86:	4603      	mov	r3, r0
 800dc88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dc8a:	7dfb      	ldrb	r3, [r7, #23]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dc90:	7dfb      	ldrb	r3, [r7, #23]
 800dc92:	e000      	b.n	800dc96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dc94:	2300      	movs	r3, #0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3718      	adds	r7, #24
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b086      	sub	sp, #24
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	60f8      	str	r0, [r7, #12]
 800dca6:	460b      	mov	r3, r1
 800dca8:	607a      	str	r2, [r7, #4]
 800dcaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dcac:	7afb      	ldrb	r3, [r7, #11]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d16f      	bne.n	800dd92 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	3314      	adds	r3, #20
 800dcb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dcbe:	2b02      	cmp	r3, #2
 800dcc0:	d15a      	bne.n	800dd78 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	689a      	ldr	r2, [r3, #8]
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d914      	bls.n	800dcf8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	689a      	ldr	r2, [r3, #8]
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	1ad2      	subs	r2, r2, r3
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	461a      	mov	r2, r3
 800dce2:	6879      	ldr	r1, [r7, #4]
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f001 f8ac 	bl	800ee42 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcea:	2300      	movs	r3, #0
 800dcec:	2200      	movs	r2, #0
 800dcee:	2100      	movs	r1, #0
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f011 ff7b 	bl	801fbec <USBD_LL_PrepareReceive>
 800dcf6:	e03f      	b.n	800dd78 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	68da      	ldr	r2, [r3, #12]
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d11c      	bne.n	800dd3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	685a      	ldr	r2, [r3, #4]
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d316      	bcc.n	800dd3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d20f      	bcs.n	800dd3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd1e:	2200      	movs	r2, #0
 800dd20:	2100      	movs	r1, #0
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f001 f88d 	bl	800ee42 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd30:	2300      	movs	r3, #0
 800dd32:	2200      	movs	r2, #0
 800dd34:	2100      	movs	r1, #0
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	f011 ff58 	bl	801fbec <USBD_LL_PrepareReceive>
 800dd3c:	e01c      	b.n	800dd78 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	d10f      	bne.n	800dd6a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d009      	beq.n	800dd6a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd6a:	2180      	movs	r1, #128	; 0x80
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f011 fe93 	bl	801fa98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dd72:	68f8      	ldr	r0, [r7, #12]
 800dd74:	f001 f8b7 	bl	800eee6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d03a      	beq.n	800ddf8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f7ff fe42 	bl	800da0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dd90:	e032      	b.n	800ddf8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dd92:	7afb      	ldrb	r3, [r7, #11]
 800dd94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	68f8      	ldr	r0, [r7, #12]
 800dd9e:	f000 f97f 	bl	800e0a0 <USBD_CoreFindEP>
 800dda2:	4603      	mov	r3, r0
 800dda4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dda6:	7dfb      	ldrb	r3, [r7, #23]
 800dda8:	2bff      	cmp	r3, #255	; 0xff
 800ddaa:	d025      	beq.n	800ddf8 <USBD_LL_DataInStage+0x15a>
 800ddac:	7dfb      	ldrb	r3, [r7, #23]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d122      	bne.n	800ddf8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	2b03      	cmp	r3, #3
 800ddbc:	d11c      	bne.n	800ddf8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ddbe:	7dfa      	ldrb	r2, [r7, #23]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	32ae      	adds	r2, #174	; 0xae
 800ddc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d014      	beq.n	800ddf8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ddce:	7dfa      	ldrb	r2, [r7, #23]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ddd6:	7dfa      	ldrb	r2, [r7, #23]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	32ae      	adds	r2, #174	; 0xae
 800dddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	7afa      	ldrb	r2, [r7, #11]
 800dde4:	4611      	mov	r1, r2
 800dde6:	68f8      	ldr	r0, [r7, #12]
 800dde8:	4798      	blx	r3
 800ddea:	4603      	mov	r3, r0
 800ddec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ddee:	7dbb      	ldrb	r3, [r7, #22]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d001      	beq.n	800ddf8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ddf4:	7dbb      	ldrb	r3, [r7, #22]
 800ddf6:	e000      	b.n	800ddfa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3718      	adds	r7, #24
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b084      	sub	sp, #16
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2201      	movs	r2, #1
 800de12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2200      	movs	r2, #0
 800de22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2200      	movs	r2, #0
 800de28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d014      	beq.n	800de68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00e      	beq.n	800de68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	6852      	ldr	r2, [r2, #4]
 800de56:	b2d2      	uxtb	r2, r2
 800de58:	4611      	mov	r1, r2
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	4798      	blx	r3
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800de64:	2303      	movs	r3, #3
 800de66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de68:	2340      	movs	r3, #64	; 0x40
 800de6a:	2200      	movs	r2, #0
 800de6c:	2100      	movs	r1, #0
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f011 fdcd 	bl	801fa0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2201      	movs	r2, #1
 800de78:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2240      	movs	r2, #64	; 0x40
 800de80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de84:	2340      	movs	r3, #64	; 0x40
 800de86:	2200      	movs	r2, #0
 800de88:	2180      	movs	r1, #128	; 0x80
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f011 fdbf 	bl	801fa0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2240      	movs	r2, #64	; 0x40
 800de9a:	621a      	str	r2, [r3, #32]

  return ret;
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dea6:	b480      	push	{r7}
 800dea8:	b083      	sub	sp, #12
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
 800deae:	460b      	mov	r3, r1
 800deb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	78fa      	ldrb	r2, [r7, #3]
 800deb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	370c      	adds	r7, #12
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr

0800dec6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dec6:	b480      	push	{r7}
 800dec8:	b083      	sub	sp, #12
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2204      	movs	r2, #4
 800dee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	370c      	adds	r7, #12
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr

0800def2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800def2:	b480      	push	{r7}
 800def4:	b083      	sub	sp, #12
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df00:	b2db      	uxtb	r3, r3
 800df02:	2b04      	cmp	r3, #4
 800df04:	d106      	bne.n	800df14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800df0c:	b2da      	uxtb	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800df14:	2300      	movs	r3, #0
}
 800df16:	4618      	mov	r0, r3
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b082      	sub	sp, #8
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df30:	b2db      	uxtb	r3, r3
 800df32:	2b03      	cmp	r3, #3
 800df34:	d110      	bne.n	800df58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00b      	beq.n	800df58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df46:	69db      	ldr	r3, [r3, #28]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d005      	beq.n	800df58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df52:	69db      	ldr	r3, [r3, #28]
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3708      	adds	r7, #8
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}

0800df62 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800df62:	b580      	push	{r7, lr}
 800df64:	b082      	sub	sp, #8
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
 800df6a:	460b      	mov	r3, r1
 800df6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	32ae      	adds	r2, #174	; 0xae
 800df78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d101      	bne.n	800df84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800df80:	2303      	movs	r3, #3
 800df82:	e01c      	b.n	800dfbe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	2b03      	cmp	r3, #3
 800df8e:	d115      	bne.n	800dfbc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	32ae      	adds	r2, #174	; 0xae
 800df9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df9e:	6a1b      	ldr	r3, [r3, #32]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00b      	beq.n	800dfbc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	32ae      	adds	r2, #174	; 0xae
 800dfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfb2:	6a1b      	ldr	r3, [r3, #32]
 800dfb4:	78fa      	ldrb	r2, [r7, #3]
 800dfb6:	4611      	mov	r1, r2
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dfbc:	2300      	movs	r3, #0
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3708      	adds	r7, #8
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}

0800dfc6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dfc6:	b580      	push	{r7, lr}
 800dfc8:	b082      	sub	sp, #8
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	6078      	str	r0, [r7, #4]
 800dfce:	460b      	mov	r3, r1
 800dfd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	32ae      	adds	r2, #174	; 0xae
 800dfdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d101      	bne.n	800dfe8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	e01c      	b.n	800e022 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	2b03      	cmp	r3, #3
 800dff2:	d115      	bne.n	800e020 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	32ae      	adds	r2, #174	; 0xae
 800dffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00b      	beq.n	800e020 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	32ae      	adds	r2, #174	; 0xae
 800e012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e018:	78fa      	ldrb	r2, [r7, #3]
 800e01a:	4611      	mov	r1, r2
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	3708      	adds	r7, #8
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b083      	sub	sp, #12
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e032:	2300      	movs	r3, #0
}
 800e034:	4618      	mov	r0, r3
 800e036:	370c      	adds	r7, #12
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e048:	2300      	movs	r3, #0
 800e04a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00e      	beq.n	800e07c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	6852      	ldr	r2, [r2, #4]
 800e06a:	b2d2      	uxtb	r2, r2
 800e06c:	4611      	mov	r1, r2
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	4798      	blx	r3
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d001      	beq.n	800e07c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e078:	2303      	movs	r3, #3
 800e07a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3710      	adds	r7, #16
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}

0800e086 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e086:	b480      	push	{r7}
 800e088:	b083      	sub	sp, #12
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6078      	str	r0, [r7, #4]
 800e08e:	460b      	mov	r3, r1
 800e090:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e092:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e094:	4618      	mov	r0, r3
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e0ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	370c      	adds	r7, #12
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b086      	sub	sp, #24
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	885b      	ldrh	r3, [r3, #2]
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d920      	bls.n	800e124 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e0ea:	e013      	b.n	800e114 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e0ec:	f107 030a 	add.w	r3, r7, #10
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	6978      	ldr	r0, [r7, #20]
 800e0f4:	f000 f81b 	bl	800e12e <USBD_GetNextDesc>
 800e0f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	785b      	ldrb	r3, [r3, #1]
 800e0fe:	2b05      	cmp	r3, #5
 800e100:	d108      	bne.n	800e114 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	789b      	ldrb	r3, [r3, #2]
 800e10a:	78fa      	ldrb	r2, [r7, #3]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d008      	beq.n	800e122 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e110:	2300      	movs	r3, #0
 800e112:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	885b      	ldrh	r3, [r3, #2]
 800e118:	b29a      	uxth	r2, r3
 800e11a:	897b      	ldrh	r3, [r7, #10]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d8e5      	bhi.n	800e0ec <USBD_GetEpDesc+0x32>
 800e120:	e000      	b.n	800e124 <USBD_GetEpDesc+0x6a>
          break;
 800e122:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e124:	693b      	ldr	r3, [r7, #16]
}
 800e126:	4618      	mov	r0, r3
 800e128:	3718      	adds	r7, #24
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e12e:	b480      	push	{r7}
 800e130:	b085      	sub	sp, #20
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
 800e136:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	881a      	ldrh	r2, [r3, #0]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	b29b      	uxth	r3, r3
 800e146:	4413      	add	r3, r2
 800e148:	b29a      	uxth	r2, r3
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	461a      	mov	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	4413      	add	r3, r2
 800e158:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e15a:	68fb      	ldr	r3, [r7, #12]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3714      	adds	r7, #20
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e168:	b480      	push	{r7}
 800e16a:	b087      	sub	sp, #28
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	3301      	adds	r3, #1
 800e17e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e186:	8a3b      	ldrh	r3, [r7, #16]
 800e188:	021b      	lsls	r3, r3, #8
 800e18a:	b21a      	sxth	r2, r3
 800e18c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e190:	4313      	orrs	r3, r2
 800e192:	b21b      	sxth	r3, r3
 800e194:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e196:	89fb      	ldrh	r3, [r7, #14]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	371c      	adds	r7, #28
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1ba:	2b40      	cmp	r3, #64	; 0x40
 800e1bc:	d005      	beq.n	800e1ca <USBD_StdDevReq+0x26>
 800e1be:	2b40      	cmp	r3, #64	; 0x40
 800e1c0:	d857      	bhi.n	800e272 <USBD_StdDevReq+0xce>
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00f      	beq.n	800e1e6 <USBD_StdDevReq+0x42>
 800e1c6:	2b20      	cmp	r3, #32
 800e1c8:	d153      	bne.n	800e272 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	32ae      	adds	r2, #174	; 0xae
 800e1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1d8:	689b      	ldr	r3, [r3, #8]
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	4798      	blx	r3
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800e1e4:	e04a      	b.n	800e27c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	785b      	ldrb	r3, [r3, #1]
 800e1ea:	2b09      	cmp	r3, #9
 800e1ec:	d83b      	bhi.n	800e266 <USBD_StdDevReq+0xc2>
 800e1ee:	a201      	add	r2, pc, #4	; (adr r2, 800e1f4 <USBD_StdDevReq+0x50>)
 800e1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f4:	0800e249 	.word	0x0800e249
 800e1f8:	0800e25d 	.word	0x0800e25d
 800e1fc:	0800e267 	.word	0x0800e267
 800e200:	0800e253 	.word	0x0800e253
 800e204:	0800e267 	.word	0x0800e267
 800e208:	0800e227 	.word	0x0800e227
 800e20c:	0800e21d 	.word	0x0800e21d
 800e210:	0800e267 	.word	0x0800e267
 800e214:	0800e23f 	.word	0x0800e23f
 800e218:	0800e231 	.word	0x0800e231
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e21c:	6839      	ldr	r1, [r7, #0]
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 fa3c 	bl	800e69c <USBD_GetDescriptor>
          break;
 800e224:	e024      	b.n	800e270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e226:	6839      	ldr	r1, [r7, #0]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 fba1 	bl	800e970 <USBD_SetAddress>
          break;
 800e22e:	e01f      	b.n	800e270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 fbe0 	bl	800e9f8 <USBD_SetConfig>
 800e238:	4603      	mov	r3, r0
 800e23a:	73fb      	strb	r3, [r7, #15]
          break;
 800e23c:	e018      	b.n	800e270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e23e:	6839      	ldr	r1, [r7, #0]
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 fc83 	bl	800eb4c <USBD_GetConfig>
          break;
 800e246:	e013      	b.n	800e270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 fcb4 	bl	800ebb8 <USBD_GetStatus>
          break;
 800e250:	e00e      	b.n	800e270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e252:	6839      	ldr	r1, [r7, #0]
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f000 fce3 	bl	800ec20 <USBD_SetFeature>
          break;
 800e25a:	e009      	b.n	800e270 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e25c:	6839      	ldr	r1, [r7, #0]
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 fd07 	bl	800ec72 <USBD_ClrFeature>
          break;
 800e264:	e004      	b.n	800e270 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e266:	6839      	ldr	r1, [r7, #0]
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 fd5e 	bl	800ed2a <USBD_CtlError>
          break;
 800e26e:	bf00      	nop
      }
      break;
 800e270:	e004      	b.n	800e27c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e272:	6839      	ldr	r1, [r7, #0]
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 fd58 	bl	800ed2a <USBD_CtlError>
      break;
 800e27a:	bf00      	nop
  }

  return ret;
 800e27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop

0800e288 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e292:	2300      	movs	r3, #0
 800e294:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e29e:	2b40      	cmp	r3, #64	; 0x40
 800e2a0:	d005      	beq.n	800e2ae <USBD_StdItfReq+0x26>
 800e2a2:	2b40      	cmp	r3, #64	; 0x40
 800e2a4:	d852      	bhi.n	800e34c <USBD_StdItfReq+0xc4>
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d001      	beq.n	800e2ae <USBD_StdItfReq+0x26>
 800e2aa:	2b20      	cmp	r3, #32
 800e2ac:	d14e      	bne.n	800e34c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	2b02      	cmp	r3, #2
 800e2ba:	d840      	bhi.n	800e33e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	889b      	ldrh	r3, [r3, #4]
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d836      	bhi.n	800e334 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	889b      	ldrh	r3, [r3, #4]
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f7ff fed9 	bl	800e086 <USBD_CoreFindIF>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e2d8:	7bbb      	ldrb	r3, [r7, #14]
 800e2da:	2bff      	cmp	r3, #255	; 0xff
 800e2dc:	d01d      	beq.n	800e31a <USBD_StdItfReq+0x92>
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d11a      	bne.n	800e31a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e2e4:	7bba      	ldrb	r2, [r7, #14]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	32ae      	adds	r2, #174	; 0xae
 800e2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00f      	beq.n	800e314 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e2f4:	7bba      	ldrb	r2, [r7, #14]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e2fc:	7bba      	ldrb	r2, [r7, #14]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	32ae      	adds	r2, #174	; 0xae
 800e302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	4798      	blx	r3
 800e30e:	4603      	mov	r3, r0
 800e310:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e312:	e004      	b.n	800e31e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e314:	2303      	movs	r3, #3
 800e316:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e318:	e001      	b.n	800e31e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e31a:	2303      	movs	r3, #3
 800e31c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	88db      	ldrh	r3, [r3, #6]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d110      	bne.n	800e348 <USBD_StdItfReq+0xc0>
 800e326:	7bfb      	ldrb	r3, [r7, #15]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10d      	bne.n	800e348 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 fdc7 	bl	800eec0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e332:	e009      	b.n	800e348 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fcf7 	bl	800ed2a <USBD_CtlError>
          break;
 800e33c:	e004      	b.n	800e348 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e33e:	6839      	ldr	r1, [r7, #0]
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 fcf2 	bl	800ed2a <USBD_CtlError>
          break;
 800e346:	e000      	b.n	800e34a <USBD_StdItfReq+0xc2>
          break;
 800e348:	bf00      	nop
      }
      break;
 800e34a:	e004      	b.n	800e356 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e34c:	6839      	ldr	r1, [r7, #0]
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 fceb 	bl	800ed2a <USBD_CtlError>
      break;
 800e354:	bf00      	nop
  }

  return ret;
 800e356:	7bfb      	ldrb	r3, [r7, #15]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e36a:	2300      	movs	r3, #0
 800e36c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	889b      	ldrh	r3, [r3, #4]
 800e372:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e37c:	2b40      	cmp	r3, #64	; 0x40
 800e37e:	d007      	beq.n	800e390 <USBD_StdEPReq+0x30>
 800e380:	2b40      	cmp	r3, #64	; 0x40
 800e382:	f200 817f 	bhi.w	800e684 <USBD_StdEPReq+0x324>
 800e386:	2b00      	cmp	r3, #0
 800e388:	d02a      	beq.n	800e3e0 <USBD_StdEPReq+0x80>
 800e38a:	2b20      	cmp	r3, #32
 800e38c:	f040 817a 	bne.w	800e684 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e390:	7bbb      	ldrb	r3, [r7, #14]
 800e392:	4619      	mov	r1, r3
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f7ff fe83 	bl	800e0a0 <USBD_CoreFindEP>
 800e39a:	4603      	mov	r3, r0
 800e39c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e39e:	7b7b      	ldrb	r3, [r7, #13]
 800e3a0:	2bff      	cmp	r3, #255	; 0xff
 800e3a2:	f000 8174 	beq.w	800e68e <USBD_StdEPReq+0x32e>
 800e3a6:	7b7b      	ldrb	r3, [r7, #13]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f040 8170 	bne.w	800e68e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e3ae:	7b7a      	ldrb	r2, [r7, #13]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e3b6:	7b7a      	ldrb	r2, [r7, #13]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	32ae      	adds	r2, #174	; 0xae
 800e3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3c0:	689b      	ldr	r3, [r3, #8]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	f000 8163 	beq.w	800e68e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e3c8:	7b7a      	ldrb	r2, [r7, #13]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	32ae      	adds	r2, #174	; 0xae
 800e3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	4798      	blx	r3
 800e3da:	4603      	mov	r3, r0
 800e3dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e3de:	e156      	b.n	800e68e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	785b      	ldrb	r3, [r3, #1]
 800e3e4:	2b03      	cmp	r3, #3
 800e3e6:	d008      	beq.n	800e3fa <USBD_StdEPReq+0x9a>
 800e3e8:	2b03      	cmp	r3, #3
 800e3ea:	f300 8145 	bgt.w	800e678 <USBD_StdEPReq+0x318>
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f000 809b 	beq.w	800e52a <USBD_StdEPReq+0x1ca>
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d03c      	beq.n	800e472 <USBD_StdEPReq+0x112>
 800e3f8:	e13e      	b.n	800e678 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e400:	b2db      	uxtb	r3, r3
 800e402:	2b02      	cmp	r3, #2
 800e404:	d002      	beq.n	800e40c <USBD_StdEPReq+0xac>
 800e406:	2b03      	cmp	r3, #3
 800e408:	d016      	beq.n	800e438 <USBD_StdEPReq+0xd8>
 800e40a:	e02c      	b.n	800e466 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e40c:	7bbb      	ldrb	r3, [r7, #14]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00d      	beq.n	800e42e <USBD_StdEPReq+0xce>
 800e412:	7bbb      	ldrb	r3, [r7, #14]
 800e414:	2b80      	cmp	r3, #128	; 0x80
 800e416:	d00a      	beq.n	800e42e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e418:	7bbb      	ldrb	r3, [r7, #14]
 800e41a:	4619      	mov	r1, r3
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f011 fb3b 	bl	801fa98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e422:	2180      	movs	r1, #128	; 0x80
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f011 fb37 	bl	801fa98 <USBD_LL_StallEP>
 800e42a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e42c:	e020      	b.n	800e470 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e42e:	6839      	ldr	r1, [r7, #0]
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 fc7a 	bl	800ed2a <USBD_CtlError>
              break;
 800e436:	e01b      	b.n	800e470 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	885b      	ldrh	r3, [r3, #2]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d10e      	bne.n	800e45e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e440:	7bbb      	ldrb	r3, [r7, #14]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00b      	beq.n	800e45e <USBD_StdEPReq+0xfe>
 800e446:	7bbb      	ldrb	r3, [r7, #14]
 800e448:	2b80      	cmp	r3, #128	; 0x80
 800e44a:	d008      	beq.n	800e45e <USBD_StdEPReq+0xfe>
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	88db      	ldrh	r3, [r3, #6]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d104      	bne.n	800e45e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e454:	7bbb      	ldrb	r3, [r7, #14]
 800e456:	4619      	mov	r1, r3
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f011 fb1d 	bl	801fa98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 fd2e 	bl	800eec0 <USBD_CtlSendStatus>

              break;
 800e464:	e004      	b.n	800e470 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e466:	6839      	ldr	r1, [r7, #0]
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 fc5e 	bl	800ed2a <USBD_CtlError>
              break;
 800e46e:	bf00      	nop
          }
          break;
 800e470:	e107      	b.n	800e682 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	2b02      	cmp	r3, #2
 800e47c:	d002      	beq.n	800e484 <USBD_StdEPReq+0x124>
 800e47e:	2b03      	cmp	r3, #3
 800e480:	d016      	beq.n	800e4b0 <USBD_StdEPReq+0x150>
 800e482:	e04b      	b.n	800e51c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e484:	7bbb      	ldrb	r3, [r7, #14]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d00d      	beq.n	800e4a6 <USBD_StdEPReq+0x146>
 800e48a:	7bbb      	ldrb	r3, [r7, #14]
 800e48c:	2b80      	cmp	r3, #128	; 0x80
 800e48e:	d00a      	beq.n	800e4a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e490:	7bbb      	ldrb	r3, [r7, #14]
 800e492:	4619      	mov	r1, r3
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f011 faff 	bl	801fa98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e49a:	2180      	movs	r1, #128	; 0x80
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f011 fafb 	bl	801fa98 <USBD_LL_StallEP>
 800e4a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e4a4:	e040      	b.n	800e528 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e4a6:	6839      	ldr	r1, [r7, #0]
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 fc3e 	bl	800ed2a <USBD_CtlError>
              break;
 800e4ae:	e03b      	b.n	800e528 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	885b      	ldrh	r3, [r3, #2]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d136      	bne.n	800e526 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e4b8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d004      	beq.n	800e4cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e4c2:	7bbb      	ldrb	r3, [r7, #14]
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f011 fb05 	bl	801fad6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fcf7 	bl	800eec0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e4d2:	7bbb      	ldrb	r3, [r7, #14]
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f7ff fde2 	bl	800e0a0 <USBD_CoreFindEP>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e4e0:	7b7b      	ldrb	r3, [r7, #13]
 800e4e2:	2bff      	cmp	r3, #255	; 0xff
 800e4e4:	d01f      	beq.n	800e526 <USBD_StdEPReq+0x1c6>
 800e4e6:	7b7b      	ldrb	r3, [r7, #13]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d11c      	bne.n	800e526 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e4ec:	7b7a      	ldrb	r2, [r7, #13]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e4f4:	7b7a      	ldrb	r2, [r7, #13]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	32ae      	adds	r2, #174	; 0xae
 800e4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4fe:	689b      	ldr	r3, [r3, #8]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d010      	beq.n	800e526 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e504:	7b7a      	ldrb	r2, [r7, #13]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	32ae      	adds	r2, #174	; 0xae
 800e50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e50e:	689b      	ldr	r3, [r3, #8]
 800e510:	6839      	ldr	r1, [r7, #0]
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	4798      	blx	r3
 800e516:	4603      	mov	r3, r0
 800e518:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e51a:	e004      	b.n	800e526 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e51c:	6839      	ldr	r1, [r7, #0]
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 fc03 	bl	800ed2a <USBD_CtlError>
              break;
 800e524:	e000      	b.n	800e528 <USBD_StdEPReq+0x1c8>
              break;
 800e526:	bf00      	nop
          }
          break;
 800e528:	e0ab      	b.n	800e682 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e530:	b2db      	uxtb	r3, r3
 800e532:	2b02      	cmp	r3, #2
 800e534:	d002      	beq.n	800e53c <USBD_StdEPReq+0x1dc>
 800e536:	2b03      	cmp	r3, #3
 800e538:	d032      	beq.n	800e5a0 <USBD_StdEPReq+0x240>
 800e53a:	e097      	b.n	800e66c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e53c:	7bbb      	ldrb	r3, [r7, #14]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d007      	beq.n	800e552 <USBD_StdEPReq+0x1f2>
 800e542:	7bbb      	ldrb	r3, [r7, #14]
 800e544:	2b80      	cmp	r3, #128	; 0x80
 800e546:	d004      	beq.n	800e552 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e548:	6839      	ldr	r1, [r7, #0]
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 fbed 	bl	800ed2a <USBD_CtlError>
                break;
 800e550:	e091      	b.n	800e676 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e556:	2b00      	cmp	r3, #0
 800e558:	da0b      	bge.n	800e572 <USBD_StdEPReq+0x212>
 800e55a:	7bbb      	ldrb	r3, [r7, #14]
 800e55c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e560:	4613      	mov	r3, r2
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	4413      	add	r3, r2
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	3310      	adds	r3, #16
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	4413      	add	r3, r2
 800e56e:	3304      	adds	r3, #4
 800e570:	e00b      	b.n	800e58a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e572:	7bbb      	ldrb	r3, [r7, #14]
 800e574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e578:	4613      	mov	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	4413      	add	r3, r2
 800e57e:	009b      	lsls	r3, r3, #2
 800e580:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	4413      	add	r3, r2
 800e588:	3304      	adds	r3, #4
 800e58a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	2200      	movs	r2, #0
 800e590:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	2202      	movs	r2, #2
 800e596:	4619      	mov	r1, r3
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 fc37 	bl	800ee0c <USBD_CtlSendData>
              break;
 800e59e:	e06a      	b.n	800e676 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e5a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	da11      	bge.n	800e5cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e5a8:	7bbb      	ldrb	r3, [r7, #14]
 800e5aa:	f003 020f 	and.w	r2, r3, #15
 800e5ae:	6879      	ldr	r1, [r7, #4]
 800e5b0:	4613      	mov	r3, r2
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	4413      	add	r3, r2
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	440b      	add	r3, r1
 800e5ba:	3324      	adds	r3, #36	; 0x24
 800e5bc:	881b      	ldrh	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d117      	bne.n	800e5f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e5c2:	6839      	ldr	r1, [r7, #0]
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f000 fbb0 	bl	800ed2a <USBD_CtlError>
                  break;
 800e5ca:	e054      	b.n	800e676 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e5cc:	7bbb      	ldrb	r3, [r7, #14]
 800e5ce:	f003 020f 	and.w	r2, r3, #15
 800e5d2:	6879      	ldr	r1, [r7, #4]
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	4413      	add	r3, r2
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	440b      	add	r3, r1
 800e5de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e5e2:	881b      	ldrh	r3, [r3, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d104      	bne.n	800e5f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 fb9d 	bl	800ed2a <USBD_CtlError>
                  break;
 800e5f0:	e041      	b.n	800e676 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	da0b      	bge.n	800e612 <USBD_StdEPReq+0x2b2>
 800e5fa:	7bbb      	ldrb	r3, [r7, #14]
 800e5fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e600:	4613      	mov	r3, r2
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	4413      	add	r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	3310      	adds	r3, #16
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	4413      	add	r3, r2
 800e60e:	3304      	adds	r3, #4
 800e610:	e00b      	b.n	800e62a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e612:	7bbb      	ldrb	r3, [r7, #14]
 800e614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e618:	4613      	mov	r3, r2
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	4413      	add	r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	4413      	add	r3, r2
 800e628:	3304      	adds	r3, #4
 800e62a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e62c:	7bbb      	ldrb	r3, [r7, #14]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d002      	beq.n	800e638 <USBD_StdEPReq+0x2d8>
 800e632:	7bbb      	ldrb	r3, [r7, #14]
 800e634:	2b80      	cmp	r3, #128	; 0x80
 800e636:	d103      	bne.n	800e640 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	2200      	movs	r2, #0
 800e63c:	601a      	str	r2, [r3, #0]
 800e63e:	e00e      	b.n	800e65e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e640:	7bbb      	ldrb	r3, [r7, #14]
 800e642:	4619      	mov	r1, r3
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f011 fa65 	bl	801fb14 <USBD_LL_IsStallEP>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d003      	beq.n	800e658 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	2201      	movs	r2, #1
 800e654:	601a      	str	r2, [r3, #0]
 800e656:	e002      	b.n	800e65e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	2200      	movs	r2, #0
 800e65c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	2202      	movs	r2, #2
 800e662:	4619      	mov	r1, r3
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f000 fbd1 	bl	800ee0c <USBD_CtlSendData>
              break;
 800e66a:	e004      	b.n	800e676 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e66c:	6839      	ldr	r1, [r7, #0]
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 fb5b 	bl	800ed2a <USBD_CtlError>
              break;
 800e674:	bf00      	nop
          }
          break;
 800e676:	e004      	b.n	800e682 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e678:	6839      	ldr	r1, [r7, #0]
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f000 fb55 	bl	800ed2a <USBD_CtlError>
          break;
 800e680:	bf00      	nop
      }
      break;
 800e682:	e005      	b.n	800e690 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e684:	6839      	ldr	r1, [r7, #0]
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 fb4f 	bl	800ed2a <USBD_CtlError>
      break;
 800e68c:	e000      	b.n	800e690 <USBD_StdEPReq+0x330>
      break;
 800e68e:	bf00      	nop
  }

  return ret;
 800e690:	7bfb      	ldrb	r3, [r7, #15]
}
 800e692:	4618      	mov	r0, r3
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
	...

0800e69c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	885b      	ldrh	r3, [r3, #2]
 800e6b6:	0a1b      	lsrs	r3, r3, #8
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	2b06      	cmp	r3, #6
 800e6be:	f200 8128 	bhi.w	800e912 <USBD_GetDescriptor+0x276>
 800e6c2:	a201      	add	r2, pc, #4	; (adr r2, 800e6c8 <USBD_GetDescriptor+0x2c>)
 800e6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c8:	0800e6e5 	.word	0x0800e6e5
 800e6cc:	0800e6fd 	.word	0x0800e6fd
 800e6d0:	0800e73d 	.word	0x0800e73d
 800e6d4:	0800e913 	.word	0x0800e913
 800e6d8:	0800e913 	.word	0x0800e913
 800e6dc:	0800e8b3 	.word	0x0800e8b3
 800e6e0:	0800e8df 	.word	0x0800e8df
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	687a      	ldr	r2, [r7, #4]
 800e6ee:	7c12      	ldrb	r2, [r2, #16]
 800e6f0:	f107 0108 	add.w	r1, r7, #8
 800e6f4:	4610      	mov	r0, r2
 800e6f6:	4798      	blx	r3
 800e6f8:	60f8      	str	r0, [r7, #12]
      break;
 800e6fa:	e112      	b.n	800e922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	7c1b      	ldrb	r3, [r3, #16]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10d      	bne.n	800e720 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e70c:	f107 0208 	add.w	r2, r7, #8
 800e710:	4610      	mov	r0, r2
 800e712:	4798      	blx	r3
 800e714:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	3301      	adds	r3, #1
 800e71a:	2202      	movs	r2, #2
 800e71c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e71e:	e100      	b.n	800e922 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e728:	f107 0208 	add.w	r2, r7, #8
 800e72c:	4610      	mov	r0, r2
 800e72e:	4798      	blx	r3
 800e730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	3301      	adds	r3, #1
 800e736:	2202      	movs	r2, #2
 800e738:	701a      	strb	r2, [r3, #0]
      break;
 800e73a:	e0f2      	b.n	800e922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	885b      	ldrh	r3, [r3, #2]
 800e740:	b2db      	uxtb	r3, r3
 800e742:	2b05      	cmp	r3, #5
 800e744:	f200 80ac 	bhi.w	800e8a0 <USBD_GetDescriptor+0x204>
 800e748:	a201      	add	r2, pc, #4	; (adr r2, 800e750 <USBD_GetDescriptor+0xb4>)
 800e74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e74e:	bf00      	nop
 800e750:	0800e769 	.word	0x0800e769
 800e754:	0800e79d 	.word	0x0800e79d
 800e758:	0800e7d1 	.word	0x0800e7d1
 800e75c:	0800e805 	.word	0x0800e805
 800e760:	0800e839 	.word	0x0800e839
 800e764:	0800e86d 	.word	0x0800e86d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d00b      	beq.n	800e78c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	7c12      	ldrb	r2, [r2, #16]
 800e780:	f107 0108 	add.w	r1, r7, #8
 800e784:	4610      	mov	r0, r2
 800e786:	4798      	blx	r3
 800e788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e78a:	e091      	b.n	800e8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e78c:	6839      	ldr	r1, [r7, #0]
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 facb 	bl	800ed2a <USBD_CtlError>
            err++;
 800e794:	7afb      	ldrb	r3, [r7, #11]
 800e796:	3301      	adds	r3, #1
 800e798:	72fb      	strb	r3, [r7, #11]
          break;
 800e79a:	e089      	b.n	800e8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7a2:	689b      	ldr	r3, [r3, #8]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d00b      	beq.n	800e7c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	7c12      	ldrb	r2, [r2, #16]
 800e7b4:	f107 0108 	add.w	r1, r7, #8
 800e7b8:	4610      	mov	r0, r2
 800e7ba:	4798      	blx	r3
 800e7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7be:	e077      	b.n	800e8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7c0:	6839      	ldr	r1, [r7, #0]
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 fab1 	bl	800ed2a <USBD_CtlError>
            err++;
 800e7c8:	7afb      	ldrb	r3, [r7, #11]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800e7ce:	e06f      	b.n	800e8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00b      	beq.n	800e7f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7e2:	68db      	ldr	r3, [r3, #12]
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	7c12      	ldrb	r2, [r2, #16]
 800e7e8:	f107 0108 	add.w	r1, r7, #8
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	4798      	blx	r3
 800e7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7f2:	e05d      	b.n	800e8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7f4:	6839      	ldr	r1, [r7, #0]
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 fa97 	bl	800ed2a <USBD_CtlError>
            err++;
 800e7fc:	7afb      	ldrb	r3, [r7, #11]
 800e7fe:	3301      	adds	r3, #1
 800e800:	72fb      	strb	r3, [r7, #11]
          break;
 800e802:	e055      	b.n	800e8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d00b      	beq.n	800e828 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	7c12      	ldrb	r2, [r2, #16]
 800e81c:	f107 0108 	add.w	r1, r7, #8
 800e820:	4610      	mov	r0, r2
 800e822:	4798      	blx	r3
 800e824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e826:	e043      	b.n	800e8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e828:	6839      	ldr	r1, [r7, #0]
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 fa7d 	bl	800ed2a <USBD_CtlError>
            err++;
 800e830:	7afb      	ldrb	r3, [r7, #11]
 800e832:	3301      	adds	r3, #1
 800e834:	72fb      	strb	r3, [r7, #11]
          break;
 800e836:	e03b      	b.n	800e8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d00b      	beq.n	800e85c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e84a:	695b      	ldr	r3, [r3, #20]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	7c12      	ldrb	r2, [r2, #16]
 800e850:	f107 0108 	add.w	r1, r7, #8
 800e854:	4610      	mov	r0, r2
 800e856:	4798      	blx	r3
 800e858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e85a:	e029      	b.n	800e8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e85c:	6839      	ldr	r1, [r7, #0]
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 fa63 	bl	800ed2a <USBD_CtlError>
            err++;
 800e864:	7afb      	ldrb	r3, [r7, #11]
 800e866:	3301      	adds	r3, #1
 800e868:	72fb      	strb	r3, [r7, #11]
          break;
 800e86a:	e021      	b.n	800e8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e872:	699b      	ldr	r3, [r3, #24]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d00b      	beq.n	800e890 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e87e:	699b      	ldr	r3, [r3, #24]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	7c12      	ldrb	r2, [r2, #16]
 800e884:	f107 0108 	add.w	r1, r7, #8
 800e888:	4610      	mov	r0, r2
 800e88a:	4798      	blx	r3
 800e88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e88e:	e00f      	b.n	800e8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e890:	6839      	ldr	r1, [r7, #0]
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 fa49 	bl	800ed2a <USBD_CtlError>
            err++;
 800e898:	7afb      	ldrb	r3, [r7, #11]
 800e89a:	3301      	adds	r3, #1
 800e89c:	72fb      	strb	r3, [r7, #11]
          break;
 800e89e:	e007      	b.n	800e8b0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e8a0:	6839      	ldr	r1, [r7, #0]
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 fa41 	bl	800ed2a <USBD_CtlError>
          err++;
 800e8a8:	7afb      	ldrb	r3, [r7, #11]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e8ae:	bf00      	nop
      }
      break;
 800e8b0:	e037      	b.n	800e922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	7c1b      	ldrb	r3, [r3, #16]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d109      	bne.n	800e8ce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c2:	f107 0208 	add.w	r2, r7, #8
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	4798      	blx	r3
 800e8ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e8cc:	e029      	b.n	800e922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e8ce:	6839      	ldr	r1, [r7, #0]
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 fa2a 	bl	800ed2a <USBD_CtlError>
        err++;
 800e8d6:	7afb      	ldrb	r3, [r7, #11]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	72fb      	strb	r3, [r7, #11]
      break;
 800e8dc:	e021      	b.n	800e922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	7c1b      	ldrb	r3, [r3, #16]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10d      	bne.n	800e902 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ee:	f107 0208 	add.w	r2, r7, #8
 800e8f2:	4610      	mov	r0, r2
 800e8f4:	4798      	blx	r3
 800e8f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	2207      	movs	r2, #7
 800e8fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e900:	e00f      	b.n	800e922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e902:	6839      	ldr	r1, [r7, #0]
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 fa10 	bl	800ed2a <USBD_CtlError>
        err++;
 800e90a:	7afb      	ldrb	r3, [r7, #11]
 800e90c:	3301      	adds	r3, #1
 800e90e:	72fb      	strb	r3, [r7, #11]
      break;
 800e910:	e007      	b.n	800e922 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e912:	6839      	ldr	r1, [r7, #0]
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 fa08 	bl	800ed2a <USBD_CtlError>
      err++;
 800e91a:	7afb      	ldrb	r3, [r7, #11]
 800e91c:	3301      	adds	r3, #1
 800e91e:	72fb      	strb	r3, [r7, #11]
      break;
 800e920:	bf00      	nop
  }

  if (err != 0U)
 800e922:	7afb      	ldrb	r3, [r7, #11]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d11e      	bne.n	800e966 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	88db      	ldrh	r3, [r3, #6]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d016      	beq.n	800e95e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e930:	893b      	ldrh	r3, [r7, #8]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00e      	beq.n	800e954 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	88da      	ldrh	r2, [r3, #6]
 800e93a:	893b      	ldrh	r3, [r7, #8]
 800e93c:	4293      	cmp	r3, r2
 800e93e:	bf28      	it	cs
 800e940:	4613      	movcs	r3, r2
 800e942:	b29b      	uxth	r3, r3
 800e944:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e946:	893b      	ldrh	r3, [r7, #8]
 800e948:	461a      	mov	r2, r3
 800e94a:	68f9      	ldr	r1, [r7, #12]
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 fa5d 	bl	800ee0c <USBD_CtlSendData>
 800e952:	e009      	b.n	800e968 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e954:	6839      	ldr	r1, [r7, #0]
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f9e7 	bl	800ed2a <USBD_CtlError>
 800e95c:	e004      	b.n	800e968 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 faae 	bl	800eec0 <USBD_CtlSendStatus>
 800e964:	e000      	b.n	800e968 <USBD_GetDescriptor+0x2cc>
    return;
 800e966:	bf00      	nop
  }
}
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop

0800e970 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	889b      	ldrh	r3, [r3, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d131      	bne.n	800e9e6 <USBD_SetAddress+0x76>
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	88db      	ldrh	r3, [r3, #6]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d12d      	bne.n	800e9e6 <USBD_SetAddress+0x76>
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	885b      	ldrh	r3, [r3, #2]
 800e98e:	2b7f      	cmp	r3, #127	; 0x7f
 800e990:	d829      	bhi.n	800e9e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	885b      	ldrh	r3, [r3, #2]
 800e996:	b2db      	uxtb	r3, r3
 800e998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e99c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	2b03      	cmp	r3, #3
 800e9a8:	d104      	bne.n	800e9b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e9aa:	6839      	ldr	r1, [r7, #0]
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 f9bc 	bl	800ed2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9b2:	e01d      	b.n	800e9f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	7bfa      	ldrb	r2, [r7, #15]
 800e9b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
 800e9be:	4619      	mov	r1, r3
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f011 f8d3 	bl	801fb6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f000 fa7a 	bl	800eec0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e9cc:	7bfb      	ldrb	r3, [r7, #15]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d004      	beq.n	800e9dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2202      	movs	r2, #2
 800e9d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9da:	e009      	b.n	800e9f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9e4:	e004      	b.n	800e9f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e9e6:	6839      	ldr	r1, [r7, #0]
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 f99e 	bl	800ed2a <USBD_CtlError>
  }
}
 800e9ee:	bf00      	nop
 800e9f0:	bf00      	nop
 800e9f2:	3710      	adds	r7, #16
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea02:	2300      	movs	r3, #0
 800ea04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	885b      	ldrh	r3, [r3, #2]
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	4b4e      	ldr	r3, [pc, #312]	; (800eb48 <USBD_SetConfig+0x150>)
 800ea0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ea10:	4b4d      	ldr	r3, [pc, #308]	; (800eb48 <USBD_SetConfig+0x150>)
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d905      	bls.n	800ea24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ea18:	6839      	ldr	r1, [r7, #0]
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 f985 	bl	800ed2a <USBD_CtlError>
    return USBD_FAIL;
 800ea20:	2303      	movs	r3, #3
 800ea22:	e08c      	b.n	800eb3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	2b02      	cmp	r3, #2
 800ea2e:	d002      	beq.n	800ea36 <USBD_SetConfig+0x3e>
 800ea30:	2b03      	cmp	r3, #3
 800ea32:	d029      	beq.n	800ea88 <USBD_SetConfig+0x90>
 800ea34:	e075      	b.n	800eb22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ea36:	4b44      	ldr	r3, [pc, #272]	; (800eb48 <USBD_SetConfig+0x150>)
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d020      	beq.n	800ea80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ea3e:	4b42      	ldr	r3, [pc, #264]	; (800eb48 <USBD_SetConfig+0x150>)
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	461a      	mov	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ea48:	4b3f      	ldr	r3, [pc, #252]	; (800eb48 <USBD_SetConfig+0x150>)
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7fe ffe7 	bl	800da22 <USBD_SetClassConfig>
 800ea54:	4603      	mov	r3, r0
 800ea56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ea58:	7bfb      	ldrb	r3, [r7, #15]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d008      	beq.n	800ea70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ea5e:	6839      	ldr	r1, [r7, #0]
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 f962 	bl	800ed2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2202      	movs	r2, #2
 800ea6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ea6e:	e065      	b.n	800eb3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 fa25 	bl	800eec0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2203      	movs	r2, #3
 800ea7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ea7e:	e05d      	b.n	800eb3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f000 fa1d 	bl	800eec0 <USBD_CtlSendStatus>
      break;
 800ea86:	e059      	b.n	800eb3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ea88:	4b2f      	ldr	r3, [pc, #188]	; (800eb48 <USBD_SetConfig+0x150>)
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d112      	bne.n	800eab6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2202      	movs	r2, #2
 800ea94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ea98:	4b2b      	ldr	r3, [pc, #172]	; (800eb48 <USBD_SetConfig+0x150>)
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eaa2:	4b29      	ldr	r3, [pc, #164]	; (800eb48 <USBD_SetConfig+0x150>)
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7fe ffd6 	bl	800da5a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 fa06 	bl	800eec0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eab4:	e042      	b.n	800eb3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800eab6:	4b24      	ldr	r3, [pc, #144]	; (800eb48 <USBD_SetConfig+0x150>)
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	461a      	mov	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d02a      	beq.n	800eb1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	4619      	mov	r1, r3
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7fe ffc4 	bl	800da5a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ead2:	4b1d      	ldr	r3, [pc, #116]	; (800eb48 <USBD_SetConfig+0x150>)
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	461a      	mov	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eadc:	4b1a      	ldr	r3, [pc, #104]	; (800eb48 <USBD_SetConfig+0x150>)
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	4619      	mov	r1, r3
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f7fe ff9d 	bl	800da22 <USBD_SetClassConfig>
 800eae8:	4603      	mov	r3, r0
 800eaea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eaec:	7bfb      	ldrb	r3, [r7, #15]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d00f      	beq.n	800eb12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800eaf2:	6839      	ldr	r1, [r7, #0]
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 f918 	bl	800ed2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	b2db      	uxtb	r3, r3
 800eb00:	4619      	mov	r1, r3
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7fe ffa9 	bl	800da5a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2202      	movs	r2, #2
 800eb0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb10:	e014      	b.n	800eb3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 f9d4 	bl	800eec0 <USBD_CtlSendStatus>
      break;
 800eb18:	e010      	b.n	800eb3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 f9d0 	bl	800eec0 <USBD_CtlSendStatus>
      break;
 800eb20:	e00c      	b.n	800eb3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800eb22:	6839      	ldr	r1, [r7, #0]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 f900 	bl	800ed2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb2a:	4b07      	ldr	r3, [pc, #28]	; (800eb48 <USBD_SetConfig+0x150>)
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	4619      	mov	r1, r3
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f7fe ff92 	bl	800da5a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eb36:	2303      	movs	r3, #3
 800eb38:	73fb      	strb	r3, [r7, #15]
      break;
 800eb3a:	bf00      	nop
  }

  return ret;
 800eb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	20000570 	.word	0x20000570

0800eb4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	88db      	ldrh	r3, [r3, #6]
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d004      	beq.n	800eb68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eb5e:	6839      	ldr	r1, [r7, #0]
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 f8e2 	bl	800ed2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eb66:	e023      	b.n	800ebb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	2b02      	cmp	r3, #2
 800eb72:	dc02      	bgt.n	800eb7a <USBD_GetConfig+0x2e>
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	dc03      	bgt.n	800eb80 <USBD_GetConfig+0x34>
 800eb78:	e015      	b.n	800eba6 <USBD_GetConfig+0x5a>
 800eb7a:	2b03      	cmp	r3, #3
 800eb7c:	d00b      	beq.n	800eb96 <USBD_GetConfig+0x4a>
 800eb7e:	e012      	b.n	800eba6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	3308      	adds	r3, #8
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f000 f93c 	bl	800ee0c <USBD_CtlSendData>
        break;
 800eb94:	e00c      	b.n	800ebb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	3304      	adds	r3, #4
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 f934 	bl	800ee0c <USBD_CtlSendData>
        break;
 800eba4:	e004      	b.n	800ebb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eba6:	6839      	ldr	r1, [r7, #0]
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 f8be 	bl	800ed2a <USBD_CtlError>
        break;
 800ebae:	bf00      	nop
}
 800ebb0:	bf00      	nop
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	2b02      	cmp	r3, #2
 800ebce:	d81e      	bhi.n	800ec0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	88db      	ldrh	r3, [r3, #6]
 800ebd4:	2b02      	cmp	r3, #2
 800ebd6:	d004      	beq.n	800ebe2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ebd8:	6839      	ldr	r1, [r7, #0]
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 f8a5 	bl	800ed2a <USBD_CtlError>
        break;
 800ebe0:	e01a      	b.n	800ec18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d005      	beq.n	800ebfe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	f043 0202 	orr.w	r2, r3, #2
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	330c      	adds	r3, #12
 800ec02:	2202      	movs	r2, #2
 800ec04:	4619      	mov	r1, r3
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 f900 	bl	800ee0c <USBD_CtlSendData>
      break;
 800ec0c:	e004      	b.n	800ec18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ec0e:	6839      	ldr	r1, [r7, #0]
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f000 f88a 	bl	800ed2a <USBD_CtlError>
      break;
 800ec16:	bf00      	nop
  }
}
 800ec18:	bf00      	nop
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	885b      	ldrh	r3, [r3, #2]
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d107      	bne.n	800ec42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2201      	movs	r2, #1
 800ec36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 f940 	bl	800eec0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ec40:	e013      	b.n	800ec6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	885b      	ldrh	r3, [r3, #2]
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	d10b      	bne.n	800ec62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	889b      	ldrh	r3, [r3, #4]
 800ec4e:	0a1b      	lsrs	r3, r3, #8
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	b2da      	uxtb	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f000 f930 	bl	800eec0 <USBD_CtlSendStatus>
}
 800ec60:	e003      	b.n	800ec6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ec62:	6839      	ldr	r1, [r7, #0]
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 f860 	bl	800ed2a <USBD_CtlError>
}
 800ec6a:	bf00      	nop
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b082      	sub	sp, #8
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	3b01      	subs	r3, #1
 800ec86:	2b02      	cmp	r3, #2
 800ec88:	d80b      	bhi.n	800eca2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	885b      	ldrh	r3, [r3, #2]
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	d10c      	bne.n	800ecac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 f910 	bl	800eec0 <USBD_CtlSendStatus>
      }
      break;
 800eca0:	e004      	b.n	800ecac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eca2:	6839      	ldr	r1, [r7, #0]
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f000 f840 	bl	800ed2a <USBD_CtlError>
      break;
 800ecaa:	e000      	b.n	800ecae <USBD_ClrFeature+0x3c>
      break;
 800ecac:	bf00      	nop
  }
}
 800ecae:	bf00      	nop
 800ecb0:	3708      	adds	r7, #8
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b084      	sub	sp, #16
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
 800ecbe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	781a      	ldrb	r2, [r3, #0]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	781a      	ldrb	r2, [r3, #0]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f7ff fa41 	bl	800e168 <SWAPBYTE>
 800ece6:	4603      	mov	r3, r0
 800ece8:	461a      	mov	r2, r3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f7ff fa34 	bl	800e168 <SWAPBYTE>
 800ed00:	4603      	mov	r3, r0
 800ed02:	461a      	mov	r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	3301      	adds	r3, #1
 800ed12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ed14:	68f8      	ldr	r0, [r7, #12]
 800ed16:	f7ff fa27 	bl	800e168 <SWAPBYTE>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	80da      	strh	r2, [r3, #6]
}
 800ed22:	bf00      	nop
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b082      	sub	sp, #8
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed34:	2180      	movs	r1, #128	; 0x80
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f010 feae 	bl	801fa98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f010 feaa 	bl	801fa98 <USBD_LL_StallEP>
}
 800ed44:	bf00      	nop
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b086      	sub	sp, #24
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d036      	beq.n	800edd0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ed66:	6938      	ldr	r0, [r7, #16]
 800ed68:	f000 f836 	bl	800edd8 <USBD_GetLen>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	3301      	adds	r3, #1
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	005b      	lsls	r3, r3, #1
 800ed74:	b29a      	uxth	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ed7a:	7dfb      	ldrb	r3, [r7, #23]
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	4413      	add	r3, r2
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	7812      	ldrb	r2, [r2, #0]
 800ed84:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed86:	7dfb      	ldrb	r3, [r7, #23]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ed8c:	7dfb      	ldrb	r3, [r7, #23]
 800ed8e:	68ba      	ldr	r2, [r7, #8]
 800ed90:	4413      	add	r3, r2
 800ed92:	2203      	movs	r2, #3
 800ed94:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed96:	7dfb      	ldrb	r3, [r7, #23]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ed9c:	e013      	b.n	800edc6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ed9e:	7dfb      	ldrb	r3, [r7, #23]
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	4413      	add	r3, r2
 800eda4:	693a      	ldr	r2, [r7, #16]
 800eda6:	7812      	ldrb	r2, [r2, #0]
 800eda8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	3301      	adds	r3, #1
 800edae:	613b      	str	r3, [r7, #16]
    idx++;
 800edb0:	7dfb      	ldrb	r3, [r7, #23]
 800edb2:	3301      	adds	r3, #1
 800edb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800edb6:	7dfb      	ldrb	r3, [r7, #23]
 800edb8:	68ba      	ldr	r2, [r7, #8]
 800edba:	4413      	add	r3, r2
 800edbc:	2200      	movs	r2, #0
 800edbe:	701a      	strb	r2, [r3, #0]
    idx++;
 800edc0:	7dfb      	ldrb	r3, [r7, #23]
 800edc2:	3301      	adds	r3, #1
 800edc4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d1e7      	bne.n	800ed9e <USBD_GetString+0x52>
 800edce:	e000      	b.n	800edd2 <USBD_GetString+0x86>
    return;
 800edd0:	bf00      	nop
  }
}
 800edd2:	3718      	adds	r7, #24
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ede0:	2300      	movs	r3, #0
 800ede2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ede8:	e005      	b.n	800edf6 <USBD_GetLen+0x1e>
  {
    len++;
 800edea:	7bfb      	ldrb	r3, [r7, #15]
 800edec:	3301      	adds	r3, #1
 800edee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	3301      	adds	r3, #1
 800edf4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d1f5      	bne.n	800edea <USBD_GetLen+0x12>
  }

  return len;
 800edfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3714      	adds	r7, #20
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	687a      	ldr	r2, [r7, #4]
 800ee24:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	68ba      	ldr	r2, [r7, #8]
 800ee30:	2100      	movs	r1, #0
 800ee32:	68f8      	ldr	r0, [r7, #12]
 800ee34:	f010 feb9 	bl	801fbaa <USBD_LL_Transmit>

  return USBD_OK;
 800ee38:	2300      	movs	r3, #0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b084      	sub	sp, #16
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	60f8      	str	r0, [r7, #12]
 800ee4a:	60b9      	str	r1, [r7, #8]
 800ee4c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	68ba      	ldr	r2, [r7, #8]
 800ee52:	2100      	movs	r1, #0
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	f010 fea8 	bl	801fbaa <USBD_LL_Transmit>

  return USBD_OK;
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3710      	adds	r7, #16
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2203      	movs	r2, #3
 800ee74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	68ba      	ldr	r2, [r7, #8]
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	68f8      	ldr	r0, [r7, #12]
 800ee90:	f010 feac 	bl	801fbec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b084      	sub	sp, #16
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	60f8      	str	r0, [r7, #12]
 800eea6:	60b9      	str	r1, [r7, #8]
 800eea8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	68ba      	ldr	r2, [r7, #8]
 800eeae:	2100      	movs	r1, #0
 800eeb0:	68f8      	ldr	r0, [r7, #12]
 800eeb2:	f010 fe9b 	bl	801fbec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eeb6:	2300      	movs	r3, #0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2204      	movs	r2, #4
 800eecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eed0:	2300      	movs	r3, #0
 800eed2:	2200      	movs	r2, #0
 800eed4:	2100      	movs	r1, #0
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f010 fe67 	bl	801fbaa <USBD_LL_Transmit>

  return USBD_OK;
 800eedc:	2300      	movs	r3, #0
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3708      	adds	r7, #8
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eee6:	b580      	push	{r7, lr}
 800eee8:	b082      	sub	sp, #8
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2205      	movs	r2, #5
 800eef2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eef6:	2300      	movs	r3, #0
 800eef8:	2200      	movs	r2, #0
 800eefa:	2100      	movs	r1, #0
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f010 fe75 	bl	801fbec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef02:	2300      	movs	r3, #0
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3708      	adds	r7, #8
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b08b      	sub	sp, #44	; 0x2c
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	ed87 0a02 	vstr	s0, [r7, #8]
 800ef18:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	881b      	ldrh	r3, [r3, #0]
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	885b      	ldrh	r3, [r3, #2]
 800ef30:	fb02 f303 	mul.w	r3, r2, r3
 800ef34:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ef3a:	e010      	b.n	800ef5e <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3e:	1d1a      	adds	r2, r3, #4
 800ef40:	627a      	str	r2, [r7, #36]	; 0x24
 800ef42:	ed93 7a00 	vldr	s14, [r3]
 800ef46:	6a3b      	ldr	r3, [r7, #32]
 800ef48:	1d1a      	adds	r2, r3, #4
 800ef4a:	623a      	str	r2, [r7, #32]
 800ef4c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ef50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef54:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ef58:	69fb      	ldr	r3, [r7, #28]
 800ef5a:	3b01      	subs	r3, #1
 800ef5c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d1eb      	bne.n	800ef3c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ef64:	2300      	movs	r3, #0
 800ef66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800ef68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	372c      	adds	r7, #44	; 0x2c
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b08b      	sub	sp, #44	; 0x2c
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	881b      	ldrh	r3, [r3, #0]
 800ef92:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	885b      	ldrh	r3, [r3, #2]
 800ef98:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800ef9a:	89fb      	ldrh	r3, [r7, #14]
 800ef9c:	61bb      	str	r3, [r7, #24]
 800ef9e:	2300      	movs	r3, #0
 800efa0:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	693a      	ldr	r2, [r7, #16]
 800efa8:	4413      	add	r3, r2
 800efaa:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800efac:	89bb      	ldrh	r3, [r7, #12]
 800efae:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800efb0:	e00d      	b.n	800efce <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800efb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb4:	1d1a      	adds	r2, r3, #4
 800efb6:	627a      	str	r2, [r7, #36]	; 0x24
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	6a3b      	ldr	r3, [r7, #32]
 800efbc:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800efbe:	89fb      	ldrh	r3, [r7, #14]
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	6a3a      	ldr	r2, [r7, #32]
 800efc4:	4413      	add	r3, r2
 800efc6:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	3b01      	subs	r3, #1
 800efcc:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d1ee      	bne.n	800efb2 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	3301      	adds	r3, #1
 800efd8:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	3b01      	subs	r3, #1
 800efde:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1dd      	bne.n	800efa2 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800efe6:	2300      	movs	r3, #0
 800efe8:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800efea:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800efee:	4618      	mov	r0, r3
 800eff0:	372c      	adds	r7, #44	; 0x2c
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr

0800effa <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800effa:	b480      	push	{r7}
 800effc:	b087      	sub	sp, #28
 800effe:	af00      	add	r7, sp, #0
 800f000:	60f8      	str	r0, [r7, #12]
 800f002:	60b9      	str	r1, [r7, #8]
 800f004:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800f006:	f04f 0300 	mov.w	r3, #0
 800f00a:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800f010:	e00d      	b.n	800f02e <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	1d1a      	adds	r2, r3, #4
 800f016:	60fa      	str	r2, [r7, #12]
 800f018:	edd3 7a00 	vldr	s15, [r3]
 800f01c:	ed97 7a04 	vldr	s14, [r7, #16]
 800f020:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f024:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	3b01      	subs	r3, #1
 800f02c:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d1ee      	bne.n	800f012 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	ee07 3a90 	vmov	s15, r3
 800f03a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f03e:	edd7 6a04 	vldr	s13, [r7, #16]
 800f042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	edc3 7a00 	vstr	s15, [r3]
}
 800f04c:	bf00      	nop
 800f04e:	371c      	adds	r7, #28
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b08a      	sub	sp, #40	; 0x28
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800f064:	f04f 0300 	mov.w	r3, #0
 800f068:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800f06e:	e011      	b.n	800f094 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	1d1a      	adds	r2, r3, #4
 800f074:	60fa      	str	r2, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 800f07a:	edd7 7a07 	vldr	s15, [r7, #28]
 800f07e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f082:	ed97 7a08 	vldr	s14, [r7, #32]
 800f086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f08a:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 800f08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f090:	3b01      	subs	r3, #1
 800f092:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800f094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1ea      	bne.n	800f070 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	ee07 3a90 	vmov	s15, r3
 800f0a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f0a4:	edd7 6a08 	vldr	s13, [r7, #32]
 800f0a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0ac:	edc7 7a06 	vstr	s15, [r7, #24]
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800f0b4:	edd7 7a06 	vldr	s15, [r7, #24]
 800f0b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c0:	db09      	blt.n	800f0d6 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 800f0c2:	ed97 0a06 	vldr	s0, [r7, #24]
 800f0c6:	f011 f955 	bl	8020374 <sqrtf>
 800f0ca:	eef0 7a40 	vmov.f32	s15, s0
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800f0d4:	e004      	b.n	800f0e0 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	f04f 0200 	mov.w	r2, #0
 800f0dc:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f0de:	bf00      	nop
}
 800f0e0:	bf00      	nop
 800f0e2:	3728      	adds	r7, #40	; 0x28
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b089      	sub	sp, #36	; 0x24
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	607a      	str	r2, [r7, #4]
 800f0f4:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	61fb      	str	r3, [r7, #28]
 800f0fa:	e043      	b.n	800f184 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	005b      	lsls	r3, r3, #1
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	4413      	add	r3, r2
 800f104:	881b      	ldrh	r3, [r3, #0]
 800f106:	089b      	lsrs	r3, r3, #2
 800f108:	b29b      	uxth	r3, r3
 800f10a:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	3301      	adds	r3, #1
 800f110:	005b      	lsls	r3, r3, #1
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	4413      	add	r3, r2
 800f116:	881b      	ldrh	r3, [r3, #0]
 800f118:	089b      	lsrs	r3, r3, #2
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	4413      	add	r3, r2
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	441a      	add	r2, r3
 800f132:	69bb      	ldr	r3, [r7, #24]
 800f134:	009b      	lsls	r3, r3, #2
 800f136:	68f9      	ldr	r1, [r7, #12]
 800f138:	440b      	add	r3, r1
 800f13a:	6812      	ldr	r2, [r2, #0]
 800f13c:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	4413      	add	r3, r2
 800f146:	693a      	ldr	r2, [r7, #16]
 800f148:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800f14a:	69bb      	ldr	r3, [r7, #24]
 800f14c:	3301      	adds	r3, #1
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	68fa      	ldr	r2, [r7, #12]
 800f152:	4413      	add	r3, r2
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	3301      	adds	r3, #1
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	68fa      	ldr	r2, [r7, #12]
 800f160:	441a      	add	r2, r3
 800f162:	69bb      	ldr	r3, [r7, #24]
 800f164:	3301      	adds	r3, #1
 800f166:	009b      	lsls	r3, r3, #2
 800f168:	68f9      	ldr	r1, [r7, #12]
 800f16a:	440b      	add	r3, r1
 800f16c:	6812      	ldr	r2, [r2, #0]
 800f16e:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	3301      	adds	r3, #1
 800f174:	009b      	lsls	r3, r3, #2
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	4413      	add	r3, r2
 800f17a:	693a      	ldr	r2, [r7, #16]
 800f17c:	601a      	str	r2, [r3, #0]

    i += 2;
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	3302      	adds	r3, #2
 800f182:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 800f184:	897b      	ldrh	r3, [r7, #10]
 800f186:	69fa      	ldr	r2, [r7, #28]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d3b7      	bcc.n	800f0fc <arm_bitreversal_32+0x14>
  }
}
 800f18c:	bf00      	nop
 800f18e:	bf00      	nop
 800f190:	3724      	adds	r7, #36	; 0x24
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800f19a:	b580      	push	{r7, lr}
 800f19c:	b0a0      	sub	sp, #128	; 0x80
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	881b      	ldrh	r3, [r3, #0]
 800f1a8:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800f1aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	683a      	ldr	r2, [r7, #0]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 800f1be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f1c0:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 800f1c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1c4:	085b      	lsrs	r3, r3, #1
 800f1c6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 800f1c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	683a      	ldr	r2, [r7, #0]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 800f1d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f1d8:	4413      	add	r3, r2
 800f1da:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800f1dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1de:	089b      	lsrs	r3, r3, #2
 800f1e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f1e2:	e1b6      	b.n	800f552 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 800f1fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 800f202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 800f208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f20a:	689b      	ldr	r3, [r3, #8]
 800f20c:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 800f20e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800f214:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800f21a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 800f220:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f222:	689b      	ldr	r3, [r3, #8]
 800f224:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800f226:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 800f22c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800f232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800f238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f23a:	689b      	ldr	r3, [r3, #8]
 800f23c:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800f23e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f240:	68db      	ldr	r3, [r3, #12]
 800f242:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800f244:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f248:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	1d1a      	adds	r2, r3, #4
 800f250:	603a      	str	r2, [r7, #0]
 800f252:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f256:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800f25a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f25e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	1d1a      	adds	r2, r3, #4
 800f266:	603a      	str	r2, [r7, #0]
 800f268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f26c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800f270:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f274:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	1d1a      	adds	r2, r3, #4
 800f27c:	603a      	str	r2, [r7, #0]
 800f27e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f282:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800f286:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f28a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	1d1a      	adds	r2, r3, #4
 800f292:	603a      	str	r2, [r7, #0]
 800f294:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f298:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800f29c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f2a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f2a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2a8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 800f2ac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f2b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f2b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 800f2bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f2c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f2c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2c8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 800f2cc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f2d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f2d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2d8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 800f2dc:	ed97 7a06 	vldr	s14, [r7, #24]
 800f2e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800f2e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f2e6:	1d1a      	adds	r2, r3, #4
 800f2e8:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f2ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2ee:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 800f2f2:	ed97 7a07 	vldr	s14, [r7, #28]
 800f2f6:	edd7 7a03 	vldr	s15, [r7, #12]
 800f2fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f2fc:	1d1a      	adds	r2, r3, #4
 800f2fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f300:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f304:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800f308:	ed97 7a08 	vldr	s14, [r7, #32]
 800f30c:	edd7 7a04 	vldr	s15, [r7, #16]
 800f310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f312:	1d1a      	adds	r2, r3, #4
 800f314:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f31a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800f31e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f322:	edd7 7a05 	vldr	s15, [r7, #20]
 800f326:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f328:	1d1a      	adds	r2, r3, #4
 800f32a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f32c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f330:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800f334:	ed97 7a02 	vldr	s14, [r7, #8]
 800f338:	edd7 7a06 	vldr	s15, [r7, #24]
 800f33c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f340:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800f344:	ed97 7a03 	vldr	s14, [r7, #12]
 800f348:	edd7 7a07 	vldr	s15, [r7, #28]
 800f34c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f350:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800f354:	ed97 7a04 	vldr	s14, [r7, #16]
 800f358:	edd7 7a08 	vldr	s15, [r7, #32]
 800f35c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f360:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800f364:	ed97 7a05 	vldr	s14, [r7, #20]
 800f368:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f36c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f370:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800f374:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f376:	1d1a      	adds	r2, r3, #4
 800f378:	673a      	str	r2, [r7, #112]	; 0x70
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800f37e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f380:	1d1a      	adds	r2, r3, #4
 800f382:	673a      	str	r2, [r7, #112]	; 0x70
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 800f388:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f38c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f390:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f394:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 800f398:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f39c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f3a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3a4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800f3a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f3ac:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f3b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3b4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 800f3b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f3bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f3c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3c4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 800f3c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3ca:	1d1a      	adds	r2, r3, #4
 800f3cc:	677a      	str	r2, [r7, #116]	; 0x74
 800f3ce:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f3d2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f3d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3da:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800f3de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3e0:	1d1a      	adds	r2, r3, #4
 800f3e2:	677a      	str	r2, [r7, #116]	; 0x74
 800f3e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f3e8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f3ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3f0:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 800f3f4:	edd7 7a02 	vldr	s15, [r7, #8]
 800f3f8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f3fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f400:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 800f404:	edd7 7a03 	vldr	s15, [r7, #12]
 800f408:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f40c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f410:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800f414:	edd7 7a03 	vldr	s15, [r7, #12]
 800f418:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f41c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f420:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800f424:	edd7 7a02 	vldr	s15, [r7, #8]
 800f428:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f42c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f430:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800f434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f436:	1d1a      	adds	r2, r3, #4
 800f438:	67ba      	str	r2, [r7, #120]	; 0x78
 800f43a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f43e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f442:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f446:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800f44a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f44c:	1d1a      	adds	r2, r3, #4
 800f44e:	67ba      	str	r2, [r7, #120]	; 0x78
 800f450:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f454:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f45c:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800f460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f462:	1d1a      	adds	r2, r3, #4
 800f464:	673a      	str	r2, [r7, #112]	; 0x70
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800f46a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f46c:	1d1a      	adds	r2, r3, #4
 800f46e:	673a      	str	r2, [r7, #112]	; 0x70
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800f474:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f478:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f47c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f480:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800f484:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f488:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f48c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f490:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 800f494:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f498:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f49c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4a0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 800f4a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f4a8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f4ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4b0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 800f4b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4b6:	1d1a      	adds	r2, r3, #4
 800f4b8:	677a      	str	r2, [r7, #116]	; 0x74
 800f4ba:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f4be:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f4c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4c6:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800f4ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4cc:	1d1a      	adds	r2, r3, #4
 800f4ce:	677a      	str	r2, [r7, #116]	; 0x74
 800f4d0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f4d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f4d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4dc:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 800f4e0:	edd7 7a04 	vldr	s15, [r7, #16]
 800f4e4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f4e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4ec:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 800f4f0:	edd7 7a05 	vldr	s15, [r7, #20]
 800f4f4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f4f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4fc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 800f500:	edd7 7a05 	vldr	s15, [r7, #20]
 800f504:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f50c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 800f510:	edd7 7a04 	vldr	s15, [r7, #16]
 800f514:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f51c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800f520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f522:	1d1a      	adds	r2, r3, #4
 800f524:	67ba      	str	r2, [r7, #120]	; 0x78
 800f526:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f52a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f52e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f532:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800f536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f538:	1d1a      	adds	r2, r3, #4
 800f53a:	67ba      	str	r2, [r7, #120]	; 0x78
 800f53c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f540:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f544:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f548:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800f54c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f54e:	3b01      	subs	r3, #1
 800f550:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f554:	2b00      	cmp	r3, #0
 800f556:	f47f ae45 	bne.w	800f1e4 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800f55a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f55c:	b299      	uxth	r1, r3
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	685a      	ldr	r2, [r3, #4]
 800f562:	2302      	movs	r3, #2
 800f564:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f566:	f000 fef1 	bl	801034c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800f56a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f56c:	b299      	uxth	r1, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	685a      	ldr	r2, [r3, #4]
 800f572:	2302      	movs	r3, #2
 800f574:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f576:	f000 fee9 	bl	801034c <arm_radix8_butterfly_f32>
}
 800f57a:	bf00      	nop
 800f57c:	3780      	adds	r7, #128	; 0x80
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b0ac      	sub	sp, #176	; 0xb0
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	881b      	ldrh	r3, [r3, #0]
 800f590:	085b      	lsrs	r3, r3, #1
 800f592:	b29b      	uxth	r3, r3
 800f594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800f598:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f59c:	009b      	lsls	r3, r3, #2
 800f59e:	683a      	ldr	r2, [r7, #0]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800f5a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5aa:	009b      	lsls	r3, r3, #2
 800f5ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f5b0:	4413      	add	r3, r2
 800f5b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800f5b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5ba:	009b      	lsls	r3, r3, #2
 800f5bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f5c0:	4413      	add	r3, r2
 800f5c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800f5ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f5ce:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800f5d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5d4:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800f5d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f5da:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 800f5dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f5e0:	3b04      	subs	r3, #4
 800f5e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800f5e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5ea:	3b04      	subs	r3, #4
 800f5ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800f5f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f5f4:	3b04      	subs	r3, #4
 800f5f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800f5fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f604:	4413      	add	r3, r2
 800f606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f612:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f616:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f61a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f61e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800f622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f626:	085b      	lsrs	r3, r3, #1
 800f628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 800f62c:	2302      	movs	r3, #2
 800f62e:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800f630:	2304      	movs	r3, #4
 800f632:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800f634:	2306      	movs	r3, #6
 800f636:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	ed93 7a00 	vldr	s14, [r3]
 800f63e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f642:	edd3 7a00 	vldr	s15, [r3]
 800f646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f64a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	ed93 7a00 	vldr	s14, [r3]
 800f654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f658:	edd3 7a00 	vldr	s15, [r3]
 800f65c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f660:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	3304      	adds	r3, #4
 800f668:	ed93 7a00 	vldr	s14, [r3]
 800f66c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f670:	3304      	adds	r3, #4
 800f672:	edd3 7a00 	vldr	s15, [r3]
 800f676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f67a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	3304      	adds	r3, #4
 800f682:	ed93 7a00 	vldr	s14, [r3]
 800f686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f68a:	3304      	adds	r3, #4
 800f68c:	edd3 7a00 	vldr	s15, [r3]
 800f690:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f694:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800f698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f69c:	3304      	adds	r3, #4
 800f69e:	ed93 7a00 	vldr	s14, [r3]
 800f6a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800f6a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f6aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6ae:	3304      	adds	r3, #4
 800f6b0:	edd3 7a00 	vldr	s15, [r3]
 800f6b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800f6bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6c0:	edd3 7a00 	vldr	s15, [r3]
 800f6c4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f6c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f6cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6d0:	edd3 7a00 	vldr	s15, [r3]
 800f6d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6d8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800f6dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6e0:	edd3 7a00 	vldr	s15, [r3]
 800f6e4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f6e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f6ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6f0:	edd3 7a00 	vldr	s15, [r3]
 800f6f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6f8:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800f6fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f700:	3304      	adds	r3, #4
 800f702:	edd3 7a00 	vldr	s15, [r3]
 800f706:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f70a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f70e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f712:	3304      	adds	r3, #4
 800f714:	edd3 7a00 	vldr	s15, [r3]
 800f718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f71c:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800f720:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f724:	3304      	adds	r3, #4
 800f726:	edd3 7a00 	vldr	s15, [r3]
 800f72a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f72e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f732:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f736:	3304      	adds	r3, #4
 800f738:	edd3 7a00 	vldr	s15, [r3]
 800f73c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f740:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800f744:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f748:	ed93 7a00 	vldr	s14, [r3]
 800f74c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800f750:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f758:	edd3 7a00 	vldr	s15, [r3]
 800f75c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f760:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800f764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f768:	ed93 7a00 	vldr	s14, [r3]
 800f76c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800f770:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f778:	edd3 7a00 	vldr	s15, [r3]
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	1d1a      	adds	r2, r3, #4
 800f780:	603a      	str	r2, [r7, #0]
 800f782:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f786:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800f78a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f78e:	3304      	adds	r3, #4
 800f790:	ed93 7a00 	vldr	s14, [r3]
 800f794:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800f798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f79c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7a0:	3304      	adds	r3, #4
 800f7a2:	edd3 7a00 	vldr	s15, [r3]
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	1d1a      	adds	r2, r3, #4
 800f7aa:	603a      	str	r2, [r7, #0]
 800f7ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7b0:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 800f7b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7b8:	1d1a      	adds	r2, r3, #4
 800f7ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f7be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7c0:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800f7c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7c6:	1d1a      	adds	r2, r3, #4
 800f7c8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7ce:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800f7d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7d4:	1d1a      	adds	r2, r3, #4
 800f7d6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f7da:	69fa      	ldr	r2, [r7, #28]
 800f7dc:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800f7de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7e2:	1d1a      	adds	r2, r3, #4
 800f7e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f7e8:	6a3a      	ldr	r2, [r7, #32]
 800f7ea:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800f7ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7f0:	1d1a      	adds	r2, r3, #4
 800f7f2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f7f6:	68fa      	ldr	r2, [r7, #12]
 800f7f8:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800f7fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7fe:	1d1a      	adds	r2, r3, #4
 800f800:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f804:	693a      	ldr	r2, [r7, #16]
 800f806:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800f808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f810:	4413      	add	r3, r2
 800f812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800f816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f81e:	4413      	add	r3, r2
 800f820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800f824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f82c:	4413      	add	r3, r2
 800f82e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800f832:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f836:	3b02      	subs	r3, #2
 800f838:	085b      	lsrs	r3, r3, #1
 800f83a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f83e:	e31a      	b.n	800fe76 <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	ed93 7a00 	vldr	s14, [r3]
 800f846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f84a:	edd3 7a00 	vldr	s15, [r3]
 800f84e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f852:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	ed93 7a00 	vldr	s14, [r3]
 800f85c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f860:	edd3 7a00 	vldr	s15, [r3]
 800f864:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f868:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	3304      	adds	r3, #4
 800f870:	ed93 7a00 	vldr	s14, [r3]
 800f874:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f878:	3304      	adds	r3, #4
 800f87a:	edd3 7a00 	vldr	s15, [r3]
 800f87e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f882:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	3304      	adds	r3, #4
 800f88a:	ed93 7a00 	vldr	s14, [r3]
 800f88e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f892:	3304      	adds	r3, #4
 800f894:	edd3 7a00 	vldr	s15, [r3]
 800f898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f89c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800f8a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8a4:	3304      	adds	r3, #4
 800f8a6:	ed93 7a00 	vldr	s14, [r3]
 800f8aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800f8ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8b6:	3304      	adds	r3, #4
 800f8b8:	edd3 7a00 	vldr	s15, [r3]
 800f8bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800f8c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8c8:	edd3 7a00 	vldr	s15, [r3]
 800f8cc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f8d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f8d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8d8:	edd3 7a00 	vldr	s15, [r3]
 800f8dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 800f8e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8e8:	edd3 7a00 	vldr	s15, [r3]
 800f8ec:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f8f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f8f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8f8:	edd3 7a00 	vldr	s15, [r3]
 800f8fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f900:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800f904:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f908:	3304      	adds	r3, #4
 800f90a:	edd3 7a00 	vldr	s15, [r3]
 800f90e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f912:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f91a:	3304      	adds	r3, #4
 800f91c:	edd3 7a00 	vldr	s15, [r3]
 800f920:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f924:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800f928:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f92c:	3304      	adds	r3, #4
 800f92e:	edd3 7a00 	vldr	s15, [r3]
 800f932:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f936:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f93a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f93e:	3304      	adds	r3, #4
 800f940:	edd3 7a00 	vldr	s15, [r3]
 800f944:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f948:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800f94c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f950:	ed93 7a00 	vldr	s14, [r3]
 800f954:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800f958:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f95c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f960:	edd3 7a00 	vldr	s15, [r3]
 800f964:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f968:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800f96c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f970:	ed93 7a00 	vldr	s14, [r3]
 800f974:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800f978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f97c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f980:	edd3 7a00 	vldr	s15, [r3]
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	1d1a      	adds	r2, r3, #4
 800f988:	603a      	str	r2, [r7, #0]
 800f98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f98e:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800f992:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f996:	3304      	adds	r3, #4
 800f998:	ed93 7a00 	vldr	s14, [r3]
 800f99c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800f9a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f9a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f9a8:	3304      	adds	r3, #4
 800f9aa:	edd3 7a00 	vldr	s15, [r3]
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	1d1a      	adds	r2, r3, #4
 800f9b2:	603a      	str	r2, [r7, #0]
 800f9b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9b8:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800f9bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f9c0:	3b04      	subs	r3, #4
 800f9c2:	ed93 7a00 	vldr	s14, [r3]
 800f9c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f9ca:	3b04      	subs	r3, #4
 800f9cc:	edd3 7a00 	vldr	s15, [r3]
 800f9d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9d4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800f9d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f9dc:	3b04      	subs	r3, #4
 800f9de:	ed93 7a00 	vldr	s14, [r3]
 800f9e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f9e6:	3b04      	subs	r3, #4
 800f9e8:	edd3 7a00 	vldr	s15, [r3]
 800f9ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9f0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 800f9f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f9f8:	ed93 7a00 	vldr	s14, [r3]
 800f9fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa00:	edd3 7a00 	vldr	s15, [r3]
 800fa04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa08:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 800fa0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa10:	ed93 7a00 	vldr	s14, [r3]
 800fa14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa18:	edd3 7a00 	vldr	s15, [r3]
 800fa1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa20:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800fa24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fa28:	ed93 7a00 	vldr	s14, [r3]
 800fa2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa30:	edd3 7a00 	vldr	s15, [r3]
 800fa34:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa38:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800fa3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa40:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800fa44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa48:	ed93 7a00 	vldr	s14, [r3]
 800fa4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa50:	edd3 7a00 	vldr	s15, [r3]
 800fa54:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fa5c:	3b04      	subs	r3, #4
 800fa5e:	edd3 7a00 	vldr	s15, [r3]
 800fa62:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa6a:	3b04      	subs	r3, #4
 800fa6c:	edd3 7a00 	vldr	s15, [r3]
 800fa70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa74:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800fa78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fa7c:	3b04      	subs	r3, #4
 800fa7e:	edd3 7a00 	vldr	s15, [r3]
 800fa82:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800fa86:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa8e:	3b04      	subs	r3, #4
 800fa90:	edd3 7a00 	vldr	s15, [r3]
 800fa94:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800fa9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800faa0:	edd3 7a00 	vldr	s15, [r3]
 800faa4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800faa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800faac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fab0:	edd3 7a00 	vldr	s15, [r3]
 800fab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fab8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800fabc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fac0:	ed93 7a00 	vldr	s14, [r3]
 800fac4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fac8:	edd3 7a00 	vldr	s15, [r3]
 800facc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fad0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800fad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fad8:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800fadc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fae0:	3b04      	subs	r3, #4
 800fae2:	ed93 7a00 	vldr	s14, [r3]
 800fae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800faea:	3b04      	subs	r3, #4
 800faec:	edd3 7a00 	vldr	s15, [r3]
 800faf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800faf4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800faf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fafc:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800fb00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb04:	ed93 7a00 	vldr	s14, [r3]
 800fb08:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800fb0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb14:	edd3 7a00 	vldr	s15, [r3]
 800fb18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb1c:	1f1a      	subs	r2, r3, #4
 800fb1e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800fb22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb26:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800fb2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb2e:	3b04      	subs	r3, #4
 800fb30:	ed93 7a00 	vldr	s14, [r3]
 800fb34:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800fb38:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb40:	3b04      	subs	r3, #4
 800fb42:	edd3 7a00 	vldr	s15, [r3]
 800fb46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb4a:	1f1a      	subs	r2, r3, #4
 800fb4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800fb50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb54:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800fb58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fb5c:	1d1a      	adds	r2, r3, #4
 800fb5e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800fb66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fb6a:	1d1a      	adds	r2, r3, #4
 800fb6c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800fb74:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fb78:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fb7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb80:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800fb84:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800fb88:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fb8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb90:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800fb94:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800fb98:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fb9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fba0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800fba4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fba8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fbac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbb0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 800fbb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fbb8:	1d1a      	adds	r2, r3, #4
 800fbba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fbbe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fbc2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fbc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbca:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800fbce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fbd2:	1d1a      	adds	r2, r3, #4
 800fbd4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fbd8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fbdc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fbe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbe4:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 800fbe8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800fbec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fbf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbf4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 800fbf8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fbfc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc04:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 800fc08:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fc0c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fc10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc14:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800fc18:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800fc1c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fc20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800fc28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fc2c:	1f1a      	subs	r2, r3, #4
 800fc2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fc32:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fc36:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fc3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc3e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800fc42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fc46:	1f1a      	subs	r2, r3, #4
 800fc48:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fc4c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fc50:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fc54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fc58:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800fc5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800fc64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 800fc6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fc74:	4413      	add	r3, r2
 800fc76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 800fc7a:	edd7 7a07 	vldr	s15, [r7, #28]
 800fc7e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fc82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc86:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 800fc8a:	edd7 7a08 	vldr	s15, [r7, #32]
 800fc8e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fc92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc96:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 800fc9a:	edd7 7a08 	vldr	s15, [r7, #32]
 800fc9e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fca6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 800fcaa:	edd7 7a07 	vldr	s15, [r7, #28]
 800fcae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fcb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcb6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 800fcba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fcbe:	1d1a      	adds	r2, r3, #4
 800fcc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fcc4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fcc8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcd0:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 800fcd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fcd8:	1d1a      	adds	r2, r3, #4
 800fcda:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fcde:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fce2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fcea:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 800fcee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800fcf2:	eef1 7a67 	vneg.f32	s15, s15
 800fcf6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fcfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcfe:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 800fd02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800fd06:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fd0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd0e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 800fd12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800fd16:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fd1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd1e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 800fd22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800fd26:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fd2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd2e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 800fd32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fd36:	1f1a      	subs	r2, r3, #4
 800fd38:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fd3c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fd40:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fd44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd48:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 800fd4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fd50:	1f1a      	subs	r2, r3, #4
 800fd52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fd56:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800fd5a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800fd5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd62:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800fd66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 800fd6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800fd76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fd7e:	4413      	add	r3, r2
 800fd80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 800fd84:	edd7 7a03 	vldr	s15, [r7, #12]
 800fd88:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fd8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd90:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 800fd94:	edd7 7a04 	vldr	s15, [r7, #16]
 800fd98:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fd9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fda0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 800fda4:	edd7 7a04 	vldr	s15, [r7, #16]
 800fda8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fdac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdb0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 800fdb4:	edd7 7a03 	vldr	s15, [r7, #12]
 800fdb8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fdbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdc0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 800fdc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fdc8:	1d1a      	adds	r2, r3, #4
 800fdca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800fdce:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fdd2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fdd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fdda:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 800fdde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fde2:	1d1a      	adds	r2, r3, #4
 800fde4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800fde8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fdec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fdf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fdf4:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 800fdf8:	edd7 7a06 	vldr	s15, [r7, #24]
 800fdfc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fe00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe04:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 800fe08:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe0c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fe10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe14:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 800fe18:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe1c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fe20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe24:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 800fe28:	edd7 7a06 	vldr	s15, [r7, #24]
 800fe2c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fe30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 800fe38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fe3c:	1f1a      	subs	r2, r3, #4
 800fe3e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800fe42:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fe46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fe4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe4e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800fe52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fe56:	1f1a      	subs	r2, r3, #4
 800fe58:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800fe5c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fe60:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fe64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe68:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800fe6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe70:	3b01      	subs	r3, #1
 800fe72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fe76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	f47f ace0 	bne.w	800f840 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	ed93 7a00 	vldr	s14, [r3]
 800fe86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe8a:	edd3 7a00 	vldr	s15, [r3]
 800fe8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe92:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	ed93 7a00 	vldr	s14, [r3]
 800fe9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fea0:	edd3 7a00 	vldr	s15, [r3]
 800fea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fea8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	3304      	adds	r3, #4
 800feb0:	ed93 7a00 	vldr	s14, [r3]
 800feb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800feb8:	3304      	adds	r3, #4
 800feba:	edd3 7a00 	vldr	s15, [r3]
 800febe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fec2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	3304      	adds	r3, #4
 800feca:	ed93 7a00 	vldr	s14, [r3]
 800fece:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fed2:	3304      	adds	r3, #4
 800fed4:	edd3 7a00 	vldr	s15, [r3]
 800fed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fedc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800fee0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fee4:	3304      	adds	r3, #4
 800fee6:	ed93 7a00 	vldr	s14, [r3]
 800feea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800feee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fef2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fef6:	3304      	adds	r3, #4
 800fef8:	edd3 7a00 	vldr	s15, [r3]
 800fefc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff00:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800ff04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff08:	edd3 7a00 	vldr	s15, [r3]
 800ff0c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ff10:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff18:	edd3 7a00 	vldr	s15, [r3]
 800ff1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff20:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800ff24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff28:	edd3 7a00 	vldr	s15, [r3]
 800ff2c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800ff30:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff38:	edd3 7a00 	vldr	s15, [r3]
 800ff3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff40:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800ff44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff48:	3304      	adds	r3, #4
 800ff4a:	edd3 7a00 	vldr	s15, [r3]
 800ff4e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800ff52:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff5a:	3304      	adds	r3, #4
 800ff5c:	edd3 7a00 	vldr	s15, [r3]
 800ff60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff64:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800ff68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	edd3 7a00 	vldr	s15, [r3]
 800ff72:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ff76:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff7e:	3304      	adds	r3, #4
 800ff80:	edd3 7a00 	vldr	s15, [r3]
 800ff84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff88:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800ff8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff90:	ed93 7a00 	vldr	s14, [r3]
 800ff94:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800ff98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ff9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffa0:	edd3 7a00 	vldr	s15, [r3]
 800ffa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffa8:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800ffac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffb0:	ed93 7a00 	vldr	s14, [r3]
 800ffb4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800ffb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ffbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffc0:	edd3 7a00 	vldr	s15, [r3]
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	1d1a      	adds	r2, r3, #4
 800ffc8:	603a      	str	r2, [r7, #0]
 800ffca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffce:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800ffd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffd6:	3304      	adds	r3, #4
 800ffd8:	ed93 7a00 	vldr	s14, [r3]
 800ffdc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800ffe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ffe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffe8:	3304      	adds	r3, #4
 800ffea:	edd3 7a00 	vldr	s15, [r3]
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	1d1a      	adds	r2, r3, #4
 800fff2:	603a      	str	r2, [r7, #0]
 800fff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fff8:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 800fffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8010004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 801000c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010010:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010018:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 801001c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010020:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010028:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 801002c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010030:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010038:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 801003c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010040:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010048:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 801004c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010050:	1d1a      	adds	r2, r3, #4
 8010052:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010056:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801005a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801005e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010062:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8010066:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801006a:	1d1a      	adds	r2, r3, #4
 801006c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010070:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010074:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010078:	ee77 7a67 	vsub.f32	s15, s14, s15
 801007c:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8010080:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8010088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8010090:	edd7 7a07 	vldr	s15, [r7, #28]
 8010094:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010098:	ee67 7a27 	vmul.f32	s15, s14, s15
 801009c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 80100a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80100a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80100a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80100b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80100b4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80100b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100bc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80100c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80100c4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80100c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100cc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80100d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80100d4:	1d1a      	adds	r2, r3, #4
 80100d6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80100da:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80100de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80100e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100e6:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80100ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80100ee:	1d1a      	adds	r2, r3, #4
 80100f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80100f4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80100f8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80100fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010100:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8010104:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 801010c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8010114:	edd7 7a03 	vldr	s15, [r7, #12]
 8010118:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801011c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010120:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8010124:	edd7 7a04 	vldr	s15, [r7, #16]
 8010128:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801012c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010130:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8010134:	edd7 7a04 	vldr	s15, [r7, #16]
 8010138:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801013c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010140:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8010144:	edd7 7a03 	vldr	s15, [r7, #12]
 8010148:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801014c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010150:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8010154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010158:	1d1a      	adds	r2, r3, #4
 801015a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801015e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010162:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010166:	ee77 7a27 	vadd.f32	s15, s14, s15
 801016a:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 801016e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010172:	1d1a      	adds	r2, r3, #4
 8010174:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010178:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801017c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010184:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8010188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801018c:	b299      	uxth	r1, r3
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	685a      	ldr	r2, [r3, #4]
 8010192:	2304      	movs	r3, #4
 8010194:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010196:	f000 f8d9 	bl	801034c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 801019a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801019e:	b299      	uxth	r1, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	685a      	ldr	r2, [r3, #4]
 80101a4:	2304      	movs	r3, #4
 80101a6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80101a8:	f000 f8d0 	bl	801034c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80101ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80101b0:	b299      	uxth	r1, r3
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	685a      	ldr	r2, [r3, #4]
 80101b6:	2304      	movs	r3, #4
 80101b8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80101ba:	f000 f8c7 	bl	801034c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80101be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80101c2:	b299      	uxth	r1, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	685a      	ldr	r2, [r3, #4]
 80101c8:	2304      	movs	r3, #4
 80101ca:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80101cc:	f000 f8be 	bl	801034c <arm_radix8_butterfly_f32>
}
 80101d0:	bf00      	nop
 80101d2:	37b0      	adds	r7, #176	; 0xb0
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b088      	sub	sp, #32
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	4611      	mov	r1, r2
 80101e4:	461a      	mov	r2, r3
 80101e6:	460b      	mov	r3, r1
 80101e8:	71fb      	strb	r3, [r7, #7]
 80101ea:	4613      	mov	r3, r2
 80101ec:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	881b      	ldrh	r3, [r3, #0]
 80101f2:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80101f4:	79fb      	ldrb	r3, [r7, #7]
 80101f6:	2b01      	cmp	r3, #1
 80101f8:	d117      	bne.n	801022a <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	3304      	adds	r3, #4
 80101fe:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8010200:	2300      	movs	r3, #0
 8010202:	61fb      	str	r3, [r7, #28]
 8010204:	e00d      	b.n	8010222 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	edd3 7a00 	vldr	s15, [r3]
 801020c:	eef1 7a67 	vneg.f32	s15, s15
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	3308      	adds	r3, #8
 801021a:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	3301      	adds	r3, #1
 8010220:	61fb      	str	r3, [r7, #28]
 8010222:	69fa      	ldr	r2, [r7, #28]
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	429a      	cmp	r2, r3
 8010228:	d3ed      	bcc.n	8010206 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010230:	d040      	beq.n	80102b4 <arm_cfft_f32+0xdc>
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010238:	d845      	bhi.n	80102c6 <arm_cfft_f32+0xee>
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010240:	d033      	beq.n	80102aa <arm_cfft_f32+0xd2>
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010248:	d83d      	bhi.n	80102c6 <arm_cfft_f32+0xee>
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010250:	d026      	beq.n	80102a0 <arm_cfft_f32+0xc8>
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010258:	d835      	bhi.n	80102c6 <arm_cfft_f32+0xee>
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010260:	d028      	beq.n	80102b4 <arm_cfft_f32+0xdc>
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010268:	d82d      	bhi.n	80102c6 <arm_cfft_f32+0xee>
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010270:	d01b      	beq.n	80102aa <arm_cfft_f32+0xd2>
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010278:	d825      	bhi.n	80102c6 <arm_cfft_f32+0xee>
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	2b80      	cmp	r3, #128	; 0x80
 801027e:	d00f      	beq.n	80102a0 <arm_cfft_f32+0xc8>
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	2b80      	cmp	r3, #128	; 0x80
 8010284:	d81f      	bhi.n	80102c6 <arm_cfft_f32+0xee>
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	2b40      	cmp	r3, #64	; 0x40
 801028a:	d013      	beq.n	80102b4 <arm_cfft_f32+0xdc>
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	2b40      	cmp	r3, #64	; 0x40
 8010290:	d819      	bhi.n	80102c6 <arm_cfft_f32+0xee>
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	2b10      	cmp	r3, #16
 8010296:	d003      	beq.n	80102a0 <arm_cfft_f32+0xc8>
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	2b20      	cmp	r3, #32
 801029c:	d005      	beq.n	80102aa <arm_cfft_f32+0xd2>
 801029e:	e012      	b.n	80102c6 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80102a0:	68b9      	ldr	r1, [r7, #8]
 80102a2:	68f8      	ldr	r0, [r7, #12]
 80102a4:	f7fe ff79 	bl	800f19a <arm_cfft_radix8by2_f32>
    break;
 80102a8:	e00d      	b.n	80102c6 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80102aa:	68b9      	ldr	r1, [r7, #8]
 80102ac:	68f8      	ldr	r0, [r7, #12]
 80102ae:	f7ff f968 	bl	800f582 <arm_cfft_radix8by4_f32>
    break;
 80102b2:	e008      	b.n	80102c6 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	b299      	uxth	r1, r3
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	685a      	ldr	r2, [r3, #4]
 80102bc:	2301      	movs	r3, #1
 80102be:	68b8      	ldr	r0, [r7, #8]
 80102c0:	f000 f844 	bl	801034c <arm_radix8_butterfly_f32>
    break;
 80102c4:	bf00      	nop
  }

  if ( bitReverseFlag )
 80102c6:	79bb      	ldrb	r3, [r7, #6]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d007      	beq.n	80102dc <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	8999      	ldrh	r1, [r3, #12]
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	689b      	ldr	r3, [r3, #8]
 80102d4:	461a      	mov	r2, r3
 80102d6:	68b8      	ldr	r0, [r7, #8]
 80102d8:	f7fe ff06 	bl	800f0e8 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80102dc:	79fb      	ldrb	r3, [r7, #7]
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d130      	bne.n	8010344 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	ee07 3a90 	vmov	s15, r3
 80102e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80102ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80102f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102f4:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80102fc:	2300      	movs	r3, #0
 80102fe:	61fb      	str	r3, [r7, #28]
 8010300:	e01c      	b.n	801033c <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8010302:	69bb      	ldr	r3, [r7, #24]
 8010304:	1d1a      	adds	r2, r3, #4
 8010306:	61ba      	str	r2, [r7, #24]
 8010308:	ed93 7a00 	vldr	s14, [r3]
 801030c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010314:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8010318:	69bb      	ldr	r3, [r7, #24]
 801031a:	edd3 7a00 	vldr	s15, [r3]
 801031e:	eeb1 7a67 	vneg.f32	s14, s15
 8010322:	edd7 7a04 	vldr	s15, [r7, #16]
 8010326:	ee67 7a27 	vmul.f32	s15, s14, s15
 801032a:	69bb      	ldr	r3, [r7, #24]
 801032c:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	3304      	adds	r3, #4
 8010334:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8010336:	69fb      	ldr	r3, [r7, #28]
 8010338:	3301      	adds	r3, #1
 801033a:	61fb      	str	r3, [r7, #28]
 801033c:	69fa      	ldr	r2, [r7, #28]
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	429a      	cmp	r2, r3
 8010342:	d3de      	bcc.n	8010302 <arm_cfft_f32+0x12a>
    }
  }
}
 8010344:	bf00      	nop
 8010346:	3720      	adds	r7, #32
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 801034c:	b480      	push	{r7}
 801034e:	b0bd      	sub	sp, #244	; 0xf4
 8010350:	af00      	add	r7, sp, #0
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	607a      	str	r2, [r7, #4]
 8010356:	461a      	mov	r2, r3
 8010358:	460b      	mov	r3, r1
 801035a:	817b      	strh	r3, [r7, #10]
 801035c:	4613      	mov	r3, r2
 801035e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8010360:	4b09      	ldr	r3, [pc, #36]	; (8010388 <arm_radix8_butterfly_f32+0x3c>)
 8010362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8010366:	897b      	ldrh	r3, [r7, #10]
 8010368:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 801036c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8010374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010378:	08db      	lsrs	r3, r3, #3
 801037a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 801037e:	2300      	movs	r3, #0
 8010380:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010384:	e002      	b.n	801038c <arm_radix8_butterfly_f32+0x40>
 8010386:	bf00      	nop
 8010388:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 801038c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010394:	4413      	add	r3, r2
 8010396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 801039a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801039e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103a2:	4413      	add	r3, r2
 80103a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80103a8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80103ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103b0:	4413      	add	r3, r2
 80103b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80103b6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80103ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103be:	4413      	add	r3, r2
 80103c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80103c4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80103c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103cc:	4413      	add	r3, r2
 80103ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80103d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80103d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103da:	4413      	add	r3, r2
 80103dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80103e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80103e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103e8:	4413      	add	r3, r2
 80103ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80103ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80103f2:	00db      	lsls	r3, r3, #3
 80103f4:	68fa      	ldr	r2, [r7, #12]
 80103f6:	4413      	add	r3, r2
 80103f8:	ed93 7a00 	vldr	s14, [r3]
 80103fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010400:	00db      	lsls	r3, r3, #3
 8010402:	68fa      	ldr	r2, [r7, #12]
 8010404:	4413      	add	r3, r2
 8010406:	edd3 7a00 	vldr	s15, [r3]
 801040a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801040e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8010412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010416:	00db      	lsls	r3, r3, #3
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	4413      	add	r3, r2
 801041c:	ed93 7a00 	vldr	s14, [r3]
 8010420:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010424:	00db      	lsls	r3, r3, #3
 8010426:	68fa      	ldr	r2, [r7, #12]
 8010428:	4413      	add	r3, r2
 801042a:	edd3 7a00 	vldr	s15, [r3]
 801042e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010432:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8010436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801043a:	00db      	lsls	r3, r3, #3
 801043c:	68fa      	ldr	r2, [r7, #12]
 801043e:	4413      	add	r3, r2
 8010440:	ed93 7a00 	vldr	s14, [r3]
 8010444:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010448:	00db      	lsls	r3, r3, #3
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	4413      	add	r3, r2
 801044e:	edd3 7a00 	vldr	s15, [r3]
 8010452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010456:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 801045a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801045e:	00db      	lsls	r3, r3, #3
 8010460:	68fa      	ldr	r2, [r7, #12]
 8010462:	4413      	add	r3, r2
 8010464:	ed93 7a00 	vldr	s14, [r3]
 8010468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801046c:	00db      	lsls	r3, r3, #3
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	4413      	add	r3, r2
 8010472:	edd3 7a00 	vldr	s15, [r3]
 8010476:	ee77 7a67 	vsub.f32	s15, s14, s15
 801047a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 801047e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010482:	00db      	lsls	r3, r3, #3
 8010484:	68fa      	ldr	r2, [r7, #12]
 8010486:	4413      	add	r3, r2
 8010488:	ed93 7a00 	vldr	s14, [r3]
 801048c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010490:	00db      	lsls	r3, r3, #3
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	4413      	add	r3, r2
 8010496:	edd3 7a00 	vldr	s15, [r3]
 801049a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801049e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80104a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80104a6:	00db      	lsls	r3, r3, #3
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	4413      	add	r3, r2
 80104ac:	ed93 7a00 	vldr	s14, [r3]
 80104b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80104b4:	00db      	lsls	r3, r3, #3
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	4413      	add	r3, r2
 80104ba:	edd3 7a00 	vldr	s15, [r3]
 80104be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104c2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80104c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80104ca:	00db      	lsls	r3, r3, #3
 80104cc:	68fa      	ldr	r2, [r7, #12]
 80104ce:	4413      	add	r3, r2
 80104d0:	ed93 7a00 	vldr	s14, [r3]
 80104d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80104d8:	00db      	lsls	r3, r3, #3
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	4413      	add	r3, r2
 80104de:	edd3 7a00 	vldr	s15, [r3]
 80104e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104e6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80104ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80104ee:	00db      	lsls	r3, r3, #3
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	4413      	add	r3, r2
 80104f4:	ed93 7a00 	vldr	s14, [r3]
 80104f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80104fc:	00db      	lsls	r3, r3, #3
 80104fe:	68fa      	ldr	r2, [r7, #12]
 8010500:	4413      	add	r3, r2
 8010502:	edd3 7a00 	vldr	s15, [r3]
 8010506:	ee77 7a67 	vsub.f32	s15, s14, s15
 801050a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 801050e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010512:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010516:	ee77 7a67 	vsub.f32	s15, s14, s15
 801051a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 801051e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010522:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010526:	ee77 7a27 	vadd.f32	s15, s14, s15
 801052a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 801052e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010532:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010536:	ee77 7a67 	vsub.f32	s15, s14, s15
 801053a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 801053e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010542:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010546:	ee77 7a27 	vadd.f32	s15, s14, s15
 801054a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 801054e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010552:	00db      	lsls	r3, r3, #3
 8010554:	68fa      	ldr	r2, [r7, #12]
 8010556:	4413      	add	r3, r2
 8010558:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801055c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010564:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8010568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801056c:	00db      	lsls	r3, r3, #3
 801056e:	68fa      	ldr	r2, [r7, #12]
 8010570:	4413      	add	r3, r2
 8010572:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010576:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801057a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801057e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8010582:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010586:	00db      	lsls	r3, r3, #3
 8010588:	3304      	adds	r3, #4
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	4413      	add	r3, r2
 801058e:	ed93 7a00 	vldr	s14, [r3]
 8010592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010596:	00db      	lsls	r3, r3, #3
 8010598:	3304      	adds	r3, #4
 801059a:	68fa      	ldr	r2, [r7, #12]
 801059c:	4413      	add	r3, r2
 801059e:	edd3 7a00 	vldr	s15, [r3]
 80105a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105a6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80105aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80105ae:	00db      	lsls	r3, r3, #3
 80105b0:	3304      	adds	r3, #4
 80105b2:	68fa      	ldr	r2, [r7, #12]
 80105b4:	4413      	add	r3, r2
 80105b6:	ed93 7a00 	vldr	s14, [r3]
 80105ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80105be:	00db      	lsls	r3, r3, #3
 80105c0:	3304      	adds	r3, #4
 80105c2:	68fa      	ldr	r2, [r7, #12]
 80105c4:	4413      	add	r3, r2
 80105c6:	edd3 7a00 	vldr	s15, [r3]
 80105ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105ce:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80105d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80105d6:	00db      	lsls	r3, r3, #3
 80105d8:	3304      	adds	r3, #4
 80105da:	68fa      	ldr	r2, [r7, #12]
 80105dc:	4413      	add	r3, r2
 80105de:	ed93 7a00 	vldr	s14, [r3]
 80105e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80105e6:	00db      	lsls	r3, r3, #3
 80105e8:	3304      	adds	r3, #4
 80105ea:	68fa      	ldr	r2, [r7, #12]
 80105ec:	4413      	add	r3, r2
 80105ee:	edd3 7a00 	vldr	s15, [r3]
 80105f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105f6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80105fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80105fe:	00db      	lsls	r3, r3, #3
 8010600:	3304      	adds	r3, #4
 8010602:	68fa      	ldr	r2, [r7, #12]
 8010604:	4413      	add	r3, r2
 8010606:	ed93 7a00 	vldr	s14, [r3]
 801060a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801060e:	00db      	lsls	r3, r3, #3
 8010610:	3304      	adds	r3, #4
 8010612:	68fa      	ldr	r2, [r7, #12]
 8010614:	4413      	add	r3, r2
 8010616:	edd3 7a00 	vldr	s15, [r3]
 801061a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801061e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8010622:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010626:	00db      	lsls	r3, r3, #3
 8010628:	3304      	adds	r3, #4
 801062a:	68fa      	ldr	r2, [r7, #12]
 801062c:	4413      	add	r3, r2
 801062e:	ed93 7a00 	vldr	s14, [r3]
 8010632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010636:	00db      	lsls	r3, r3, #3
 8010638:	3304      	adds	r3, #4
 801063a:	68fa      	ldr	r2, [r7, #12]
 801063c:	4413      	add	r3, r2
 801063e:	edd3 7a00 	vldr	s15, [r3]
 8010642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010646:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 801064a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801064e:	00db      	lsls	r3, r3, #3
 8010650:	3304      	adds	r3, #4
 8010652:	68fa      	ldr	r2, [r7, #12]
 8010654:	4413      	add	r3, r2
 8010656:	ed93 7a00 	vldr	s14, [r3]
 801065a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801065e:	00db      	lsls	r3, r3, #3
 8010660:	3304      	adds	r3, #4
 8010662:	68fa      	ldr	r2, [r7, #12]
 8010664:	4413      	add	r3, r2
 8010666:	edd3 7a00 	vldr	s15, [r3]
 801066a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801066e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8010672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010676:	00db      	lsls	r3, r3, #3
 8010678:	3304      	adds	r3, #4
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	4413      	add	r3, r2
 801067e:	ed93 7a00 	vldr	s14, [r3]
 8010682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010686:	00db      	lsls	r3, r3, #3
 8010688:	3304      	adds	r3, #4
 801068a:	68fa      	ldr	r2, [r7, #12]
 801068c:	4413      	add	r3, r2
 801068e:	edd3 7a00 	vldr	s15, [r3]
 8010692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010696:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 801069a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801069e:	00db      	lsls	r3, r3, #3
 80106a0:	3304      	adds	r3, #4
 80106a2:	68fa      	ldr	r2, [r7, #12]
 80106a4:	4413      	add	r3, r2
 80106a6:	ed93 7a00 	vldr	s14, [r3]
 80106aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80106ae:	00db      	lsls	r3, r3, #3
 80106b0:	3304      	adds	r3, #4
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	4413      	add	r3, r2
 80106b6:	edd3 7a00 	vldr	s15, [r3]
 80106ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106be:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80106c2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80106c6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80106ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106ce:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 80106d2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80106d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80106da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106de:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80106e2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80106e6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80106ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106ee:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80106f2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80106f6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80106fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106fe:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8010702:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010706:	00db      	lsls	r3, r3, #3
 8010708:	3304      	adds	r3, #4
 801070a:	68fa      	ldr	r2, [r7, #12]
 801070c:	4413      	add	r3, r2
 801070e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010712:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010716:	ee77 7a27 	vadd.f32	s15, s14, s15
 801071a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 801071e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010722:	00db      	lsls	r3, r3, #3
 8010724:	3304      	adds	r3, #4
 8010726:	68fa      	ldr	r2, [r7, #12]
 8010728:	4413      	add	r3, r2
 801072a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801072e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010736:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 801073a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801073e:	00db      	lsls	r3, r3, #3
 8010740:	68fa      	ldr	r2, [r7, #12]
 8010742:	4413      	add	r3, r2
 8010744:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010748:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801074c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010750:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8010754:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010758:	00db      	lsls	r3, r3, #3
 801075a:	68fa      	ldr	r2, [r7, #12]
 801075c:	4413      	add	r3, r2
 801075e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010762:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010766:	ee77 7a67 	vsub.f32	s15, s14, s15
 801076a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 801076e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010772:	00db      	lsls	r3, r3, #3
 8010774:	3304      	adds	r3, #4
 8010776:	68fa      	ldr	r2, [r7, #12]
 8010778:	4413      	add	r3, r2
 801077a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801077e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010786:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 801078a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801078e:	00db      	lsls	r3, r3, #3
 8010790:	3304      	adds	r3, #4
 8010792:	68fa      	ldr	r2, [r7, #12]
 8010794:	4413      	add	r3, r2
 8010796:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801079a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801079e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107a2:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80107a6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80107aa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80107ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107b2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80107b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107ba:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80107be:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80107c2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80107c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107ca:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80107ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107d2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80107d6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80107da:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80107de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107e2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80107e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107ea:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80107ee:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80107f2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80107f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107fa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80107fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010802:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8010806:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801080a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801080e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010812:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8010816:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801081a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801081e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010822:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8010826:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 801082a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801082e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010832:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8010836:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 801083a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801083e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010842:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8010846:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801084a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801084e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010852:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8010856:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801085a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801085e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010862:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8010866:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 801086a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801086e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010872:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8010876:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 801087a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801087e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010882:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8010886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801088a:	00db      	lsls	r3, r3, #3
 801088c:	68fa      	ldr	r2, [r7, #12]
 801088e:	4413      	add	r3, r2
 8010890:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8010894:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8010898:	ee77 7a27 	vadd.f32	s15, s14, s15
 801089c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80108a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80108a4:	00db      	lsls	r3, r3, #3
 80108a6:	68fa      	ldr	r2, [r7, #12]
 80108a8:	4413      	add	r3, r2
 80108aa:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80108ae:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80108b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108b6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80108ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80108be:	00db      	lsls	r3, r3, #3
 80108c0:	68fa      	ldr	r2, [r7, #12]
 80108c2:	4413      	add	r3, r2
 80108c4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80108c8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80108cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108d0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80108d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80108d8:	00db      	lsls	r3, r3, #3
 80108da:	68fa      	ldr	r2, [r7, #12]
 80108dc:	4413      	add	r3, r2
 80108de:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80108e2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80108e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108ea:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80108ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80108f2:	00db      	lsls	r3, r3, #3
 80108f4:	3304      	adds	r3, #4
 80108f6:	68fa      	ldr	r2, [r7, #12]
 80108f8:	4413      	add	r3, r2
 80108fa:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80108fe:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8010902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010906:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 801090a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801090e:	00db      	lsls	r3, r3, #3
 8010910:	3304      	adds	r3, #4
 8010912:	68fa      	ldr	r2, [r7, #12]
 8010914:	4413      	add	r3, r2
 8010916:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801091a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 801091e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010922:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8010926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801092a:	00db      	lsls	r3, r3, #3
 801092c:	3304      	adds	r3, #4
 801092e:	68fa      	ldr	r2, [r7, #12]
 8010930:	4413      	add	r3, r2
 8010932:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8010936:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801093a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801093e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8010942:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010946:	00db      	lsls	r3, r3, #3
 8010948:	3304      	adds	r3, #4
 801094a:	68fa      	ldr	r2, [r7, #12]
 801094c:	4413      	add	r3, r2
 801094e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8010952:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8010956:	ee77 7a27 	vadd.f32	s15, s14, s15
 801095a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 801095e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010966:	4413      	add	r3, r2
 8010968:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 801096c:	897b      	ldrh	r3, [r7, #10]
 801096e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010972:	429a      	cmp	r2, r3
 8010974:	f4ff ad0a 	bcc.w	801038c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8010978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801097c:	2b07      	cmp	r3, #7
 801097e:	f240 84e3 	bls.w	8011348 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8010982:	2300      	movs	r3, #0
 8010984:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8010988:	2301      	movs	r3, #1
 801098a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 801098e:	893b      	ldrh	r3, [r7, #8]
 8010990:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010994:	4413      	add	r3, r2
 8010996:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8010998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801099a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 801099e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80109a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109a4:	4413      	add	r3, r2
 80109a6:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80109a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80109aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109ac:	4413      	add	r3, r2
 80109ae:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80109b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80109b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109b4:	4413      	add	r3, r2
 80109b6:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80109b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80109ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109bc:	4413      	add	r3, r2
 80109be:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80109c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80109c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109c4:	4413      	add	r3, r2
 80109c6:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80109c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80109ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109cc:	4413      	add	r3, r2
 80109ce:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 80109d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80109d4:	00db      	lsls	r3, r3, #3
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	4413      	add	r3, r2
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80109de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109e0:	00db      	lsls	r3, r3, #3
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	4413      	add	r3, r2
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80109ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109ec:	00db      	lsls	r3, r3, #3
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	4413      	add	r3, r2
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80109f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80109f8:	00db      	lsls	r3, r3, #3
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	4413      	add	r3, r2
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8010a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a04:	00db      	lsls	r3, r3, #3
 8010a06:	687a      	ldr	r2, [r7, #4]
 8010a08:	4413      	add	r3, r2
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8010a0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a10:	00db      	lsls	r3, r3, #3
 8010a12:	687a      	ldr	r2, [r7, #4]
 8010a14:	4413      	add	r3, r2
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8010a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a1c:	00db      	lsls	r3, r3, #3
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	4413      	add	r3, r2
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8010a26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010a2a:	00db      	lsls	r3, r3, #3
 8010a2c:	3304      	adds	r3, #4
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	4413      	add	r3, r2
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8010a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a38:	00db      	lsls	r3, r3, #3
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	687a      	ldr	r2, [r7, #4]
 8010a3e:	4413      	add	r3, r2
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8010a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a46:	00db      	lsls	r3, r3, #3
 8010a48:	3304      	adds	r3, #4
 8010a4a:	687a      	ldr	r2, [r7, #4]
 8010a4c:	4413      	add	r3, r2
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8010a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	3304      	adds	r3, #4
 8010a58:	687a      	ldr	r2, [r7, #4]
 8010a5a:	4413      	add	r3, r2
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8010a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a62:	00db      	lsls	r3, r3, #3
 8010a64:	3304      	adds	r3, #4
 8010a66:	687a      	ldr	r2, [r7, #4]
 8010a68:	4413      	add	r3, r2
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8010a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a70:	00db      	lsls	r3, r3, #3
 8010a72:	3304      	adds	r3, #4
 8010a74:	687a      	ldr	r2, [r7, #4]
 8010a76:	4413      	add	r3, r2
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8010a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a7e:	00db      	lsls	r3, r3, #3
 8010a80:	3304      	adds	r3, #4
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	4413      	add	r3, r2
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8010a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8010a92:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a9a:	4413      	add	r3, r2
 8010a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8010aa0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8010aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aa8:	4413      	add	r3, r2
 8010aaa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8010aae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ab6:	4413      	add	r3, r2
 8010ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8010abc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ac4:	4413      	add	r3, r2
 8010ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8010aca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ad2:	4413      	add	r3, r2
 8010ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8010ad8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ae0:	4413      	add	r3, r2
 8010ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8010ae6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aee:	4413      	add	r3, r2
 8010af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8010af4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010af8:	00db      	lsls	r3, r3, #3
 8010afa:	68fa      	ldr	r2, [r7, #12]
 8010afc:	4413      	add	r3, r2
 8010afe:	ed93 7a00 	vldr	s14, [r3]
 8010b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010b06:	00db      	lsls	r3, r3, #3
 8010b08:	68fa      	ldr	r2, [r7, #12]
 8010b0a:	4413      	add	r3, r2
 8010b0c:	edd3 7a00 	vldr	s15, [r3]
 8010b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b14:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8010b18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010b1c:	00db      	lsls	r3, r3, #3
 8010b1e:	68fa      	ldr	r2, [r7, #12]
 8010b20:	4413      	add	r3, r2
 8010b22:	ed93 7a00 	vldr	s14, [r3]
 8010b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010b2a:	00db      	lsls	r3, r3, #3
 8010b2c:	68fa      	ldr	r2, [r7, #12]
 8010b2e:	4413      	add	r3, r2
 8010b30:	edd3 7a00 	vldr	s15, [r3]
 8010b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b38:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8010b3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010b40:	00db      	lsls	r3, r3, #3
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	4413      	add	r3, r2
 8010b46:	ed93 7a00 	vldr	s14, [r3]
 8010b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010b4e:	00db      	lsls	r3, r3, #3
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	4413      	add	r3, r2
 8010b54:	edd3 7a00 	vldr	s15, [r3]
 8010b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b5c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8010b60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010b64:	00db      	lsls	r3, r3, #3
 8010b66:	68fa      	ldr	r2, [r7, #12]
 8010b68:	4413      	add	r3, r2
 8010b6a:	ed93 7a00 	vldr	s14, [r3]
 8010b6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010b72:	00db      	lsls	r3, r3, #3
 8010b74:	68fa      	ldr	r2, [r7, #12]
 8010b76:	4413      	add	r3, r2
 8010b78:	edd3 7a00 	vldr	s15, [r3]
 8010b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b80:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8010b84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010b88:	00db      	lsls	r3, r3, #3
 8010b8a:	68fa      	ldr	r2, [r7, #12]
 8010b8c:	4413      	add	r3, r2
 8010b8e:	ed93 7a00 	vldr	s14, [r3]
 8010b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010b96:	00db      	lsls	r3, r3, #3
 8010b98:	68fa      	ldr	r2, [r7, #12]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	edd3 7a00 	vldr	s15, [r3]
 8010ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ba4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8010ba8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010bac:	00db      	lsls	r3, r3, #3
 8010bae:	68fa      	ldr	r2, [r7, #12]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	ed93 7a00 	vldr	s14, [r3]
 8010bb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010bba:	00db      	lsls	r3, r3, #3
 8010bbc:	68fa      	ldr	r2, [r7, #12]
 8010bbe:	4413      	add	r3, r2
 8010bc0:	edd3 7a00 	vldr	s15, [r3]
 8010bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010bc8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8010bcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010bd0:	00db      	lsls	r3, r3, #3
 8010bd2:	68fa      	ldr	r2, [r7, #12]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	ed93 7a00 	vldr	s14, [r3]
 8010bda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010bde:	00db      	lsls	r3, r3, #3
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	4413      	add	r3, r2
 8010be4:	edd3 7a00 	vldr	s15, [r3]
 8010be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bec:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8010bf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010bf4:	00db      	lsls	r3, r3, #3
 8010bf6:	68fa      	ldr	r2, [r7, #12]
 8010bf8:	4413      	add	r3, r2
 8010bfa:	ed93 7a00 	vldr	s14, [r3]
 8010bfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010c02:	00db      	lsls	r3, r3, #3
 8010c04:	68fa      	ldr	r2, [r7, #12]
 8010c06:	4413      	add	r3, r2
 8010c08:	edd3 7a00 	vldr	s15, [r3]
 8010c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c10:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8010c14:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010c18:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c20:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8010c24:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010c28:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c30:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8010c34:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010c38:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c40:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8010c44:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010c48:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c50:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8010c54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010c58:	00db      	lsls	r3, r3, #3
 8010c5a:	68fa      	ldr	r2, [r7, #12]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010c62:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c6a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8010c6e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010c72:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c7a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8010c7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010c82:	00db      	lsls	r3, r3, #3
 8010c84:	3304      	adds	r3, #4
 8010c86:	68fa      	ldr	r2, [r7, #12]
 8010c88:	4413      	add	r3, r2
 8010c8a:	ed93 7a00 	vldr	s14, [r3]
 8010c8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010c92:	00db      	lsls	r3, r3, #3
 8010c94:	3304      	adds	r3, #4
 8010c96:	68fa      	ldr	r2, [r7, #12]
 8010c98:	4413      	add	r3, r2
 8010c9a:	edd3 7a00 	vldr	s15, [r3]
 8010c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ca2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8010ca6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010caa:	00db      	lsls	r3, r3, #3
 8010cac:	3304      	adds	r3, #4
 8010cae:	68fa      	ldr	r2, [r7, #12]
 8010cb0:	4413      	add	r3, r2
 8010cb2:	ed93 7a00 	vldr	s14, [r3]
 8010cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010cba:	00db      	lsls	r3, r3, #3
 8010cbc:	3304      	adds	r3, #4
 8010cbe:	68fa      	ldr	r2, [r7, #12]
 8010cc0:	4413      	add	r3, r2
 8010cc2:	edd3 7a00 	vldr	s15, [r3]
 8010cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cca:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8010cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010cd2:	00db      	lsls	r3, r3, #3
 8010cd4:	3304      	adds	r3, #4
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	4413      	add	r3, r2
 8010cda:	ed93 7a00 	vldr	s14, [r3]
 8010cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010ce2:	00db      	lsls	r3, r3, #3
 8010ce4:	3304      	adds	r3, #4
 8010ce6:	68fa      	ldr	r2, [r7, #12]
 8010ce8:	4413      	add	r3, r2
 8010cea:	edd3 7a00 	vldr	s15, [r3]
 8010cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cf2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8010cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010cfa:	00db      	lsls	r3, r3, #3
 8010cfc:	3304      	adds	r3, #4
 8010cfe:	68fa      	ldr	r2, [r7, #12]
 8010d00:	4413      	add	r3, r2
 8010d02:	ed93 7a00 	vldr	s14, [r3]
 8010d06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010d0a:	00db      	lsls	r3, r3, #3
 8010d0c:	3304      	adds	r3, #4
 8010d0e:	68fa      	ldr	r2, [r7, #12]
 8010d10:	4413      	add	r3, r2
 8010d12:	edd3 7a00 	vldr	s15, [r3]
 8010d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d1a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8010d1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010d22:	00db      	lsls	r3, r3, #3
 8010d24:	3304      	adds	r3, #4
 8010d26:	68fa      	ldr	r2, [r7, #12]
 8010d28:	4413      	add	r3, r2
 8010d2a:	ed93 7a00 	vldr	s14, [r3]
 8010d2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d32:	00db      	lsls	r3, r3, #3
 8010d34:	3304      	adds	r3, #4
 8010d36:	68fa      	ldr	r2, [r7, #12]
 8010d38:	4413      	add	r3, r2
 8010d3a:	edd3 7a00 	vldr	s15, [r3]
 8010d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d42:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8010d46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010d4a:	00db      	lsls	r3, r3, #3
 8010d4c:	3304      	adds	r3, #4
 8010d4e:	68fa      	ldr	r2, [r7, #12]
 8010d50:	4413      	add	r3, r2
 8010d52:	ed93 7a00 	vldr	s14, [r3]
 8010d56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d5a:	00db      	lsls	r3, r3, #3
 8010d5c:	3304      	adds	r3, #4
 8010d5e:	68fa      	ldr	r2, [r7, #12]
 8010d60:	4413      	add	r3, r2
 8010d62:	edd3 7a00 	vldr	s15, [r3]
 8010d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d6a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8010d6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010d72:	00db      	lsls	r3, r3, #3
 8010d74:	3304      	adds	r3, #4
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	4413      	add	r3, r2
 8010d7a:	ed93 7a00 	vldr	s14, [r3]
 8010d7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010d82:	00db      	lsls	r3, r3, #3
 8010d84:	3304      	adds	r3, #4
 8010d86:	68fa      	ldr	r2, [r7, #12]
 8010d88:	4413      	add	r3, r2
 8010d8a:	edd3 7a00 	vldr	s15, [r3]
 8010d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d92:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8010d96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010d9a:	00db      	lsls	r3, r3, #3
 8010d9c:	3304      	adds	r3, #4
 8010d9e:	68fa      	ldr	r2, [r7, #12]
 8010da0:	4413      	add	r3, r2
 8010da2:	ed93 7a00 	vldr	s14, [r3]
 8010da6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010daa:	00db      	lsls	r3, r3, #3
 8010dac:	3304      	adds	r3, #4
 8010dae:	68fa      	ldr	r2, [r7, #12]
 8010db0:	4413      	add	r3, r2
 8010db2:	edd3 7a00 	vldr	s15, [r3]
 8010db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dba:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8010dbe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010dc2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dca:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8010dce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010dd2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010dda:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8010dde:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8010de2:	edd7 7a08 	vldr	s15, [r7, #32]
 8010de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dea:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8010dee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8010df2:	edd7 7a08 	vldr	s15, [r7, #32]
 8010df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010dfa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8010dfe:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010e02:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e0a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8010e0e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010e12:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e1a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8010e1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010e22:	00db      	lsls	r3, r3, #3
 8010e24:	3304      	adds	r3, #4
 8010e26:	68fa      	ldr	r2, [r7, #12]
 8010e28:	4413      	add	r3, r2
 8010e2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010e2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e36:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8010e3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010e3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8010e4a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8010e4e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e56:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8010e5a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8010e5e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e66:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8010e6a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010e6e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e76:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8010e7a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8010e7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e86:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8010e8a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010e8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e96:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8010e9a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8010e9e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ea6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8010eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010eae:	00db      	lsls	r3, r3, #3
 8010eb0:	68fa      	ldr	r2, [r7, #12]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8010eb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8010ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ec0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8010ec4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ec8:	00db      	lsls	r3, r3, #3
 8010eca:	3304      	adds	r3, #4
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	4413      	add	r3, r2
 8010ed0:	ed97 7a05 	vldr	s14, [r7, #20]
 8010ed4:	edd7 7a04 	vldr	s15, [r7, #16]
 8010ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010edc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8010ee0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010ee4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8010ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eec:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8010ef0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010ef4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010efc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8010f00:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010f04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f0c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8010f10:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010f14:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8010f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f1c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8010f20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f24:	00db      	lsls	r3, r3, #3
 8010f26:	68fa      	ldr	r2, [r7, #12]
 8010f28:	4413      	add	r3, r2
 8010f2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8010f2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f36:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8010f3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f3e:	00db      	lsls	r3, r3, #3
 8010f40:	3304      	adds	r3, #4
 8010f42:	68fa      	ldr	r2, [r7, #12]
 8010f44:	4413      	add	r3, r2
 8010f46:	ed97 7a05 	vldr	s14, [r7, #20]
 8010f4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8010f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f52:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8010f56:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010f5a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8010f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f62:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8010f66:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8010f6a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8010f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f72:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8010f76:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010f7a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8010f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f82:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8010f86:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8010f8a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8010f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f92:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8010f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010f9a:	00db      	lsls	r3, r3, #3
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	4413      	add	r3, r2
 8010fa0:	ed97 7a07 	vldr	s14, [r7, #28]
 8010fa4:	edd7 7a06 	vldr	s15, [r7, #24]
 8010fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fac:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8010fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010fb4:	00db      	lsls	r3, r3, #3
 8010fb6:	3304      	adds	r3, #4
 8010fb8:	68fa      	ldr	r2, [r7, #12]
 8010fba:	4413      	add	r3, r2
 8010fbc:	ed97 7a05 	vldr	s14, [r7, #20]
 8010fc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8010fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fc8:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8010fcc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8010fd0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8010fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fd8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8010fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fe0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8010fe4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8010fe8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8010fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ff0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8010ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ff8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8010ffc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8011000:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011008:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801100c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011010:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8011014:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8011018:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801101c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011020:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011028:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 801102c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011030:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011038:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 801103c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011040:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011048:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 801104c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8011050:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011058:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 801105c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8011060:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011068:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 801106c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011070:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011078:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 801107c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011080:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011088:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 801108c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8011090:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011098:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 801109c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80110a0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80110a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110a8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80110ac:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80110b0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80110b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110b8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80110bc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80110c0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80110c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110c8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80110cc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80110d0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80110d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110d8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80110dc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80110e0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80110e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110e8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 80110ec:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80110f0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80110f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80110fc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011100:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011108:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 801110c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011110:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011118:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 801111c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011120:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011128:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 801112c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8011130:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011138:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 801113c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8011140:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011148:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 801114c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8011150:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011158:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 801115c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8011160:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011168:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 801116c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011170:	00db      	lsls	r3, r3, #3
 8011172:	68fa      	ldr	r2, [r7, #12]
 8011174:	4413      	add	r3, r2
 8011176:	ed97 7a07 	vldr	s14, [r7, #28]
 801117a:	edd7 7a06 	vldr	s15, [r7, #24]
 801117e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011182:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8011186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801118a:	00db      	lsls	r3, r3, #3
 801118c:	3304      	adds	r3, #4
 801118e:	68fa      	ldr	r2, [r7, #12]
 8011190:	4413      	add	r3, r2
 8011192:	ed97 7a05 	vldr	s14, [r7, #20]
 8011196:	edd7 7a04 	vldr	s15, [r7, #16]
 801119a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801119e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80111a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80111a6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80111aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111ae:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80111b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80111b6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80111ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111be:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80111c2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80111c6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80111ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111ce:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80111d2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80111d6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80111da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111de:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80111e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80111e6:	00db      	lsls	r3, r3, #3
 80111e8:	68fa      	ldr	r2, [r7, #12]
 80111ea:	4413      	add	r3, r2
 80111ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80111f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80111f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111f8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80111fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011200:	00db      	lsls	r3, r3, #3
 8011202:	3304      	adds	r3, #4
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	4413      	add	r3, r2
 8011208:	ed97 7a05 	vldr	s14, [r7, #20]
 801120c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011214:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8011218:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801121c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011224:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8011228:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801122c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011234:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8011238:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801123c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011244:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8011248:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801124c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011254:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8011258:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801125c:	00db      	lsls	r3, r3, #3
 801125e:	68fa      	ldr	r2, [r7, #12]
 8011260:	4413      	add	r3, r2
 8011262:	ed97 7a07 	vldr	s14, [r7, #28]
 8011266:	edd7 7a06 	vldr	s15, [r7, #24]
 801126a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801126e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8011272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011276:	00db      	lsls	r3, r3, #3
 8011278:	3304      	adds	r3, #4
 801127a:	68fa      	ldr	r2, [r7, #12]
 801127c:	4413      	add	r3, r2
 801127e:	ed97 7a05 	vldr	s14, [r7, #20]
 8011282:	edd7 7a04 	vldr	s15, [r7, #16]
 8011286:	ee77 7a67 	vsub.f32	s15, s14, s15
 801128a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 801128e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8011292:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8011296:	ee67 7a27 	vmul.f32	s15, s14, s15
 801129a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 801129e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80112a2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80112a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112aa:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80112ae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80112b2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80112b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112ba:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80112be:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80112c2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80112c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112ca:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80112ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80112d2:	00db      	lsls	r3, r3, #3
 80112d4:	68fa      	ldr	r2, [r7, #12]
 80112d6:	4413      	add	r3, r2
 80112d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80112dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80112e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112e4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80112e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80112ec:	00db      	lsls	r3, r3, #3
 80112ee:	3304      	adds	r3, #4
 80112f0:	68fa      	ldr	r2, [r7, #12]
 80112f2:	4413      	add	r3, r2
 80112f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80112f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80112fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011300:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8011304:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011308:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801130c:	4413      	add	r3, r2
 801130e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8011312:	897b      	ldrh	r3, [r7, #10]
 8011314:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011318:	429a      	cmp	r2, r3
 801131a:	f4ff abba 	bcc.w	8010a92 <arm_radix8_butterfly_f32+0x746>

         j++;
 801131e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011322:	3301      	adds	r3, #1
 8011324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8011328:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801132c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011330:	429a      	cmp	r2, r3
 8011332:	f4ff ab2c 	bcc.w	801098e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8011336:	893b      	ldrh	r3, [r7, #8]
 8011338:	00db      	lsls	r3, r3, #3
 801133a:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 801133c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011340:	2b07      	cmp	r3, #7
 8011342:	f63f a813 	bhi.w	801036c <arm_radix8_butterfly_f32+0x20>
}
 8011346:	e000      	b.n	801134a <arm_radix8_butterfly_f32+0xffe>
         break;
 8011348:	bf00      	nop
}
 801134a:	bf00      	nop
 801134c:	37f4      	adds	r7, #244	; 0xf4
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop

08011358 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8011358:	b480      	push	{r7}
 801135a:	b095      	sub	sp, #84	; 0x54
 801135c:	af00      	add	r7, sp, #0
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	695b      	ldr	r3, [r3, #20]
 8011368:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	881b      	ldrh	r3, [r3, #0]
 8011376:	3b01      	subs	r3, #1
 8011378:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 801137a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8011380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8011386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 801138c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8011392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011394:	1d1a      	adds	r2, r3, #4
 8011396:	64ba      	str	r2, [r7, #72]	; 0x48
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 801139c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801139e:	1d1a      	adds	r2, r3, #4
 80113a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80113a6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80113aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80113ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80113b6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80113ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80113be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113c2:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80113c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80113ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80113ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	1d1a      	adds	r2, r3, #4
 80113d6:	607a      	str	r2, [r7, #4]
 80113d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80113dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80113e0:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80113e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80113e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80113ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	1d1a      	adds	r2, r3, #4
 80113f4:	607a      	str	r2, [r7, #4]
 80113f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80113fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80113fe:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8011402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011404:	00db      	lsls	r3, r3, #3
 8011406:	68ba      	ldr	r2, [r7, #8]
 8011408:	4413      	add	r3, r2
 801140a:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 801140c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801140e:	3308      	adds	r3, #8
 8011410:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8011412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8011418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 801141e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8011424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 801142a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801142c:	1d1a      	adds	r2, r3, #4
 801142e:	64ba      	str	r2, [r7, #72]	; 0x48
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8011434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011436:	1d1a      	adds	r2, r3, #4
 8011438:	64ba      	str	r2, [r7, #72]	; 0x48
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 801143e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011442:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8011446:	ee77 7a67 	vsub.f32	s15, s14, s15
 801144a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 801144e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011452:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8011456:	ee77 7a27 	vadd.f32	s15, s14, s15
 801145a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 801145e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011462:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011466:	ee67 7a27 	vmul.f32	s15, s14, s15
 801146a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 801146e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011472:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011476:	ee67 7a27 	vmul.f32	s15, s14, s15
 801147a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 801147e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011482:	edd7 7a08 	vldr	s15, [r7, #32]
 8011486:	ee67 7a27 	vmul.f32	s15, s14, s15
 801148a:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 801148e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011492:	edd7 7a08 	vldr	s15, [r7, #32]
 8011496:	ee67 7a27 	vmul.f32	s15, s14, s15
 801149a:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 801149e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80114a2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80114a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80114aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80114ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80114b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80114b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	1d1a      	adds	r2, r3, #4
 80114be:	607a      	str	r2, [r7, #4]
 80114c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80114c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114c8:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80114cc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80114d0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80114d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80114d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80114dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80114e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80114e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	1d1a      	adds	r2, r3, #4
 80114ec:	607a      	str	r2, [r7, #4]
 80114ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80114f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114f6:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 80114fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114fc:	3308      	adds	r3, #8
 80114fe:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8011500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011502:	3b08      	subs	r3, #8
 8011504:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8011506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011508:	3b01      	subs	r3, #1
 801150a:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 801150c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801150e:	2b00      	cmp	r3, #0
 8011510:	f73f af7f 	bgt.w	8011412 <stage_rfft_f32+0xba>
}
 8011514:	bf00      	nop
 8011516:	bf00      	nop
 8011518:	3754      	adds	r7, #84	; 0x54
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr

08011522 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8011522:	b480      	push	{r7}
 8011524:	b095      	sub	sp, #84	; 0x54
 8011526:	af00      	add	r7, sp, #0
 8011528:	60f8      	str	r0, [r7, #12]
 801152a:	60b9      	str	r1, [r7, #8]
 801152c:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	695b      	ldr	r3, [r3, #20]
 8011532:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	881b      	ldrh	r3, [r3, #0]
 8011540:	3b01      	subs	r3, #1
 8011542:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8011544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 801154a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8011550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011552:	3308      	adds	r3, #8
 8011554:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8011556:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801155a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801155e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	1d1a      	adds	r2, r3, #4
 8011566:	607a      	str	r2, [r7, #4]
 8011568:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801156c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011570:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8011574:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011578:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801157c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	1d1a      	adds	r2, r3, #4
 8011584:	607a      	str	r2, [r7, #4]
 8011586:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801158a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801158e:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8011592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011594:	00db      	lsls	r3, r3, #3
 8011596:	68ba      	ldr	r2, [r7, #8]
 8011598:	4413      	add	r3, r2
 801159a:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 801159c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801159e:	3308      	adds	r3, #8
 80115a0:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 80115a2:	e07c      	b.n	801169e <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80115a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80115aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 80115b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 80115b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115b8:	685b      	ldr	r3, [r3, #4]
 80115ba:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 80115bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115be:	1d1a      	adds	r2, r3, #4
 80115c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80115c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115c8:	1d1a      	adds	r2, r3, #4
 80115ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 80115d0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80115d4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80115d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 80115e0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80115e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80115e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115ec:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80115f0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80115f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80115f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115fc:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8011600:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011604:	edd7 7a08 	vldr	s15, [r7, #32]
 8011608:	ee67 7a27 	vmul.f32	s15, s14, s15
 801160c:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8011610:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011614:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011618:	ee67 7a27 	vmul.f32	s15, s14, s15
 801161c:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8011620:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011624:	edd7 7a08 	vldr	s15, [r7, #32]
 8011628:	ee67 7a27 	vmul.f32	s15, s14, s15
 801162c:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8011630:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011634:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8011638:	ee37 7a27 	vadd.f32	s14, s14, s15
 801163c:	edd7 7a07 	vldr	s15, [r7, #28]
 8011640:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011644:	edd7 7a06 	vldr	s15, [r7, #24]
 8011648:	ee77 7a67 	vsub.f32	s15, s14, s15
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	1d1a      	adds	r2, r3, #4
 8011650:	607a      	str	r2, [r7, #4]
 8011652:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011656:	ee67 7a87 	vmul.f32	s15, s15, s14
 801165a:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 801165e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011662:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8011666:	ee37 7a67 	vsub.f32	s14, s14, s15
 801166a:	edd7 7a05 	vldr	s15, [r7, #20]
 801166e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011672:	edd7 7a04 	vldr	s15, [r7, #16]
 8011676:	ee77 7a67 	vsub.f32	s15, s14, s15
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	1d1a      	adds	r2, r3, #4
 801167e:	607a      	str	r2, [r7, #4]
 8011680:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011688:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 801168c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801168e:	3308      	adds	r3, #8
 8011690:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8011692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011694:	3b08      	subs	r3, #8
 8011696:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8011698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801169a:	3b01      	subs	r3, #1
 801169c:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 801169e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	f73f af7f 	bgt.w	80115a4 <merge_rfft_f32+0x82>
   }

}
 80116a6:	bf00      	nop
 80116a8:	bf00      	nop
 80116aa:	3754      	adds	r7, #84	; 0x54
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr

080116b4 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b086      	sub	sp, #24
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	607a      	str	r2, [r7, #4]
 80116c0:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80116c6:	78fb      	ldrb	r3, [r7, #3]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d00b      	beq.n	80116e4 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80116cc:	687a      	ldr	r2, [r7, #4]
 80116ce:	68b9      	ldr	r1, [r7, #8]
 80116d0:	68f8      	ldr	r0, [r7, #12]
 80116d2:	f7ff ff26 	bl	8011522 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80116d6:	78fa      	ldrb	r2, [r7, #3]
 80116d8:	2301      	movs	r3, #1
 80116da:	6879      	ldr	r1, [r7, #4]
 80116dc:	6978      	ldr	r0, [r7, #20]
 80116de:	f7fe fd7b 	bl	80101d8 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80116e2:	e00a      	b.n	80116fa <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80116e4:	78fa      	ldrb	r2, [r7, #3]
 80116e6:	2301      	movs	r3, #1
 80116e8:	68b9      	ldr	r1, [r7, #8]
 80116ea:	6978      	ldr	r0, [r7, #20]
 80116ec:	f7fe fd74 	bl	80101d8 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	68b9      	ldr	r1, [r7, #8]
 80116f4:	68f8      	ldr	r0, [r7, #12]
 80116f6:	f7ff fe2f 	bl	8011358 <stage_rfft_f32>
}
 80116fa:	bf00      	nop
 80116fc:	3718      	adds	r7, #24
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}

08011702 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 8011702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011704:	b093      	sub	sp, #76	; 0x4c
 8011706:	af0a      	add	r7, sp, #40	; 0x28
 8011708:	6178      	str	r0, [r7, #20]
 801170a:	6139      	str	r1, [r7, #16]
 801170c:	60fa      	str	r2, [r7, #12]
 801170e:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 8011716:	e033      	b.n	8011780 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	607b      	str	r3, [r7, #4]
 801171e:	693a      	ldr	r2, [r7, #16]
 8011720:	6852      	ldr	r2, [r2, #4]
 8011722:	6939      	ldr	r1, [r7, #16]
 8011724:	6889      	ldr	r1, [r1, #8]
 8011726:	68f8      	ldr	r0, [r7, #12]
 8011728:	6800      	ldr	r0, [r0, #0]
 801172a:	68fc      	ldr	r4, [r7, #12]
 801172c:	6864      	ldr	r4, [r4, #4]
 801172e:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8011730:	682d      	ldr	r5, [r5, #0]
 8011732:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8011734:	68f6      	ldr	r6, [r6, #12]
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	603b      	str	r3, [r7, #0]
 801173c:	693b      	ldr	r3, [r7, #16]
 801173e:	691b      	ldr	r3, [r3, #16]
 8011740:	9308      	str	r3, [sp, #32]
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	9307      	str	r3, [sp, #28]
 8011746:	9606      	str	r6, [sp, #24]
 8011748:	9505      	str	r5, [sp, #20]
 801174a:	9404      	str	r4, [sp, #16]
 801174c:	9003      	str	r0, [sp, #12]
 801174e:	9102      	str	r1, [sp, #8]
 8011750:	9201      	str	r2, [sp, #4]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801175a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801175c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801175e:	f000 f822 	bl	80117a6 <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 8011762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	461a      	mov	r2, r3
 8011768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176a:	4413      	add	r3, r2
 801176c:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 801176e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011770:	68db      	ldr	r3, [r3, #12]
 8011772:	461a      	mov	r2, r3
 8011774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011776:	4413      	add	r3, r2
 8011778:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	3b01      	subs	r3, #1
 801177e:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 8011780:	69fb      	ldr	r3, [r7, #28]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1c8      	bne.n	8011718 <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 8011786:	2300      	movs	r3, #0
}
 8011788:	4618      	mov	r0, r3
 801178a:	3724      	adds	r7, #36	; 0x24
 801178c:	46bd      	mov	sp, r7
 801178e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011790 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 8011790:	b480      	push	{r7}
 8011792:	b083      	sub	sp, #12
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 8011798:	2300      	movs	r3, #0
}
 801179a:	4618      	mov	r0, r3
 801179c:	370c      	adds	r7, #12
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr

080117a6 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 80117a6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80117aa:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 80117b4:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 80117b8:	6020      	str	r0, [r4, #0]
 80117ba:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 80117be:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 80117c2:	6001      	str	r1, [r0, #0]
 80117c4:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80117c8:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 80117cc:	600a      	str	r2, [r1, #0]
 80117ce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80117d2:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 80117d6:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 80117d8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80117dc:	3b04      	subs	r3, #4
 80117de:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 80117e2:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80117e6:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 80117ea:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80117ee:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 80117f2:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 80117f6:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 80117fa:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 80117fe:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 8011802:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 8011806:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 801180a:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 801180e:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 8011812:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 8011816:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 801181a:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 801181e:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8011822:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 8011826:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 801182a:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 801182e:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 8011832:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 8011836:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 801183a:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 801183e:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8011842:	2300      	movs	r3, #0
 8011844:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8011848:	f001 bd13 	b.w	8013272 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801184c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011850:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 8011854:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011858:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 8011860:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011864:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 8011868:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801186c:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 8011874:	2300      	movs	r3, #0
 8011876:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 801187a:	2300      	movs	r3, #0
 801187c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 8011880:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011884:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d01b      	beq.n	80118c6 <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 801188e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011892:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8011896:	6819      	ldr	r1, [r3, #0]
 8011898:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801189c:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 80118a0:	1d0b      	adds	r3, r1, #4
 80118a2:	6013      	str	r3, [r2, #0]
 80118a4:	680b      	ldr	r3, [r1, #0]
 80118a6:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 80118aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118ae:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80118b2:	6819      	ldr	r1, [r3, #0]
 80118b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118b8:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 80118bc:	1d0b      	adds	r3, r1, #4
 80118be:	6013      	str	r3, [r2, #0]
 80118c0:	680b      	ldr	r3, [r1, #0]
 80118c2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 80118c6:	2300      	movs	r3, #0
 80118c8:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 80118cc:	f001 b9db 	b.w	8012c86 <arm_nn_vec_mat_mult_t_s8+0x14e0>
 80118d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118d4:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 80118d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80118dc:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 80118de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118e2:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	461a      	mov	r2, r3
 80118ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118f2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80118f6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80118f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118fc:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	1d1a      	adds	r2, r3, #4
 8011906:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801190a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	601a      	str	r2, [r3, #0]

    return (val);
 8011912:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011916:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801191a:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801191c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8011920:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011924:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011928:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 801192c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011930:	6013      	str	r3, [r2, #0]
 8011932:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011936:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801193a:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801193c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011940:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011944:	681a      	ldr	r2, [r3, #0]
 8011946:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801194a:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	fa22 f283 	sxtab16	r2, r2, r3
 8011954:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011958:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801195c:	601a      	str	r2, [r3, #0]
  return(result);
 801195e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011962:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801196c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011970:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8011974:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011978:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801197a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801197e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	461a      	mov	r2, r3
 801198a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801198e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011992:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011994:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011998:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	1d1a      	adds	r2, r3, #4
 80119a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119a6:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	601a      	str	r2, [r3, #0]
    return (val);
 80119ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119b2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80119b6:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80119b8:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80119bc:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 80119c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119c4:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119c8:	601a      	str	r2, [r3, #0]
 80119ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119ce:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 80119d2:	2308      	movs	r3, #8
 80119d4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80119d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119da:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 80119de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119e2:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	f003 031f 	and.w	r3, r3, #31
 80119ec:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80119ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119f2:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d105      	bne.n	8011a08 <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 80119fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a00:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011a04:	6819      	ldr	r1, [r3, #0]
 8011a06:	e00b      	b.n	8011a20 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011a08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a0c:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8011a10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a14:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8011a18:	6812      	ldr	r2, [r2, #0]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	fa62 f103 	ror.w	r1, r2, r3
 8011a20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a24:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 8011a28:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011a2c:	6013      	str	r3, [r2, #0]
 8011a2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a32:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011a36:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011a38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a3c:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a46:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	fa22 f283 	sxtab16	r2, r2, r3
 8011a50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a54:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011a58:	601a      	str	r2, [r3, #0]
  return(result);
 8011a5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a5e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8011a68:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8011a6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a70:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 8011a74:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8011a78:	6013      	str	r3, [r2, #0]
 8011a7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a7e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8011a82:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011a84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a88:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011a8c:	681a      	ldr	r2, [r3, #0]
 8011a8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a92:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	fa22 f283 	sxtab16	r2, r2, r3
 8011a9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011aa0:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8011aa4:	601a      	str	r2, [r3, #0]
  return(result);
 8011aa6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011aaa:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8011ab4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ab8:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8011ac2:	441a      	add	r2, r3
 8011ac4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ac8:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8011acc:	601a      	str	r2, [r3, #0]
 8011ace:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ad2:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 8011adc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ae0:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8011ae4:	601a      	str	r2, [r3, #0]

    return (val);
 8011ae6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011aea:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8011af4:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8011af8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011afc:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8011b00:	601a      	str	r2, [r3, #0]
 8011b02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b06:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8011b0a:	2308      	movs	r3, #8
 8011b0c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011b0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b12:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8011b16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b1a:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	f003 031f 	and.w	r3, r3, #31
 8011b24:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011b26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b2a:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d105      	bne.n	8011b40 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 8011b34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b38:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8011b3c:	6819      	ldr	r1, [r3, #0]
 8011b3e:	e00b      	b.n	8011b58 <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011b40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b44:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8011b48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b4c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8011b50:	6812      	ldr	r2, [r2, #0]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	fa62 f103 	ror.w	r1, r2, r3
 8011b58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b5c:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8011b60:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8011b64:	6013      	str	r3, [r2, #0]
 8011b66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b6a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8011b6e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011b70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b74:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b7e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	fa22 f283 	sxtab16	r2, r2, r3
 8011b88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b8c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011b90:	601a      	str	r2, [r3, #0]
  return(result);
 8011b92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b96:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8011ba0:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8011ba4:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8011ba8:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8011bac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bb0:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8011bb4:	601a      	str	r2, [r3, #0]
 8011bb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bba:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8011bbe:	6019      	str	r1, [r3, #0]
 8011bc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bc4:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8011bc8:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011bca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bce:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8011bd2:	6819      	ldr	r1, [r3, #0]
 8011bd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bd8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8011bdc:	681a      	ldr	r2, [r3, #0]
 8011bde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011be2:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	fb21 3202 	smlad	r2, r1, r2, r3
 8011bec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bf0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8011bf4:	601a      	str	r2, [r3, #0]
  return(result);
 8011bf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bfa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8011c04:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8011c08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c0c:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8011c10:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011c14:	6013      	str	r3, [r2, #0]
 8011c16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c1a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8011c1e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011c20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c24:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8011c28:	681a      	ldr	r2, [r3, #0]
 8011c2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c2e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	fa22 f283 	sxtab16	r2, r2, r3
 8011c38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c3c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8011c40:	601a      	str	r2, [r3, #0]
  return(result);
 8011c42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c46:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8011c50:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8011c54:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011c58:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8011c5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c60:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8011c64:	601a      	str	r2, [r3, #0]
 8011c66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c6a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011c6e:	6019      	str	r1, [r3, #0]
 8011c70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c74:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011c78:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011c7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c7e:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8011c82:	6819      	ldr	r1, [r3, #0]
 8011c84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c88:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011c8c:	681a      	ldr	r2, [r3, #0]
 8011c8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c92:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	fb21 3202 	smlad	r2, r1, r2, r3
 8011c9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ca0:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011ca4:	601a      	str	r2, [r3, #0]
  return(result);
 8011ca6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011caa:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8011cb4:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8011cb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cbc:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cc6:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8011cca:	2308      	movs	r3, #8
 8011ccc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011cce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cd2:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8011cd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cda:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f003 031f 	and.w	r3, r3, #31
 8011ce4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011ce6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cea:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d105      	bne.n	8011d00 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 8011cf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cf8:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8011cfc:	6819      	ldr	r1, [r3, #0]
 8011cfe:	e00b      	b.n	8011d18 <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011d00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d04:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8011d08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d0c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8011d10:	6812      	ldr	r2, [r2, #0]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	fa62 f103 	ror.w	r1, r2, r3
 8011d18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d1c:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8011d20:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011d24:	6013      	str	r3, [r2, #0]
 8011d26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d2a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011d2e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011d30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d34:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8011d38:	681a      	ldr	r2, [r3, #0]
 8011d3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d3e:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	fa22 f283 	sxtab16	r2, r2, r3
 8011d48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d4c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8011d50:	601a      	str	r2, [r3, #0]
  return(result);
 8011d52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d56:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8011d60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d64:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8011d68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011d6c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8011d6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d72:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d82:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8011d86:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011d88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d8c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	1d1a      	adds	r2, r3, #4
 8011d96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d9a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	601a      	str	r2, [r3, #0]
    return (val);
 8011da2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011da6:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8011daa:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8011dac:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8011db0:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8011db4:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8011db8:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8011dbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dc0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011dc4:	601a      	str	r2, [r3, #0]
 8011dc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dca:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011dce:	6019      	str	r1, [r3, #0]
 8011dd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dd4:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8011dd8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011dda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dde:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011de2:	6819      	ldr	r1, [r3, #0]
 8011de4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011de8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011dec:	681a      	ldr	r2, [r3, #0]
 8011dee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011df2:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	fb21 3202 	smlad	r2, r1, r2, r3
 8011dfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e00:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011e04:	601a      	str	r2, [r3, #0]
  return(result);
 8011e06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e0a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8011e14:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8011e18:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8011e1c:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8011e20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e24:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011e28:	601a      	str	r2, [r3, #0]
 8011e2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e2e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8011e32:	6019      	str	r1, [r3, #0]
 8011e34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e38:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8011e3c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011e3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e42:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011e46:	6819      	ldr	r1, [r3, #0]
 8011e48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e4c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8011e50:	681a      	ldr	r2, [r3, #0]
 8011e52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e56:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	fb21 3202 	smlad	r2, r1, r2, r3
 8011e60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e64:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8011e68:	601a      	str	r2, [r3, #0]
  return(result);
 8011e6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e6e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8011e78:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011e7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e80:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8011e84:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011e88:	6013      	str	r3, [r2, #0]
 8011e8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e8e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8011e92:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011e94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e98:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8011e9c:	681a      	ldr	r2, [r3, #0]
 8011e9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ea2:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	fa22 f283 	sxtab16	r2, r2, r3
 8011eac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011eb0:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8011eb4:	601a      	str	r2, [r3, #0]
  return(result);
 8011eb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011eba:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8011ec4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ec8:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8011ecc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011ed0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8011ed2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ed6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ee6:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8011eea:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011eec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ef0:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	1d1a      	adds	r2, r3, #4
 8011efa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011efe:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	601a      	str	r2, [r3, #0]
    return (val);
 8011f06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f0a:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8011f0e:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8011f10:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8011f14:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8011f18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f1c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011f20:	601a      	str	r2, [r3, #0]
 8011f22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f26:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8011f2a:	2308      	movs	r3, #8
 8011f2c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011f2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f32:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8011f36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f3a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	f003 031f 	and.w	r3, r3, #31
 8011f44:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011f46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f4a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d105      	bne.n	8011f60 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 8011f54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f58:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011f5c:	6819      	ldr	r1, [r3, #0]
 8011f5e:	e00b      	b.n	8011f78 <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011f60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f64:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8011f68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f6c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8011f70:	6812      	ldr	r2, [r2, #0]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	fa62 f103 	ror.w	r1, r2, r3
 8011f78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f7c:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8011f80:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011f84:	6013      	str	r3, [r2, #0]
 8011f86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f8a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8011f8e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011f90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f94:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f9e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	fa22 f283 	sxtab16	r2, r2, r3
 8011fa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8011fb0:	601a      	str	r2, [r3, #0]
  return(result);
 8011fb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fb6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8011fc0:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8011fc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fc8:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8011fcc:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8011fd0:	6013      	str	r3, [r2, #0]
 8011fd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fd6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8011fda:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011fdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fe0:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8011fe4:	681a      	ldr	r2, [r3, #0]
 8011fe6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fea:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	fa22 f283 	sxtab16	r2, r2, r3
 8011ff4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ff8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8011ffc:	601a      	str	r2, [r3, #0]
  return(result);
 8011ffe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012002:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801200c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012010:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012014:	681a      	ldr	r2, [r3, #0]
 8012016:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801201a:	441a      	add	r2, r3
 801201c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012020:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8012024:	601a      	str	r2, [r3, #0]
 8012026:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801202a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8012034:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012038:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 801203c:	601a      	str	r2, [r3, #0]
    return (val);
 801203e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012042:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801204c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012050:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012054:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012058:	601a      	str	r2, [r3, #0]
 801205a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801205e:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8012062:	2308      	movs	r3, #8
 8012064:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012066:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801206a:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801206e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012072:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f003 031f 	and.w	r3, r3, #31
 801207c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801207e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012082:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d105      	bne.n	8012098 <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 801208c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012090:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012094:	6819      	ldr	r1, [r3, #0]
 8012096:	e00b      	b.n	80120b0 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012098:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801209c:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80120a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120a4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80120a8:	6812      	ldr	r2, [r2, #0]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	fa62 f103 	ror.w	r1, r2, r3
 80120b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120b4:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 80120b8:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80120bc:	6013      	str	r3, [r2, #0]
 80120be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120c2:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80120c6:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80120c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120cc:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80120d0:	681a      	ldr	r2, [r3, #0]
 80120d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120d6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	fa22 f283 	sxtab16	r2, r2, r3
 80120e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120e4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80120e8:	601a      	str	r2, [r3, #0]
  return(result);
 80120ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120ee:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 80120f8:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80120fc:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8012100:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012104:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012108:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801210c:	601a      	str	r2, [r3, #0]
 801210e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012112:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8012116:	6019      	str	r1, [r3, #0]
 8012118:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801211c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012120:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012122:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012126:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801212a:	6819      	ldr	r1, [r3, #0]
 801212c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012130:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801213a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	fb21 3202 	smlad	r2, r1, r2, r3
 8012144:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012148:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801214c:	601a      	str	r2, [r3, #0]
  return(result);
 801214e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012152:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 801215c:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8012160:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012164:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8012168:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801216c:	6013      	str	r3, [r2, #0]
 801216e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012172:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012176:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012178:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801217c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8012180:	681a      	ldr	r2, [r3, #0]
 8012182:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012186:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	fa22 f283 	sxtab16	r2, r2, r3
 8012190:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012194:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012198:	601a      	str	r2, [r3, #0]
  return(result);
 801219a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801219e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 80121a8:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80121ac:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80121b0:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 80121b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121b8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80121bc:	601a      	str	r2, [r3, #0]
 80121be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121c2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80121c6:	6019      	str	r1, [r3, #0]
 80121c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121cc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80121d0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80121d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121d6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80121da:	6819      	ldr	r1, [r3, #0]
 80121dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121e0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80121e4:	681a      	ldr	r2, [r3, #0]
 80121e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121ea:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	fb21 3202 	smlad	r2, r1, r2, r3
 80121f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121f8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80121fc:	601a      	str	r2, [r3, #0]
  return(result);
 80121fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012202:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801220c:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012210:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012214:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8012218:	601a      	str	r2, [r3, #0]
 801221a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801221e:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8012222:	2308      	movs	r3, #8
 8012224:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012226:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801222a:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 801222e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012232:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	f003 031f 	and.w	r3, r3, #31
 801223c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801223e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012242:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d105      	bne.n	8012258 <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 801224c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012250:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8012254:	6819      	ldr	r1, [r3, #0]
 8012256:	e00b      	b.n	8012270 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012258:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801225c:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8012260:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012264:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8012268:	6812      	ldr	r2, [r2, #0]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	fa62 f103 	ror.w	r1, r2, r3
 8012270:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012274:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 8012278:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801227c:	6013      	str	r3, [r2, #0]
 801227e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8012286:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012288:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801228c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	fa22 f283 	sxtab16	r2, r2, r3
 80122a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122a4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80122a8:	601a      	str	r2, [r3, #0]
  return(result);
 80122aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122ae:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 80122b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122bc:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 80122c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80122c4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80122c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122ca:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	461a      	mov	r2, r3
 80122d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122da:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 80122de:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80122e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122e4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	1d1a      	adds	r2, r3, #4
 80122ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122f2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	601a      	str	r2, [r3, #0]
    return (val);
 80122fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122fe:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8012302:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8012304:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8012308:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801230c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8012310:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012314:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012318:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801231c:	601a      	str	r2, [r3, #0]
 801231e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012322:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8012326:	6019      	str	r1, [r3, #0]
 8012328:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801232c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8012330:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012332:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012336:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801233a:	6819      	ldr	r1, [r3, #0]
 801233c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012340:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8012344:	681a      	ldr	r2, [r3, #0]
 8012346:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801234a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	fb21 3202 	smlad	r2, r1, r2, r3
 8012354:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012358:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801235c:	601a      	str	r2, [r3, #0]
  return(result);
 801235e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012362:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 801236c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012370:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8012374:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012378:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801237c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8012380:	601a      	str	r2, [r3, #0]
 8012382:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012386:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801238a:	6019      	str	r1, [r3, #0]
 801238c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012390:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8012394:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012396:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801239a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801239e:	6819      	ldr	r1, [r3, #0]
 80123a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	fb21 3202 	smlad	r2, r1, r2, r3
 80123b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80123c0:	601a      	str	r2, [r3, #0]
  return(result);
 80123c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 80123d0:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80123d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123d8:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 80123dc:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80123e0:	6013      	str	r3, [r2, #0]
 80123e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123e6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80123ea:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80123ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123f0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80123f4:	681a      	ldr	r2, [r3, #0]
 80123f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123fa:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	fa22 f283 	sxtab16	r2, r2, r3
 8012404:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012408:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801240c:	601a      	str	r2, [r3, #0]
  return(result);
 801240e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012412:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801241c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012420:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8012424:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012428:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801242a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801242e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	461a      	mov	r2, r3
 801243a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801243e:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8012442:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012444:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012448:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	1d1a      	adds	r2, r3, #4
 8012452:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012456:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	601a      	str	r2, [r3, #0]
    return (val);
 801245e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012462:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8012466:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8012468:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801246c:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8012470:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012474:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8012478:	601a      	str	r2, [r3, #0]
 801247a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801247e:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 8012482:	2308      	movs	r3, #8
 8012484:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012486:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801248a:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 801248e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012492:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f003 031f 	and.w	r3, r3, #31
 801249c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801249e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124a2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d105      	bne.n	80124b8 <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 80124ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80124b4:	6819      	ldr	r1, [r3, #0]
 80124b6:	e00b      	b.n	80124d0 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 80124b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124bc:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 80124c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80124c8:	6812      	ldr	r2, [r2, #0]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	fa62 f103 	ror.w	r1, r2, r3
 80124d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124d4:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 80124d8:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80124dc:	6013      	str	r3, [r2, #0]
 80124de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124e2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80124e6:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80124e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124ec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80124f0:	681a      	ldr	r2, [r3, #0]
 80124f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	fa22 f283 	sxtab16	r2, r2, r3
 8012500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012504:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8012508:	601a      	str	r2, [r3, #0]
  return(result);
 801250a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801250e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8012518:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801251c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012520:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8012524:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012528:	6013      	str	r3, [r2, #0]
 801252a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801252e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012532:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012534:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012538:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801253c:	681a      	ldr	r2, [r3, #0]
 801253e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012542:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	fa22 f283 	sxtab16	r2, r2, r3
 801254c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012550:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8012554:	601a      	str	r2, [r3, #0]
  return(result);
 8012556:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801255a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8012564:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012568:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8012572:	441a      	add	r2, r3
 8012574:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012578:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801257c:	601a      	str	r2, [r3, #0]
 801257e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012582:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801258c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012590:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8012594:	601a      	str	r2, [r3, #0]
    return (val);
 8012596:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801259a:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 80125a4:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80125a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125ac:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80125b0:	601a      	str	r2, [r3, #0]
 80125b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125b6:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80125ba:	2308      	movs	r3, #8
 80125bc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80125be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125c2:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80125c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125ca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f003 031f 	and.w	r3, r3, #31
 80125d4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80125d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125da:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d105      	bne.n	80125f0 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 80125e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125e8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80125ec:	6819      	ldr	r1, [r3, #0]
 80125ee:	e00b      	b.n	8012608 <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 80125f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125f4:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80125f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125fc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8012600:	6812      	ldr	r2, [r2, #0]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	fa62 f103 	ror.w	r1, r2, r3
 8012608:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801260c:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8012610:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012614:	6013      	str	r3, [r2, #0]
 8012616:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801261a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801261e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012620:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012624:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8012628:	681a      	ldr	r2, [r3, #0]
 801262a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801262e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	fa22 f283 	sxtab16	r2, r2, r3
 8012638:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801263c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8012640:	601a      	str	r2, [r3, #0]
  return(result);
 8012642:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012646:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8012650:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012654:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8012658:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801265c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012660:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8012664:	601a      	str	r2, [r3, #0]
 8012666:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801266a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801266e:	6019      	str	r1, [r3, #0]
 8012670:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012674:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8012678:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801267a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801267e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8012682:	6819      	ldr	r1, [r3, #0]
 8012684:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012688:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801268c:	681a      	ldr	r2, [r3, #0]
 801268e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012692:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	fb21 3202 	smlad	r2, r1, r2, r3
 801269c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126a0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80126a4:	601a      	str	r2, [r3, #0]
  return(result);
 80126a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 80126b4:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80126b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126bc:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80126c0:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80126c4:	6013      	str	r3, [r2, #0]
 80126c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126ca:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80126ce:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80126d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126d4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126de:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	fa22 f283 	sxtab16	r2, r2, r3
 80126e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126ec:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80126f0:	601a      	str	r2, [r3, #0]
  return(result);
 80126f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126f6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8012700:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012704:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012708:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801270c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012710:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8012714:	601a      	str	r2, [r3, #0]
 8012716:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801271a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801271e:	6019      	str	r1, [r3, #0]
 8012720:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012724:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8012728:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801272a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801272e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8012732:	6819      	ldr	r1, [r3, #0]
 8012734:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012738:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801273c:	681a      	ldr	r2, [r3, #0]
 801273e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012742:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	fb21 3202 	smlad	r2, r1, r2, r3
 801274c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012750:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8012754:	601a      	str	r2, [r3, #0]
  return(result);
 8012756:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801275a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8012764:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012768:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801276c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8012770:	601a      	str	r2, [r3, #0]
 8012772:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012776:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801277a:	2308      	movs	r3, #8
 801277c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801277e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012782:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8012786:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801278a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f003 031f 	and.w	r3, r3, #31
 8012794:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012796:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801279a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d105      	bne.n	80127b0 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 80127a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127a8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80127ac:	6819      	ldr	r1, [r3, #0]
 80127ae:	e00b      	b.n	80127c8 <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 80127b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127b4:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80127b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127bc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80127c0:	6812      	ldr	r2, [r2, #0]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	fa62 f103 	ror.w	r1, r2, r3
 80127c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127cc:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 80127d0:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80127d4:	6013      	str	r3, [r2, #0]
 80127d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127da:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80127de:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80127e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127ee:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	fa22 f283 	sxtab16	r2, r2, r3
 80127f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127fc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8012800:	601a      	str	r2, [r3, #0]
  return(result);
 8012802:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012806:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8012810:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012814:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8012818:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801281c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801281e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012822:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	461a      	mov	r2, r3
 801282e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012832:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8012836:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012838:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801283c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	1d1a      	adds	r2, r3, #4
 8012846:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801284a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	601a      	str	r2, [r3, #0]
    return (val);
 8012852:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012856:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 801285a:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801285c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8012860:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012864:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8012868:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801286c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012870:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8012874:	601a      	str	r2, [r3, #0]
 8012876:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801287a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801287e:	6019      	str	r1, [r3, #0]
 8012880:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012884:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8012888:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801288a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801288e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8012892:	6819      	ldr	r1, [r3, #0]
 8012894:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012898:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801289c:	681a      	ldr	r2, [r3, #0]
 801289e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128a2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	fb21 3202 	smlad	r2, r1, r2, r3
 80128ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128b0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80128b4:	601a      	str	r2, [r3, #0]
  return(result);
 80128b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 80128c4:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80128c8:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80128cc:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 80128d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128d4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80128d8:	601a      	str	r2, [r3, #0]
 80128da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80128e2:	6019      	str	r1, [r3, #0]
 80128e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80128ec:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80128ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80128f6:	6819      	ldr	r1, [r3, #0]
 80128f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012900:	681a      	ldr	r2, [r3, #0]
 8012902:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	fb21 3202 	smlad	r2, r1, r2, r3
 8012910:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012914:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8012918:	601a      	str	r2, [r3, #0]
  return(result);
 801291a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801291e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8012928:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801292c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012930:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8012934:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012938:	6013      	str	r3, [r2, #0]
 801293a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801293e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012942:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012944:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012948:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012952:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	fa22 f283 	sxtab16	r2, r2, r3
 801295c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012960:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012964:	601a      	str	r2, [r3, #0]
  return(result);
 8012966:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801296a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8012974:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012978:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 801297c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012980:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012982:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012986:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	461a      	mov	r2, r3
 8012992:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012996:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801299a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801299c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	1d1a      	adds	r2, r3, #4
 80129aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	601a      	str	r2, [r3, #0]
    return (val);
 80129b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129ba:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 80129be:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80129c0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80129c4:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 80129c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80129d0:	601a      	str	r2, [r3, #0]
 80129d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129d6:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 80129da:	2308      	movs	r3, #8
 80129dc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80129de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129e2:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 80129e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	f003 031f 	and.w	r3, r3, #31
 80129f4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80129f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d105      	bne.n	8012a10 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 8012a04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012a0c:	6819      	ldr	r1, [r3, #0]
 8012a0e:	e00b      	b.n	8012a28 <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012a10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a14:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8012a18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012a20:	6812      	ldr	r2, [r2, #0]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	fa62 f103 	ror.w	r1, r2, r3
 8012a28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a2c:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8012a30:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012a34:	6013      	str	r3, [r2, #0]
 8012a36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a3e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012a40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a48:	681a      	ldr	r2, [r3, #0]
 8012a4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	fa22 f283 	sxtab16	r2, r2, r3
 8012a58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a60:	601a      	str	r2, [r3, #0]
  return(result);
 8012a62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8012a70:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012a74:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012a78:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 8012a7c:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012a80:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 8012a84:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8012a88:	fa22 f283 	sxtab16	r2, r2, r3
 8012a8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012a94:	601a      	str	r2, [r3, #0]
  return(result);
 8012a96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8012aa4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012aa8:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012aac:	681a      	ldr	r2, [r3, #0]
 8012aae:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8012ab2:	4413      	add	r3, r2
 8012ab4:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8012ab8:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8012ac0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ac4:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8012ac8:	601a      	str	r2, [r3, #0]
    return (val);
 8012aca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ace:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8012ad8:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 8012adc:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8012ae0:	2308      	movs	r3, #8
 8012ae2:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 8012ae6:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8012aea:	f003 031f 	and.w	r3, r3, #31
 8012aee:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 8012af2:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d102      	bne.n	8012b00 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 8012afa:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8012afe:	e004      	b.n	8012b0a <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012b00:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8012b04:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8012b08:	41da      	rors	r2, r3
 8012b0a:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012b0e:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 8012b12:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b16:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 8012b1a:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8012b1e:	fa22 f383 	sxtab16	r3, r2, r3
 8012b22:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 8012b26:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8012b2a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8012b2e:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8012b32:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 8012b36:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012b3a:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8012b3e:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8012b42:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012b46:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8012b4a:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8012b4e:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8012b52:	fb21 3302 	smlad	r3, r1, r2, r3
 8012b56:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 8012b5a:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8012b5e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8012b62:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012b66:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012b6a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012b6e:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b72:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012b76:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8012b7a:	fa22 f383 	sxtab16	r3, r2, r3
 8012b7e:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 8012b82:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8012b86:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8012b8a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012b8e:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8012b92:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012b96:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 8012b9a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012b9e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012ba2:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8012ba6:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8012baa:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012bae:	fb21 3302 	smlad	r3, r1, r2, r3
 8012bb2:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 8012bb6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012bba:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8012bbe:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8012bc2:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8012bc6:	2308      	movs	r3, #8
 8012bc8:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 8012bcc:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8012bd0:	f003 031f 	and.w	r3, r3, #31
 8012bd4:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 8012bd8:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d102      	bne.n	8012be6 <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 8012be0:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8012be4:	e004      	b.n	8012bf0 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012be6:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8012bea:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8012bee:	41da      	rors	r2, r3
 8012bf0:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012bf4:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8012bf8:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012bfc:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 8012c00:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8012c04:	fa22 f383 	sxtab16	r3, r2, r3
 8012c08:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 8012c0c:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8012c10:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 8012c14:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8012c18:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 8012c1c:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8012c20:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8012c24:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 8012c28:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012c2c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8012c30:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 8012c34:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 8012c38:	fb21 3302 	smlad	r3, r1, r2, r3
 8012c3c:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 8012c40:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8012c44:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8012c48:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012c4c:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012c50:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8012c54:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8012c58:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 8012c5c:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012c60:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8012c64:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 8012c68:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8012c6c:	fb21 3302 	smlad	r3, r1, r2, r3
 8012c70:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 8012c74:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8012c78:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8012c7c:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8012c80:	3310      	adds	r3, #16
 8012c82:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8012c86:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8012c8a:	f1a3 020f 	sub.w	r2, r3, #15
 8012c8e:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8012c92:	4293      	cmp	r3, r2
 8012c94:	f6fe ae1c 	blt.w	80118d0 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8012c98:	e05a      	b.n	8012d50 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8012c9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c9e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	f993 3000 	ldrsb.w	r3, [r3]
 8012ca8:	461a      	mov	r2, r3
 8012caa:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8012cae:	4413      	add	r3, r2
 8012cb0:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 8012cb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cb8:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012cbc:	681a      	ldr	r2, [r3, #0]
 8012cbe:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8012cc2:	4413      	add	r3, r2
 8012cc4:	f993 3000 	ldrsb.w	r3, [r3]
 8012cc8:	461a      	mov	r2, r3
 8012cca:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8012cce:	4413      	add	r3, r2
 8012cd0:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8012cd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cd8:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	f993 3000 	ldrsb.w	r3, [r3]
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8012ce8:	4413      	add	r3, r2
 8012cea:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 8012cee:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8012cf2:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8012cf6:	fb03 f202 	mul.w	r2, r3, r2
 8012cfa:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012cfe:	4413      	add	r3, r2
 8012d00:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 8012d04:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8012d08:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8012d0c:	fb03 f202 	mul.w	r2, r3, r2
 8012d10:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8012d14:	4413      	add	r3, r2
 8012d16:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 8012d1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d1e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	1c5a      	adds	r2, r3, #1
 8012d26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d2a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012d2e:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8012d30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d34:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	1c5a      	adds	r2, r3, #1
 8012d3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d40:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8012d44:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8012d46:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8012d50:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 8012d54:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	db9e      	blt.n	8012c9a <arm_nn_vec_mat_mult_t_s8+0x14f4>
 8012d5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d60:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8012d64:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012d68:	6013      	str	r3, [r2, #0]
 8012d6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d6e:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 8012d72:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8012d76:	6013      	str	r3, [r2, #0]
 8012d78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d7c:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8012d80:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8012d84:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012d86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d8a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8012d94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d98:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	fa03 f202 	lsl.w	r2, r3, r2
 8012da2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012da6:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012daa:	601a      	str	r2, [r3, #0]
 8012dac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012db0:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8012db4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012db8:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012dc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dc4:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8012dc8:	2300      	movs	r3, #0
 8012dca:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8012dcc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012dd0:	461a      	mov	r2, r3
 8012dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012dd6:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8012dd8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012ddc:	461a      	mov	r2, r3
 8012dde:	2300      	movs	r3, #0
 8012de0:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8012de2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012de6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012dea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dee:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	17da      	asrs	r2, r3, #31
 8012df6:	633b      	str	r3, [r7, #48]	; 0x30
 8012df8:	637a      	str	r2, [r7, #52]	; 0x34
 8012dfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dfe:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	17da      	asrs	r2, r3, #31
 8012e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e0e:	fb02 f203 	mul.w	r2, r2, r3
 8012e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e14:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8012e16:	fb04 f303 	mul.w	r3, r4, r3
 8012e1a:	4413      	add	r3, r2
 8012e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e1e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8012e20:	fba2 5604 	umull	r5, r6, r2, r4
 8012e24:	4433      	add	r3, r6
 8012e26:	461e      	mov	r6, r3
 8012e28:	1943      	adds	r3, r0, r5
 8012e2a:	61bb      	str	r3, [r7, #24]
 8012e2c:	eb41 0306 	adc.w	r3, r1, r6
 8012e30:	61fb      	str	r3, [r7, #28]
 8012e32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012e36:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012e3a:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8012e3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e46:	f04f 0000 	mov.w	r0, #0
 8012e4a:	f04f 0100 	mov.w	r1, #0
 8012e4e:	0fd0      	lsrs	r0, r2, #31
 8012e50:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012e54:	17d9      	asrs	r1, r3, #31
 8012e56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e5a:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8012e5e:	4603      	mov	r3, r0
 8012e60:	6013      	str	r3, [r2, #0]
    return result;
 8012e62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e66:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8012e6a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012e6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e70:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	dc06      	bgt.n	8012e88 <arm_nn_vec_mat_mult_t_s8+0x16e2>
 8012e7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e7e:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	425a      	negs	r2, r3
 8012e86:	e000      	b.n	8012e8a <arm_nn_vec_mat_mult_t_s8+0x16e4>
 8012e88:	2200      	movs	r2, #0
 8012e8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e8e:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8012e92:	6019      	str	r1, [r3, #0]
 8012e94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e98:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012e9c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8012e9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ea2:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8012eaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eae:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	fa02 f103 	lsl.w	r1, r2, r3
 8012eba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ebe:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 8012ec2:	1e4b      	subs	r3, r1, #1
 8012ec4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8012ec6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eca:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 8012ece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ed2:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8012ed6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eda:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8012ede:	6812      	ldr	r2, [r2, #0]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	4013      	ands	r3, r2
 8012ee4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8012ee6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eea:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 8012eee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ef2:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8012ef6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012efa:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012efe:	6812      	ldr	r2, [r2, #0]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	fa42 f303 	asr.w	r3, r2, r3
 8012f06:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8012f08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f0c:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8012f10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f14:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	105b      	asrs	r3, r3, #1
 8012f1c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8012f1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f22:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	da0a      	bge.n	8012f42 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 8012f2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f30:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8012f34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f38:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	3301      	adds	r3, #1
 8012f40:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8012f42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f46:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 8012f4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f4e:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8012f52:	6812      	ldr	r2, [r2, #0]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	dd0a      	ble.n	8012f70 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 8012f5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f5e:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8012f62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f66:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	3301      	adds	r3, #1
 8012f6e:	6013      	str	r3, [r2, #0]
    return result;
 8012f70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f74:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8012f78:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012f7a:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 8012f7c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 8012f80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f84:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 8012f88:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8012f8c:	6013      	str	r3, [r2, #0]
 8012f8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f92:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8012f96:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8012f9a:	6013      	str	r3, [r2, #0]
 8012f9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fa0:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8012fa4:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8012fa8:	6013      	str	r3, [r2, #0]
 8012faa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fae:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8012fb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fbc:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	fa03 f202 	lsl.w	r2, r3, r2
 8012fc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fca:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8012fce:	601a      	str	r2, [r3, #0]
 8012fd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fd4:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8012fd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fdc:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012fe4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fe8:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8012fec:	2300      	movs	r3, #0
 8012fee:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8012ff0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012ff4:	461a      	mov	r2, r3
 8012ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012ffa:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8012ffe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013002:	461a      	mov	r2, r3
 8013004:	2300      	movs	r3, #0
 8013006:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801300a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801300e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013012:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013016:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	17da      	asrs	r2, r3, #31
 801301e:	643b      	str	r3, [r7, #64]	; 0x40
 8013020:	647a      	str	r2, [r7, #68]	; 0x44
 8013022:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013026:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	17da      	asrs	r2, r3, #31
 801302e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013030:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013036:	fb02 f203 	mul.w	r2, r2, r3
 801303a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801303c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801303e:	fb04 f303 	mul.w	r3, r4, r3
 8013042:	4413      	add	r3, r2
 8013044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013046:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8013048:	fba2 ab04 	umull	sl, fp, r2, r4
 801304c:	445b      	add	r3, fp
 801304e:	469b      	mov	fp, r3
 8013050:	eb10 030a 	adds.w	r3, r0, sl
 8013054:	623b      	str	r3, [r7, #32]
 8013056:	eb41 030b 	adc.w	r3, r1, fp
 801305a:	627b      	str	r3, [r7, #36]	; 0x24
 801305c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013060:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013064:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8013068:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801306c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013070:	f04f 0000 	mov.w	r0, #0
 8013074:	f04f 0100 	mov.w	r1, #0
 8013078:	0fd0      	lsrs	r0, r2, #31
 801307a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801307e:	17d9      	asrs	r1, r3, #31
 8013080:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013084:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8013088:	4603      	mov	r3, r0
 801308a:	6013      	str	r3, [r2, #0]
    return result;
 801308c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013090:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8013094:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8013096:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801309a:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	dc06      	bgt.n	80130b2 <arm_nn_vec_mat_mult_t_s8+0x190c>
 80130a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130a8:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	425a      	negs	r2, r3
 80130b0:	e000      	b.n	80130b4 <arm_nn_vec_mat_mult_t_s8+0x190e>
 80130b2:	2200      	movs	r2, #0
 80130b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130b8:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80130bc:	6019      	str	r1, [r3, #0]
 80130be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130c2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80130c6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80130c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130cc:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80130d0:	2300      	movs	r3, #0
 80130d2:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80130d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130d8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80130dc:	2201      	movs	r2, #1
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	fa02 f103 	lsl.w	r1, r2, r3
 80130e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130e8:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 80130ec:	1e4b      	subs	r3, r1, #1
 80130ee:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80130f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130f4:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 80130f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130fc:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8013100:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013104:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8013108:	6812      	ldr	r2, [r2, #0]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4013      	ands	r3, r2
 801310e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013110:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013114:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 8013118:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801311c:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8013120:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013124:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013128:	6812      	ldr	r2, [r2, #0]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	fa42 f303 	asr.w	r3, r2, r3
 8013130:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013132:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013136:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 801313a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801313e:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	105b      	asrs	r3, r3, #1
 8013146:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013148:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801314c:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	2b00      	cmp	r3, #0
 8013154:	da0a      	bge.n	801316c <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 8013156:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801315a:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 801315e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013162:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	3301      	adds	r3, #1
 801316a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801316c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013170:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 8013174:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013178:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801317c:	6812      	ldr	r2, [r2, #0]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	429a      	cmp	r2, r3
 8013182:	dd0a      	ble.n	801319a <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 8013184:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013188:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 801318c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013190:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	3301      	adds	r3, #1
 8013198:	6013      	str	r3, [r2, #0]
    return result;
 801319a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801319e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80131a2:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80131a4:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 80131a6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 80131aa:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 80131ae:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80131b2:	4413      	add	r3, r2
 80131b4:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 80131b8:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 80131bc:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80131c0:	4413      	add	r3, r2
 80131c2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 80131c6:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 80131ca:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 80131ce:	4293      	cmp	r3, r2
 80131d0:	bfb8      	it	lt
 80131d2:	4613      	movlt	r3, r2
 80131d4:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 80131d8:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 80131dc:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 80131e0:	4293      	cmp	r3, r2
 80131e2:	bfa8      	it	ge
 80131e4:	4613      	movge	r3, r2
 80131e6:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 80131ea:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 80131ee:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 80131f2:	4293      	cmp	r3, r2
 80131f4:	bfb8      	it	lt
 80131f6:	4613      	movlt	r3, r2
 80131f8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 80131fc:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8013200:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8013204:	4293      	cmp	r3, r2
 8013206:	bfa8      	it	ge
 8013208:	4613      	movge	r3, r2
 801320a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 801320e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013212:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8013216:	6819      	ldr	r1, [r3, #0]
 8013218:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801321c:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 8013220:	1c4b      	adds	r3, r1, #1
 8013222:	6013      	str	r3, [r2, #0]
 8013224:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013228:	b25b      	sxtb	r3, r3
 801322a:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 801322c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013230:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8013234:	6819      	ldr	r1, [r3, #0]
 8013236:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801323a:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 801323e:	1c4b      	adds	r3, r1, #1
 8013240:	6013      	str	r3, [r2, #0]
 8013242:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8013246:	b25b      	sxtb	r3, r3
 8013248:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 801324a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801324e:	005b      	lsls	r3, r3, #1
 8013250:	4619      	mov	r1, r3
 8013252:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013256:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 801325a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801325e:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	440b      	add	r3, r1
 8013266:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8013268:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 801326c:	3302      	adds	r3, #2
 801326e:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8013272:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8013276:	1e5a      	subs	r2, r3, #1
 8013278:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 801327c:	4293      	cmp	r3, r2
 801327e:	f6fe aae5 	blt.w	801184c <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 8013282:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8013286:	f003 0301 	and.w	r3, r3, #1
 801328a:	2b00      	cmp	r3, #0
 801328c:	f001 806e 	beq.w	801436c <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8013290:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013294:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8013298:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801329c:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 80132a0:	6812      	ldr	r2, [r2, #0]
 80132a2:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 80132a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132a8:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80132ac:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80132b0:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 80132b4:	6812      	ldr	r2, [r2, #0]
 80132b6:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 80132b8:	2300      	movs	r3, #0
 80132ba:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 80132be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132c2:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00d      	beq.n	80132e8 <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 80132cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132d0:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80132da:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 80132de:	1d19      	adds	r1, r3, #4
 80132e0:	6011      	str	r1, [r2, #0]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 80132e8:	2300      	movs	r3, #0
 80132ea:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 80132ee:	f000 beb5 	b.w	801405c <arm_nn_vec_mat_mult_t_s8+0x28b6>
 80132f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132f6:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 80132fa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80132fe:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013300:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013304:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	461a      	mov	r2, r3
 8013310:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013314:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8013318:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801331a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801331e:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	1d1a      	adds	r2, r3, #4
 8013328:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801332c:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	601a      	str	r2, [r3, #0]
    return (val);
 8013334:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013338:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 801333c:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801333e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8013342:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013346:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801334a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801334e:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013352:	6019      	str	r1, [r3, #0]
 8013354:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013358:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 801335c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801335e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013362:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801336c:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8013370:	6812      	ldr	r2, [r2, #0]
 8013372:	fa23 f282 	sxtab16	r2, r3, r2
 8013376:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801337a:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 801337e:	601a      	str	r2, [r3, #0]
  return(result);
 8013380:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013384:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 801338e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013392:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8013396:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801339a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801339c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133a0:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	461a      	mov	r2, r3
 80133ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133b0:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 80133b4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80133b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133ba:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	1d1a      	adds	r2, r3, #4
 80133c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133c8:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	601a      	str	r2, [r3, #0]
    return (val);
 80133d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133d4:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 80133d8:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80133da:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80133de:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80133e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133e6:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 80133ea:	601a      	str	r2, [r3, #0]
 80133ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133f0:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80133f4:	2208      	movs	r2, #8
 80133f6:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80133f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133fc:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8013400:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013404:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 8013408:	6812      	ldr	r2, [r2, #0]
 801340a:	f002 021f 	and.w	r2, r2, #31
 801340e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013410:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013414:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d105      	bne.n	801342a <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 801341e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013422:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	e00b      	b.n	8013442 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801342a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801342e:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 8013432:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013436:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801343a:	6812      	ldr	r2, [r2, #0]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	fa62 f303 	ror.w	r3, r2, r3
 8013442:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013446:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 801344a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801344e:	6011      	str	r1, [r2, #0]
 8013450:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013454:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8013458:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801345a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801345e:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013468:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 801346c:	6812      	ldr	r2, [r2, #0]
 801346e:	fa23 f282 	sxtab16	r2, r3, r2
 8013472:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013476:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 801347a:	601a      	str	r2, [r3, #0]
  return(result);
 801347c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013480:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 801348a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801348e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013492:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8013496:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801349a:	6019      	str	r1, [r3, #0]
 801349c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134a0:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 80134a4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80134a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134aa:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80134b4:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 80134b8:	6812      	ldr	r2, [r2, #0]
 80134ba:	fa23 f282 	sxtab16	r2, r3, r2
 80134be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134c2:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 80134c6:	601a      	str	r2, [r3, #0]
  return(result);
 80134c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134cc:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 80134d6:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80134da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134de:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 80134e2:	601a      	str	r2, [r3, #0]
 80134e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134e8:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80134ec:	2208      	movs	r2, #8
 80134ee:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80134f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134f4:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80134f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80134fc:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 8013500:	6812      	ldr	r2, [r2, #0]
 8013502:	f002 021f 	and.w	r2, r2, #31
 8013506:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013508:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801350c:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d105      	bne.n	8013522 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 8013516:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801351a:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	e00b      	b.n	801353a <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013522:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013526:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 801352a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801352e:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8013532:	6812      	ldr	r2, [r2, #0]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	fa62 f303 	ror.w	r3, r2, r3
 801353a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801353e:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 8013542:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013546:	6011      	str	r1, [r2, #0]
 8013548:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801354c:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 8013550:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013552:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013556:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013560:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 8013564:	6812      	ldr	r2, [r2, #0]
 8013566:	fa23 f282 	sxtab16	r2, r3, r2
 801356a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801356e:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8013572:	601a      	str	r2, [r3, #0]
  return(result);
 8013574:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013578:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8013582:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8013586:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 801358a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801358e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013592:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8013596:	6018      	str	r0, [r3, #0]
 8013598:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801359c:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 80135a0:	6019      	str	r1, [r3, #0]
 80135a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135a6:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80135aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80135ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135b0:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80135ba:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 80135be:	6812      	ldr	r2, [r2, #0]
 80135c0:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80135c4:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 80135c8:	6809      	ldr	r1, [r1, #0]
 80135ca:	fb23 1202 	smlad	r2, r3, r2, r1
 80135ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135d2:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80135d6:	601a      	str	r2, [r3, #0]
  return(result);
 80135d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135dc:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 80135e6:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 80135ea:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80135ee:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80135f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135f6:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80135fa:	6018      	str	r0, [r3, #0]
 80135fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013600:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8013604:	6019      	str	r1, [r3, #0]
 8013606:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801360a:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 801360e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013610:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013614:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801361e:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 8013622:	6812      	ldr	r2, [r2, #0]
 8013624:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013628:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 801362c:	6809      	ldr	r1, [r1, #0]
 801362e:	fb23 1202 	smlad	r2, r3, r2, r1
 8013632:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013636:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 801363a:	601a      	str	r2, [r3, #0]
  return(result);
 801363c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013640:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 801364a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801364e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8013652:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8013656:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013658:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801365c:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	461a      	mov	r2, r3
 8013668:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801366c:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8013670:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013672:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013676:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	1d1a      	adds	r2, r3, #4
 8013680:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013684:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	601a      	str	r2, [r3, #0]
    return (val);
 801368c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013690:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8013694:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8013696:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 801369a:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801369e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136a2:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80136a6:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80136aa:	6019      	str	r1, [r3, #0]
 80136ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136b0:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 80136b4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80136b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136ba:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80136c4:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 80136c8:	6812      	ldr	r2, [r2, #0]
 80136ca:	fa23 f282 	sxtab16	r2, r3, r2
 80136ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136d2:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80136d6:	601a      	str	r2, [r3, #0]
  return(result);
 80136d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136dc:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 80136e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136ea:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80136ee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80136f2:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80136f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136f8:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	461a      	mov	r2, r3
 8013704:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013708:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801370c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801370e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013712:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	1d1a      	adds	r2, r3, #4
 801371c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013720:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	601a      	str	r2, [r3, #0]
    return (val);
 8013728:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801372c:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8013730:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013732:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013736:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801373a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801373e:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8013742:	601a      	str	r2, [r3, #0]
 8013744:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013748:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 801374c:	2208      	movs	r2, #8
 801374e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013750:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013754:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8013758:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801375c:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 8013760:	6812      	ldr	r2, [r2, #0]
 8013762:	f002 021f 	and.w	r2, r2, #31
 8013766:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013768:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801376c:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d105      	bne.n	8013782 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 8013776:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801377a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	e00b      	b.n	801379a <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013782:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013786:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 801378a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801378e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8013792:	6812      	ldr	r2, [r2, #0]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	fa62 f303 	ror.w	r3, r2, r3
 801379a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801379e:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 80137a2:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80137a6:	6011      	str	r1, [r2, #0]
 80137a8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80137ac:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 80137b0:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137b6:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80137c0:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 80137c4:	6812      	ldr	r2, [r2, #0]
 80137c6:	fa23 f282 	sxtab16	r2, r3, r2
 80137ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137ce:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 80137d2:	601a      	str	r2, [r3, #0]
  return(result);
 80137d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137d8:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 80137e2:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80137e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137ea:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80137ee:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80137f2:	6019      	str	r1, [r3, #0]
 80137f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137f8:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 80137fc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013802:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801380c:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 8013810:	6812      	ldr	r2, [r2, #0]
 8013812:	fa23 f282 	sxtab16	r2, r3, r2
 8013816:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801381a:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 801381e:	601a      	str	r2, [r3, #0]
  return(result);
 8013820:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013824:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 801382e:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013832:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013836:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 801383a:	601a      	str	r2, [r3, #0]
 801383c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013840:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8013844:	2208      	movs	r2, #8
 8013846:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013848:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801384c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8013850:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013854:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 8013858:	6812      	ldr	r2, [r2, #0]
 801385a:	f002 021f 	and.w	r2, r2, #31
 801385e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013860:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013864:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d105      	bne.n	801387a <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 801386e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013872:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	e00b      	b.n	8013892 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 801387a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801387e:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 8013882:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013886:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 801388a:	6812      	ldr	r2, [r2, #0]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	fa62 f303 	ror.w	r3, r2, r3
 8013892:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013896:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 801389a:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801389e:	6011      	str	r1, [r2, #0]
 80138a0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80138a4:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 80138a8:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80138aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138ae:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80138b8:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 80138bc:	6812      	ldr	r2, [r2, #0]
 80138be:	fa23 f282 	sxtab16	r2, r3, r2
 80138c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138c6:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80138ca:	601a      	str	r2, [r3, #0]
  return(result);
 80138cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138d0:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 80138da:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 80138de:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 80138e2:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80138e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138ea:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80138ee:	6018      	str	r0, [r3, #0]
 80138f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138f4:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80138f8:	6019      	str	r1, [r3, #0]
 80138fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138fe:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8013902:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013904:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013908:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013912:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 8013916:	6812      	ldr	r2, [r2, #0]
 8013918:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801391c:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 8013920:	6809      	ldr	r1, [r1, #0]
 8013922:	fb23 1202 	smlad	r2, r3, r2, r1
 8013926:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801392a:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 801392e:	601a      	str	r2, [r3, #0]
  return(result);
 8013930:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013934:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 801393e:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8013942:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8013946:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801394a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801394e:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8013952:	6018      	str	r0, [r3, #0]
 8013954:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013958:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 801395c:	6019      	str	r1, [r3, #0]
 801395e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013962:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8013966:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013968:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801396c:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013976:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 801397a:	6812      	ldr	r2, [r2, #0]
 801397c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013980:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 8013984:	6809      	ldr	r1, [r1, #0]
 8013986:	fb23 1202 	smlad	r2, r3, r2, r1
 801398a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801398e:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8013992:	601a      	str	r2, [r3, #0]
  return(result);
 8013994:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013998:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 80139a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139a6:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80139aa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80139ae:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80139b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139b4:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	461a      	mov	r2, r3
 80139c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139c4:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 80139c8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80139ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139ce:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	1d1a      	adds	r2, r3, #4
 80139d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139dc:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	601a      	str	r2, [r3, #0]
    return (val);
 80139e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139e8:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 80139ec:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80139ee:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 80139f2:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80139f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139fa:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80139fe:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013a02:	6019      	str	r1, [r3, #0]
 8013a04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a08:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8013a0c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013a0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a12:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013a1c:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 8013a20:	6812      	ldr	r2, [r2, #0]
 8013a22:	fa23 f282 	sxtab16	r2, r3, r2
 8013a26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a2a:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8013a2e:	601a      	str	r2, [r3, #0]
  return(result);
 8013a30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a34:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8013a3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a42:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013a46:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013a4a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013a4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a50:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a60:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8013a64:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013a66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a6a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	1d1a      	adds	r2, r3, #4
 8013a74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a78:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	601a      	str	r2, [r3, #0]
    return (val);
 8013a80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a84:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8013a88:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013a8a:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013a8e:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013a92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a96:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8013a9a:	601a      	str	r2, [r3, #0]
 8013a9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013aa0:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013aa4:	2208      	movs	r2, #8
 8013aa6:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013aa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013aac:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013ab0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013ab4:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8013ab8:	6812      	ldr	r2, [r2, #0]
 8013aba:	f002 021f 	and.w	r2, r2, #31
 8013abe:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013ac0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ac4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d105      	bne.n	8013ada <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 8013ace:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ad2:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	e00b      	b.n	8013af2 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013ada:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ade:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 8013ae2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ae6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013aea:	6812      	ldr	r2, [r2, #0]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	fa62 f303 	ror.w	r3, r2, r3
 8013af2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013af6:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8013afa:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013afe:	6011      	str	r1, [r2, #0]
 8013b00:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013b04:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8013b08:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013b0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b0e:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013b18:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8013b1c:	6812      	ldr	r2, [r2, #0]
 8013b1e:	fa23 f282 	sxtab16	r2, r3, r2
 8013b22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b26:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8013b2a:	601a      	str	r2, [r3, #0]
  return(result);
 8013b2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b30:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8013b3a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013b3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b42:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8013b46:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013b4a:	6019      	str	r1, [r3, #0]
 8013b4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b50:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8013b54:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013b56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b5a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013b64:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8013b68:	6812      	ldr	r2, [r2, #0]
 8013b6a:	fa23 f282 	sxtab16	r2, r3, r2
 8013b6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b72:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8013b76:	601a      	str	r2, [r3, #0]
  return(result);
 8013b78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b7c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8013b86:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013b8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b8e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8013b92:	601a      	str	r2, [r3, #0]
 8013b94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b98:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013b9c:	2208      	movs	r2, #8
 8013b9e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013ba0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ba4:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013ba8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013bac:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8013bb0:	6812      	ldr	r2, [r2, #0]
 8013bb2:	f002 021f 	and.w	r2, r2, #31
 8013bb6:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013bb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bbc:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d105      	bne.n	8013bd2 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 8013bc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bca:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	e00b      	b.n	8013bea <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013bd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bd6:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 8013bda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bde:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013be2:	6812      	ldr	r2, [r2, #0]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	fa62 f303 	ror.w	r3, r2, r3
 8013bea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013bee:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8013bf2:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013bf6:	6011      	str	r1, [r2, #0]
 8013bf8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013bfc:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8013c00:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013c02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c06:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013c10:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8013c14:	6812      	ldr	r2, [r2, #0]
 8013c16:	fa23 f282 	sxtab16	r2, r3, r2
 8013c1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c1e:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8013c22:	601a      	str	r2, [r3, #0]
  return(result);
 8013c24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c28:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8013c32:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8013c36:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8013c3a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013c3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c42:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8013c46:	6018      	str	r0, [r3, #0]
 8013c48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c4c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8013c50:	6019      	str	r1, [r3, #0]
 8013c52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c56:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8013c5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013c5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c60:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013c6a:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8013c6e:	6812      	ldr	r2, [r2, #0]
 8013c70:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013c74:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 8013c78:	6809      	ldr	r1, [r1, #0]
 8013c7a:	fb23 1202 	smlad	r2, r3, r2, r1
 8013c7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c82:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8013c86:	601a      	str	r2, [r3, #0]
  return(result);
 8013c88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c8c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8013c96:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8013c9a:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8013c9e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013ca2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ca6:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8013caa:	6018      	str	r0, [r3, #0]
 8013cac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cb0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8013cb4:	6019      	str	r1, [r3, #0]
 8013cb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cba:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013cbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013cc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cc4:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013cce:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8013cd2:	6812      	ldr	r2, [r2, #0]
 8013cd4:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013cd8:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8013cdc:	6809      	ldr	r1, [r1, #0]
 8013cde:	fb23 1202 	smlad	r2, r3, r2, r1
 8013ce2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ce6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8013cea:	601a      	str	r2, [r3, #0]
  return(result);
 8013cec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cf0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8013cfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cfe:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013d02:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8013d06:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013d08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d0c:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	461a      	mov	r2, r3
 8013d18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d1c:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8013d20:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013d22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d26:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	1d1a      	adds	r2, r3, #4
 8013d30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d34:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	601a      	str	r2, [r3, #0]
    return (val);
 8013d3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d40:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8013d44:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8013d46:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8013d4a:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013d4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d52:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8013d56:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013d5a:	6019      	str	r1, [r3, #0]
 8013d5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d60:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8013d64:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d6a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013d74:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8013d78:	6812      	ldr	r2, [r2, #0]
 8013d7a:	fa23 f282 	sxtab16	r2, r3, r2
 8013d7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d82:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8013d86:	601a      	str	r2, [r3, #0]
  return(result);
 8013d88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d8c:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8013d96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d9a:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013d9e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013da2:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013da4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013da8:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	461a      	mov	r2, r3
 8013db4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013db8:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8013dbc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013dbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dc2:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	1d1a      	adds	r2, r3, #4
 8013dcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dd0:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	601a      	str	r2, [r3, #0]
    return (val);
 8013dd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ddc:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8013de0:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013de2:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013de6:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013dea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dee:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8013df2:	601a      	str	r2, [r3, #0]
 8013df4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013df8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013dfc:	2208      	movs	r2, #8
 8013dfe:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013e00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e04:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013e08:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013e0c:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 8013e10:	6812      	ldr	r2, [r2, #0]
 8013e12:	f002 021f 	and.w	r2, r2, #31
 8013e16:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013e18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e1c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d105      	bne.n	8013e32 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 8013e26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e2a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	e00b      	b.n	8013e4a <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013e32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e36:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 8013e3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e3e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013e42:	6812      	ldr	r2, [r2, #0]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	fa62 f303 	ror.w	r3, r2, r3
 8013e4a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013e4e:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8013e52:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013e56:	6011      	str	r1, [r2, #0]
 8013e58:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013e5c:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8013e60:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013e62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e66:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013e70:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8013e74:	6812      	ldr	r2, [r2, #0]
 8013e76:	fa23 f282 	sxtab16	r2, r3, r2
 8013e7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e7e:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8013e82:	601a      	str	r2, [r3, #0]
  return(result);
 8013e84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e88:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8013e92:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013e96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e9a:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8013e9e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013ea2:	6019      	str	r1, [r3, #0]
 8013ea4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ea8:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8013eac:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013eae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013eb2:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013ebc:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8013ec0:	6812      	ldr	r2, [r2, #0]
 8013ec2:	fa23 f282 	sxtab16	r2, r3, r2
 8013ec6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013eca:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013ece:	601a      	str	r2, [r3, #0]
  return(result);
 8013ed0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ed4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8013ede:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013ee2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ee6:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8013eea:	601a      	str	r2, [r3, #0]
 8013eec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ef0:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8013ef4:	2208      	movs	r2, #8
 8013ef6:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013ef8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013efc:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8013f00:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f04:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 8013f08:	6812      	ldr	r2, [r2, #0]
 8013f0a:	f002 021f 	and.w	r2, r2, #31
 8013f0e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013f10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f14:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d105      	bne.n	8013f2a <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 8013f1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f22:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	e00b      	b.n	8013f42 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013f2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f2e:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 8013f32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f36:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8013f3a:	6812      	ldr	r2, [r2, #0]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	fa62 f303 	ror.w	r3, r2, r3
 8013f42:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f46:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 8013f4a:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013f4e:	6011      	str	r1, [r2, #0]
 8013f50:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f54:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8013f58:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013f5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f5e:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f68:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8013f6c:	6812      	ldr	r2, [r2, #0]
 8013f6e:	fa23 f282 	sxtab16	r2, r3, r2
 8013f72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f76:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8013f7a:	601a      	str	r2, [r3, #0]
  return(result);
 8013f7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f80:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8013f8a:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8013f8e:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8013f92:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013f96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f9a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8013f9e:	6018      	str	r0, [r3, #0]
 8013fa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fa4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013fa8:	6019      	str	r1, [r3, #0]
 8013faa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fae:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8013fb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013fb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fb8:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013fc2:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 8013fc6:	6812      	ldr	r2, [r2, #0]
 8013fc8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013fcc:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 8013fd0:	6809      	ldr	r1, [r1, #0]
 8013fd2:	fb23 1202 	smlad	r2, r3, r2, r1
 8013fd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fda:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8013fde:	601a      	str	r2, [r3, #0]
  return(result);
 8013fe0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fe4:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8013fee:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8013ff2:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8013ff6:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013ffa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ffe:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014002:	6018      	str	r0, [r3, #0]
 8014004:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014008:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 801400c:	6019      	str	r1, [r3, #0]
 801400e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014012:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8014016:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014018:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801401c:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014026:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 801402a:	6812      	ldr	r2, [r2, #0]
 801402c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014030:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 8014034:	6809      	ldr	r1, [r1, #0]
 8014036:	fb23 1202 	smlad	r2, r3, r2, r1
 801403a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801403e:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014042:	601a      	str	r2, [r3, #0]
  return(result);
 8014044:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014048:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8014052:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8014056:	3310      	adds	r3, #16
 8014058:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 801405c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8014060:	3b0f      	subs	r3, #15
 8014062:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 8014066:	429a      	cmp	r2, r3
 8014068:	f6ff a943 	blt.w	80132f2 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801406c:	e03f      	b.n	80140ee <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 801406e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014072:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	f993 3000 	ldrsb.w	r3, [r3]
 801407c:	461a      	mov	r2, r3
 801407e:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8014082:	4413      	add	r3, r2
 8014084:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8014088:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801408c:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	f993 3000 	ldrsb.w	r3, [r3]
 8014096:	461a      	mov	r2, r3
 8014098:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 801409c:	4413      	add	r3, r2
 801409e:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 80140a2:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80140a6:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 80140aa:	fb02 f303 	mul.w	r3, r2, r3
 80140ae:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80140b2:	4413      	add	r3, r2
 80140b4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 80140b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140bc:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	1c5a      	adds	r2, r3, #1
 80140c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140c8:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80140cc:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 80140ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140d2:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	1c5a      	adds	r2, r3, #1
 80140da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140de:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80140e2:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80140e4:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 80140e8:	3301      	adds	r3, #1
 80140ea:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 80140ee:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 80140f2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80140f6:	429a      	cmp	r2, r3
 80140f8:	dbb9      	blt.n	801406e <arm_nn_vec_mat_mult_t_s8+0x28c8>
 80140fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140fe:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 8014102:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014106:	601a      	str	r2, [r3, #0]
 8014108:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801410c:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8014110:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8014114:	601a      	str	r2, [r3, #0]
 8014116:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801411a:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801411e:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 8014122:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014124:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014128:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014132:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014136:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 801413a:	6812      	ldr	r2, [r2, #0]
 801413c:	409a      	lsls	r2, r3
 801413e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014142:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8014146:	601a      	str	r2, [r3, #0]
 8014148:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801414c:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8014150:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014154:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 8014158:	6812      	ldr	r2, [r2, #0]
 801415a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801415c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014160:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8014164:	2200      	movs	r2, #0
 8014166:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8014168:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801416c:	461a      	mov	r2, r3
 801416e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014172:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8014176:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801417a:	461a      	mov	r2, r3
 801417c:	2300      	movs	r3, #0
 801417e:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8014182:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014186:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801418a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801418e:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 8014192:	6809      	ldr	r1, [r1, #0]
 8014194:	17c8      	asrs	r0, r1, #31
 8014196:	6139      	str	r1, [r7, #16]
 8014198:	6178      	str	r0, [r7, #20]
 801419a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801419e:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 80141a2:	6809      	ldr	r1, [r1, #0]
 80141a4:	17c8      	asrs	r0, r1, #31
 80141a6:	60b9      	str	r1, [r7, #8]
 80141a8:	60f8      	str	r0, [r7, #12]
 80141aa:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80141ae:	4631      	mov	r1, r6
 80141b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80141b4:	4650      	mov	r0, sl
 80141b6:	fb00 f001 	mul.w	r0, r0, r1
 80141ba:	4659      	mov	r1, fp
 80141bc:	462c      	mov	r4, r5
 80141be:	fb04 f101 	mul.w	r1, r4, r1
 80141c2:	4401      	add	r1, r0
 80141c4:	4628      	mov	r0, r5
 80141c6:	4654      	mov	r4, sl
 80141c8:	fba0 8904 	umull	r8, r9, r0, r4
 80141cc:	4449      	add	r1, r9
 80141ce:	4689      	mov	r9, r1
 80141d0:	eb12 0108 	adds.w	r1, r2, r8
 80141d4:	6039      	str	r1, [r7, #0]
 80141d6:	eb43 0309 	adc.w	r3, r3, r9
 80141da:	607b      	str	r3, [r7, #4]
 80141dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80141e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80141e4:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 80141e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80141ec:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80141f0:	f04f 0200 	mov.w	r2, #0
 80141f4:	f04f 0300 	mov.w	r3, #0
 80141f8:	0fc2      	lsrs	r2, r0, #31
 80141fa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80141fe:	17cb      	asrs	r3, r1, #31
 8014200:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014204:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 8014208:	4613      	mov	r3, r2
 801420a:	600b      	str	r3, [r1, #0]
    return result;
 801420c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014210:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8014214:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014216:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801421a:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	dc06      	bgt.n	8014232 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 8014224:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014228:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	425b      	negs	r3, r3
 8014230:	e000      	b.n	8014234 <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 8014232:	2300      	movs	r3, #0
 8014234:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014238:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 801423c:	6011      	str	r1, [r2, #0]
 801423e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014242:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 8014246:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8014248:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801424c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014250:	2200      	movs	r2, #0
 8014252:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014254:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014258:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 801425c:	2201      	movs	r2, #1
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	409a      	lsls	r2, r3
 8014262:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014266:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 801426a:	3a01      	subs	r2, #1
 801426c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801426e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014272:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8014276:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801427a:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 801427e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014282:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 8014286:	6809      	ldr	r1, [r1, #0]
 8014288:	6812      	ldr	r2, [r2, #0]
 801428a:	400a      	ands	r2, r1
 801428c:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801428e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014292:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014296:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801429a:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 801429e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80142a2:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 80142a6:	6809      	ldr	r1, [r1, #0]
 80142a8:	6812      	ldr	r2, [r2, #0]
 80142aa:	fa41 f202 	asr.w	r2, r1, r2
 80142ae:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80142b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142b4:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80142b8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80142bc:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 80142c0:	6812      	ldr	r2, [r2, #0]
 80142c2:	1052      	asrs	r2, r2, #1
 80142c4:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80142c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142ca:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	da0a      	bge.n	80142ea <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 80142d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142d8:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80142dc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80142e0:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 80142e4:	6812      	ldr	r2, [r2, #0]
 80142e6:	3201      	adds	r2, #1
 80142e8:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80142ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142ee:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 80142f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142f6:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80142fa:	6812      	ldr	r2, [r2, #0]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	429a      	cmp	r2, r3
 8014300:	dd0a      	ble.n	8014318 <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 8014302:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014306:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801430a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801430e:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 8014312:	6812      	ldr	r2, [r2, #0]
 8014314:	3201      	adds	r2, #1
 8014316:	601a      	str	r2, [r3, #0]
    return result;
 8014318:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801431c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014320:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014322:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 8014324:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 8014328:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801432c:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8014330:	4413      	add	r3, r2
 8014332:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 8014336:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801433a:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 801433e:	4293      	cmp	r3, r2
 8014340:	bfb8      	it	lt
 8014342:	4613      	movlt	r3, r2
 8014344:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 8014348:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801434c:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8014350:	4293      	cmp	r3, r2
 8014352:	bfa8      	it	ge
 8014354:	4613      	movge	r3, r2
 8014356:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 801435a:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 801435e:	b25a      	sxtb	r2, r3
 8014360:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014364:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 801436c:	2300      	movs	r3, #0
}
 801436e:	4618      	mov	r0, r3
 8014370:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 8014374:	46bd      	mov	sp, r7
 8014376:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801437a:	4770      	bx	lr
 801437c:	0000      	movs	r0, r0
	...

08014380 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8014380:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014384:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 8014388:	af00      	add	r7, sp, #0
 801438a:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 801438e:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 8014392:	6020      	str	r0, [r4, #0]
 8014394:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 8014398:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 801439c:	6001      	str	r1, [r0, #0]
 801439e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 80143a2:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 80143a6:	600a      	str	r2, [r1, #0]
 80143a8:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 80143ac:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 80143b0:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 80143b2:	2201      	movs	r2, #1
 80143b4:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 80143b8:	fa02 f303 	lsl.w	r3, r2, r3
 80143bc:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 80143c0:	2300      	movs	r3, #0
 80143c2:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 80143c6:	2300      	movs	r3, #0
 80143c8:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 80143cc:	f004 b863 	b.w	8018496 <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 80143d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80143d4:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 80143e0:	2301      	movs	r3, #1
 80143e2:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80143e6:	e015      	b.n	8014414 <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 80143e8:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80143ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80143f0:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	4413      	add	r3, r2
 80143f8:	f993 2000 	ldrsb.w	r2, [r3]
 80143fc:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8014400:	4293      	cmp	r3, r2
 8014402:	bfb8      	it	lt
 8014404:	4613      	movlt	r3, r2
 8014406:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 801440a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 801440e:	3301      	adds	r3, #1
 8014410:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8014414:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014418:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801441c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	429a      	cmp	r2, r3
 8014424:	dbe0      	blt.n	80143e8 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 8014426:	2300      	movs	r3, #0
 8014428:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 801442c:	2300      	movs	r3, #0
 801442e:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 8014432:	2300      	movs	r3, #0
 8014434:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8014438:	f001 ba24 	b.w	8015884 <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 801443c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8014440:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014444:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	4413      	add	r3, r2
 801444c:	f993 3000 	ldrsb.w	r3, [r3]
 8014450:	461a      	mov	r2, r3
 8014452:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8014456:	1ad3      	subs	r3, r2, r3
 8014458:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 801445c:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8014460:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8014464:	429a      	cmp	r2, r3
 8014466:	f2c1 8208 	blt.w	801587a <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 801446a:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 801446e:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8014472:	fb03 f202 	mul.w	r2, r3, r2
 8014476:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801447a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801447e:	601a      	str	r2, [r3, #0]
 8014480:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014484:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8014488:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801448c:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8014494:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014498:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 801449c:	2300      	movs	r3, #0
 801449e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80144a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80144a4:	f04f 0300 	mov.w	r3, #0
 80144a8:	f607 0138 	addw	r1, r7, #2104	; 0x838
 80144ac:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80144b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80144b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	0fdb      	lsrs	r3, r3, #31
 80144bc:	b2da      	uxtb	r2, r3
 80144be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80144c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	0fdb      	lsrs	r3, r3, #31
 80144ca:	b2db      	uxtb	r3, r3
 80144cc:	4053      	eors	r3, r2
 80144ce:	b2db      	uxtb	r3, r3
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d012      	beq.n	80144fa <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 80144d4:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80144d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144dc:	2100      	movs	r1, #0
 80144de:	f1d2 0001 	rsbs	r0, r2, #1
 80144e2:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 80144e6:	eb61 0303 	sbc.w	r3, r1, r3
 80144ea:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80144ee:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 80144f2:	f607 0238 	addw	r2, r7, #2104	; 0x838
 80144f6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80144fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80144fe:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	17da      	asrs	r2, r3, #31
 8014506:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 801450a:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 801450e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014512:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	17da      	asrs	r2, r3, #31
 801451a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 801451e:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 8014522:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8014526:	e9d3 0100 	ldrd	r0, r1, [r3]
 801452a:	460b      	mov	r3, r1
 801452c:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8014530:	fb02 f203 	mul.w	r2, r2, r3
 8014534:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8014538:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 801453c:	e9c4 0100 	strd	r0, r1, [r4]
 8014540:	4601      	mov	r1, r0
 8014542:	fb01 f303 	mul.w	r3, r1, r3
 8014546:	4413      	add	r3, r2
 8014548:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 801454c:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8014550:	fba2 1201 	umull	r1, r2, r2, r1
 8014554:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 8014558:	460a      	mov	r2, r1
 801455a:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 801455e:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 8014562:	4413      	add	r3, r2
 8014564:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8014568:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014570:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 8014574:	1851      	adds	r1, r2, r1
 8014576:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 801457a:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 801457e:	414b      	adcs	r3, r1
 8014580:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8014584:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 8014588:	f607 0238 	addw	r2, r7, #2104	; 0x838
 801458c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014590:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8014594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014598:	2b00      	cmp	r3, #0
 801459a:	da0a      	bge.n	80145b2 <arm_softmax_s8+0x232>
 801459c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80145a0:	1851      	adds	r1, r2, r1
 80145a2:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 80145a6:	f143 0300 	adc.w	r3, r3, #0
 80145aa:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80145ae:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 80145b2:	f04f 0000 	mov.w	r0, #0
 80145b6:	f04f 0100 	mov.w	r1, #0
 80145ba:	0fd0      	lsrs	r0, r2, #31
 80145bc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80145c0:	17d9      	asrs	r1, r3, #31
 80145c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80145c6:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80145ca:	4603      	mov	r3, r0
 80145cc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80145ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80145d2:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80145d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80145da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80145de:	6812      	ldr	r2, [r2, #0]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	429a      	cmp	r2, r3
 80145e4:	d10e      	bne.n	8014604 <arm_softmax_s8+0x284>
 80145e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80145ea:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80145f4:	d106      	bne.n	8014604 <arm_softmax_s8+0x284>
        result = Q31_MAX;
 80145f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80145fa:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80145fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014602:	6013      	str	r3, [r2, #0]
    return result;
 8014604:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014608:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 8014612:	2300      	movs	r3, #0
 8014614:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 8014618:	2318      	movs	r3, #24
 801461a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 801461e:	2201      	movs	r2, #1
 8014620:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8014624:	fa02 f303 	lsl.w	r3, r2, r3
 8014628:	1e5a      	subs	r2, r3, #1
 801462a:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 801462e:	ea02 0103 	and.w	r1, r2, r3
 8014632:	2201      	movs	r2, #1
 8014634:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8014638:	fa02 f303 	lsl.w	r3, r2, r3
 801463c:	1acb      	subs	r3, r1, r3
 801463e:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 8014642:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 8014646:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 801464a:	1ad3      	subs	r3, r2, r3
 801464c:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8014650:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 8014654:	015b      	lsls	r3, r3, #5
 8014656:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 801465a:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 801465e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8014662:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 8014666:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 801466a:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 801466e:	2300      	movs	r3, #0
 8014670:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 8014674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014678:	f04f 0300 	mov.w	r3, #0
 801467c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8014680:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014684:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8014688:	0fdb      	lsrs	r3, r3, #31
 801468a:	b2da      	uxtb	r2, r3
 801468c:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8014690:	0fdb      	lsrs	r3, r3, #31
 8014692:	b2db      	uxtb	r3, r3
 8014694:	4053      	eors	r3, r2
 8014696:	b2db      	uxtb	r3, r3
 8014698:	2b00      	cmp	r3, #0
 801469a:	d012      	beq.n	80146c2 <arm_softmax_s8+0x342>
        mult = 1 - mult;
 801469c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80146a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a4:	2100      	movs	r1, #0
 80146a6:	f1d2 0001 	rsbs	r0, r2, #1
 80146aa:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 80146ae:	eb61 0303 	sbc.w	r3, r1, r3
 80146b2:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 80146b6:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 80146ba:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80146be:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80146c2:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80146c6:	17da      	asrs	r2, r3, #31
 80146c8:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 80146cc:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 80146d0:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80146d4:	17da      	asrs	r2, r3, #31
 80146d6:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 80146da:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 80146de:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80146e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80146e6:	460b      	mov	r3, r1
 80146e8:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 80146ec:	fb02 f203 	mul.w	r2, r2, r3
 80146f0:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80146f4:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 80146f8:	e9c4 0100 	strd	r0, r1, [r4]
 80146fc:	4601      	mov	r1, r0
 80146fe:	fb01 f303 	mul.w	r3, r1, r3
 8014702:	4413      	add	r3, r2
 8014704:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8014708:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 801470c:	fba2 8901 	umull	r8, r9, r2, r1
 8014710:	444b      	add	r3, r9
 8014712:	4699      	mov	r9, r3
 8014714:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8014718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471c:	eb12 0108 	adds.w	r1, r2, r8
 8014720:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 8014724:	eb43 0309 	adc.w	r3, r3, r9
 8014728:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801472c:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 8014730:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8014734:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014738:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014740:	2b00      	cmp	r3, #0
 8014742:	da0a      	bge.n	801475a <arm_softmax_s8+0x3da>
 8014744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014748:	1851      	adds	r1, r2, r1
 801474a:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 801474e:	f143 0300 	adc.w	r3, r3, #0
 8014752:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8014756:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 801475a:	f04f 0000 	mov.w	r0, #0
 801475e:	f04f 0100 	mov.w	r1, #0
 8014762:	0fd0      	lsrs	r0, r2, #31
 8014764:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014768:	17d9      	asrs	r1, r3, #31
 801476a:	4602      	mov	r2, r0
 801476c:	460b      	mov	r3, r1
 801476e:	4613      	mov	r3, r2
 8014770:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014774:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8014778:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 801477c:	429a      	cmp	r2, r3
 801477e:	d108      	bne.n	8014792 <arm_softmax_s8+0x412>
 8014780:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8014784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014788:	d103      	bne.n	8014792 <arm_softmax_s8+0x412>
        result = Q31_MAX;
 801478a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801478e:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 8014792:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 8014796:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 801479a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 801479e:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 80147a2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80147a6:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 80147aa:	2300      	movs	r3, #0
 80147ac:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 80147b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80147b4:	f04f 0300 	mov.w	r3, #0
 80147b8:	f607 1128 	addw	r1, r7, #2344	; 0x928
 80147bc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80147c0:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 80147c4:	0fdb      	lsrs	r3, r3, #31
 80147c6:	b2da      	uxtb	r2, r3
 80147c8:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80147cc:	0fdb      	lsrs	r3, r3, #31
 80147ce:	b2db      	uxtb	r3, r3
 80147d0:	4053      	eors	r3, r2
 80147d2:	b2db      	uxtb	r3, r3
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d012      	beq.n	80147fe <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 80147d8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80147dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147e0:	2100      	movs	r1, #0
 80147e2:	f1d2 0001 	rsbs	r0, r2, #1
 80147e6:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 80147ea:	eb61 0303 	sbc.w	r3, r1, r3
 80147ee:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 80147f2:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 80147f6:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80147fa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80147fe:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8014802:	17da      	asrs	r2, r3, #31
 8014804:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8014808:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 801480c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8014810:	17da      	asrs	r2, r3, #31
 8014812:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8014816:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 801481a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 801481e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014822:	460b      	mov	r3, r1
 8014824:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 8014828:	fb02 f203 	mul.w	r2, r2, r3
 801482c:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8014830:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 8014834:	e9c4 0100 	strd	r0, r1, [r4]
 8014838:	4601      	mov	r1, r0
 801483a:	fb01 f303 	mul.w	r3, r1, r3
 801483e:	4413      	add	r3, r2
 8014840:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 8014844:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 8014848:	fba2 ab01 	umull	sl, fp, r2, r1
 801484c:	445b      	add	r3, fp
 801484e:	469b      	mov	fp, r3
 8014850:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8014854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014858:	eb12 010a 	adds.w	r1, r2, sl
 801485c:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 8014860:	eb43 030b 	adc.w	r3, r3, fp
 8014864:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8014868:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 801486c:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8014870:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014874:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8014878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487c:	2b00      	cmp	r3, #0
 801487e:	da0a      	bge.n	8014896 <arm_softmax_s8+0x516>
 8014880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014884:	1851      	adds	r1, r2, r1
 8014886:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 801488a:	f143 0300 	adc.w	r3, r3, #0
 801488e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8014892:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8014896:	f04f 0000 	mov.w	r0, #0
 801489a:	f04f 0100 	mov.w	r1, #0
 801489e:	0fd0      	lsrs	r0, r2, #31
 80148a0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80148a4:	17d9      	asrs	r1, r3, #31
 80148a6:	4602      	mov	r2, r0
 80148a8:	460b      	mov	r3, r1
 80148aa:	4613      	mov	r3, r2
 80148ac:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80148b0:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 80148b4:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d108      	bne.n	80148ce <arm_softmax_s8+0x54e>
 80148bc:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 80148c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80148c4:	d103      	bne.n	80148ce <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 80148c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80148ca:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 80148ce:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 80148d2:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 80148d6:	2300      	movs	r3, #0
 80148d8:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 80148dc:	2304      	movs	r3, #4
 80148de:	3b01      	subs	r3, #1
 80148e0:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 80148e4:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 80148e8:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80148ec:	4013      	ands	r3, r2
 80148ee:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 80148f2:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80148f6:	109b      	asrs	r3, r3, #2
 80148f8:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 80148fc:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8014900:	105b      	asrs	r3, r3, #1
 8014902:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 8014906:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 801490a:	2b00      	cmp	r3, #0
 801490c:	da04      	bge.n	8014918 <arm_softmax_s8+0x598>
        threshold++;
 801490e:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8014912:	3301      	adds	r3, #1
 8014914:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 8014918:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 801491c:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8014920:	429a      	cmp	r2, r3
 8014922:	dd04      	ble.n	801492e <arm_softmax_s8+0x5ae>
        result++;
 8014924:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8014928:	3301      	adds	r3, #1
 801492a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 801492e:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 8014932:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8014936:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 801493a:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 801493e:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 8014942:	2300      	movs	r3, #0
 8014944:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 8014948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801494c:	f04f 0300 	mov.w	r3, #0
 8014950:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8014954:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014958:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 801495c:	0fdb      	lsrs	r3, r3, #31
 801495e:	b2da      	uxtb	r2, r3
 8014960:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8014964:	0fdb      	lsrs	r3, r3, #31
 8014966:	b2db      	uxtb	r3, r3
 8014968:	4053      	eors	r3, r2
 801496a:	b2db      	uxtb	r3, r3
 801496c:	2b00      	cmp	r3, #0
 801496e:	d012      	beq.n	8014996 <arm_softmax_s8+0x616>
        mult = 1 - mult;
 8014970:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8014974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014978:	2100      	movs	r1, #0
 801497a:	f1d2 0001 	rsbs	r0, r2, #1
 801497e:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 8014982:	eb61 0303 	sbc.w	r3, r1, r3
 8014986:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 801498a:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 801498e:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8014992:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8014996:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 801499a:	17da      	asrs	r2, r3, #31
 801499c:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 80149a0:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 80149a4:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80149a8:	17da      	asrs	r2, r3, #31
 80149aa:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 80149ae:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 80149b2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80149b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80149ba:	460b      	mov	r3, r1
 80149bc:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 80149c0:	fb02 f203 	mul.w	r2, r2, r3
 80149c4:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80149c8:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 80149cc:	e9cc 0100 	strd	r0, r1, [ip]
 80149d0:	4601      	mov	r1, r0
 80149d2:	fb01 f303 	mul.w	r3, r1, r3
 80149d6:	4413      	add	r3, r2
 80149d8:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 80149dc:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 80149e0:	fba2 5601 	umull	r5, r6, r2, r1
 80149e4:	4433      	add	r3, r6
 80149e6:	461e      	mov	r6, r3
 80149e8:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 80149ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f0:	1951      	adds	r1, r2, r5
 80149f2:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 80149f6:	4173      	adcs	r3, r6
 80149f8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80149fc:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8014a00:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8014a04:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8014a08:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8014a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	da0a      	bge.n	8014a2a <arm_softmax_s8+0x6aa>
 8014a14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014a18:	1851      	adds	r1, r2, r1
 8014a1a:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 8014a1e:	f143 0300 	adc.w	r3, r3, #0
 8014a22:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8014a26:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8014a2a:	f04f 0000 	mov.w	r0, #0
 8014a2e:	f04f 0100 	mov.w	r1, #0
 8014a32:	0fd0      	lsrs	r0, r2, #31
 8014a34:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014a38:	17d9      	asrs	r1, r3, #31
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	4613      	mov	r3, r2
 8014a40:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014a44:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8014a48:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d108      	bne.n	8014a62 <arm_softmax_s8+0x6e2>
 8014a50:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8014a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a58:	d103      	bne.n	8014a62 <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 8014a5a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014a5e:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 8014a62:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8014a66:	4423      	add	r3, r4
 8014a68:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 8014a72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014a76:	f04f 0300 	mov.w	r3, #0
 8014a7a:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 8014a7e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014a82:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8014a86:	0fdb      	lsrs	r3, r3, #31
 8014a88:	b2da      	uxtb	r2, r3
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	4053      	eors	r3, r2
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d012      	beq.n	8014aba <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 8014a94:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8014a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a9c:	2100      	movs	r1, #0
 8014a9e:	f1d2 0001 	rsbs	r0, r2, #1
 8014aa2:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 8014aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8014aaa:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8014aae:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 8014ab2:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8014ab6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014aba:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8014abe:	17da      	asrs	r2, r3, #31
 8014ac0:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8014ac4:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 8014ac8:	a3f0      	add	r3, pc, #960	; (adr r3, 8014e8c <arm_softmax_s8+0xb0c>)
 8014aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ace:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 8014ad2:	fb02 f001 	mul.w	r0, r2, r1
 8014ad6:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 8014ada:	fb01 f103 	mul.w	r1, r1, r3
 8014ade:	4401      	add	r1, r0
 8014ae0:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 8014ae4:	fba0 2302 	umull	r2, r3, r0, r2
 8014ae8:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8014aec:	4613      	mov	r3, r2
 8014aee:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 8014af2:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8014af6:	18cb      	adds	r3, r1, r3
 8014af8:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8014afc:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8014b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b04:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 8014b08:	1851      	adds	r1, r2, r1
 8014b0a:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8014b0e:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 8014b12:	414b      	adcs	r3, r1
 8014b14:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8014b18:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 8014b1c:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8014b20:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014b24:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8014b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	da0a      	bge.n	8014b46 <arm_softmax_s8+0x7c6>
 8014b30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b34:	1851      	adds	r1, r2, r1
 8014b36:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8014b3a:	f143 0300 	adc.w	r3, r3, #0
 8014b3e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8014b42:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8014b46:	f04f 0000 	mov.w	r0, #0
 8014b4a:	f04f 0100 	mov.w	r1, #0
 8014b4e:	0fd0      	lsrs	r0, r2, #31
 8014b50:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014b54:	17d9      	asrs	r1, r3, #31
 8014b56:	4602      	mov	r2, r0
 8014b58:	460b      	mov	r3, r1
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014b60:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8014b64:	4bc6      	ldr	r3, [pc, #792]	; (8014e80 <arm_softmax_s8+0xb00>)
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d108      	bne.n	8014b7c <arm_softmax_s8+0x7fc>
 8014b6a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8014b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014b72:	d103      	bne.n	8014b7c <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 8014b74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014b78:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 8014b7c:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8014b80:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8014b84:	4413      	add	r3, r2
 8014b86:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014b90:	2302      	movs	r3, #2
 8014b92:	3b01      	subs	r3, #1
 8014b94:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 8014b98:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 8014b9c:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8014ba0:	4013      	ands	r3, r2
 8014ba2:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 8014ba6:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 8014baa:	105b      	asrs	r3, r3, #1
 8014bac:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 8014bb0:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8014bb4:	105b      	asrs	r3, r3, #1
 8014bb6:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 8014bba:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	da04      	bge.n	8014bcc <arm_softmax_s8+0x84c>
        threshold++;
 8014bc2:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 8014bcc:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8014bd0:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	dd04      	ble.n	8014be2 <arm_softmax_s8+0x862>
        result++;
 8014bd8:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8014bdc:	3301      	adds	r3, #1
 8014bde:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 8014be2:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8014be6:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8014bea:	4413      	add	r3, r2
 8014bec:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 8014bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014bfa:	f04f 0300 	mov.w	r3, #0
 8014bfe:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8014c02:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014c06:	2200      	movs	r2, #0
 8014c08:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8014c0c:	0fdb      	lsrs	r3, r3, #31
 8014c0e:	b2db      	uxtb	r3, r3
 8014c10:	4053      	eors	r3, r2
 8014c12:	b2db      	uxtb	r3, r3
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d012      	beq.n	8014c3e <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 8014c18:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8014c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c20:	2100      	movs	r1, #0
 8014c22:	f1d2 0001 	rsbs	r0, r2, #1
 8014c26:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 8014c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8014c2e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8014c32:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 8014c36:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8014c3a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014c3e:	a18c      	add	r1, pc, #560	; (adr r1, 8014e70 <arm_softmax_s8+0xaf0>)
 8014c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c44:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8014c48:	17da      	asrs	r2, r3, #31
 8014c4a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8014c4e:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 8014c52:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8014c56:	fb03 f201 	mul.w	r2, r3, r1
 8014c5a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8014c5e:	fb00 f303 	mul.w	r3, r0, r3
 8014c62:	4413      	add	r3, r2
 8014c64:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8014c68:	fba0 1202 	umull	r1, r2, r0, r2
 8014c6c:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 8014c70:	460a      	mov	r2, r1
 8014c72:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 8014c76:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8014c7a:	4413      	add	r3, r2
 8014c7c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8014c80:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8014c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c88:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8014c8c:	1851      	adds	r1, r2, r1
 8014c8e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8014c92:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 8014c96:	414b      	adcs	r3, r1
 8014c98:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8014c9c:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 8014ca0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8014ca4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014ca8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8014cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	da0a      	bge.n	8014cca <arm_softmax_s8+0x94a>
 8014cb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014cb8:	1851      	adds	r1, r2, r1
 8014cba:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 8014cbe:	f143 0300 	adc.w	r3, r3, #0
 8014cc2:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8014cc6:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8014cca:	f04f 0000 	mov.w	r0, #0
 8014cce:	f04f 0100 	mov.w	r1, #0
 8014cd2:	0fd0      	lsrs	r0, r2, #31
 8014cd4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014cd8:	17d9      	asrs	r1, r3, #31
 8014cda:	4602      	mov	r2, r0
 8014cdc:	460b      	mov	r3, r1
 8014cde:	4613      	mov	r3, r2
 8014ce0:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 8014ce4:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 8014ce8:	4b66      	ldr	r3, [pc, #408]	; (8014e84 <arm_softmax_s8+0xb04>)
 8014cea:	4413      	add	r3, r2
 8014cec:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 8014cf0:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8014cf4:	1c53      	adds	r3, r2, #1
 8014cf6:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8014cfa:	2301      	movs	r3, #1
 8014cfc:	fa03 f202 	lsl.w	r2, r3, r2
 8014d00:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8014d04:	4013      	ands	r3, r2
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d002      	beq.n	8014d10 <arm_softmax_s8+0x990>
 8014d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d0e:	e000      	b.n	8014d12 <arm_softmax_s8+0x992>
 8014d10:	2300      	movs	r3, #0
 8014d12:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8014d16:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8014d1a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 8014d24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014d28:	f04f 0300 	mov.w	r3, #0
 8014d2c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8014d30:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014d34:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8014d38:	0fdb      	lsrs	r3, r3, #31
 8014d3a:	b2da      	uxtb	r2, r3
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	4053      	eors	r3, r2
 8014d40:	b2db      	uxtb	r3, r3
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d012      	beq.n	8014d6c <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 8014d46:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8014d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d4e:	2100      	movs	r1, #0
 8014d50:	f1d2 0001 	rsbs	r0, r2, #1
 8014d54:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 8014d58:	eb61 0303 	sbc.w	r3, r1, r3
 8014d5c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8014d60:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 8014d64:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8014d68:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014d6c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8014d70:	17da      	asrs	r2, r3, #31
 8014d72:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8014d76:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 8014d7a:	a33f      	add	r3, pc, #252	; (adr r3, 8014e78 <arm_softmax_s8+0xaf8>)
 8014d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d80:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8014d84:	fb02 f001 	mul.w	r0, r2, r1
 8014d88:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8014d8c:	fb01 f103 	mul.w	r1, r1, r3
 8014d90:	4401      	add	r1, r0
 8014d92:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8014d96:	fba0 2302 	umull	r2, r3, r0, r2
 8014d9a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8014d9e:	4613      	mov	r3, r2
 8014da0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 8014da4:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8014da8:	18cb      	adds	r3, r1, r3
 8014daa:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8014dae:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8014db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db6:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8014dba:	1851      	adds	r1, r2, r1
 8014dbc:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8014dc0:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8014dc4:	414b      	adcs	r3, r1
 8014dc6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8014dca:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8014dce:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8014dd2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014dd6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8014dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	da0a      	bge.n	8014df8 <arm_softmax_s8+0xa78>
 8014de2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014de6:	1851      	adds	r1, r2, r1
 8014de8:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8014dec:	f143 0300 	adc.w	r3, r3, #0
 8014df0:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8014df4:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8014df8:	f04f 0000 	mov.w	r0, #0
 8014dfc:	f04f 0100 	mov.w	r1, #0
 8014e00:	0fd0      	lsrs	r0, r2, #31
 8014e02:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014e06:	17d9      	asrs	r1, r3, #31
 8014e08:	4602      	mov	r2, r0
 8014e0a:	460b      	mov	r3, r1
 8014e0c:	4613      	mov	r3, r2
 8014e0e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014e12:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8014e16:	4b1c      	ldr	r3, [pc, #112]	; (8014e88 <arm_softmax_s8+0xb08>)
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d108      	bne.n	8014e2e <arm_softmax_s8+0xaae>
 8014e1c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8014e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014e24:	d103      	bne.n	8014e2e <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 8014e26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014e2a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 8014e2e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 8014e32:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8014e36:	ea02 0103 	and.w	r1, r2, r3
 8014e3a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8014e3e:	43da      	mvns	r2, r3
 8014e40:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8014e44:	4013      	ands	r3, r2
 8014e46:	404b      	eors	r3, r1
 8014e48:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 8014e4c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8014e50:	1c53      	adds	r3, r2, #1
 8014e52:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8014e56:	2301      	movs	r3, #1
 8014e58:	fa03 f202 	lsl.w	r2, r3, r2
 8014e5c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8014e60:	4013      	ands	r3, r2
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d016      	beq.n	8014e94 <arm_softmax_s8+0xb14>
 8014e66:	f04f 33ff 	mov.w	r3, #4294967295
 8014e6a:	e014      	b.n	8014e96 <arm_softmax_s8+0xb16>
 8014e6c:	f3af 8000 	nop.w
 8014e70:	70f5a894 	.word	0x70f5a894
 8014e74:	00000000 	.word	0x00000000
 8014e78:	63afbe7b 	.word	0x63afbe7b
 8014e7c:	00000000 	.word	0x00000000
 8014e80:	2aaaaaab 	.word	0x2aaaaaab
 8014e84:	70f5a894 	.word	0x70f5a894
 8014e88:	63afbe7b 	.word	0x63afbe7b
 8014e8c:	2aaaaaab 	.word	0x2aaaaaab
 8014e90:	00000000 	.word	0x00000000
 8014e94:	2300      	movs	r3, #0
 8014e96:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8014e9a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8014e9e:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 8014ea2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014ea6:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8014eaa:	2300      	movs	r3, #0
 8014eac:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8014eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014eb2:	f04f 0300 	mov.w	r3, #0
 8014eb6:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8014eba:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014ebe:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8014ec2:	0fdb      	lsrs	r3, r3, #31
 8014ec4:	b2da      	uxtb	r2, r3
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	4053      	eors	r3, r2
 8014eca:	b2db      	uxtb	r3, r3
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d012      	beq.n	8014ef6 <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 8014ed0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8014ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ed8:	2100      	movs	r1, #0
 8014eda:	f1d2 0001 	rsbs	r0, r2, #1
 8014ede:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 8014ee2:	eb61 0303 	sbc.w	r3, r1, r3
 8014ee6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8014eea:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 8014eee:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8014ef2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014ef6:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8014efa:	17da      	asrs	r2, r3, #31
 8014efc:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8014f00:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 8014f04:	a3a8      	add	r3, pc, #672	; (adr r3, 80151a8 <arm_softmax_s8+0xe28>)
 8014f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0a:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 8014f0e:	fb02 f001 	mul.w	r0, r2, r1
 8014f12:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 8014f16:	fb01 f103 	mul.w	r1, r1, r3
 8014f1a:	4401      	add	r1, r0
 8014f1c:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 8014f20:	fba0 2302 	umull	r2, r3, r0, r2
 8014f24:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8014f28:	4613      	mov	r3, r2
 8014f2a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8014f2e:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8014f32:	18cb      	adds	r3, r1, r3
 8014f34:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8014f38:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8014f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f40:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8014f44:	1851      	adds	r1, r2, r1
 8014f46:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8014f4a:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8014f4e:	414b      	adcs	r3, r1
 8014f50:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8014f54:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 8014f58:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8014f5c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014f60:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8014f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	da0a      	bge.n	8014f82 <arm_softmax_s8+0xc02>
 8014f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014f70:	1851      	adds	r1, r2, r1
 8014f72:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8014f76:	f143 0300 	adc.w	r3, r3, #0
 8014f7a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8014f7e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8014f82:	f04f 0000 	mov.w	r0, #0
 8014f86:	f04f 0100 	mov.w	r1, #0
 8014f8a:	0fd0      	lsrs	r0, r2, #31
 8014f8c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014f90:	17d9      	asrs	r1, r3, #31
 8014f92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014f96:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014f9e:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8014fa2:	4b7f      	ldr	r3, [pc, #508]	; (80151a0 <arm_softmax_s8+0xe20>)
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d10b      	bne.n	8014fc0 <arm_softmax_s8+0xc40>
 8014fa8:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8014fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014fb0:	d106      	bne.n	8014fc0 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 8014fb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014fb6:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8014fba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014fbe:	6013      	str	r3, [r2, #0]
    return result;
 8014fc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014fc4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8014fc8:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8014fca:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8014fce:	ea02 0103 	and.w	r1, r2, r3
 8014fd2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8014fd6:	43da      	mvns	r2, r3
 8014fd8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8014fdc:	4013      	ands	r3, r2
 8014fde:	404b      	eors	r3, r1
 8014fe0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 8014fe4:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8014fe8:	1c53      	adds	r3, r2, #1
 8014fea:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8014fee:	2301      	movs	r3, #1
 8014ff0:	fa03 f202 	lsl.w	r2, r3, r2
 8014ff4:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8014ff8:	4013      	ands	r3, r2
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d002      	beq.n	8015004 <arm_softmax_s8+0xc84>
 8014ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8015002:	e000      	b.n	8015006 <arm_softmax_s8+0xc86>
 8015004:	2300      	movs	r3, #0
 8015006:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801500a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801500e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8015012:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015016:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015018:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801501c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015020:	2300      	movs	r3, #0
 8015022:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015024:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015028:	f04f 0300 	mov.w	r3, #0
 801502c:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8015030:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015034:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015038:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	0fdb      	lsrs	r3, r3, #31
 8015040:	b2da      	uxtb	r2, r3
 8015042:	2300      	movs	r3, #0
 8015044:	4053      	eors	r3, r2
 8015046:	b2db      	uxtb	r3, r3
 8015048:	2b00      	cmp	r3, #0
 801504a:	d012      	beq.n	8015072 <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 801504c:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8015050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015054:	2100      	movs	r1, #0
 8015056:	f1d2 0001 	rsbs	r0, r2, #1
 801505a:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 801505e:	eb61 0303 	sbc.w	r3, r1, r3
 8015062:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8015066:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 801506a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 801506e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015072:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015076:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	17da      	asrs	r2, r3, #31
 801507e:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8015082:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 8015086:	a344      	add	r3, pc, #272	; (adr r3, 8015198 <arm_softmax_s8+0xe18>)
 8015088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801508c:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8015090:	fb02 f001 	mul.w	r0, r2, r1
 8015094:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 8015098:	fb01 f103 	mul.w	r1, r1, r3
 801509c:	4401      	add	r1, r0
 801509e:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 80150a2:	fba0 2302 	umull	r2, r3, r0, r2
 80150a6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80150aa:	4613      	mov	r3, r2
 80150ac:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80150b0:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80150b4:	18cb      	adds	r3, r1, r3
 80150b6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80150ba:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80150be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c2:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 80150c6:	1851      	adds	r1, r2, r1
 80150c8:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 80150cc:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 80150d0:	414b      	adcs	r3, r1
 80150d2:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80150d6:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 80150da:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 80150de:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80150e2:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80150e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	da0a      	bge.n	8015104 <arm_softmax_s8+0xd84>
 80150ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80150f2:	1851      	adds	r1, r2, r1
 80150f4:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 80150f8:	f143 0300 	adc.w	r3, r3, #0
 80150fc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8015100:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8015104:	f04f 0000 	mov.w	r0, #0
 8015108:	f04f 0100 	mov.w	r1, #0
 801510c:	0fd0      	lsrs	r0, r2, #31
 801510e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015112:	17d9      	asrs	r1, r3, #31
 8015114:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015118:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 801511c:	4603      	mov	r3, r0
 801511e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015120:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015124:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	4b1e      	ldr	r3, [pc, #120]	; (80151a4 <arm_softmax_s8+0xe24>)
 801512c:	429a      	cmp	r2, r3
 801512e:	d10e      	bne.n	801514e <arm_softmax_s8+0xdce>
 8015130:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015134:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801513e:	d106      	bne.n	801514e <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 8015140:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015144:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015148:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801514c:	6013      	str	r3, [r2, #0]
    return result;
 801514e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015152:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015156:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8015158:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801515c:	ea02 0103 	and.w	r1, r2, r3
 8015160:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015164:	43da      	mvns	r2, r3
 8015166:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801516a:	4013      	ands	r3, r2
 801516c:	404b      	eors	r3, r1
 801516e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 8015172:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015176:	1c53      	adds	r3, r2, #1
 8015178:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 801517c:	2301      	movs	r3, #1
 801517e:	fa03 f202 	lsl.w	r2, r3, r2
 8015182:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015186:	4013      	ands	r3, r2
 8015188:	2b00      	cmp	r3, #0
 801518a:	d011      	beq.n	80151b0 <arm_softmax_s8+0xe30>
 801518c:	f04f 33ff 	mov.w	r3, #4294967295
 8015190:	e00f      	b.n	80151b2 <arm_softmax_s8+0xe32>
 8015192:	bf00      	nop
 8015194:	f3af 8000 	nop.w
 8015198:	2f16ac6c 	.word	0x2f16ac6c
 801519c:	00000000 	.word	0x00000000
 80151a0:	4da2cbf2 	.word	0x4da2cbf2
 80151a4:	2f16ac6c 	.word	0x2f16ac6c
 80151a8:	4da2cbf2 	.word	0x4da2cbf2
 80151ac:	00000000 	.word	0x00000000
 80151b0:	2300      	movs	r3, #0
 80151b2:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80151b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80151ba:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80151be:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80151c2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80151c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80151c8:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80151cc:	2300      	movs	r3, #0
 80151ce:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80151d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80151d4:	f04f 0300 	mov.w	r3, #0
 80151d8:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 80151dc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80151e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80151e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	0fdb      	lsrs	r3, r3, #31
 80151ec:	b2da      	uxtb	r2, r3
 80151ee:	2300      	movs	r3, #0
 80151f0:	4053      	eors	r3, r2
 80151f2:	b2db      	uxtb	r3, r3
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d012      	beq.n	801521e <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 80151f8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80151fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015200:	2100      	movs	r1, #0
 8015202:	f1d2 0001 	rsbs	r0, r2, #1
 8015206:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 801520a:	eb61 0303 	sbc.w	r3, r1, r3
 801520e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8015212:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8015216:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 801521a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801521e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015222:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	17da      	asrs	r2, r3, #31
 801522a:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 801522e:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 8015232:	a3ab      	add	r3, pc, #684	; (adr r3, 80154e0 <arm_softmax_s8+0x1160>)
 8015234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015238:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 801523c:	fb02 f001 	mul.w	r0, r2, r1
 8015240:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 8015244:	fb01 f103 	mul.w	r1, r1, r3
 8015248:	4401      	add	r1, r0
 801524a:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 801524e:	fba0 2302 	umull	r2, r3, r0, r2
 8015252:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8015256:	4613      	mov	r3, r2
 8015258:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 801525c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8015260:	18cb      	adds	r3, r1, r3
 8015262:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8015266:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801526e:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 8015272:	1851      	adds	r1, r2, r1
 8015274:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 8015278:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 801527c:	414b      	adcs	r3, r1
 801527e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8015282:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8015286:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 801528a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801528e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8015292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015296:	2b00      	cmp	r3, #0
 8015298:	da0a      	bge.n	80152b0 <arm_softmax_s8+0xf30>
 801529a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801529e:	1851      	adds	r1, r2, r1
 80152a0:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 80152a4:	f143 0300 	adc.w	r3, r3, #0
 80152a8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80152ac:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80152b0:	f04f 0000 	mov.w	r0, #0
 80152b4:	f04f 0100 	mov.w	r1, #0
 80152b8:	0fd0      	lsrs	r0, r2, #31
 80152ba:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80152be:	17d9      	asrs	r1, r3, #31
 80152c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80152c4:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80152c8:	4603      	mov	r3, r0
 80152ca:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80152cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80152d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80152d4:	681a      	ldr	r2, [r3, #0]
 80152d6:	4b80      	ldr	r3, [pc, #512]	; (80154d8 <arm_softmax_s8+0x1158>)
 80152d8:	429a      	cmp	r2, r3
 80152da:	d10e      	bne.n	80152fa <arm_softmax_s8+0xf7a>
 80152dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80152e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80152ea:	d106      	bne.n	80152fa <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 80152ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80152f0:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80152f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80152f8:	6013      	str	r3, [r2, #0]
    return result;
 80152fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80152fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8015302:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8015304:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015308:	ea02 0103 	and.w	r1, r2, r3
 801530c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015310:	43da      	mvns	r2, r3
 8015312:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015316:	4013      	ands	r3, r2
 8015318:	404b      	eors	r3, r1
 801531a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 801531e:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015322:	1c53      	adds	r3, r2, #1
 8015324:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015328:	2301      	movs	r3, #1
 801532a:	fa03 f202 	lsl.w	r2, r3, r2
 801532e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015332:	4013      	ands	r3, r2
 8015334:	2b00      	cmp	r3, #0
 8015336:	d002      	beq.n	801533e <arm_softmax_s8+0xfbe>
 8015338:	f04f 33ff 	mov.w	r3, #4294967295
 801533c:	e000      	b.n	8015340 <arm_softmax_s8+0xfc0>
 801533e:	2300      	movs	r3, #0
 8015340:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015344:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015348:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 801534c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015350:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015352:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015356:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 801535a:	2300      	movs	r3, #0
 801535c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801535e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015362:	f04f 0300 	mov.w	r3, #0
 8015366:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 801536a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801536e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015372:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	0fdb      	lsrs	r3, r3, #31
 801537a:	b2da      	uxtb	r2, r3
 801537c:	2300      	movs	r3, #0
 801537e:	4053      	eors	r3, r2
 8015380:	b2db      	uxtb	r3, r3
 8015382:	2b00      	cmp	r3, #0
 8015384:	d012      	beq.n	80153ac <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 8015386:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801538e:	2100      	movs	r1, #0
 8015390:	f1d2 0001 	rsbs	r0, r2, #1
 8015394:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 8015398:	eb61 0303 	sbc.w	r3, r1, r3
 801539c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80153a0:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80153a4:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 80153a8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80153ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80153b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	17da      	asrs	r2, r3, #31
 80153b8:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80153bc:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 80153c0:	a343      	add	r3, pc, #268	; (adr r3, 80154d0 <arm_softmax_s8+0x1150>)
 80153c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c6:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 80153ca:	fb02 f001 	mul.w	r0, r2, r1
 80153ce:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 80153d2:	fb01 f103 	mul.w	r1, r1, r3
 80153d6:	4401      	add	r1, r0
 80153d8:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 80153dc:	fba0 2302 	umull	r2, r3, r0, r2
 80153e0:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80153e4:	4613      	mov	r3, r2
 80153e6:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 80153ea:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80153ee:	18cb      	adds	r3, r1, r3
 80153f0:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80153f4:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80153f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153fc:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8015400:	1851      	adds	r1, r2, r1
 8015402:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8015406:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 801540a:	414b      	adcs	r3, r1
 801540c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8015410:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8015414:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8015418:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801541c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8015420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015424:	2b00      	cmp	r3, #0
 8015426:	da0a      	bge.n	801543e <arm_softmax_s8+0x10be>
 8015428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801542c:	1851      	adds	r1, r2, r1
 801542e:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8015432:	f143 0300 	adc.w	r3, r3, #0
 8015436:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 801543a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 801543e:	f04f 0000 	mov.w	r0, #0
 8015442:	f04f 0100 	mov.w	r1, #0
 8015446:	0fd0      	lsrs	r0, r2, #31
 8015448:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801544c:	17d9      	asrs	r1, r3, #31
 801544e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015452:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8015456:	4603      	mov	r3, r0
 8015458:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801545a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801545e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015462:	681a      	ldr	r2, [r3, #0]
 8015464:	4b1d      	ldr	r3, [pc, #116]	; (80154dc <arm_softmax_s8+0x115c>)
 8015466:	429a      	cmp	r2, r3
 8015468:	d10e      	bne.n	8015488 <arm_softmax_s8+0x1108>
 801546a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801546e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015478:	d106      	bne.n	8015488 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 801547a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801547e:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8015482:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015486:	6013      	str	r3, [r2, #0]
    return result;
 8015488:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801548c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015490:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8015492:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015496:	ea02 0103 	and.w	r1, r2, r3
 801549a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801549e:	43da      	mvns	r2, r3
 80154a0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80154a4:	4013      	ands	r3, r2
 80154a6:	404b      	eors	r3, r1
 80154a8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 80154ac:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80154b0:	1c53      	adds	r3, r2, #1
 80154b2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80154b6:	2301      	movs	r3, #1
 80154b8:	fa03 f202 	lsl.w	r2, r3, r2
 80154bc:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80154c0:	4013      	ands	r3, r2
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d010      	beq.n	80154e8 <arm_softmax_s8+0x1168>
 80154c6:	f04f 33ff 	mov.w	r3, #4294967295
 80154ca:	e00e      	b.n	80154ea <arm_softmax_s8+0x116a>
 80154cc:	f3af 8000 	nop.w
 80154d0:	02582ab7 	.word	0x02582ab7
 80154d4:	00000000 	.word	0x00000000
 80154d8:	1152aaa4 	.word	0x1152aaa4
 80154dc:	02582ab7 	.word	0x02582ab7
 80154e0:	1152aaa4 	.word	0x1152aaa4
 80154e4:	00000000 	.word	0x00000000
 80154e8:	2300      	movs	r3, #0
 80154ea:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80154ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154f2:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 80154f6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80154fa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80154fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015500:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8015504:	2300      	movs	r3, #0
 8015506:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801550c:	f04f 0300 	mov.w	r3, #0
 8015510:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 8015514:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015518:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801551c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	0fdb      	lsrs	r3, r3, #31
 8015524:	b2da      	uxtb	r2, r3
 8015526:	2300      	movs	r3, #0
 8015528:	4053      	eors	r3, r2
 801552a:	b2db      	uxtb	r3, r3
 801552c:	2b00      	cmp	r3, #0
 801552e:	d012      	beq.n	8015556 <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 8015530:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8015534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015538:	2100      	movs	r1, #0
 801553a:	f1d2 0001 	rsbs	r0, r2, #1
 801553e:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 8015542:	eb61 0303 	sbc.w	r3, r1, r3
 8015546:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 801554a:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 801554e:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8015552:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015556:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801555a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	17da      	asrs	r2, r3, #31
 8015562:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 8015566:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 801556a:	4ad3      	ldr	r2, [pc, #844]	; (80158b8 <arm_softmax_s8+0x1538>)
 801556c:	f04f 0300 	mov.w	r3, #0
 8015570:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8015574:	fb02 f001 	mul.w	r0, r2, r1
 8015578:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 801557c:	fb01 f103 	mul.w	r1, r1, r3
 8015580:	4401      	add	r1, r0
 8015582:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8015586:	fba0 2302 	umull	r2, r3, r0, r2
 801558a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 801558e:	4613      	mov	r3, r2
 8015590:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 8015594:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8015598:	18cb      	adds	r3, r1, r3
 801559a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 801559e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80155a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a6:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 80155aa:	1851      	adds	r1, r2, r1
 80155ac:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 80155b0:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 80155b4:	414b      	adcs	r3, r1
 80155b6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80155ba:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 80155be:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80155c2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80155c6:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80155ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	da0a      	bge.n	80155e8 <arm_softmax_s8+0x1268>
 80155d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80155d6:	1851      	adds	r1, r2, r1
 80155d8:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 80155dc:	f143 0300 	adc.w	r3, r3, #0
 80155e0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80155e4:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 80155e8:	f04f 0000 	mov.w	r0, #0
 80155ec:	f04f 0100 	mov.w	r1, #0
 80155f0:	0fd0      	lsrs	r0, r2, #31
 80155f2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80155f6:	17d9      	asrs	r1, r3, #31
 80155f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80155fc:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8015600:	4603      	mov	r3, r0
 8015602:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015604:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015608:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	4baa      	ldr	r3, [pc, #680]	; (80158b8 <arm_softmax_s8+0x1538>)
 8015610:	429a      	cmp	r2, r3
 8015612:	d10e      	bne.n	8015632 <arm_softmax_s8+0x12b2>
 8015614:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015618:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015622:	d106      	bne.n	8015632 <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 8015624:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015628:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 801562c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015630:	6013      	str	r3, [r2, #0]
    return result;
 8015632:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015636:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801563a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 801563c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015640:	ea02 0103 	and.w	r1, r2, r3
 8015644:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015648:	43da      	mvns	r2, r3
 801564a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801564e:	4013      	ands	r3, r2
 8015650:	404b      	eors	r3, r1
 8015652:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 8015656:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801565a:	1c53      	adds	r3, r2, #1
 801565c:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015660:	2301      	movs	r3, #1
 8015662:	fa03 f202 	lsl.w	r2, r3, r2
 8015666:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801566a:	4013      	ands	r3, r2
 801566c:	2b00      	cmp	r3, #0
 801566e:	d002      	beq.n	8015676 <arm_softmax_s8+0x12f6>
 8015670:	f04f 33ff 	mov.w	r3, #4294967295
 8015674:	e000      	b.n	8015678 <arm_softmax_s8+0x12f8>
 8015676:	2300      	movs	r3, #0
 8015678:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801567c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015680:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8015684:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015688:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801568a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801568e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8015692:	2300      	movs	r3, #0
 8015694:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015696:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801569a:	f04f 0300 	mov.w	r3, #0
 801569e:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 80156a2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80156a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80156aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	0fdb      	lsrs	r3, r3, #31
 80156b2:	b2da      	uxtb	r2, r3
 80156b4:	2300      	movs	r3, #0
 80156b6:	4053      	eors	r3, r2
 80156b8:	b2db      	uxtb	r3, r3
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d012      	beq.n	80156e4 <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 80156be:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80156c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c6:	2100      	movs	r1, #0
 80156c8:	f1d2 0001 	rsbs	r0, r2, #1
 80156cc:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 80156d0:	eb61 0303 	sbc.w	r3, r1, r3
 80156d4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80156d8:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 80156dc:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 80156e0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80156e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80156e8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	17da      	asrs	r2, r3, #31
 80156f0:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80156f4:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 80156f8:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80156fc:	f04f 0300 	mov.w	r3, #0
 8015700:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 8015704:	fb02 f001 	mul.w	r0, r2, r1
 8015708:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 801570c:	fb01 f103 	mul.w	r1, r1, r3
 8015710:	4401      	add	r1, r0
 8015712:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 8015716:	fba0 2302 	umull	r2, r3, r0, r2
 801571a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 801571e:	4613      	mov	r3, r2
 8015720:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8015724:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8015728:	18cb      	adds	r3, r1, r3
 801572a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 801572e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8015732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015736:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 801573a:	1851      	adds	r1, r2, r1
 801573c:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8015740:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 8015744:	414b      	adcs	r3, r1
 8015746:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 801574a:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 801574e:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8015752:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015756:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801575e:	2b00      	cmp	r3, #0
 8015760:	da0a      	bge.n	8015778 <arm_softmax_s8+0x13f8>
 8015762:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015766:	1851      	adds	r1, r2, r1
 8015768:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 801576c:	f143 0300 	adc.w	r3, r3, #0
 8015770:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8015774:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8015778:	f04f 0000 	mov.w	r0, #0
 801577c:	f04f 0100 	mov.w	r1, #0
 8015780:	0fd0      	lsrs	r0, r2, #31
 8015782:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015786:	17d9      	asrs	r1, r3, #31
 8015788:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801578c:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8015790:	4603      	mov	r3, r0
 8015792:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015794:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015798:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	2bf2      	cmp	r3, #242	; 0xf2
 80157a0:	d10e      	bne.n	80157c0 <arm_softmax_s8+0x1440>
 80157a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80157a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80157b0:	d106      	bne.n	80157c0 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 80157b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80157b6:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80157ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80157be:	6013      	str	r3, [r2, #0]
    return result;
 80157c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80157c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80157c8:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80157ca:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80157ce:	ea02 0103 	and.w	r1, r2, r3
 80157d2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80157d6:	43da      	mvns	r2, r3
 80157d8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80157dc:	4013      	ands	r3, r2
 80157de:	404b      	eors	r3, r1
 80157e0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 80157e4:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d102      	bne.n	80157f2 <arm_softmax_s8+0x1472>
 80157ec:	f04f 33ff 	mov.w	r3, #4294967295
 80157f0:	e000      	b.n	80157f4 <arm_softmax_s8+0x1474>
 80157f2:	2300      	movs	r3, #0
 80157f4:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80157f8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80157fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015800:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015804:	43da      	mvns	r2, r3
 8015806:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801580a:	4013      	ands	r3, r2
 801580c:	404b      	eors	r3, r1
 801580e:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 8015812:	2300      	movs	r3, #0
 8015814:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801581c:	3b01      	subs	r3, #1
 801581e:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 8015822:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 8015826:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 801582a:	4013      	ands	r3, r2
 801582c:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 8015830:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8015834:	131b      	asrs	r3, r3, #12
 8015836:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 801583a:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 801583e:	105b      	asrs	r3, r3, #1
 8015840:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 8015844:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8015848:	2b00      	cmp	r3, #0
 801584a:	da04      	bge.n	8015856 <arm_softmax_s8+0x14d6>
        threshold++;
 801584c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8015850:	3301      	adds	r3, #1
 8015852:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 8015856:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 801585a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801585e:	429a      	cmp	r2, r3
 8015860:	dd04      	ble.n	801586c <arm_softmax_s8+0x14ec>
        result++;
 8015862:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8015866:	3301      	adds	r3, #1
 8015868:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 801586c:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 8015870:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8015874:	4413      	add	r3, r2
 8015876:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 801587a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 801587e:	3301      	adds	r3, #1
 8015880:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8015884:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015888:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801588c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	429a      	cmp	r2, r3
 8015894:	f6fe add2 	blt.w	801443c <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8015898:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 801589c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158a0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80158a4:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 80158a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158aa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d103      	bne.n	80158bc <arm_softmax_s8+0x153c>
    return 32U;
 80158b4:	2320      	movs	r3, #32
 80158b6:	e009      	b.n	80158cc <arm_softmax_s8+0x154c>
 80158b8:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 80158bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	fab3 f383 	clz	r3, r3
 80158ca:	b2db      	uxtb	r3, r3
 80158cc:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 80158d0:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 80158d4:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 80158d8:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 80158dc:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 80158e0:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 80158e4:	fa02 f303 	lsl.w	r3, r2, r3
 80158e8:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 80158ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80158f4:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 80158f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158fa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	17da      	asrs	r2, r3, #31
 8015902:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8015906:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 801590a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801590e:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8015912:	4602      	mov	r2, r0
 8015914:	18d3      	adds	r3, r2, r3
 8015916:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801591a:	460b      	mov	r3, r1
 801591c:	f143 0300 	adc.w	r3, r3, #0
 8015920:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8015924:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8015928:	f607 0228 	addw	r2, r7, #2088	; 0x828
 801592c:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8015930:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8015934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015938:	2b00      	cmp	r3, #0
 801593a:	db04      	blt.n	8015946 <arm_softmax_s8+0x15c6>
 801593c:	f04f 0001 	mov.w	r0, #1
 8015940:	f04f 0100 	mov.w	r1, #0
 8015944:	e003      	b.n	801594e <arm_softmax_s8+0x15ce>
 8015946:	f04f 30ff 	mov.w	r0, #4294967295
 801594a:	f04f 31ff 	mov.w	r1, #4294967295
 801594e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8015952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015956:	1884      	adds	r4, r0, r2
 8015958:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 801595c:	eb41 0303 	adc.w	r3, r1, r3
 8015960:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8015964:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8015968:	460b      	mov	r3, r1
 801596a:	0fdb      	lsrs	r3, r3, #31
 801596c:	2200      	movs	r2, #0
 801596e:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8015972:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 8015976:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 801597a:	4602      	mov	r2, r0
 801597c:	189b      	adds	r3, r3, r2
 801597e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8015982:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8015986:	460a      	mov	r2, r1
 8015988:	4153      	adcs	r3, r2
 801598a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 801598e:	f04f 0200 	mov.w	r2, #0
 8015992:	f04f 0300 	mov.w	r3, #0
 8015996:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 801599a:	084a      	lsrs	r2, r1, #1
 801599c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80159a0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80159a4:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80159a8:	104b      	asrs	r3, r1, #1
 80159aa:	4610      	mov	r0, r2
 80159ac:	4619      	mov	r1, r3
 80159ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80159b2:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80159b6:	4603      	mov	r3, r0
 80159b8:	6013      	str	r3, [r2, #0]
 80159ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80159be:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80159c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80159c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80159ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80159d2:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80159d6:	2300      	movs	r3, #0
 80159d8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80159da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80159de:	f04f 0300 	mov.w	r3, #0
 80159e2:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 80159e6:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80159ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80159ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	0fdb      	lsrs	r3, r3, #31
 80159f6:	b2da      	uxtb	r2, r3
 80159f8:	2301      	movs	r3, #1
 80159fa:	4053      	eors	r3, r2
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d012      	beq.n	8015a28 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 8015a02:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8015a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a0a:	2100      	movs	r1, #0
 8015a0c:	f1d2 0001 	rsbs	r0, r2, #1
 8015a10:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 8015a14:	eb61 0303 	sbc.w	r3, r1, r3
 8015a18:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8015a1c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8015a20:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8015a24:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015a28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015a2c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	17da      	asrs	r2, r3, #31
 8015a34:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8015a38:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 8015a3c:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 8015a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a44:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8015a48:	fb02 f001 	mul.w	r0, r2, r1
 8015a4c:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8015a50:	fb01 f103 	mul.w	r1, r1, r3
 8015a54:	4401      	add	r1, r0
 8015a56:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8015a5a:	fba0 2302 	umull	r2, r3, r0, r2
 8015a5e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8015a62:	4613      	mov	r3, r2
 8015a64:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 8015a68:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8015a6c:	18cb      	adds	r3, r1, r3
 8015a6e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8015a72:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8015a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a7a:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 8015a7e:	1851      	adds	r1, r2, r1
 8015a80:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8015a84:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8015a88:	414b      	adcs	r3, r1
 8015a8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8015a8e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8015a92:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8015a96:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015a9a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8015a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	da0a      	bge.n	8015abc <arm_softmax_s8+0x173c>
 8015aa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015aaa:	1851      	adds	r1, r2, r1
 8015aac:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8015ab0:	f143 0300 	adc.w	r3, r3, #0
 8015ab4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8015ab8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8015abc:	f04f 0000 	mov.w	r0, #0
 8015ac0:	f04f 0100 	mov.w	r1, #0
 8015ac4:	0fd0      	lsrs	r0, r2, #31
 8015ac6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015aca:	17d9      	asrs	r1, r3, #31
 8015acc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ad0:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015ad8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015adc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8015ae6:	d10e      	bne.n	8015b06 <arm_softmax_s8+0x1786>
 8015ae8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015aec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015af6:	d106      	bne.n	8015b06 <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 8015af8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015afc:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8015b00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015b04:	6013      	str	r3, [r2, #0]
    return result;
 8015b06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b0a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8015b0e:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8015b10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b14:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8015b18:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 8015b1c:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 8015b1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b22:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8015b26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8015b2a:	6013      	str	r3, [r2, #0]
 8015b2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b30:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8015b34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b38:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	6013      	str	r3, [r2, #0]
 8015b40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b44:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8015b48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015b54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b58:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015b64:	f04f 0300 	mov.w	r3, #0
 8015b68:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8015b6c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015b70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b74:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	0fdb      	lsrs	r3, r3, #31
 8015b7c:	b2da      	uxtb	r2, r3
 8015b7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	0fdb      	lsrs	r3, r3, #31
 8015b8a:	b2db      	uxtb	r3, r3
 8015b8c:	4053      	eors	r3, r2
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d012      	beq.n	8015bba <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 8015b94:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8015b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b9c:	2100      	movs	r1, #0
 8015b9e:	f1d2 0001 	rsbs	r0, r2, #1
 8015ba2:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 8015ba6:	eb61 0303 	sbc.w	r3, r1, r3
 8015baa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8015bae:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8015bb2:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8015bb6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015bba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015bbe:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	17da      	asrs	r2, r3, #31
 8015bc6:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8015bca:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 8015bce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015bd2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	17da      	asrs	r2, r3, #31
 8015bda:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8015bde:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 8015be2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8015be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015bea:	460b      	mov	r3, r1
 8015bec:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8015bf0:	fb02 f203 	mul.w	r2, r2, r3
 8015bf4:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8015bf8:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8015bfc:	e9c4 0100 	strd	r0, r1, [r4]
 8015c00:	4601      	mov	r1, r0
 8015c02:	fb01 f303 	mul.w	r3, r1, r3
 8015c06:	4413      	add	r3, r2
 8015c08:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8015c0c:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8015c10:	fba2 1201 	umull	r1, r2, r2, r1
 8015c14:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 8015c18:	460a      	mov	r2, r1
 8015c1a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015c1e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015c22:	4413      	add	r3, r2
 8015c24:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015c28:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8015c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c30:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015c34:	1851      	adds	r1, r2, r1
 8015c36:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8015c3a:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8015c3e:	414b      	adcs	r3, r1
 8015c40:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8015c44:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8015c48:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8015c4c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015c50:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8015c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	da0a      	bge.n	8015c72 <arm_softmax_s8+0x18f2>
 8015c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c60:	1851      	adds	r1, r2, r1
 8015c62:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8015c66:	f143 0300 	adc.w	r3, r3, #0
 8015c6a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8015c6e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8015c72:	f04f 0000 	mov.w	r0, #0
 8015c76:	f04f 0100 	mov.w	r1, #0
 8015c7a:	0fd0      	lsrs	r0, r2, #31
 8015c7c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015c80:	17d9      	asrs	r1, r3, #31
 8015c82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c86:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015c8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c92:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8015c96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c9a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015c9e:	6812      	ldr	r2, [r2, #0]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	429a      	cmp	r2, r3
 8015ca4:	d10e      	bne.n	8015cc4 <arm_softmax_s8+0x1944>
 8015ca6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015caa:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015cb4:	d106      	bne.n	8015cc4 <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 8015cb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cba:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8015cbe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015cc2:	6013      	str	r3, [r2, #0]
    return result;
 8015cc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cc8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015ccc:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8015cce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cd2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	1a99      	subs	r1, r3, r2
 8015cda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cde:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8015ce2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ce6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	6013      	str	r3, [r2, #0]
 8015cee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cf2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015cf6:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8015cf8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cfc:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8015d00:	2300      	movs	r3, #0
 8015d02:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015d08:	f04f 0300 	mov.w	r3, #0
 8015d0c:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8015d10:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015d14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d18:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	0fdb      	lsrs	r3, r3, #31
 8015d20:	b2da      	uxtb	r2, r3
 8015d22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d26:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	0fdb      	lsrs	r3, r3, #31
 8015d2e:	b2db      	uxtb	r3, r3
 8015d30:	4053      	eors	r3, r2
 8015d32:	b2db      	uxtb	r3, r3
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d012      	beq.n	8015d5e <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 8015d38:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8015d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d40:	2100      	movs	r1, #0
 8015d42:	f1d2 0001 	rsbs	r0, r2, #1
 8015d46:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 8015d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8015d4e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8015d52:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8015d56:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8015d5a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015d5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	17da      	asrs	r2, r3, #31
 8015d6a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8015d6e:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 8015d72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	17da      	asrs	r2, r3, #31
 8015d7e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8015d82:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 8015d86:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8015d8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015d8e:	460b      	mov	r3, r1
 8015d90:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8015d94:	fb02 f203 	mul.w	r2, r2, r3
 8015d98:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8015d9c:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 8015da0:	e9c4 0100 	strd	r0, r1, [r4]
 8015da4:	4601      	mov	r1, r0
 8015da6:	fb01 f303 	mul.w	r3, r1, r3
 8015daa:	4413      	add	r3, r2
 8015dac:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8015db0:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 8015db4:	fba2 1201 	umull	r1, r2, r2, r1
 8015db8:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 8015dbc:	460a      	mov	r2, r1
 8015dbe:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 8015dc2:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8015dc6:	4413      	add	r3, r2
 8015dc8:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8015dcc:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8015dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dd4:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8015dd8:	1851      	adds	r1, r2, r1
 8015dda:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8015dde:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8015de2:	414b      	adcs	r3, r1
 8015de4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8015de8:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8015dec:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8015df0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015df4:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8015df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	da0a      	bge.n	8015e16 <arm_softmax_s8+0x1a96>
 8015e00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015e04:	1851      	adds	r1, r2, r1
 8015e06:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8015e0a:	f143 0300 	adc.w	r3, r3, #0
 8015e0e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8015e12:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8015e16:	f04f 0000 	mov.w	r0, #0
 8015e1a:	f04f 0100 	mov.w	r1, #0
 8015e1e:	0fd0      	lsrs	r0, r2, #31
 8015e20:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015e24:	17d9      	asrs	r1, r3, #31
 8015e26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e2a:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8015e2e:	4603      	mov	r3, r0
 8015e30:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015e32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e36:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8015e3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e3e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015e42:	6812      	ldr	r2, [r2, #0]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d10e      	bne.n	8015e68 <arm_softmax_s8+0x1ae8>
 8015e4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e4e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015e58:	d106      	bne.n	8015e68 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 8015e5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e5e:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8015e62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015e66:	6013      	str	r3, [r2, #0]
    return result;
 8015e68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e6c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8015e70:	681a      	ldr	r2, [r3, #0]
 8015e72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015e7a:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8015e7c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8015e80:	4619      	mov	r1, r3
 8015e82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e86:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 8015e8a:	1e4b      	subs	r3, r1, #1
 8015e8c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8015e8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e92:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8015e96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e9a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	009b      	lsls	r3, r3, #2
 8015ea2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8015ea4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ea8:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8015eac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015eb0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015eb4:	6812      	ldr	r2, [r2, #0]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	429a      	cmp	r2, r3
 8015eba:	dd02      	ble.n	8015ec2 <arm_softmax_s8+0x1b42>
 8015ebc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015ec0:	e000      	b.n	8015ec4 <arm_softmax_s8+0x1b44>
 8015ec2:	2000      	movs	r0, #0
 8015ec4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ec8:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8015ecc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ed0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015ed4:	6812      	ldr	r2, [r2, #0]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	dd01      	ble.n	8015ee0 <arm_softmax_s8+0x1b60>
 8015edc:	2200      	movs	r2, #0
 8015ede:	e001      	b.n	8015ee4 <arm_softmax_s8+0x1b64>
 8015ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8015ee4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ee8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	ea02 0103 	and.w	r1, r2, r3
 8015ef2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ef6:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8015efa:	ea81 0300 	eor.w	r3, r1, r0
 8015efe:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8015f00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	425a      	negs	r2, r3
 8015f0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f10:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	4293      	cmp	r3, r2
 8015f18:	da02      	bge.n	8015f20 <arm_softmax_s8+0x1ba0>
 8015f1a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015f1e:	e000      	b.n	8015f22 <arm_softmax_s8+0x1ba2>
 8015f20:	2000      	movs	r0, #0
 8015f22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	425a      	negs	r2, r3
 8015f2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f32:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	4293      	cmp	r3, r2
 8015f3a:	da01      	bge.n	8015f40 <arm_softmax_s8+0x1bc0>
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	e001      	b.n	8015f44 <arm_softmax_s8+0x1bc4>
 8015f40:	f04f 32ff 	mov.w	r2, #4294967295
 8015f44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f48:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	ea02 0103 	and.w	r1, r2, r3
 8015f52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f56:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8015f5a:	ea81 0300 	eor.w	r3, r1, r0
 8015f5e:	6013      	str	r3, [r2, #0]
    return result;
 8015f60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8015f68:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8015f6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f6e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8015f72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f76:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	440b      	add	r3, r1
 8015f7e:	6013      	str	r3, [r2, #0]
 8015f80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f84:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8015f88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f8c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	6013      	str	r3, [r2, #0]
 8015f94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f98:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 8015f9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fa0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015fa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fac:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015fb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015fb8:	f04f 0300 	mov.w	r3, #0
 8015fbc:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8015fc0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015fc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fc8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	0fdb      	lsrs	r3, r3, #31
 8015fd0:	b2da      	uxtb	r2, r3
 8015fd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fd6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	0fdb      	lsrs	r3, r3, #31
 8015fde:	b2db      	uxtb	r3, r3
 8015fe0:	4053      	eors	r3, r2
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d012      	beq.n	801600e <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8015fe8:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8015fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ff0:	2100      	movs	r1, #0
 8015ff2:	f1d2 0001 	rsbs	r0, r2, #1
 8015ff6:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8015ffa:	eb61 0303 	sbc.w	r3, r1, r3
 8015ffe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8016002:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8016006:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801600a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801600e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016012:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	17da      	asrs	r2, r3, #31
 801601a:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801601e:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8016022:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016026:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	17da      	asrs	r2, r3, #31
 801602e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8016032:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 8016036:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 801603a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801603e:	460b      	mov	r3, r1
 8016040:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8016044:	fb02 f203 	mul.w	r2, r2, r3
 8016048:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801604c:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8016050:	e9c4 0100 	strd	r0, r1, [r4]
 8016054:	4601      	mov	r1, r0
 8016056:	fb01 f303 	mul.w	r3, r1, r3
 801605a:	4413      	add	r3, r2
 801605c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8016060:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8016064:	fba2 1201 	umull	r1, r2, r2, r1
 8016068:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 801606c:	460a      	mov	r2, r1
 801606e:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 8016072:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016076:	4413      	add	r3, r2
 8016078:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801607c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8016080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016084:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 8016088:	1851      	adds	r1, r2, r1
 801608a:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 801608e:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8016092:	414b      	adcs	r3, r1
 8016094:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8016098:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 801609c:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80160a0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80160a4:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80160a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	da0a      	bge.n	80160c6 <arm_softmax_s8+0x1d46>
 80160b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80160b4:	1851      	adds	r1, r2, r1
 80160b6:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80160ba:	f143 0300 	adc.w	r3, r3, #0
 80160be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80160c2:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 80160c6:	f04f 0000 	mov.w	r0, #0
 80160ca:	f04f 0100 	mov.w	r1, #0
 80160ce:	0fd0      	lsrs	r0, r2, #31
 80160d0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80160d4:	17d9      	asrs	r1, r3, #31
 80160d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160da:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80160de:	4603      	mov	r3, r0
 80160e0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80160e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160e6:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 80160ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160ee:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80160f2:	6812      	ldr	r2, [r2, #0]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d10e      	bne.n	8016118 <arm_softmax_s8+0x1d98>
 80160fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160fe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016108:	d106      	bne.n	8016118 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 801610a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801610e:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8016112:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016116:	6013      	str	r3, [r2, #0]
    return result;
 8016118:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801611c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8016120:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016122:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016126:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	1a99      	subs	r1, r3, r2
 801612e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016132:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8016136:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801613a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	6013      	str	r3, [r2, #0]
 8016142:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016146:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801614a:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 801614c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016150:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8016154:	2300      	movs	r3, #0
 8016156:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801615c:	f04f 0300 	mov.w	r3, #0
 8016160:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8016164:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016168:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801616c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	0fdb      	lsrs	r3, r3, #31
 8016174:	b2da      	uxtb	r2, r3
 8016176:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801617a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	0fdb      	lsrs	r3, r3, #31
 8016182:	b2db      	uxtb	r3, r3
 8016184:	4053      	eors	r3, r2
 8016186:	b2db      	uxtb	r3, r3
 8016188:	2b00      	cmp	r3, #0
 801618a:	d012      	beq.n	80161b2 <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 801618c:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8016190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016194:	2100      	movs	r1, #0
 8016196:	f1d2 0001 	rsbs	r0, r2, #1
 801619a:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 801619e:	eb61 0303 	sbc.w	r3, r1, r3
 80161a2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80161a6:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 80161aa:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 80161ae:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80161b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161b6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	17da      	asrs	r2, r3, #31
 80161be:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80161c2:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 80161c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161ca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	17da      	asrs	r2, r3, #31
 80161d2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 80161d6:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 80161da:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80161de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80161e2:	460b      	mov	r3, r1
 80161e4:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 80161e8:	fb02 f203 	mul.w	r2, r2, r3
 80161ec:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80161f0:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 80161f4:	e9c4 0100 	strd	r0, r1, [r4]
 80161f8:	4601      	mov	r1, r0
 80161fa:	fb01 f303 	mul.w	r3, r1, r3
 80161fe:	4413      	add	r3, r2
 8016200:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8016204:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8016208:	fba2 1201 	umull	r1, r2, r2, r1
 801620c:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 8016210:	460a      	mov	r2, r1
 8016212:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 8016216:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 801621a:	4413      	add	r3, r2
 801621c:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8016220:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8016224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016228:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 801622c:	1851      	adds	r1, r2, r1
 801622e:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8016232:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8016236:	414b      	adcs	r3, r1
 8016238:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 801623c:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8016240:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8016244:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016248:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016250:	2b00      	cmp	r3, #0
 8016252:	da0a      	bge.n	801626a <arm_softmax_s8+0x1eea>
 8016254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016258:	1851      	adds	r1, r2, r1
 801625a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 801625e:	f143 0300 	adc.w	r3, r3, #0
 8016262:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8016266:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 801626a:	f04f 0000 	mov.w	r0, #0
 801626e:	f04f 0100 	mov.w	r1, #0
 8016272:	0fd0      	lsrs	r0, r2, #31
 8016274:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016278:	17d9      	asrs	r1, r3, #31
 801627a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801627e:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8016282:	4603      	mov	r3, r0
 8016284:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016286:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801628a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801628e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016292:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8016296:	6812      	ldr	r2, [r2, #0]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	429a      	cmp	r2, r3
 801629c:	d10e      	bne.n	80162bc <arm_softmax_s8+0x1f3c>
 801629e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162a2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80162ac:	d106      	bne.n	80162bc <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 80162ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162b2:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80162b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80162ba:	6013      	str	r3, [r2, #0]
    return result;
 80162bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80162c4:	681a      	ldr	r2, [r3, #0]
 80162c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162ca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80162ce:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80162d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80162d4:	4619      	mov	r1, r3
 80162d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162da:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 80162de:	1e4b      	subs	r3, r1, #1
 80162e0:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80162e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162e6:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80162ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162ee:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	009b      	lsls	r3, r3, #2
 80162f6:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80162f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162fc:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8016300:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016304:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016308:	6812      	ldr	r2, [r2, #0]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	429a      	cmp	r2, r3
 801630e:	dd02      	ble.n	8016316 <arm_softmax_s8+0x1f96>
 8016310:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016314:	e000      	b.n	8016318 <arm_softmax_s8+0x1f98>
 8016316:	2000      	movs	r0, #0
 8016318:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801631c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8016320:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016324:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016328:	6812      	ldr	r2, [r2, #0]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	429a      	cmp	r2, r3
 801632e:	dd01      	ble.n	8016334 <arm_softmax_s8+0x1fb4>
 8016330:	2200      	movs	r2, #0
 8016332:	e001      	b.n	8016338 <arm_softmax_s8+0x1fb8>
 8016334:	f04f 32ff 	mov.w	r2, #4294967295
 8016338:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801633c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	ea02 0103 	and.w	r1, r2, r3
 8016346:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801634a:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 801634e:	ea81 0300 	eor.w	r3, r1, r0
 8016352:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016354:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016358:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	425a      	negs	r2, r3
 8016360:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016364:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	4293      	cmp	r3, r2
 801636c:	da02      	bge.n	8016374 <arm_softmax_s8+0x1ff4>
 801636e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8016372:	e000      	b.n	8016376 <arm_softmax_s8+0x1ff6>
 8016374:	2000      	movs	r0, #0
 8016376:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801637a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	425a      	negs	r2, r3
 8016382:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016386:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	4293      	cmp	r3, r2
 801638e:	da01      	bge.n	8016394 <arm_softmax_s8+0x2014>
 8016390:	2200      	movs	r2, #0
 8016392:	e001      	b.n	8016398 <arm_softmax_s8+0x2018>
 8016394:	f04f 32ff 	mov.w	r2, #4294967295
 8016398:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801639c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	ea02 0103 	and.w	r1, r2, r3
 80163a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163aa:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80163ae:	ea81 0300 	eor.w	r3, r1, r0
 80163b2:	6013      	str	r3, [r2, #0]
    return result;
 80163b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163b8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80163bc:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80163be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163c2:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80163c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163ca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	440b      	add	r3, r1
 80163d2:	6013      	str	r3, [r2, #0]
 80163d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163d8:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80163dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	6013      	str	r3, [r2, #0]
 80163e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163ec:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 80163f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80163fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016400:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8016404:	2300      	movs	r3, #0
 8016406:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801640c:	f04f 0300 	mov.w	r3, #0
 8016410:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8016414:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016418:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801641c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	0fdb      	lsrs	r3, r3, #31
 8016424:	b2da      	uxtb	r2, r3
 8016426:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801642a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	0fdb      	lsrs	r3, r3, #31
 8016432:	b2db      	uxtb	r3, r3
 8016434:	4053      	eors	r3, r2
 8016436:	b2db      	uxtb	r3, r3
 8016438:	2b00      	cmp	r3, #0
 801643a:	d012      	beq.n	8016462 <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 801643c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8016440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016444:	2100      	movs	r1, #0
 8016446:	f1d2 0001 	rsbs	r0, r2, #1
 801644a:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 801644e:	eb61 0303 	sbc.w	r3, r1, r3
 8016452:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8016456:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 801645a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 801645e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016462:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016466:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	17da      	asrs	r2, r3, #31
 801646e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8016472:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 8016476:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801647a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	17da      	asrs	r2, r3, #31
 8016482:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8016486:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 801648a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801648e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016492:	460b      	mov	r3, r1
 8016494:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8016498:	fb02 f203 	mul.w	r2, r2, r3
 801649c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80164a0:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 80164a4:	e9c4 0100 	strd	r0, r1, [r4]
 80164a8:	4601      	mov	r1, r0
 80164aa:	fb01 f303 	mul.w	r3, r1, r3
 80164ae:	4413      	add	r3, r2
 80164b0:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80164b4:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 80164b8:	fba2 1201 	umull	r1, r2, r2, r1
 80164bc:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 80164c0:	460a      	mov	r2, r1
 80164c2:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 80164c6:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 80164ca:	4413      	add	r3, r2
 80164cc:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 80164d0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80164d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d8:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 80164dc:	1851      	adds	r1, r2, r1
 80164de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 80164e2:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 80164e6:	414b      	adcs	r3, r1
 80164e8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80164ec:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 80164f0:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 80164f4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80164f8:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80164fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016500:	2b00      	cmp	r3, #0
 8016502:	da0a      	bge.n	801651a <arm_softmax_s8+0x219a>
 8016504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016508:	1851      	adds	r1, r2, r1
 801650a:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 801650e:	f143 0300 	adc.w	r3, r3, #0
 8016512:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8016516:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 801651a:	f04f 0000 	mov.w	r0, #0
 801651e:	f04f 0100 	mov.w	r1, #0
 8016522:	0fd0      	lsrs	r0, r2, #31
 8016524:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016528:	17d9      	asrs	r1, r3, #31
 801652a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801652e:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8016532:	4603      	mov	r3, r0
 8016534:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016536:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801653a:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 801653e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016542:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8016546:	6812      	ldr	r2, [r2, #0]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	429a      	cmp	r2, r3
 801654c:	d10e      	bne.n	801656c <arm_softmax_s8+0x21ec>
 801654e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016552:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801655c:	d106      	bne.n	801656c <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 801655e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016562:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8016566:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801656a:	6013      	str	r3, [r2, #0]
    return result;
 801656c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016570:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8016574:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016576:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801657a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	1a99      	subs	r1, r3, r2
 8016582:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016586:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 801658a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801658e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	6013      	str	r3, [r2, #0]
 8016596:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801659a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801659e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80165a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165a4:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 80165a8:	2300      	movs	r3, #0
 80165aa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80165ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80165b0:	f04f 0300 	mov.w	r3, #0
 80165b4:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 80165b8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80165bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165c0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	0fdb      	lsrs	r3, r3, #31
 80165c8:	b2da      	uxtb	r2, r3
 80165ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165ce:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	0fdb      	lsrs	r3, r3, #31
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	4053      	eors	r3, r2
 80165da:	b2db      	uxtb	r3, r3
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d012      	beq.n	8016606 <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 80165e0:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80165e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165e8:	2100      	movs	r1, #0
 80165ea:	f1d2 0001 	rsbs	r0, r2, #1
 80165ee:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 80165f2:	eb61 0303 	sbc.w	r3, r1, r3
 80165f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80165fa:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 80165fe:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8016602:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016606:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801660a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	17da      	asrs	r2, r3, #31
 8016612:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8016616:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 801661a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801661e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	17da      	asrs	r2, r3, #31
 8016626:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 801662a:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 801662e:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8016632:	460b      	mov	r3, r1
 8016634:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8016638:	fb02 f203 	mul.w	r2, r2, r3
 801663c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8016640:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 8016644:	4601      	mov	r1, r0
 8016646:	fb01 f303 	mul.w	r3, r1, r3
 801664a:	4413      	add	r3, r2
 801664c:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8016650:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 8016654:	fba2 1201 	umull	r1, r2, r2, r1
 8016658:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 801665c:	460a      	mov	r2, r1
 801665e:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 8016662:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 8016666:	4413      	add	r3, r2
 8016668:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 801666c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8016670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016674:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8016678:	1851      	adds	r1, r2, r1
 801667a:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 801667e:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 8016682:	414b      	adcs	r3, r1
 8016684:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8016688:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 801668c:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8016690:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016694:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8016698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801669c:	2b00      	cmp	r3, #0
 801669e:	da0a      	bge.n	80166b6 <arm_softmax_s8+0x2336>
 80166a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80166a4:	1851      	adds	r1, r2, r1
 80166a6:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80166aa:	f143 0300 	adc.w	r3, r3, #0
 80166ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80166b2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80166b6:	f04f 0000 	mov.w	r0, #0
 80166ba:	f04f 0100 	mov.w	r1, #0
 80166be:	0fd0      	lsrs	r0, r2, #31
 80166c0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80166c4:	17d9      	asrs	r1, r3, #31
 80166c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166ca:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 80166ce:	4603      	mov	r3, r0
 80166d0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80166d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166d6:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 80166da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166de:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80166e2:	6812      	ldr	r2, [r2, #0]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	429a      	cmp	r2, r3
 80166e8:	d10e      	bne.n	8016708 <arm_softmax_s8+0x2388>
 80166ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166ee:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80166f8:	d106      	bne.n	8016708 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 80166fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166fe:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8016702:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016706:	6013      	str	r3, [r2, #0]
    return result;
 8016708:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801670c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8016710:	681a      	ldr	r2, [r3, #0]
 8016712:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016716:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801671a:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 801671c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8016720:	4619      	mov	r1, r3
 8016722:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016726:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801672a:	1e4b      	subs	r3, r1, #1
 801672c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801672e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016732:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8016736:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801673a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	009b      	lsls	r3, r3, #2
 8016742:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016744:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016748:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801674c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016750:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8016754:	6812      	ldr	r2, [r2, #0]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	429a      	cmp	r2, r3
 801675a:	dd02      	ble.n	8016762 <arm_softmax_s8+0x23e2>
 801675c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016760:	e000      	b.n	8016764 <arm_softmax_s8+0x23e4>
 8016762:	2000      	movs	r0, #0
 8016764:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016768:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801676c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016770:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8016774:	6812      	ldr	r2, [r2, #0]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	429a      	cmp	r2, r3
 801677a:	dd01      	ble.n	8016780 <arm_softmax_s8+0x2400>
 801677c:	2200      	movs	r2, #0
 801677e:	e001      	b.n	8016784 <arm_softmax_s8+0x2404>
 8016780:	f04f 32ff 	mov.w	r2, #4294967295
 8016784:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016788:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	ea02 0103 	and.w	r1, r2, r3
 8016792:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016796:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801679a:	ea81 0300 	eor.w	r3, r1, r0
 801679e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80167a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167a4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	425a      	negs	r2, r3
 80167ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167b0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	4293      	cmp	r3, r2
 80167b8:	da02      	bge.n	80167c0 <arm_softmax_s8+0x2440>
 80167ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80167be:	e000      	b.n	80167c2 <arm_softmax_s8+0x2442>
 80167c0:	2000      	movs	r0, #0
 80167c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167c6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	425a      	negs	r2, r3
 80167ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167d2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	4293      	cmp	r3, r2
 80167da:	da05      	bge.n	80167e8 <arm_softmax_s8+0x2468>
 80167dc:	2200      	movs	r2, #0
 80167de:	e005      	b.n	80167ec <arm_softmax_s8+0x246c>
 80167e0:	c3c3c3c4 	.word	0xc3c3c3c4
 80167e4:	ffffffff 	.word	0xffffffff
 80167e8:	f04f 32ff 	mov.w	r2, #4294967295
 80167ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	ea02 0103 	and.w	r1, r2, r3
 80167fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167fe:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8016802:	ea81 0300 	eor.w	r3, r1, r0
 8016806:	6013      	str	r3, [r2, #0]
    return result;
 8016808:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801680c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8016810:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016812:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016816:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801681a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801681e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	440b      	add	r3, r1
 8016826:	6013      	str	r3, [r2, #0]
 8016828:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801682c:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8016830:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016834:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 801683c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016840:	4619      	mov	r1, r3
 8016842:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016846:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 801684a:	1e4b      	subs	r3, r1, #1
 801684c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801684e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016852:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8016856:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801685a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	005b      	lsls	r3, r3, #1
 8016862:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016864:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016868:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801686c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016870:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8016874:	6812      	ldr	r2, [r2, #0]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	429a      	cmp	r2, r3
 801687a:	dd02      	ble.n	8016882 <arm_softmax_s8+0x2502>
 801687c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016880:	e000      	b.n	8016884 <arm_softmax_s8+0x2504>
 8016882:	2000      	movs	r0, #0
 8016884:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016888:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801688c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016890:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8016894:	6812      	ldr	r2, [r2, #0]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	429a      	cmp	r2, r3
 801689a:	dd01      	ble.n	80168a0 <arm_softmax_s8+0x2520>
 801689c:	2200      	movs	r2, #0
 801689e:	e001      	b.n	80168a4 <arm_softmax_s8+0x2524>
 80168a0:	f04f 32ff 	mov.w	r2, #4294967295
 80168a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	ea02 0103 	and.w	r1, r2, r3
 80168b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168b6:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80168ba:	ea81 0300 	eor.w	r3, r1, r0
 80168be:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80168c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168c4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	425a      	negs	r2, r3
 80168cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168d0:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	4293      	cmp	r3, r2
 80168d8:	da02      	bge.n	80168e0 <arm_softmax_s8+0x2560>
 80168da:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80168de:	e000      	b.n	80168e2 <arm_softmax_s8+0x2562>
 80168e0:	2000      	movs	r0, #0
 80168e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168e6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	425a      	negs	r2, r3
 80168ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168f2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	4293      	cmp	r3, r2
 80168fa:	da01      	bge.n	8016900 <arm_softmax_s8+0x2580>
 80168fc:	2200      	movs	r2, #0
 80168fe:	e001      	b.n	8016904 <arm_softmax_s8+0x2584>
 8016900:	f04f 32ff 	mov.w	r2, #4294967295
 8016904:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016908:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	ea02 0103 	and.w	r1, r2, r3
 8016912:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016916:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801691a:	ea81 0300 	eor.w	r3, r1, r0
 801691e:	6013      	str	r3, [r2, #0]
    return result;
 8016920:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016924:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8016928:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 801692a:	bf00      	nop
 801692c:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 8016930:	2300      	movs	r3, #0
 8016932:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8016936:	f001 bd85 	b.w	8018444 <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 801693a:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801693e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016942:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	4413      	add	r3, r2
 801694a:	f993 3000 	ldrsb.w	r3, [r3]
 801694e:	461a      	mov	r2, r3
 8016950:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8016954:	1ad3      	subs	r3, r2, r3
 8016956:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 801695a:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 801695e:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8016962:	429a      	cmp	r2, r3
 8016964:	f2c1 8562 	blt.w	801842c <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 8016968:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 801696c:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8016970:	fb03 f202 	mul.w	r2, r3, r2
 8016974:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016978:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801697c:	601a      	str	r2, [r3, #0]
 801697e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016982:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8016986:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801698a:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016992:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016996:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 801699a:	2300      	movs	r3, #0
 801699c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801699e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80169a2:	f04f 0300 	mov.w	r3, #0
 80169a6:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 80169aa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80169ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169b2:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	0fdb      	lsrs	r3, r3, #31
 80169ba:	b2da      	uxtb	r2, r3
 80169bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169c0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	0fdb      	lsrs	r3, r3, #31
 80169c8:	b2db      	uxtb	r3, r3
 80169ca:	4053      	eors	r3, r2
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d012      	beq.n	80169f8 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 80169d2:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80169d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169da:	2100      	movs	r1, #0
 80169dc:	f1d2 0001 	rsbs	r0, r2, #1
 80169e0:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 80169e4:	eb61 0303 	sbc.w	r3, r1, r3
 80169e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80169ec:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 80169f0:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80169f4:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80169f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169fc:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	17da      	asrs	r2, r3, #31
 8016a04:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8016a08:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8016a0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a10:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	17da      	asrs	r2, r3, #31
 8016a18:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8016a1c:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8016a20:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8016a24:	460b      	mov	r3, r1
 8016a26:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8016a2a:	fb02 f203 	mul.w	r2, r2, r3
 8016a2e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8016a32:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 8016a36:	4601      	mov	r1, r0
 8016a38:	fb01 f303 	mul.w	r3, r1, r3
 8016a3c:	4413      	add	r3, r2
 8016a3e:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8016a42:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8016a46:	fba2 1201 	umull	r1, r2, r2, r1
 8016a4a:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 8016a4e:	460a      	mov	r2, r1
 8016a50:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 8016a54:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8016a58:	4413      	add	r3, r2
 8016a5a:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8016a5e:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8016a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a66:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8016a6a:	1851      	adds	r1, r2, r1
 8016a6c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8016a70:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 8016a74:	414b      	adcs	r3, r1
 8016a76:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8016a7a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8016a7e:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8016a82:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016a86:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8016a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	da0a      	bge.n	8016aa8 <arm_softmax_s8+0x2728>
 8016a92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016a96:	1851      	adds	r1, r2, r1
 8016a98:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8016a9c:	f143 0300 	adc.w	r3, r3, #0
 8016aa0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8016aa4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8016aa8:	f04f 0000 	mov.w	r0, #0
 8016aac:	f04f 0100 	mov.w	r1, #0
 8016ab0:	0fd0      	lsrs	r0, r2, #31
 8016ab2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016ab6:	17d9      	asrs	r1, r3, #31
 8016ab8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016abc:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016ac4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ac8:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8016acc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ad0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8016ad4:	6812      	ldr	r2, [r2, #0]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	429a      	cmp	r2, r3
 8016ada:	d10e      	bne.n	8016afa <arm_softmax_s8+0x277a>
 8016adc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ae0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016aea:	d106      	bne.n	8016afa <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 8016aec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016af0:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8016af4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016af8:	6013      	str	r3, [r2, #0]
    return result;
 8016afa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016afe:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8016b02:	681a      	ldr	r2, [r3, #0]
 8016b04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b08:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8016b0c:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8016b0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b12:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8016b16:	2300      	movs	r3, #0
 8016b18:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8016b1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b1e:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8016b22:	2318      	movs	r3, #24
 8016b24:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8016b26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b2a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8016b2e:	2201      	movs	r2, #1
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	fa02 f303 	lsl.w	r3, r2, r3
 8016b36:	1e5a      	subs	r2, r3, #1
 8016b38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b3c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	ea02 0003 	and.w	r0, r2, r3
 8016b46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b4a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8016b4e:	2201      	movs	r2, #1
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	fa02 f103 	lsl.w	r1, r2, r3
 8016b56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b5a:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8016b5e:	1a43      	subs	r3, r0, r1
 8016b60:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 8016b62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b66:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 8016b6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b6e:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8016b72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b76:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8016b7a:	6812      	ldr	r2, [r2, #0]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	1ad3      	subs	r3, r2, r3
 8016b80:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8016b82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b86:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	0159      	lsls	r1, r3, #5
 8016b8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b92:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8016b96:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 8016b9a:	6013      	str	r3, [r2, #0]
 8016b9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ba0:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8016ba4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ba8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	6013      	str	r3, [r2, #0]
 8016bb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bb4:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8016bb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bbc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016bc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bc8:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8016bcc:	2300      	movs	r3, #0
 8016bce:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016bd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016bd4:	f04f 0300 	mov.w	r3, #0
 8016bd8:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8016bdc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016be0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016be4:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	0fdb      	lsrs	r3, r3, #31
 8016bec:	b2da      	uxtb	r2, r3
 8016bee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bf2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	0fdb      	lsrs	r3, r3, #31
 8016bfa:	b2db      	uxtb	r3, r3
 8016bfc:	4053      	eors	r3, r2
 8016bfe:	b2db      	uxtb	r3, r3
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d012      	beq.n	8016c2a <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 8016c04:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8016c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c0c:	2100      	movs	r1, #0
 8016c0e:	f1d2 0001 	rsbs	r0, r2, #1
 8016c12:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8016c16:	eb61 0303 	sbc.w	r3, r1, r3
 8016c1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8016c1e:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8016c22:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8016c26:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016c2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c2e:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	17da      	asrs	r2, r3, #31
 8016c36:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8016c3a:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8016c3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c42:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	17da      	asrs	r2, r3, #31
 8016c4a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8016c4e:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 8016c52:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8016c56:	460b      	mov	r3, r1
 8016c58:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8016c5c:	fb02 f203 	mul.w	r2, r2, r3
 8016c60:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8016c64:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 8016c68:	4601      	mov	r1, r0
 8016c6a:	fb01 f303 	mul.w	r3, r1, r3
 8016c6e:	4413      	add	r3, r2
 8016c70:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8016c74:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8016c78:	fba2 1201 	umull	r1, r2, r2, r1
 8016c7c:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8016c80:	460a      	mov	r2, r1
 8016c82:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 8016c86:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8016c8a:	4413      	add	r3, r2
 8016c8c:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8016c90:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8016c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c98:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 8016c9c:	1851      	adds	r1, r2, r1
 8016c9e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8016ca2:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 8016ca6:	414b      	adcs	r3, r1
 8016ca8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8016cac:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8016cb0:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8016cb4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016cb8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8016cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	da0a      	bge.n	8016cda <arm_softmax_s8+0x295a>
 8016cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016cc8:	1851      	adds	r1, r2, r1
 8016cca:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8016cce:	f143 0300 	adc.w	r3, r3, #0
 8016cd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8016cd6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8016cda:	f04f 0000 	mov.w	r0, #0
 8016cde:	f04f 0100 	mov.w	r1, #0
 8016ce2:	0fd0      	lsrs	r0, r2, #31
 8016ce4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016ce8:	17d9      	asrs	r1, r3, #31
 8016cea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cee:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016cf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cfa:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8016cfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d02:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8016d06:	6812      	ldr	r2, [r2, #0]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	429a      	cmp	r2, r3
 8016d0c:	d10e      	bne.n	8016d2c <arm_softmax_s8+0x29ac>
 8016d0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d12:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016d1c:	d106      	bne.n	8016d2c <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 8016d1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d22:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8016d26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016d2a:	6013      	str	r3, [r2, #0]
    return result;
 8016d2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d30:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8016d34:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 8016d36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d3a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8016d3e:	601a      	str	r2, [r3, #0]
 8016d40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d44:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8016d48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d4c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	6013      	str	r3, [r2, #0]
 8016d54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d58:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8016d5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d60:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016d68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d6c:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8016d70:	2300      	movs	r3, #0
 8016d72:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016d74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016d78:	f04f 0300 	mov.w	r3, #0
 8016d7c:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8016d80:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016d84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d88:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	0fdb      	lsrs	r3, r3, #31
 8016d90:	b2da      	uxtb	r2, r3
 8016d92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d96:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	0fdb      	lsrs	r3, r3, #31
 8016d9e:	b2db      	uxtb	r3, r3
 8016da0:	4053      	eors	r3, r2
 8016da2:	b2db      	uxtb	r3, r3
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d012      	beq.n	8016dce <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 8016da8:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8016dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016db0:	2100      	movs	r1, #0
 8016db2:	f1d2 0001 	rsbs	r0, r2, #1
 8016db6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8016dba:	eb61 0303 	sbc.w	r3, r1, r3
 8016dbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8016dc2:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8016dc6:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8016dca:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016dce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dd2:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	17da      	asrs	r2, r3, #31
 8016dda:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8016dde:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8016de2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016de6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	17da      	asrs	r2, r3, #31
 8016dee:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8016df2:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8016df6:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8016dfa:	460b      	mov	r3, r1
 8016dfc:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8016e00:	fb02 f203 	mul.w	r2, r2, r3
 8016e04:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8016e08:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 8016e0c:	4601      	mov	r1, r0
 8016e0e:	fb01 f303 	mul.w	r3, r1, r3
 8016e12:	4413      	add	r3, r2
 8016e14:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8016e18:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 8016e1c:	fba2 1201 	umull	r1, r2, r2, r1
 8016e20:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 8016e24:	460a      	mov	r2, r1
 8016e26:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 8016e2a:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8016e2e:	4413      	add	r3, r2
 8016e30:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8016e34:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8016e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e3c:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8016e40:	1851      	adds	r1, r2, r1
 8016e42:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8016e46:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8016e4a:	414b      	adcs	r3, r1
 8016e4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8016e50:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8016e54:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8016e58:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016e5c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8016e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	da0a      	bge.n	8016e7e <arm_softmax_s8+0x2afe>
 8016e68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e6c:	1851      	adds	r1, r2, r1
 8016e6e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8016e72:	f143 0300 	adc.w	r3, r3, #0
 8016e76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8016e7a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8016e7e:	f04f 0000 	mov.w	r0, #0
 8016e82:	f04f 0100 	mov.w	r1, #0
 8016e86:	0fd0      	lsrs	r0, r2, #31
 8016e88:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016e8c:	17d9      	asrs	r1, r3, #31
 8016e8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e92:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8016e96:	4603      	mov	r3, r0
 8016e98:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016e9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e9e:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8016ea2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ea6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8016eaa:	6812      	ldr	r2, [r2, #0]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	429a      	cmp	r2, r3
 8016eb0:	d10e      	bne.n	8016ed0 <arm_softmax_s8+0x2b50>
 8016eb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016eb6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016ec0:	d106      	bne.n	8016ed0 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 8016ec2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ec6:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8016eca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016ece:	6013      	str	r3, [r2, #0]
    return result;
 8016ed0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ed4:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8016ed8:	681a      	ldr	r2, [r3, #0]
 8016eda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ede:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8016ee2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8016ee4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ee8:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8016eec:	2300      	movs	r3, #0
 8016eee:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016ef0:	2104      	movs	r1, #4
 8016ef2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ef6:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 8016efa:	1e4b      	subs	r3, r1, #1
 8016efc:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8016efe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f02:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 8016f06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f0a:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 8016f0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f12:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8016f16:	6812      	ldr	r2, [r2, #0]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	4013      	ands	r3, r2
 8016f1c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8016f1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f22:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8016f26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f2a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	109b      	asrs	r3, r3, #2
 8016f32:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8016f34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f38:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8016f3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f40:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	105b      	asrs	r3, r3, #1
 8016f48:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8016f4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f4e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	da0a      	bge.n	8016f6e <arm_softmax_s8+0x2bee>
        threshold++;
 8016f58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f5c:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8016f60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f64:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	3301      	adds	r3, #1
 8016f6c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8016f6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f72:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8016f76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f7a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8016f7e:	6812      	ldr	r2, [r2, #0]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	429a      	cmp	r2, r3
 8016f84:	dd0a      	ble.n	8016f9c <arm_softmax_s8+0x2c1c>
        result++;
 8016f86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f8a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8016f8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f92:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	3301      	adds	r3, #1
 8016f9a:	6013      	str	r3, [r2, #0]
    return result;
 8016f9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fa0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8016fa4:	681c      	ldr	r4, [r3, #0]
 8016fa6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016faa:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8016fae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fb2:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	6013      	str	r3, [r2, #0]
 8016fba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fbe:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8016fc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fc6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016fce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fd2:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016fde:	f04f 0300 	mov.w	r3, #0
 8016fe2:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8016fe6:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016fea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fee:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	0fdb      	lsrs	r3, r3, #31
 8016ff6:	b2da      	uxtb	r2, r3
 8016ff8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ffc:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	0fdb      	lsrs	r3, r3, #31
 8017004:	b2db      	uxtb	r3, r3
 8017006:	4053      	eors	r3, r2
 8017008:	b2db      	uxtb	r3, r3
 801700a:	2b00      	cmp	r3, #0
 801700c:	d012      	beq.n	8017034 <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 801700e:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8017012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017016:	2100      	movs	r1, #0
 8017018:	f1d2 0001 	rsbs	r0, r2, #1
 801701c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8017020:	eb61 0303 	sbc.w	r3, r1, r3
 8017024:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8017028:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 801702c:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8017030:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8017034:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017038:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	17da      	asrs	r2, r3, #31
 8017040:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8017044:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 8017048:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801704c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	17da      	asrs	r2, r3, #31
 8017054:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8017058:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 801705c:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8017060:	460b      	mov	r3, r1
 8017062:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8017066:	fb02 f203 	mul.w	r2, r2, r3
 801706a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 801706e:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 8017072:	4601      	mov	r1, r0
 8017074:	fb01 f303 	mul.w	r3, r1, r3
 8017078:	4413      	add	r3, r2
 801707a:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 801707e:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 8017082:	fba2 1201 	umull	r1, r2, r2, r1
 8017086:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 801708a:	460a      	mov	r2, r1
 801708c:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 8017090:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 8017094:	4413      	add	r3, r2
 8017096:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 801709a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a2:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 80170a6:	1851      	adds	r1, r2, r1
 80170a8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80170ac:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 80170b0:	414b      	adcs	r3, r1
 80170b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80170b6:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80170ba:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80170be:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 80170c2:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80170c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	da0a      	bge.n	80170e4 <arm_softmax_s8+0x2d64>
 80170ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80170d2:	1851      	adds	r1, r2, r1
 80170d4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80170d8:	f143 0300 	adc.w	r3, r3, #0
 80170dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80170e0:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80170e4:	f04f 0000 	mov.w	r0, #0
 80170e8:	f04f 0100 	mov.w	r1, #0
 80170ec:	0fd0      	lsrs	r0, r2, #31
 80170ee:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80170f2:	17d9      	asrs	r1, r3, #31
 80170f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170f8:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 80170fc:	4603      	mov	r3, r0
 80170fe:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017100:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017104:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8017108:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801710c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017110:	6812      	ldr	r2, [r2, #0]
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	429a      	cmp	r2, r3
 8017116:	d10e      	bne.n	8017136 <arm_softmax_s8+0x2db6>
 8017118:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801711c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017126:	d106      	bne.n	8017136 <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 8017128:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801712c:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8017130:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017134:	6013      	str	r3, [r2, #0]
    return result;
 8017136:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801713a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801713e:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8017140:	18e2      	adds	r2, r4, r3
 8017142:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017146:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801714a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801714c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017150:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8017154:	2300      	movs	r3, #0
 8017156:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801715c:	f04f 0300 	mov.w	r3, #0
 8017160:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8017164:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017168:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801716c:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	0fdb      	lsrs	r3, r3, #31
 8017174:	b2da      	uxtb	r2, r3
 8017176:	2300      	movs	r3, #0
 8017178:	4053      	eors	r3, r2
 801717a:	b2db      	uxtb	r3, r3
 801717c:	2b00      	cmp	r3, #0
 801717e:	d012      	beq.n	80171a6 <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 8017180:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8017184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017188:	2100      	movs	r1, #0
 801718a:	f1d2 0001 	rsbs	r0, r2, #1
 801718e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8017192:	eb61 0303 	sbc.w	r3, r1, r3
 8017196:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801719a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 801719e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80171a2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80171a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171aa:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	17da      	asrs	r2, r3, #31
 80171b2:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80171b6:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 80171ba:	a3c9      	add	r3, pc, #804	; (adr r3, 80174e0 <arm_softmax_s8+0x3160>)
 80171bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171c0:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 80171c4:	fb02 f001 	mul.w	r0, r2, r1
 80171c8:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 80171cc:	fb01 f103 	mul.w	r1, r1, r3
 80171d0:	4401      	add	r1, r0
 80171d2:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 80171d6:	fba0 2302 	umull	r2, r3, r0, r2
 80171da:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 80171de:	4613      	mov	r3, r2
 80171e0:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 80171e4:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80171e8:	18cb      	adds	r3, r1, r3
 80171ea:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 80171ee:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80171f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f6:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 80171fa:	1851      	adds	r1, r2, r1
 80171fc:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8017200:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8017204:	414b      	adcs	r3, r1
 8017206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801720a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 801720e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8017212:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017216:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801721e:	2b00      	cmp	r3, #0
 8017220:	da0a      	bge.n	8017238 <arm_softmax_s8+0x2eb8>
 8017222:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017226:	1851      	adds	r1, r2, r1
 8017228:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801722c:	f143 0300 	adc.w	r3, r3, #0
 8017230:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8017234:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8017238:	f04f 0000 	mov.w	r0, #0
 801723c:	f04f 0100 	mov.w	r1, #0
 8017240:	0fd0      	lsrs	r0, r2, #31
 8017242:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017246:	17d9      	asrs	r1, r3, #31
 8017248:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801724c:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8017250:	4603      	mov	r3, r0
 8017252:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017254:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017258:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801725c:	681a      	ldr	r2, [r3, #0]
 801725e:	4b9e      	ldr	r3, [pc, #632]	; (80174d8 <arm_softmax_s8+0x3158>)
 8017260:	429a      	cmp	r2, r3
 8017262:	d10e      	bne.n	8017282 <arm_softmax_s8+0x2f02>
 8017264:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017268:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017272:	d106      	bne.n	8017282 <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 8017274:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017278:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801727c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017280:	6013      	str	r3, [r2, #0]
    return result;
 8017282:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017286:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801728a:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801728c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017290:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	441a      	add	r2, r3
 8017298:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801729c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80172a0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80172a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172a6:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80172aa:	2300      	movs	r3, #0
 80172ac:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80172ae:	2102      	movs	r1, #2
 80172b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172b4:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 80172b8:	1e4b      	subs	r3, r1, #1
 80172ba:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80172bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172c0:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 80172c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172c8:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 80172cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172d0:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80172d4:	6812      	ldr	r2, [r2, #0]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	4013      	ands	r3, r2
 80172da:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80172dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172e0:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80172e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172e8:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	105b      	asrs	r3, r3, #1
 80172f0:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 80172f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172f6:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 80172fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172fe:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	105b      	asrs	r3, r3, #1
 8017306:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8017308:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801730c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	2b00      	cmp	r3, #0
 8017314:	da0a      	bge.n	801732c <arm_softmax_s8+0x2fac>
        threshold++;
 8017316:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801731a:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 801731e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017322:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	3301      	adds	r3, #1
 801732a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801732c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017330:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8017334:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017338:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801733c:	6812      	ldr	r2, [r2, #0]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	429a      	cmp	r2, r3
 8017342:	dd0a      	ble.n	801735a <arm_softmax_s8+0x2fda>
        result++;
 8017344:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017348:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 801734c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017350:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	3301      	adds	r3, #1
 8017358:	6013      	str	r3, [r2, #0]
    return result;
 801735a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801735e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8017362:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8017364:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017368:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	441a      	add	r2, r3
 8017370:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017374:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8017378:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801737a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801737e:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8017382:	2300      	movs	r3, #0
 8017384:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801738a:	f04f 0300 	mov.w	r3, #0
 801738e:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8017392:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017396:	2200      	movs	r2, #0
 8017398:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801739c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	0fdb      	lsrs	r3, r3, #31
 80173a4:	b2db      	uxtb	r3, r3
 80173a6:	4053      	eors	r3, r2
 80173a8:	b2db      	uxtb	r3, r3
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d012      	beq.n	80173d4 <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 80173ae:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80173b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173b6:	2100      	movs	r1, #0
 80173b8:	f1d2 0001 	rsbs	r0, r2, #1
 80173bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80173c0:	eb61 0303 	sbc.w	r3, r1, r3
 80173c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80173c8:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80173cc:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 80173d0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80173d4:	a13e      	add	r1, pc, #248	; (adr r1, 80174d0 <arm_softmax_s8+0x3150>)
 80173d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80173da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173de:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	17da      	asrs	r2, r3, #31
 80173e6:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 80173ea:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 80173ee:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80173f2:	fb03 f201 	mul.w	r2, r3, r1
 80173f6:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80173fa:	fb00 f303 	mul.w	r3, r0, r3
 80173fe:	4413      	add	r3, r2
 8017400:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8017404:	fba0 1202 	umull	r1, r2, r0, r2
 8017408:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 801740c:	460a      	mov	r2, r1
 801740e:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 8017412:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8017416:	4413      	add	r3, r2
 8017418:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 801741c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017424:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8017428:	1851      	adds	r1, r2, r1
 801742a:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 801742e:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 8017432:	414b      	adcs	r3, r1
 8017434:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8017438:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 801743c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8017440:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017444:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801744c:	2b00      	cmp	r3, #0
 801744e:	da0a      	bge.n	8017466 <arm_softmax_s8+0x30e6>
 8017450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017454:	1851      	adds	r1, r2, r1
 8017456:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 801745a:	f143 0300 	adc.w	r3, r3, #0
 801745e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017462:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8017466:	f04f 0000 	mov.w	r0, #0
 801746a:	f04f 0100 	mov.w	r1, #0
 801746e:	0fd0      	lsrs	r0, r2, #31
 8017470:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017474:	17d9      	asrs	r1, r3, #31
 8017476:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801747a:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801747e:	4603      	mov	r3, r0
 8017480:	6013      	str	r3, [r2, #0]
    return result;
 8017482:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017486:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801748a:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 801748c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017490:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017494:	4b11      	ldr	r3, [pc, #68]	; (80174dc <arm_softmax_s8+0x315c>)
 8017496:	440b      	add	r3, r1
 8017498:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 801749a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801749e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80174a2:	6819      	ldr	r1, [r3, #0]
 80174a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174a8:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80174ac:	1c4b      	adds	r3, r1, #1
 80174ae:	6013      	str	r3, [r2, #0]
 80174b0:	2301      	movs	r3, #1
 80174b2:	fa03 f201 	lsl.w	r2, r3, r1
 80174b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174ba:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	4013      	ands	r3, r2
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d010      	beq.n	80174e8 <arm_softmax_s8+0x3168>
 80174c6:	f04f 32ff 	mov.w	r2, #4294967295
 80174ca:	e00e      	b.n	80174ea <arm_softmax_s8+0x316a>
 80174cc:	f3af 8000 	nop.w
 80174d0:	70f5a894 	.word	0x70f5a894
 80174d4:	00000000 	.word	0x00000000
 80174d8:	2aaaaaab 	.word	0x2aaaaaab
 80174dc:	70f5a894 	.word	0x70f5a894
 80174e0:	2aaaaaab 	.word	0x2aaaaaab
 80174e4:	00000000 	.word	0x00000000
 80174e8:	2200      	movs	r2, #0
 80174ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174ee:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80174f2:	601a      	str	r2, [r3, #0]
 80174f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174f8:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80174fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017500:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017508:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801750c:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8017510:	2300      	movs	r3, #0
 8017512:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017514:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017518:	f04f 0300 	mov.w	r3, #0
 801751c:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8017520:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017524:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017528:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	0fdb      	lsrs	r3, r3, #31
 8017530:	b2da      	uxtb	r2, r3
 8017532:	2300      	movs	r3, #0
 8017534:	4053      	eors	r3, r2
 8017536:	b2db      	uxtb	r3, r3
 8017538:	2b00      	cmp	r3, #0
 801753a:	d012      	beq.n	8017562 <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 801753c:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8017540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017544:	2100      	movs	r1, #0
 8017546:	f1d2 0001 	rsbs	r0, r2, #1
 801754a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 801754e:	eb61 0303 	sbc.w	r3, r1, r3
 8017552:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8017556:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 801755a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 801755e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017562:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017566:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	17da      	asrs	r2, r3, #31
 801756e:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8017572:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8017576:	a3c4      	add	r3, pc, #784	; (adr r3, 8017888 <arm_softmax_s8+0x3508>)
 8017578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801757c:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8017580:	fb02 f001 	mul.w	r0, r2, r1
 8017584:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8017588:	fb01 f103 	mul.w	r1, r1, r3
 801758c:	4401      	add	r1, r0
 801758e:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8017592:	fba0 2302 	umull	r2, r3, r0, r2
 8017596:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 801759a:	4613      	mov	r3, r2
 801759c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 80175a0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80175a4:	18cb      	adds	r3, r1, r3
 80175a6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80175aa:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80175ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b2:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 80175b6:	1851      	adds	r1, r2, r1
 80175b8:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80175bc:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 80175c0:	414b      	adcs	r3, r1
 80175c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80175c6:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80175ca:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 80175ce:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80175d2:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80175d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	da0a      	bge.n	80175f4 <arm_softmax_s8+0x3274>
 80175de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80175e2:	1851      	adds	r1, r2, r1
 80175e4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80175e8:	f143 0300 	adc.w	r3, r3, #0
 80175ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80175f0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80175f4:	f04f 0000 	mov.w	r0, #0
 80175f8:	f04f 0100 	mov.w	r1, #0
 80175fc:	0fd0      	lsrs	r0, r2, #31
 80175fe:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017602:	17d9      	asrs	r1, r3, #31
 8017604:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017608:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 801760c:	4603      	mov	r3, r0
 801760e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017610:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017614:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8017618:	681a      	ldr	r2, [r3, #0]
 801761a:	4b99      	ldr	r3, [pc, #612]	; (8017880 <arm_softmax_s8+0x3500>)
 801761c:	429a      	cmp	r2, r3
 801761e:	d10e      	bne.n	801763e <arm_softmax_s8+0x32be>
 8017620:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017624:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801762e:	d106      	bne.n	801763e <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 8017630:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017634:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8017638:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801763c:	6013      	str	r3, [r2, #0]
    return result;
 801763e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017642:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8017646:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8017648:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801764c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	ea02 0003 	and.w	r0, r2, r3
 8017656:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801765a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	43da      	mvns	r2, r3
 8017662:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017666:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	ea02 0103 	and.w	r1, r2, r3
 8017670:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017674:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017678:	ea80 0301 	eor.w	r3, r0, r1
 801767c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 801767e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017682:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017686:	6819      	ldr	r1, [r3, #0]
 8017688:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801768c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017690:	1c4b      	adds	r3, r1, #1
 8017692:	6013      	str	r3, [r2, #0]
 8017694:	2301      	movs	r3, #1
 8017696:	fa03 f201 	lsl.w	r2, r3, r1
 801769a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801769e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	4013      	ands	r3, r2
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d002      	beq.n	80176b0 <arm_softmax_s8+0x3330>
 80176aa:	f04f 32ff 	mov.w	r2, #4294967295
 80176ae:	e000      	b.n	80176b2 <arm_softmax_s8+0x3332>
 80176b0:	2200      	movs	r2, #0
 80176b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176b6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80176ba:	601a      	str	r2, [r3, #0]
 80176bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176c0:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 80176c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176c8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80176d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176d4:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80176d8:	2300      	movs	r3, #0
 80176da:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80176dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80176e0:	f04f 0300 	mov.w	r3, #0
 80176e4:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 80176e8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80176ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176f0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	0fdb      	lsrs	r3, r3, #31
 80176f8:	b2da      	uxtb	r2, r3
 80176fa:	2300      	movs	r3, #0
 80176fc:	4053      	eors	r3, r2
 80176fe:	b2db      	uxtb	r3, r3
 8017700:	2b00      	cmp	r3, #0
 8017702:	d012      	beq.n	801772a <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 8017704:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8017708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801770c:	2100      	movs	r1, #0
 801770e:	f1d2 0001 	rsbs	r0, r2, #1
 8017712:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8017716:	eb61 0303 	sbc.w	r3, r1, r3
 801771a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801771e:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8017722:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8017726:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801772a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801772e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	17da      	asrs	r2, r3, #31
 8017736:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 801773a:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 801773e:	a34e      	add	r3, pc, #312	; (adr r3, 8017878 <arm_softmax_s8+0x34f8>)
 8017740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017744:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8017748:	fb02 f001 	mul.w	r0, r2, r1
 801774c:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 8017750:	fb01 f103 	mul.w	r1, r1, r3
 8017754:	4401      	add	r1, r0
 8017756:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 801775a:	fba0 2302 	umull	r2, r3, r0, r2
 801775e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8017762:	4613      	mov	r3, r2
 8017764:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8017768:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 801776c:	18cb      	adds	r3, r1, r3
 801776e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8017772:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8017776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801777a:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 801777e:	1851      	adds	r1, r2, r1
 8017780:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8017784:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 8017788:	414b      	adcs	r3, r1
 801778a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801778e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8017792:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8017796:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801779a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	da0a      	bge.n	80177bc <arm_softmax_s8+0x343c>
 80177a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80177aa:	1851      	adds	r1, r2, r1
 80177ac:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80177b0:	f143 0300 	adc.w	r3, r3, #0
 80177b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80177b8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80177bc:	f04f 0000 	mov.w	r0, #0
 80177c0:	f04f 0100 	mov.w	r1, #0
 80177c4:	0fd0      	lsrs	r0, r2, #31
 80177c6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80177ca:	17d9      	asrs	r1, r3, #31
 80177cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177d0:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80177d4:	4603      	mov	r3, r0
 80177d6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80177d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177dc:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80177e0:	681a      	ldr	r2, [r3, #0]
 80177e2:	4b28      	ldr	r3, [pc, #160]	; (8017884 <arm_softmax_s8+0x3504>)
 80177e4:	429a      	cmp	r2, r3
 80177e6:	d10e      	bne.n	8017806 <arm_softmax_s8+0x3486>
 80177e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177ec:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80177f6:	d106      	bne.n	8017806 <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 80177f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177fc:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8017800:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017804:	6013      	str	r3, [r2, #0]
    return result;
 8017806:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801780a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801780e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8017810:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017814:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	ea02 0003 	and.w	r0, r2, r3
 801781e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017822:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	43da      	mvns	r2, r3
 801782a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801782e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	ea02 0103 	and.w	r1, r2, r3
 8017838:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801783c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017840:	ea80 0301 	eor.w	r3, r0, r1
 8017844:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 8017846:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801784a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801784e:	6819      	ldr	r1, [r3, #0]
 8017850:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017854:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017858:	1c4b      	adds	r3, r1, #1
 801785a:	6013      	str	r3, [r2, #0]
 801785c:	2301      	movs	r3, #1
 801785e:	fa03 f201 	lsl.w	r2, r3, r1
 8017862:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017866:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	4013      	ands	r3, r2
 801786e:	2b00      	cmp	r3, #0
 8017870:	d00e      	beq.n	8017890 <arm_softmax_s8+0x3510>
 8017872:	f04f 32ff 	mov.w	r2, #4294967295
 8017876:	e00c      	b.n	8017892 <arm_softmax_s8+0x3512>
 8017878:	4da2cbf2 	.word	0x4da2cbf2
 801787c:	00000000 	.word	0x00000000
 8017880:	63afbe7b 	.word	0x63afbe7b
 8017884:	4da2cbf2 	.word	0x4da2cbf2
 8017888:	63afbe7b 	.word	0x63afbe7b
 801788c:	00000000 	.word	0x00000000
 8017890:	2200      	movs	r2, #0
 8017892:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017896:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801789a:	601a      	str	r2, [r3, #0]
 801789c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178a0:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80178a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178a8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80178b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178b4:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80178b8:	2300      	movs	r3, #0
 80178ba:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80178bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80178c0:	f04f 0300 	mov.w	r3, #0
 80178c4:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 80178c8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80178cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178d0:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	0fdb      	lsrs	r3, r3, #31
 80178d8:	b2da      	uxtb	r2, r3
 80178da:	2300      	movs	r3, #0
 80178dc:	4053      	eors	r3, r2
 80178de:	b2db      	uxtb	r3, r3
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d012      	beq.n	801790a <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 80178e4:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80178e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ec:	2100      	movs	r1, #0
 80178ee:	f1d2 0001 	rsbs	r0, r2, #1
 80178f2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 80178f6:	eb61 0303 	sbc.w	r3, r1, r3
 80178fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80178fe:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8017902:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8017906:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801790a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801790e:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	17da      	asrs	r2, r3, #31
 8017916:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 801791a:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 801791e:	a3c0      	add	r3, pc, #768	; (adr r3, 8017c20 <arm_softmax_s8+0x38a0>)
 8017920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017924:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8017928:	fb02 f001 	mul.w	r0, r2, r1
 801792c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8017930:	fb01 f103 	mul.w	r1, r1, r3
 8017934:	4401      	add	r1, r0
 8017936:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 801793a:	fba0 2302 	umull	r2, r3, r0, r2
 801793e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8017942:	4613      	mov	r3, r2
 8017944:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8017948:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801794c:	18cb      	adds	r3, r1, r3
 801794e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8017952:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8017956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801795a:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 801795e:	1851      	adds	r1, r2, r1
 8017960:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8017964:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 8017968:	414b      	adcs	r3, r1
 801796a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801796e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8017972:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8017976:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801797a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017982:	2b00      	cmp	r3, #0
 8017984:	da08      	bge.n	8017998 <arm_softmax_s8+0x3618>
 8017986:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801798a:	1851      	adds	r1, r2, r1
 801798c:	67b9      	str	r1, [r7, #120]	; 0x78
 801798e:	f143 0300 	adc.w	r3, r3, #0
 8017992:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017994:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8017998:	f04f 0000 	mov.w	r0, #0
 801799c:	f04f 0100 	mov.w	r1, #0
 80179a0:	0fd0      	lsrs	r0, r2, #31
 80179a2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80179a6:	17d9      	asrs	r1, r3, #31
 80179a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179ac:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80179b0:	4603      	mov	r3, r0
 80179b2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80179b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179b8:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80179bc:	681a      	ldr	r2, [r3, #0]
 80179be:	4b96      	ldr	r3, [pc, #600]	; (8017c18 <arm_softmax_s8+0x3898>)
 80179c0:	429a      	cmp	r2, r3
 80179c2:	d10e      	bne.n	80179e2 <arm_softmax_s8+0x3662>
 80179c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179c8:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80179d2:	d106      	bne.n	80179e2 <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 80179d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179d8:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80179dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80179e0:	6013      	str	r3, [r2, #0]
    return result;
 80179e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179e6:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80179ea:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 80179ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179f0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	ea02 0003 	and.w	r0, r2, r3
 80179fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179fe:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	43da      	mvns	r2, r3
 8017a06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a0a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	ea02 0103 	and.w	r1, r2, r3
 8017a14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a18:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017a1c:	ea80 0301 	eor.w	r3, r0, r1
 8017a20:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8017a22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a26:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017a2a:	6819      	ldr	r1, [r3, #0]
 8017a2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a30:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017a34:	1c4b      	adds	r3, r1, #1
 8017a36:	6013      	str	r3, [r2, #0]
 8017a38:	2301      	movs	r3, #1
 8017a3a:	fa03 f201 	lsl.w	r2, r3, r1
 8017a3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a42:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	4013      	ands	r3, r2
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d002      	beq.n	8017a54 <arm_softmax_s8+0x36d4>
 8017a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8017a52:	e000      	b.n	8017a56 <arm_softmax_s8+0x36d6>
 8017a54:	2200      	movs	r2, #0
 8017a56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a5a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017a5e:	601a      	str	r2, [r3, #0]
 8017a60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a64:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8017a68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a6c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017a74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a78:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017a80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017a84:	f04f 0300 	mov.w	r3, #0
 8017a88:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8017a8c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017a90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a94:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	0fdb      	lsrs	r3, r3, #31
 8017a9c:	b2da      	uxtb	r2, r3
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	4053      	eors	r3, r2
 8017aa2:	b2db      	uxtb	r3, r3
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d010      	beq.n	8017aca <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 8017aa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ab0:	2100      	movs	r1, #0
 8017ab2:	f1d2 0001 	rsbs	r0, r2, #1
 8017ab6:	6738      	str	r0, [r7, #112]	; 0x70
 8017ab8:	eb61 0303 	sbc.w	r3, r1, r3
 8017abc:	677b      	str	r3, [r7, #116]	; 0x74
 8017abe:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8017ac2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017ac6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017aca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ace:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	17da      	asrs	r2, r3, #31
 8017ad6:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8017ada:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8017ade:	a34c      	add	r3, pc, #304	; (adr r3, 8017c10 <arm_softmax_s8+0x3890>)
 8017ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ae4:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8017ae8:	fb02 f001 	mul.w	r0, r2, r1
 8017aec:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8017af0:	fb01 f103 	mul.w	r1, r1, r3
 8017af4:	4401      	add	r1, r0
 8017af6:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8017afa:	fba0 2302 	umull	r2, r3, r0, r2
 8017afe:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8017b02:	4613      	mov	r3, r2
 8017b04:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8017b08:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8017b0c:	18cb      	adds	r3, r1, r3
 8017b0e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8017b12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b1a:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 8017b1e:	1851      	adds	r1, r2, r1
 8017b20:	66b9      	str	r1, [r7, #104]	; 0x68
 8017b22:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 8017b26:	414b      	adcs	r3, r1
 8017b28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017b2a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8017b2e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017b32:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017b36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	da08      	bge.n	8017b54 <arm_softmax_s8+0x37d4>
 8017b42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017b46:	1851      	adds	r1, r2, r1
 8017b48:	6639      	str	r1, [r7, #96]	; 0x60
 8017b4a:	f143 0300 	adc.w	r3, r3, #0
 8017b4e:	667b      	str	r3, [r7, #100]	; 0x64
 8017b50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8017b54:	f04f 0000 	mov.w	r0, #0
 8017b58:	f04f 0100 	mov.w	r1, #0
 8017b5c:	0fd0      	lsrs	r0, r2, #31
 8017b5e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017b62:	17d9      	asrs	r1, r3, #31
 8017b64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b68:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017b70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b74:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017b78:	681a      	ldr	r2, [r3, #0]
 8017b7a:	4b28      	ldr	r3, [pc, #160]	; (8017c1c <arm_softmax_s8+0x389c>)
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	d10e      	bne.n	8017b9e <arm_softmax_s8+0x381e>
 8017b80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b84:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017b8e:	d106      	bne.n	8017b9e <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8017b90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b94:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8017b98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017b9c:	6013      	str	r3, [r2, #0]
    return result;
 8017b9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ba2:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8017ba6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8017ba8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bac:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	ea02 0003 	and.w	r0, r2, r3
 8017bb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bba:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	43da      	mvns	r2, r3
 8017bc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bc6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	ea02 0103 	and.w	r1, r2, r3
 8017bd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bd4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017bd8:	ea80 0301 	eor.w	r3, r0, r1
 8017bdc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8017bde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017be2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017be6:	6819      	ldr	r1, [r3, #0]
 8017be8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bec:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017bf0:	1c4b      	adds	r3, r1, #1
 8017bf2:	6013      	str	r3, [r2, #0]
 8017bf4:	2301      	movs	r3, #1
 8017bf6:	fa03 f201 	lsl.w	r2, r3, r1
 8017bfa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bfe:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	4013      	ands	r3, r2
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d00e      	beq.n	8017c28 <arm_softmax_s8+0x38a8>
 8017c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c0e:	e00c      	b.n	8017c2a <arm_softmax_s8+0x38aa>
 8017c10:	1152aaa4 	.word	0x1152aaa4
 8017c14:	00000000 	.word	0x00000000
 8017c18:	2f16ac6c 	.word	0x2f16ac6c
 8017c1c:	1152aaa4 	.word	0x1152aaa4
 8017c20:	2f16ac6c 	.word	0x2f16ac6c
 8017c24:	00000000 	.word	0x00000000
 8017c28:	2200      	movs	r2, #0
 8017c2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c2e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017c32:	601a      	str	r2, [r3, #0]
 8017c34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c38:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 8017c3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c40:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017c48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c4c:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8017c50:	2300      	movs	r3, #0
 8017c52:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017c54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017c58:	f04f 0300 	mov.w	r3, #0
 8017c5c:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8017c60:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017c64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c68:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	0fdb      	lsrs	r3, r3, #31
 8017c70:	b2da      	uxtb	r2, r3
 8017c72:	2300      	movs	r3, #0
 8017c74:	4053      	eors	r3, r2
 8017c76:	b2db      	uxtb	r3, r3
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d010      	beq.n	8017c9e <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 8017c7c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8017c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c84:	2100      	movs	r1, #0
 8017c86:	f1d2 0001 	rsbs	r0, r2, #1
 8017c8a:	65b8      	str	r0, [r7, #88]	; 0x58
 8017c8c:	eb61 0303 	sbc.w	r3, r1, r3
 8017c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017c92:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8017c96:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8017c9a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017c9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ca2:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	17da      	asrs	r2, r3, #31
 8017caa:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8017cae:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8017cb2:	a3bd      	add	r3, pc, #756	; (adr r3, 8017fa8 <arm_softmax_s8+0x3c28>)
 8017cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cb8:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8017cbc:	fb02 f001 	mul.w	r0, r2, r1
 8017cc0:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8017cc4:	fb01 f103 	mul.w	r1, r1, r3
 8017cc8:	4401      	add	r1, r0
 8017cca:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8017cce:	fba0 2302 	umull	r2, r3, r0, r2
 8017cd2:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8017cd6:	4613      	mov	r3, r2
 8017cd8:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8017cdc:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8017ce0:	18cb      	adds	r3, r1, r3
 8017ce2:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8017ce6:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8017cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cee:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8017cf2:	1851      	adds	r1, r2, r1
 8017cf4:	6539      	str	r1, [r7, #80]	; 0x50
 8017cf6:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 8017cfa:	414b      	adcs	r3, r1
 8017cfc:	657b      	str	r3, [r7, #84]	; 0x54
 8017cfe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8017d02:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8017d06:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017d0a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8017d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	da08      	bge.n	8017d28 <arm_softmax_s8+0x39a8>
 8017d16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017d1a:	1851      	adds	r1, r2, r1
 8017d1c:	64b9      	str	r1, [r7, #72]	; 0x48
 8017d1e:	f143 0300 	adc.w	r3, r3, #0
 8017d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8017d28:	f04f 0000 	mov.w	r0, #0
 8017d2c:	f04f 0100 	mov.w	r1, #0
 8017d30:	0fd0      	lsrs	r0, r2, #31
 8017d32:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017d36:	17d9      	asrs	r1, r3, #31
 8017d38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d3c:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8017d40:	4603      	mov	r3, r0
 8017d42:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017d44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d48:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017d4c:	681a      	ldr	r2, [r3, #0]
 8017d4e:	4b94      	ldr	r3, [pc, #592]	; (8017fa0 <arm_softmax_s8+0x3c20>)
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d10e      	bne.n	8017d72 <arm_softmax_s8+0x39f2>
 8017d54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d58:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017d62:	d106      	bne.n	8017d72 <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 8017d64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d68:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8017d6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017d70:	6013      	str	r3, [r2, #0]
    return result;
 8017d72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d76:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8017d7a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8017d7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d80:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	ea02 0003 	and.w	r0, r2, r3
 8017d8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d8e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	43da      	mvns	r2, r3
 8017d96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d9a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	ea02 0103 	and.w	r1, r2, r3
 8017da4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017da8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017dac:	ea80 0301 	eor.w	r3, r0, r1
 8017db0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8017db2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017db6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017dba:	6819      	ldr	r1, [r3, #0]
 8017dbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dc0:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017dc4:	1c4b      	adds	r3, r1, #1
 8017dc6:	6013      	str	r3, [r2, #0]
 8017dc8:	2301      	movs	r3, #1
 8017dca:	fa03 f201 	lsl.w	r2, r3, r1
 8017dce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dd2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	4013      	ands	r3, r2
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d002      	beq.n	8017de4 <arm_softmax_s8+0x3a64>
 8017dde:	f04f 32ff 	mov.w	r2, #4294967295
 8017de2:	e000      	b.n	8017de6 <arm_softmax_s8+0x3a66>
 8017de4:	2200      	movs	r2, #0
 8017de6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dea:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017dee:	601a      	str	r2, [r3, #0]
 8017df0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017df4:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8017df8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dfc:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017e04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e08:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017e14:	f04f 0300 	mov.w	r3, #0
 8017e18:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8017e1c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017e20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e24:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	0fdb      	lsrs	r3, r3, #31
 8017e2c:	b2da      	uxtb	r2, r3
 8017e2e:	2300      	movs	r3, #0
 8017e30:	4053      	eors	r3, r2
 8017e32:	b2db      	uxtb	r3, r3
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d010      	beq.n	8017e5a <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 8017e38:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8017e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e40:	2100      	movs	r1, #0
 8017e42:	f1d2 0001 	rsbs	r0, r2, #1
 8017e46:	6438      	str	r0, [r7, #64]	; 0x40
 8017e48:	eb61 0303 	sbc.w	r3, r1, r3
 8017e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8017e4e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8017e52:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8017e56:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017e5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e5e:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	17da      	asrs	r2, r3, #31
 8017e66:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8017e6a:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8017e6e:	4a4d      	ldr	r2, [pc, #308]	; (8017fa4 <arm_softmax_s8+0x3c24>)
 8017e70:	f04f 0300 	mov.w	r3, #0
 8017e74:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8017e78:	fb02 f001 	mul.w	r0, r2, r1
 8017e7c:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8017e80:	fb01 f103 	mul.w	r1, r1, r3
 8017e84:	4401      	add	r1, r0
 8017e86:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8017e8a:	fba0 2302 	umull	r2, r3, r0, r2
 8017e8e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8017e92:	4613      	mov	r3, r2
 8017e94:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8017e98:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8017e9c:	18cb      	adds	r3, r1, r3
 8017e9e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8017ea2:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8017ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eaa:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8017eae:	1851      	adds	r1, r2, r1
 8017eb0:	63b9      	str	r1, [r7, #56]	; 0x38
 8017eb2:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 8017eb6:	414b      	adcs	r3, r1
 8017eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017eba:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8017ebe:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8017ec2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017ec6:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8017eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	da08      	bge.n	8017ee4 <arm_softmax_s8+0x3b64>
 8017ed2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017ed6:	1851      	adds	r1, r2, r1
 8017ed8:	6339      	str	r1, [r7, #48]	; 0x30
 8017eda:	f143 0300 	adc.w	r3, r3, #0
 8017ede:	637b      	str	r3, [r7, #52]	; 0x34
 8017ee0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8017ee4:	f04f 0000 	mov.w	r0, #0
 8017ee8:	f04f 0100 	mov.w	r1, #0
 8017eec:	0fd0      	lsrs	r0, r2, #31
 8017eee:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017ef2:	17d9      	asrs	r1, r3, #31
 8017ef4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ef8:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8017efc:	4603      	mov	r3, r0
 8017efe:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017f00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f04:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8017f08:	681a      	ldr	r2, [r3, #0]
 8017f0a:	4b26      	ldr	r3, [pc, #152]	; (8017fa4 <arm_softmax_s8+0x3c24>)
 8017f0c:	429a      	cmp	r2, r3
 8017f0e:	d10e      	bne.n	8017f2e <arm_softmax_s8+0x3bae>
 8017f10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f14:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017f1e:	d106      	bne.n	8017f2e <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 8017f20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f24:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8017f28:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017f2c:	6013      	str	r3, [r2, #0]
    return result;
 8017f2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f32:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8017f36:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8017f38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f3c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	ea02 0003 	and.w	r0, r2, r3
 8017f46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f4a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	43da      	mvns	r2, r3
 8017f52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f56:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	ea02 0103 	and.w	r1, r2, r3
 8017f60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f64:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017f68:	ea80 0301 	eor.w	r3, r0, r1
 8017f6c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 8017f6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f72:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017f76:	6819      	ldr	r1, [r3, #0]
 8017f78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f7c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017f80:	1c4b      	adds	r3, r1, #1
 8017f82:	6013      	str	r3, [r2, #0]
 8017f84:	2301      	movs	r3, #1
 8017f86:	fa03 f201 	lsl.w	r2, r3, r1
 8017f8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f8e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	4013      	ands	r3, r2
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d00a      	beq.n	8017fb0 <arm_softmax_s8+0x3c30>
 8017f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8017f9e:	e008      	b.n	8017fb2 <arm_softmax_s8+0x3c32>
 8017fa0:	02582ab7 	.word	0x02582ab7
 8017fa4:	000afe11 	.word	0x000afe11
 8017fa8:	02582ab7 	.word	0x02582ab7
 8017fac:	00000000 	.word	0x00000000
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fb6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017fba:	601a      	str	r2, [r3, #0]
 8017fbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fc0:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8017fc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fc8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017fd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fd4:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8017fd8:	2300      	movs	r3, #0
 8017fda:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017fdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017fe0:	f04f 0300 	mov.w	r3, #0
 8017fe4:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8017fe8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017fec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ff0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	0fdb      	lsrs	r3, r3, #31
 8017ff8:	b2da      	uxtb	r2, r3
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	4053      	eors	r3, r2
 8017ffe:	b2db      	uxtb	r3, r3
 8018000:	2b00      	cmp	r3, #0
 8018002:	d010      	beq.n	8018026 <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 8018004:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8018008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801800c:	2100      	movs	r1, #0
 801800e:	f1d2 0001 	rsbs	r0, r2, #1
 8018012:	62b8      	str	r0, [r7, #40]	; 0x28
 8018014:	eb61 0303 	sbc.w	r3, r1, r3
 8018018:	62fb      	str	r3, [r7, #44]	; 0x2c
 801801a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801801e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8018022:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018026:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801802a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	17da      	asrs	r2, r3, #31
 8018032:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8018036:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 801803a:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 801803e:	f04f 0300 	mov.w	r3, #0
 8018042:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 8018046:	fb02 f001 	mul.w	r0, r2, r1
 801804a:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801804e:	fb01 f103 	mul.w	r1, r1, r3
 8018052:	4401      	add	r1, r0
 8018054:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8018058:	fba0 2302 	umull	r2, r3, r0, r2
 801805c:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8018060:	4613      	mov	r3, r2
 8018062:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8018066:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 801806a:	18cb      	adds	r3, r1, r3
 801806c:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8018070:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8018074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018078:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 801807c:	1851      	adds	r1, r2, r1
 801807e:	6239      	str	r1, [r7, #32]
 8018080:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 8018084:	414b      	adcs	r3, r1
 8018086:	627b      	str	r3, [r7, #36]	; 0x24
 8018088:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801808c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8018090:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018094:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8018098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801809c:	2b00      	cmp	r3, #0
 801809e:	da08      	bge.n	80180b2 <arm_softmax_s8+0x3d32>
 80180a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80180a4:	1851      	adds	r1, r2, r1
 80180a6:	61b9      	str	r1, [r7, #24]
 80180a8:	f143 0300 	adc.w	r3, r3, #0
 80180ac:	61fb      	str	r3, [r7, #28]
 80180ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80180b2:	f04f 0000 	mov.w	r0, #0
 80180b6:	f04f 0100 	mov.w	r1, #0
 80180ba:	0fd0      	lsrs	r0, r2, #31
 80180bc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80180c0:	17d9      	asrs	r1, r3, #31
 80180c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180c6:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 80180ca:	4603      	mov	r3, r0
 80180cc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80180ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180d2:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	2bf2      	cmp	r3, #242	; 0xf2
 80180da:	d10e      	bne.n	80180fa <arm_softmax_s8+0x3d7a>
 80180dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180e0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80180ea:	d106      	bne.n	80180fa <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 80180ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180f0:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 80180f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80180f8:	6013      	str	r3, [r2, #0]
    return result;
 80180fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180fe:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8018102:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8018104:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018108:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	ea02 0003 	and.w	r0, r2, r3
 8018112:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018116:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	43da      	mvns	r2, r3
 801811e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018122:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	ea02 0103 	and.w	r1, r2, r3
 801812c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018130:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018134:	ea80 0301 	eor.w	r3, r0, r1
 8018138:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 801813a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801813e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d102      	bne.n	801814e <arm_softmax_s8+0x3dce>
 8018148:	f04f 32ff 	mov.w	r2, #4294967295
 801814c:	e000      	b.n	8018150 <arm_softmax_s8+0x3dd0>
 801814e:	2200      	movs	r2, #0
 8018150:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018154:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018158:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 801815a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801815e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018168:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801816c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	43da      	mvns	r2, r3
 8018174:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018178:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	4013      	ands	r3, r2
 8018180:	4059      	eors	r1, r3
 8018182:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018186:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 801818a:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 801818e:	6013      	str	r3, [r2, #0]
 8018190:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018194:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8018198:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 801819a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801819e:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 80181a2:	2300      	movs	r3, #0
 80181a4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80181a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80181aa:	f04f 0300 	mov.w	r3, #0
 80181ae:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 80181b2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80181b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181ba:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	0fdb      	lsrs	r3, r3, #31
 80181c2:	b2da      	uxtb	r2, r3
 80181c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181c8:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	0fdb      	lsrs	r3, r3, #31
 80181d0:	b2db      	uxtb	r3, r3
 80181d2:	4053      	eors	r3, r2
 80181d4:	b2db      	uxtb	r3, r3
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d010      	beq.n	80181fc <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 80181da:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80181de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e2:	2100      	movs	r1, #0
 80181e4:	f1d2 0001 	rsbs	r0, r2, #1
 80181e8:	6138      	str	r0, [r7, #16]
 80181ea:	eb61 0303 	sbc.w	r3, r1, r3
 80181ee:	617b      	str	r3, [r7, #20]
 80181f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80181f4:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 80181f8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80181fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018200:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	17da      	asrs	r2, r3, #31
 8018208:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 801820c:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8018210:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018214:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	17da      	asrs	r2, r3, #31
 801821c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8018220:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 8018224:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8018228:	460b      	mov	r3, r1
 801822a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801822e:	fb02 f203 	mul.w	r2, r2, r3
 8018232:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8018236:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 801823a:	4601      	mov	r1, r0
 801823c:	fb01 f303 	mul.w	r3, r1, r3
 8018240:	4413      	add	r3, r2
 8018242:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8018246:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 801824a:	fba2 1201 	umull	r1, r2, r2, r1
 801824e:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 8018252:	460a      	mov	r2, r1
 8018254:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8018258:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 801825c:	4413      	add	r3, r2
 801825e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8018262:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8018266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801826a:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 801826e:	1851      	adds	r1, r2, r1
 8018270:	60b9      	str	r1, [r7, #8]
 8018272:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8018276:	414b      	adcs	r3, r1
 8018278:	60fb      	str	r3, [r7, #12]
 801827a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801827e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8018282:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018286:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801828e:	2b00      	cmp	r3, #0
 8018290:	da08      	bge.n	80182a4 <arm_softmax_s8+0x3f24>
 8018292:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018296:	1851      	adds	r1, r2, r1
 8018298:	6039      	str	r1, [r7, #0]
 801829a:	f143 0300 	adc.w	r3, r3, #0
 801829e:	607b      	str	r3, [r7, #4]
 80182a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80182a4:	f04f 0000 	mov.w	r0, #0
 80182a8:	f04f 0100 	mov.w	r1, #0
 80182ac:	0fd0      	lsrs	r0, r2, #31
 80182ae:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80182b2:	17d9      	asrs	r1, r3, #31
 80182b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182b8:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 80182bc:	4603      	mov	r3, r0
 80182be:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80182c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182c4:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 80182c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182cc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80182d0:	6812      	ldr	r2, [r2, #0]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	429a      	cmp	r2, r3
 80182d6:	d10e      	bne.n	80182f6 <arm_softmax_s8+0x3f76>
 80182d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182dc:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80182e6:	d106      	bne.n	80182f6 <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 80182e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182ec:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 80182f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80182f4:	6013      	str	r3, [r2, #0]
    return result;
 80182f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182fa:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80182fe:	681a      	ldr	r2, [r3, #0]
 8018300:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018304:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8018308:	601a      	str	r2, [r3, #0]
 801830a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801830e:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8018312:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8018316:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018318:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801831c:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8018320:	2300      	movs	r3, #0
 8018322:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018324:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018328:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801832c:	2201      	movs	r2, #1
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	fa02 f103 	lsl.w	r1, r2, r3
 8018334:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018338:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 801833c:	1e4b      	subs	r3, r1, #1
 801833e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8018340:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018344:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8018348:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801834c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8018350:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018354:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8018358:	6812      	ldr	r2, [r2, #0]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	4013      	ands	r3, r2
 801835e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8018360:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018364:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8018368:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801836c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8018370:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018374:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8018378:	6812      	ldr	r2, [r2, #0]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	fa42 f303 	asr.w	r3, r2, r3
 8018380:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8018382:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018386:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 801838a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801838e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	105b      	asrs	r3, r3, #1
 8018396:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8018398:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801839c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	da0a      	bge.n	80183bc <arm_softmax_s8+0x403c>
        threshold++;
 80183a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183aa:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 80183ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183b2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	3301      	adds	r3, #1
 80183ba:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80183bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183c0:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 80183c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183c8:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80183cc:	6812      	ldr	r2, [r2, #0]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	429a      	cmp	r2, r3
 80183d2:	dd0a      	ble.n	80183ea <arm_softmax_s8+0x406a>
        result++;
 80183d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183d8:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 80183dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183e0:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	3301      	adds	r3, #1
 80183e8:	6013      	str	r3, [r2, #0]
    return result;
 80183ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183ee:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80183f2:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 80183f4:	3b80      	subs	r3, #128	; 0x80
 80183f6:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 80183fa:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80183fe:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8018402:	db09      	blt.n	8018418 <arm_softmax_s8+0x4098>
 8018404:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8018408:	2b7e      	cmp	r3, #126	; 0x7e
 801840a:	dc03      	bgt.n	8018414 <arm_softmax_s8+0x4094>
 801840c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8018410:	b259      	sxtb	r1, r3
 8018412:	e003      	b.n	801841c <arm_softmax_s8+0x409c>
 8018414:	217f      	movs	r1, #127	; 0x7f
 8018416:	e001      	b.n	801841c <arm_softmax_s8+0x409c>
 8018418:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 801841c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8018420:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8018424:	441a      	add	r2, r3
 8018426:	460b      	mov	r3, r1
 8018428:	7013      	strb	r3, [r2, #0]
 801842a:	e006      	b.n	801843a <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 801842c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8018430:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8018434:	441a      	add	r2, r3
 8018436:	2380      	movs	r3, #128	; 0x80
 8018438:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 801843a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 801843e:	3301      	adds	r3, #1
 8018440:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8018444:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018448:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801844c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	429a      	cmp	r2, r3
 8018454:	f6fe aa71 	blt.w	801693a <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 8018458:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801845c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8018460:	6819      	ldr	r1, [r3, #0]
 8018462:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018466:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 801846a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801846e:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	440b      	add	r3, r1
 8018476:	6013      	str	r3, [r2, #0]
        output += row_size;
 8018478:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801847c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8018480:	681a      	ldr	r2, [r3, #0]
 8018482:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8018486:	4413      	add	r3, r2
 8018488:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 801848c:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8018490:	3301      	adds	r3, #1
 8018492:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8018496:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801849a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801849e:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	429a      	cmp	r2, r3
 80184a6:	f6fb af93 	blt.w	80143d0 <arm_softmax_s8+0x50>
    }

#endif
}
 80184aa:	bf00      	nop
 80184ac:	bf00      	nop
 80184ae:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 80184b2:	46bd      	mov	sp, r7
 80184b4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80184b8:	4770      	bx	lr
 80184ba:	bf00      	nop

080184bc <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 80184bc:	b480      	push	{r7}
 80184be:	b089      	sub	sp, #36	; 0x24
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	60f8      	str	r0, [r7, #12]
 80184c4:	60b9      	str	r1, [r7, #8]
 80184c6:	607a      	str	r2, [r7, #4]
 80184c8:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80184d0:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 80184d2:	683b      	ldr	r3, [r7, #0]
 80184d4:	00db      	lsls	r3, r3, #3
 80184d6:	68fa      	ldr	r2, [r7, #12]
 80184d8:	4413      	add	r3, r2
 80184da:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 80184dc:	69fb      	ldr	r3, [r7, #28]
 80184de:	ed93 7a00 	vldr	s14, [r3]
 80184e2:	69bb      	ldr	r3, [r7, #24]
 80184e4:	edd3 7a00 	vldr	s15, [r3]
 80184e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80184ec:	69fb      	ldr	r3, [r7, #28]
 80184ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80184f2:	69bb      	ldr	r3, [r7, #24]
 80184f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80184f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80184fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018500:	edc7 7a04 	vstr	s15, [r7, #16]
 8018504:	69fb      	ldr	r3, [r7, #28]
 8018506:	ed93 7a00 	vldr	s14, [r3]
 801850a:	69bb      	ldr	r3, [r7, #24]
 801850c:	edd3 7a01 	vldr	s15, [r3, #4]
 8018510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018514:	69fb      	ldr	r3, [r7, #28]
 8018516:	edd3 6a01 	vldr	s13, [r3, #4]
 801851a:	69bb      	ldr	r3, [r7, #24]
 801851c:	edd3 7a00 	vldr	s15, [r3]
 8018520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018528:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 801852c:	68bb      	ldr	r3, [r7, #8]
 801852e:	00db      	lsls	r3, r3, #3
 8018530:	69ba      	ldr	r2, [r7, #24]
 8018532:	4413      	add	r3, r2
 8018534:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	ed93 7a00 	vldr	s14, [r3]
 801853c:	edd7 7a04 	vldr	s15, [r7, #16]
 8018540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018544:	69fb      	ldr	r3, [r7, #28]
 8018546:	edc3 7a00 	vstr	s15, [r3]
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	ed93 7a01 	vldr	s14, [r3, #4]
 8018550:	edd7 7a05 	vldr	s15, [r7, #20]
 8018554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018558:	69fb      	ldr	r3, [r7, #28]
 801855a:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	ed93 7a00 	vldr	s14, [r3]
 8018564:	edd7 7a04 	vldr	s15, [r7, #16]
 8018568:	ee77 7a27 	vadd.f32	s15, s14, s15
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	edc3 7a00 	vstr	s15, [r3]
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	ed93 7a01 	vldr	s14, [r3, #4]
 8018578:	edd7 7a05 	vldr	s15, [r7, #20]
 801857c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 8018586:	69fb      	ldr	r3, [r7, #28]
 8018588:	3308      	adds	r3, #8
 801858a:	61fb      	str	r3, [r7, #28]
        ++Fout;
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	3308      	adds	r3, #8
 8018590:	60fb      	str	r3, [r7, #12]
    }while (--m);
 8018592:	683b      	ldr	r3, [r7, #0]
 8018594:	3b01      	subs	r3, #1
 8018596:	603b      	str	r3, [r7, #0]
 8018598:	683b      	ldr	r3, [r7, #0]
 801859a:	2b00      	cmp	r3, #0
 801859c:	bf14      	ite	ne
 801859e:	2301      	movne	r3, #1
 80185a0:	2300      	moveq	r3, #0
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d000      	beq.n	80185aa <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 80185a8:	e798      	b.n	80184dc <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 80185aa:	bf00      	nop
 80185ac:	3724      	adds	r7, #36	; 0x24
 80185ae:	46bd      	mov	sp, r7
 80185b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b4:	4770      	bx	lr

080185b6 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 80185b6:	b480      	push	{r7}
 80185b8:	b097      	sub	sp, #92	; 0x5c
 80185ba:	af00      	add	r7, sp, #0
 80185bc:	60f8      	str	r0, [r7, #12]
 80185be:	60b9      	str	r1, [r7, #8]
 80185c0:	607a      	str	r2, [r7, #4]
 80185c2:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 80185c4:	683b      	ldr	r3, [r7, #0]
 80185c6:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 80185c8:	683b      	ldr	r3, [r7, #0]
 80185ca:	005b      	lsls	r3, r3, #1
 80185cc:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 80185ce:	683a      	ldr	r2, [r7, #0]
 80185d0:	4613      	mov	r3, r2
 80185d2:	005b      	lsls	r3, r3, #1
 80185d4:	4413      	add	r3, r2
 80185d6:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80185de:	657b      	str	r3, [r7, #84]	; 0x54
 80185e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185e2:	653b      	str	r3, [r7, #80]	; 0x50
 80185e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185e6:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 80185e8:	683b      	ldr	r3, [r7, #0]
 80185ea:	00db      	lsls	r3, r3, #3
 80185ec:	68fa      	ldr	r2, [r7, #12]
 80185ee:	4413      	add	r3, r2
 80185f0:	ed93 7a00 	vldr	s14, [r3]
 80185f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185f6:	edd3 7a00 	vldr	s15, [r3]
 80185fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	00db      	lsls	r3, r3, #3
 8018602:	68fa      	ldr	r2, [r7, #12]
 8018604:	4413      	add	r3, r2
 8018606:	edd3 6a01 	vldr	s13, [r3, #4]
 801860a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801860c:	edd3 7a01 	vldr	s15, [r3, #4]
 8018610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018618:	edc7 7a04 	vstr	s15, [r7, #16]
 801861c:	683b      	ldr	r3, [r7, #0]
 801861e:	00db      	lsls	r3, r3, #3
 8018620:	68fa      	ldr	r2, [r7, #12]
 8018622:	4413      	add	r3, r2
 8018624:	ed93 7a00 	vldr	s14, [r3]
 8018628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801862a:	edd3 7a01 	vldr	s15, [r3, #4]
 801862e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018632:	683b      	ldr	r3, [r7, #0]
 8018634:	00db      	lsls	r3, r3, #3
 8018636:	68fa      	ldr	r2, [r7, #12]
 8018638:	4413      	add	r3, r2
 801863a:	edd3 6a01 	vldr	s13, [r3, #4]
 801863e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018640:	edd3 7a00 	vldr	s15, [r3]
 8018644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018648:	ee77 7a27 	vadd.f32	s15, s14, s15
 801864c:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 8018650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018652:	00db      	lsls	r3, r3, #3
 8018654:	68fa      	ldr	r2, [r7, #12]
 8018656:	4413      	add	r3, r2
 8018658:	ed93 7a00 	vldr	s14, [r3]
 801865c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801865e:	edd3 7a00 	vldr	s15, [r3]
 8018662:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018668:	00db      	lsls	r3, r3, #3
 801866a:	68fa      	ldr	r2, [r7, #12]
 801866c:	4413      	add	r3, r2
 801866e:	edd3 6a01 	vldr	s13, [r3, #4]
 8018672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018674:	edd3 7a01 	vldr	s15, [r3, #4]
 8018678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801867c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018680:	edc7 7a06 	vstr	s15, [r7, #24]
 8018684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018686:	00db      	lsls	r3, r3, #3
 8018688:	68fa      	ldr	r2, [r7, #12]
 801868a:	4413      	add	r3, r2
 801868c:	ed93 7a00 	vldr	s14, [r3]
 8018690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018692:	edd3 7a01 	vldr	s15, [r3, #4]
 8018696:	ee27 7a27 	vmul.f32	s14, s14, s15
 801869a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801869c:	00db      	lsls	r3, r3, #3
 801869e:	68fa      	ldr	r2, [r7, #12]
 80186a0:	4413      	add	r3, r2
 80186a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80186a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186a8:	edd3 7a00 	vldr	s15, [r3]
 80186ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80186b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80186b4:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 80186b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80186ba:	00db      	lsls	r3, r3, #3
 80186bc:	68fa      	ldr	r2, [r7, #12]
 80186be:	4413      	add	r3, r2
 80186c0:	ed93 7a00 	vldr	s14, [r3]
 80186c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186c6:	edd3 7a00 	vldr	s15, [r3]
 80186ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80186ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80186d0:	00db      	lsls	r3, r3, #3
 80186d2:	68fa      	ldr	r2, [r7, #12]
 80186d4:	4413      	add	r3, r2
 80186d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80186da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80186e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80186e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80186e8:	edc7 7a08 	vstr	s15, [r7, #32]
 80186ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80186ee:	00db      	lsls	r3, r3, #3
 80186f0:	68fa      	ldr	r2, [r7, #12]
 80186f2:	4413      	add	r3, r2
 80186f4:	ed93 7a00 	vldr	s14, [r3]
 80186f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80186fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018704:	00db      	lsls	r3, r3, #3
 8018706:	68fa      	ldr	r2, [r7, #12]
 8018708:	4413      	add	r3, r2
 801870a:	edd3 6a01 	vldr	s13, [r3, #4]
 801870e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018710:	edd3 7a00 	vldr	s15, [r3]
 8018714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018718:	ee77 7a27 	vadd.f32	s15, s14, s15
 801871c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	ed93 7a00 	vldr	s14, [r3]
 8018726:	edd7 7a06 	vldr	s15, [r7, #24]
 801872a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801872e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	ed93 7a01 	vldr	s14, [r3, #4]
 8018738:	edd7 7a07 	vldr	s15, [r7, #28]
 801873c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018740:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	ed93 7a00 	vldr	s14, [r3]
 801874a:	edd7 7a06 	vldr	s15, [r7, #24]
 801874e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	edc3 7a00 	vstr	s15, [r3]
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	ed93 7a01 	vldr	s14, [r3, #4]
 801875e:	edd7 7a07 	vldr	s15, [r7, #28]
 8018762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 801876c:	ed97 7a04 	vldr	s14, [r7, #16]
 8018770:	edd7 7a08 	vldr	s15, [r7, #32]
 8018774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018778:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801877c:	ed97 7a05 	vldr	s14, [r7, #20]
 8018780:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018788:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 801878c:	ed97 7a04 	vldr	s14, [r7, #16]
 8018790:	edd7 7a08 	vldr	s15, [r7, #32]
 8018794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018798:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801879c:	ed97 7a05 	vldr	s14, [r7, #20]
 80187a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80187a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80187a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	ed93 7a00 	vldr	s14, [r3]
 80187b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80187b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187b8:	00db      	lsls	r3, r3, #3
 80187ba:	68fa      	ldr	r2, [r7, #12]
 80187bc:	4413      	add	r3, r2
 80187be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80187c2:	edc3 7a00 	vstr	s15, [r3]
 80187c6:	68fb      	ldr	r3, [r7, #12]
 80187c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80187cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80187d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187d2:	00db      	lsls	r3, r3, #3
 80187d4:	68fa      	ldr	r2, [r7, #12]
 80187d6:	4413      	add	r3, r2
 80187d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80187dc:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 80187e0:	68bb      	ldr	r3, [r7, #8]
 80187e2:	00db      	lsls	r3, r3, #3
 80187e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80187e6:	4413      	add	r3, r2
 80187e8:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	011b      	lsls	r3, r3, #4
 80187ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80187f0:	4413      	add	r3, r2
 80187f2:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 80187f4:	68ba      	ldr	r2, [r7, #8]
 80187f6:	4613      	mov	r3, r2
 80187f8:	005b      	lsls	r3, r3, #1
 80187fa:	4413      	add	r3, r2
 80187fc:	00db      	lsls	r3, r3, #3
 80187fe:	461a      	mov	r2, r3
 8018800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018802:	4413      	add	r3, r2
 8018804:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	ed93 7a00 	vldr	s14, [r3]
 801880c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	edc3 7a00 	vstr	s15, [r3]
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	ed93 7a01 	vldr	s14, [r3, #4]
 8018820:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	685b      	ldr	r3, [r3, #4]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d030      	beq.n	8018898 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 8018836:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801883a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801883e:	683b      	ldr	r3, [r7, #0]
 8018840:	00db      	lsls	r3, r3, #3
 8018842:	68fa      	ldr	r2, [r7, #12]
 8018844:	4413      	add	r3, r2
 8018846:	ee77 7a67 	vsub.f32	s15, s14, s15
 801884a:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 801884e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8018852:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018856:	683b      	ldr	r3, [r7, #0]
 8018858:	00db      	lsls	r3, r3, #3
 801885a:	68fa      	ldr	r2, [r7, #12]
 801885c:	4413      	add	r3, r2
 801885e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018862:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 8018866:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801886a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801886e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018870:	00db      	lsls	r3, r3, #3
 8018872:	68fa      	ldr	r2, [r7, #12]
 8018874:	4413      	add	r3, r2
 8018876:	ee77 7a27 	vadd.f32	s15, s14, s15
 801887a:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 801887e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8018882:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018888:	00db      	lsls	r3, r3, #3
 801888a:	68fa      	ldr	r2, [r7, #12]
 801888c:	4413      	add	r3, r2
 801888e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018892:	edc3 7a01 	vstr	s15, [r3, #4]
 8018896:	e02f      	b.n	80188f8 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 8018898:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801889c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80188a0:	683b      	ldr	r3, [r7, #0]
 80188a2:	00db      	lsls	r3, r3, #3
 80188a4:	68fa      	ldr	r2, [r7, #12]
 80188a6:	4413      	add	r3, r2
 80188a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188ac:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 80188b0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80188b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80188b8:	683b      	ldr	r3, [r7, #0]
 80188ba:	00db      	lsls	r3, r3, #3
 80188bc:	68fa      	ldr	r2, [r7, #12]
 80188be:	4413      	add	r3, r2
 80188c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80188c4:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 80188c8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80188cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80188d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188d2:	00db      	lsls	r3, r3, #3
 80188d4:	68fa      	ldr	r2, [r7, #12]
 80188d6:	4413      	add	r3, r2
 80188d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80188dc:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 80188e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80188e4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80188e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188ea:	00db      	lsls	r3, r3, #3
 80188ec:	68fa      	ldr	r2, [r7, #12]
 80188ee:	4413      	add	r3, r2
 80188f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188f4:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	3308      	adds	r3, #8
 80188fc:	60fb      	str	r3, [r7, #12]
    }while(--k);
 80188fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018900:	3b01      	subs	r3, #1
 8018902:	64bb      	str	r3, [r7, #72]	; 0x48
 8018904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018906:	2b00      	cmp	r3, #0
 8018908:	bf14      	ite	ne
 801890a:	2301      	movne	r3, #1
 801890c:	2300      	moveq	r3, #0
 801890e:	b2db      	uxtb	r3, r3
 8018910:	2b00      	cmp	r3, #0
 8018912:	d000      	beq.n	8018916 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 8018914:	e668      	b.n	80185e8 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 8018916:	bf00      	nop
 8018918:	375c      	adds	r7, #92	; 0x5c
 801891a:	46bd      	mov	sp, r7
 801891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018920:	4770      	bx	lr
	...

08018924 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 8018924:	b5b0      	push	{r4, r5, r7, lr}
 8018926:	b094      	sub	sp, #80	; 0x50
 8018928:	af00      	add	r7, sp, #0
 801892a:	60f8      	str	r0, [r7, #12]
 801892c:	60b9      	str	r1, [r7, #8]
 801892e:	607a      	str	r2, [r7, #4]
 8018930:	603b      	str	r3, [r7, #0]
     size_t k=m;
 8018932:	683b      	ldr	r3, [r7, #0]
 8018934:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 8018936:	683b      	ldr	r3, [r7, #0]
 8018938:	005b      	lsls	r3, r3, #1
 801893a:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 801893c:	68bb      	ldr	r3, [r7, #8]
 801893e:	683a      	ldr	r2, [r7, #0]
 8018940:	fb02 f303 	mul.w	r3, r2, r3
 8018944:	6879      	ldr	r1, [r7, #4]
 8018946:	3321      	adds	r3, #33	; 0x21
 8018948:	f107 0210 	add.w	r2, r7, #16
 801894c:	00db      	lsls	r3, r3, #3
 801894e:	440b      	add	r3, r1
 8018950:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018954:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801895e:	647b      	str	r3, [r7, #68]	; 0x44
 8018960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018962:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8018964:	683b      	ldr	r3, [r7, #0]
 8018966:	00db      	lsls	r3, r3, #3
 8018968:	68fa      	ldr	r2, [r7, #12]
 801896a:	4413      	add	r3, r2
 801896c:	ed93 7a00 	vldr	s14, [r3]
 8018970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018972:	edd3 7a00 	vldr	s15, [r3]
 8018976:	ee27 7a27 	vmul.f32	s14, s14, s15
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	00db      	lsls	r3, r3, #3
 801897e:	68fa      	ldr	r2, [r7, #12]
 8018980:	4413      	add	r3, r2
 8018982:	edd3 6a01 	vldr	s13, [r3, #4]
 8018986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018988:	edd3 7a01 	vldr	s15, [r3, #4]
 801898c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018994:	edc7 7a08 	vstr	s15, [r7, #32]
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	00db      	lsls	r3, r3, #3
 801899c:	68fa      	ldr	r2, [r7, #12]
 801899e:	4413      	add	r3, r2
 80189a0:	ed93 7a00 	vldr	s14, [r3]
 80189a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80189a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80189aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80189ae:	683b      	ldr	r3, [r7, #0]
 80189b0:	00db      	lsls	r3, r3, #3
 80189b2:	68fa      	ldr	r2, [r7, #12]
 80189b4:	4413      	add	r3, r2
 80189b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80189ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80189bc:	edd3 7a00 	vldr	s15, [r3]
 80189c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80189c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80189c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 80189cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189ce:	00db      	lsls	r3, r3, #3
 80189d0:	68fa      	ldr	r2, [r7, #12]
 80189d2:	4413      	add	r3, r2
 80189d4:	ed93 7a00 	vldr	s14, [r3]
 80189d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80189da:	edd3 7a00 	vldr	s15, [r3]
 80189de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80189e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189e4:	00db      	lsls	r3, r3, #3
 80189e6:	68fa      	ldr	r2, [r7, #12]
 80189e8:	4413      	add	r3, r2
 80189ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80189ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80189f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80189f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80189f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80189fc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8018a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a02:	00db      	lsls	r3, r3, #3
 8018a04:	68fa      	ldr	r2, [r7, #12]
 8018a06:	4413      	add	r3, r2
 8018a08:	ed93 7a00 	vldr	s14, [r3]
 8018a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8018a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a18:	00db      	lsls	r3, r3, #3
 8018a1a:	68fa      	ldr	r2, [r7, #12]
 8018a1c:	4413      	add	r3, r2
 8018a1e:	edd3 6a01 	vldr	s13, [r3, #4]
 8018a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a24:	edd3 7a00 	vldr	s15, [r3]
 8018a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018a30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8018a34:	ed97 7a08 	vldr	s14, [r7, #32]
 8018a38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018a40:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8018a44:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018a48:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018a50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8018a54:	ed97 7a08 	vldr	s14, [r7, #32]
 8018a58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a60:	edc7 7a06 	vstr	s15, [r7, #24]
 8018a64:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018a68:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a70:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8018a74:	68bb      	ldr	r3, [r7, #8]
 8018a76:	00db      	lsls	r3, r3, #3
 8018a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018a7a:	4413      	add	r3, r2
 8018a7c:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 8018a7e:	68bb      	ldr	r3, [r7, #8]
 8018a80:	011b      	lsls	r3, r3, #4
 8018a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018a84:	4413      	add	r3, r2
 8018a86:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	f7e7 fd65 	bl	800055c <__aeabi_f2d>
 8018a92:	4604      	mov	r4, r0
 8018a94:	460d      	mov	r5, r1
 8018a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7e7 fd5f 	bl	800055c <__aeabi_f2d>
 8018a9e:	f04f 0200 	mov.w	r2, #0
 8018aa2:	4b57      	ldr	r3, [pc, #348]	; (8018c00 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8018aa4:	f7e7 fdb2 	bl	800060c <__aeabi_dmul>
 8018aa8:	4602      	mov	r2, r0
 8018aaa:	460b      	mov	r3, r1
 8018aac:	4620      	mov	r0, r4
 8018aae:	4629      	mov	r1, r5
 8018ab0:	f7e7 fbf4 	bl	800029c <__aeabi_dsub>
 8018ab4:	4602      	mov	r2, r0
 8018ab6:	460b      	mov	r3, r1
 8018ab8:	4610      	mov	r0, r2
 8018aba:	4619      	mov	r1, r3
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	00db      	lsls	r3, r3, #3
 8018ac0:	68fa      	ldr	r2, [r7, #12]
 8018ac2:	18d4      	adds	r4, r2, r3
 8018ac4:	f7e8 f89a 	bl	8000bfc <__aeabi_d2f>
 8018ac8:	4603      	mov	r3, r0
 8018aca:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	685b      	ldr	r3, [r3, #4]
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f7e7 fd43 	bl	800055c <__aeabi_f2d>
 8018ad6:	4604      	mov	r4, r0
 8018ad8:	460d      	mov	r5, r1
 8018ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018adc:	4618      	mov	r0, r3
 8018ade:	f7e7 fd3d 	bl	800055c <__aeabi_f2d>
 8018ae2:	f04f 0200 	mov.w	r2, #0
 8018ae6:	4b46      	ldr	r3, [pc, #280]	; (8018c00 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8018ae8:	f7e7 fd90 	bl	800060c <__aeabi_dmul>
 8018aec:	4602      	mov	r2, r0
 8018aee:	460b      	mov	r3, r1
 8018af0:	4620      	mov	r0, r4
 8018af2:	4629      	mov	r1, r5
 8018af4:	f7e7 fbd2 	bl	800029c <__aeabi_dsub>
 8018af8:	4602      	mov	r2, r0
 8018afa:	460b      	mov	r3, r1
 8018afc:	4610      	mov	r0, r2
 8018afe:	4619      	mov	r1, r3
 8018b00:	683b      	ldr	r3, [r7, #0]
 8018b02:	00db      	lsls	r3, r3, #3
 8018b04:	68fa      	ldr	r2, [r7, #12]
 8018b06:	18d4      	adds	r4, r2, r3
 8018b08:	f7e8 f878 	bl	8000bfc <__aeabi_d2f>
 8018b0c:	4603      	mov	r3, r0
 8018b0e:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8018b10:	ed97 7a06 	vldr	s14, [r7, #24]
 8018b14:	edd7 7a05 	vldr	s15, [r7, #20]
 8018b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018b1c:	edc7 7a06 	vstr	s15, [r7, #24]
 8018b20:	ed97 7a07 	vldr	s14, [r7, #28]
 8018b24:	edd7 7a05 	vldr	s15, [r7, #20]
 8018b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018b2c:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	ed93 7a00 	vldr	s14, [r3]
 8018b36:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	edc3 7a00 	vstr	s15, [r3]
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	ed93 7a01 	vldr	s14, [r3, #4]
 8018b4a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8018b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8018b58:	683b      	ldr	r3, [r7, #0]
 8018b5a:	00db      	lsls	r3, r3, #3
 8018b5c:	68fa      	ldr	r2, [r7, #12]
 8018b5e:	4413      	add	r3, r2
 8018b60:	ed93 7a00 	vldr	s14, [r3]
 8018b64:	edd7 7a07 	vldr	s15, [r7, #28]
 8018b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b6a:	00db      	lsls	r3, r3, #3
 8018b6c:	68fa      	ldr	r2, [r7, #12]
 8018b6e:	4413      	add	r3, r2
 8018b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b74:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8018b78:	683b      	ldr	r3, [r7, #0]
 8018b7a:	00db      	lsls	r3, r3, #3
 8018b7c:	68fa      	ldr	r2, [r7, #12]
 8018b7e:	4413      	add	r3, r2
 8018b80:	ed93 7a01 	vldr	s14, [r3, #4]
 8018b84:	edd7 7a06 	vldr	s15, [r7, #24]
 8018b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b8a:	00db      	lsls	r3, r3, #3
 8018b8c:	68fa      	ldr	r2, [r7, #12]
 8018b8e:	4413      	add	r3, r2
 8018b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b94:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8018b98:	683b      	ldr	r3, [r7, #0]
 8018b9a:	00db      	lsls	r3, r3, #3
 8018b9c:	68fa      	ldr	r2, [r7, #12]
 8018b9e:	4413      	add	r3, r2
 8018ba0:	ed93 7a00 	vldr	s14, [r3]
 8018ba4:	edd7 7a07 	vldr	s15, [r7, #28]
 8018ba8:	683b      	ldr	r3, [r7, #0]
 8018baa:	00db      	lsls	r3, r3, #3
 8018bac:	68fa      	ldr	r2, [r7, #12]
 8018bae:	4413      	add	r3, r2
 8018bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018bb4:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	00db      	lsls	r3, r3, #3
 8018bbc:	68fa      	ldr	r2, [r7, #12]
 8018bbe:	4413      	add	r3, r2
 8018bc0:	ed93 7a01 	vldr	s14, [r3, #4]
 8018bc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8018bc8:	683b      	ldr	r3, [r7, #0]
 8018bca:	00db      	lsls	r3, r3, #3
 8018bcc:	68fa      	ldr	r2, [r7, #12]
 8018bce:	4413      	add	r3, r2
 8018bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018bd4:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	3308      	adds	r3, #8
 8018bdc:	60fb      	str	r3, [r7, #12]
     }while(--k);
 8018bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018be0:	3b01      	subs	r3, #1
 8018be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	bf14      	ite	ne
 8018bea:	2301      	movne	r3, #1
 8018bec:	2300      	moveq	r3, #0
 8018bee:	b2db      	uxtb	r3, r3
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d000      	beq.n	8018bf6 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 8018bf4:	e6b6      	b.n	8018964 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 8018bf6:	bf00      	nop
 8018bf8:	3750      	adds	r7, #80	; 0x50
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8018bfe:	bf00      	nop
 8018c00:	3fe00000 	.word	0x3fe00000

08018c04 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8018c04:	b480      	push	{r7}
 8018c06:	b0ab      	sub	sp, #172	; 0xac
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	60f8      	str	r0, [r7, #12]
 8018c0c:	60b9      	str	r1, [r7, #8]
 8018c0e:	607a      	str	r2, [r7, #4]
 8018c10:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018c18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8018c1c:	683b      	ldr	r3, [r7, #0]
 8018c1e:	68ba      	ldr	r2, [r7, #8]
 8018c20:	fb02 f303 	mul.w	r3, r2, r3
 8018c24:	00db      	lsls	r3, r3, #3
 8018c26:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8018c2a:	441a      	add	r2, r3
 8018c2c:	f107 0318 	add.w	r3, r7, #24
 8018c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c34:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8018c38:	683b      	ldr	r3, [r7, #0]
 8018c3a:	68ba      	ldr	r2, [r7, #8]
 8018c3c:	fb02 f303 	mul.w	r3, r2, r3
 8018c40:	011b      	lsls	r3, r3, #4
 8018c42:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8018c46:	441a      	add	r2, r3
 8018c48:	f107 0310 	add.w	r3, r7, #16
 8018c4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c50:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 8018c5a:	683b      	ldr	r3, [r7, #0]
 8018c5c:	00db      	lsls	r3, r3, #3
 8018c5e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018c62:	4413      	add	r3, r2
 8018c64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 8018c68:	683b      	ldr	r3, [r7, #0]
 8018c6a:	011b      	lsls	r3, r3, #4
 8018c6c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018c70:	4413      	add	r3, r2
 8018c72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 8018c76:	683a      	ldr	r2, [r7, #0]
 8018c78:	4613      	mov	r3, r2
 8018c7a:	005b      	lsls	r3, r3, #1
 8018c7c:	4413      	add	r3, r2
 8018c7e:	00db      	lsls	r3, r3, #3
 8018c80:	461a      	mov	r2, r3
 8018c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018c86:	4413      	add	r3, r2
 8018c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 8018c8c:	683b      	ldr	r3, [r7, #0]
 8018c8e:	015b      	lsls	r3, r3, #5
 8018c90:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018c94:	4413      	add	r3, r2
 8018c96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018ca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018caa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8018cae:	683b      	ldr	r3, [r7, #0]
 8018cb0:	429a      	cmp	r2, r3
 8018cb2:	f280 82a9 	bge.w	8019208 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8018cb6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018cba:	f107 0320 	add.w	r3, r7, #32
 8018cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018cc2:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 8018cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018cca:	ed93 7a00 	vldr	s14, [r3]
 8018cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018cd2:	68ba      	ldr	r2, [r7, #8]
 8018cd4:	fb02 f303 	mul.w	r3, r2, r3
 8018cd8:	00db      	lsls	r3, r3, #3
 8018cda:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018cde:	4413      	add	r3, r2
 8018ce0:	edd3 7a00 	vldr	s15, [r3]
 8018ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018ce8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018cec:	edd3 6a01 	vldr	s13, [r3, #4]
 8018cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018cf4:	68ba      	ldr	r2, [r7, #8]
 8018cf6:	fb02 f303 	mul.w	r3, r2, r3
 8018cfa:	00db      	lsls	r3, r3, #3
 8018cfc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018d00:	4413      	add	r3, r2
 8018d02:	edd3 7a01 	vldr	s15, [r3, #4]
 8018d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018d0e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8018d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018d16:	ed93 7a00 	vldr	s14, [r3]
 8018d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d1e:	68ba      	ldr	r2, [r7, #8]
 8018d20:	fb02 f303 	mul.w	r3, r2, r3
 8018d24:	00db      	lsls	r3, r3, #3
 8018d26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018d2a:	4413      	add	r3, r2
 8018d2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8018d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018d34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018d38:	edd3 6a01 	vldr	s13, [r3, #4]
 8018d3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d40:	68ba      	ldr	r2, [r7, #8]
 8018d42:	fb02 f303 	mul.w	r3, r2, r3
 8018d46:	00db      	lsls	r3, r3, #3
 8018d48:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018d4c:	4413      	add	r3, r2
 8018d4e:	edd3 7a00 	vldr	s15, [r3]
 8018d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018d5a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 8018d5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018d62:	ed93 7a00 	vldr	s14, [r3]
 8018d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d6a:	68ba      	ldr	r2, [r7, #8]
 8018d6c:	fb02 f303 	mul.w	r3, r2, r3
 8018d70:	011b      	lsls	r3, r3, #4
 8018d72:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018d76:	4413      	add	r3, r2
 8018d78:	edd3 7a00 	vldr	s15, [r3]
 8018d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018d84:	edd3 6a01 	vldr	s13, [r3, #4]
 8018d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d8c:	68ba      	ldr	r2, [r7, #8]
 8018d8e:	fb02 f303 	mul.w	r3, r2, r3
 8018d92:	011b      	lsls	r3, r3, #4
 8018d94:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018d98:	4413      	add	r3, r2
 8018d9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8018d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018da6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8018daa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018dae:	ed93 7a00 	vldr	s14, [r3]
 8018db2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018db6:	68ba      	ldr	r2, [r7, #8]
 8018db8:	fb02 f303 	mul.w	r3, r2, r3
 8018dbc:	011b      	lsls	r3, r3, #4
 8018dbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018dc2:	4413      	add	r3, r2
 8018dc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8018dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018dd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8018dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018dd8:	68ba      	ldr	r2, [r7, #8]
 8018dda:	fb02 f303 	mul.w	r3, r2, r3
 8018dde:	011b      	lsls	r3, r3, #4
 8018de0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018de4:	4413      	add	r3, r2
 8018de6:	edd3 7a00 	vldr	s15, [r3]
 8018dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018df2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8018df6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018dfa:	ed93 7a00 	vldr	s14, [r3]
 8018dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e02:	68ba      	ldr	r2, [r7, #8]
 8018e04:	fb03 f202 	mul.w	r2, r3, r2
 8018e08:	4613      	mov	r3, r2
 8018e0a:	005b      	lsls	r3, r3, #1
 8018e0c:	4413      	add	r3, r2
 8018e0e:	00db      	lsls	r3, r3, #3
 8018e10:	461a      	mov	r2, r3
 8018e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018e16:	4413      	add	r3, r2
 8018e18:	edd3 7a00 	vldr	s15, [r3]
 8018e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018e24:	edd3 6a01 	vldr	s13, [r3, #4]
 8018e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e2c:	68ba      	ldr	r2, [r7, #8]
 8018e2e:	fb03 f202 	mul.w	r2, r3, r2
 8018e32:	4613      	mov	r3, r2
 8018e34:	005b      	lsls	r3, r3, #1
 8018e36:	4413      	add	r3, r2
 8018e38:	00db      	lsls	r3, r3, #3
 8018e3a:	461a      	mov	r2, r3
 8018e3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018e40:	4413      	add	r3, r2
 8018e42:	edd3 7a01 	vldr	s15, [r3, #4]
 8018e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018e4e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8018e52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018e56:	ed93 7a00 	vldr	s14, [r3]
 8018e5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e5e:	68ba      	ldr	r2, [r7, #8]
 8018e60:	fb03 f202 	mul.w	r2, r3, r2
 8018e64:	4613      	mov	r3, r2
 8018e66:	005b      	lsls	r3, r3, #1
 8018e68:	4413      	add	r3, r2
 8018e6a:	00db      	lsls	r3, r3, #3
 8018e6c:	461a      	mov	r2, r3
 8018e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018e72:	4413      	add	r3, r2
 8018e74:	edd3 7a01 	vldr	s15, [r3, #4]
 8018e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018e80:	edd3 6a01 	vldr	s13, [r3, #4]
 8018e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e88:	68ba      	ldr	r2, [r7, #8]
 8018e8a:	fb03 f202 	mul.w	r2, r3, r2
 8018e8e:	4613      	mov	r3, r2
 8018e90:	005b      	lsls	r3, r3, #1
 8018e92:	4413      	add	r3, r2
 8018e94:	00db      	lsls	r3, r3, #3
 8018e96:	461a      	mov	r2, r3
 8018e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018e9c:	4413      	add	r3, r2
 8018e9e:	edd3 7a00 	vldr	s15, [r3]
 8018ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018eaa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 8018eae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018eb2:	ed93 7a00 	vldr	s14, [r3]
 8018eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018eba:	68ba      	ldr	r2, [r7, #8]
 8018ebc:	fb02 f303 	mul.w	r3, r2, r3
 8018ec0:	015b      	lsls	r3, r3, #5
 8018ec2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018ec6:	4413      	add	r3, r2
 8018ec8:	edd3 7a00 	vldr	s15, [r3]
 8018ecc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018ed0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018ed4:	edd3 6a01 	vldr	s13, [r3, #4]
 8018ed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018edc:	68ba      	ldr	r2, [r7, #8]
 8018ede:	fb02 f303 	mul.w	r3, r2, r3
 8018ee2:	015b      	lsls	r3, r3, #5
 8018ee4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018ee8:	4413      	add	r3, r2
 8018eea:	edd3 7a01 	vldr	s15, [r3, #4]
 8018eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018ef6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8018efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018efe:	ed93 7a00 	vldr	s14, [r3]
 8018f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f06:	68ba      	ldr	r2, [r7, #8]
 8018f08:	fb02 f303 	mul.w	r3, r2, r3
 8018f0c:	015b      	lsls	r3, r3, #5
 8018f0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018f12:	4413      	add	r3, r2
 8018f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8018f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018f20:	edd3 6a01 	vldr	s13, [r3, #4]
 8018f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f28:	68ba      	ldr	r2, [r7, #8]
 8018f2a:	fb02 f303 	mul.w	r3, r2, r3
 8018f2e:	015b      	lsls	r3, r3, #5
 8018f30:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018f34:	4413      	add	r3, r2
 8018f36:	edd3 7a00 	vldr	s15, [r3]
 8018f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f42:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8018f46:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8018f4a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8018f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f52:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8018f56:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8018f5a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8018f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f62:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 8018f66:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8018f6a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8018f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018f72:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8018f76:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8018f7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8018f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018f82:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 8018f86:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8018f8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f92:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8018f96:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8018f9a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8018f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018fa2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 8018fa6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8018faa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018fb2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8018fb6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8018fba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8018fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018fc2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 8018fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018fca:	ed93 7a00 	vldr	s14, [r3]
 8018fce:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8018fd2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8018fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018fe2:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8018fe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018fea:	ed93 7a01 	vldr	s14, [r3, #4]
 8018fee:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8018ff2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8018ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018ffe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019002:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8019006:	ed97 7a08 	vldr	s14, [r7, #32]
 801900a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801900e:	edd7 7a06 	vldr	s15, [r7, #24]
 8019012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019016:	ee37 7a27 	vadd.f32	s14, s14, s15
 801901a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801901e:	edd7 7a04 	vldr	s15, [r7, #16]
 8019022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019026:	ee77 7a27 	vadd.f32	s15, s14, s15
 801902a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 801902e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019032:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8019036:	edd7 7a06 	vldr	s15, [r7, #24]
 801903a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801903e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019042:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8019046:	edd7 7a04 	vldr	s15, [r7, #16]
 801904a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801904e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019052:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 8019056:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 801905a:	edd7 7a07 	vldr	s15, [r7, #28]
 801905e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019062:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8019066:	edd7 7a05 	vldr	s15, [r7, #20]
 801906a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801906e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019072:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 8019076:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801907a:	edd7 7a07 	vldr	s15, [r7, #28]
 801907e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019082:	eeb1 7a67 	vneg.f32	s14, s15
 8019086:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 801908a:	edd7 7a05 	vldr	s15, [r7, #20]
 801908e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019096:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 801909a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801909e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80190a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80190a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80190aa:	edc3 7a00 	vstr	s15, [r3]
 80190ae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80190b2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80190b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80190ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80190be:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 80190c2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80190c6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80190ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80190ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80190d2:	edc3 7a00 	vstr	s15, [r3]
 80190d6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80190da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80190de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80190e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80190e6:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 80190ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80190ee:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80190f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80190f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80190fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80190fe:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8019102:	edd7 7a06 	vldr	s15, [r7, #24]
 8019106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801910a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801910e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 8019112:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019116:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801911a:	edd7 7a04 	vldr	s15, [r7, #16]
 801911e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019122:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019126:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801912a:	edd7 7a06 	vldr	s15, [r7, #24]
 801912e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019136:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 801913a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801913e:	edd7 7a07 	vldr	s15, [r7, #28]
 8019142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019146:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 801914a:	edd7 7a05 	vldr	s15, [r7, #20]
 801914e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019156:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 801915a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801915e:	edd7 7a05 	vldr	s15, [r7, #20]
 8019162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019166:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 801916a:	edd7 7a07 	vldr	s15, [r7, #28]
 801916e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019176:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 801917a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801917e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8019182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801918a:	edc3 7a00 	vstr	s15, [r3]
 801918e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8019192:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8019196:	ee77 7a27 	vadd.f32	s15, s14, s15
 801919a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801919e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 80191a2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80191a6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80191aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80191ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80191b2:	edc3 7a00 	vstr	s15, [r3]
 80191b6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80191ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80191be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80191c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80191c6:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 80191ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80191ce:	3308      	adds	r3, #8
 80191d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80191d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80191d8:	3308      	adds	r3, #8
 80191da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80191de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80191e2:	3308      	adds	r3, #8
 80191e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80191e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80191ec:	3308      	adds	r3, #8
 80191ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80191f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80191f6:	3308      	adds	r3, #8
 80191f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 80191fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019200:	3301      	adds	r3, #1
 8019202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019206:	e550      	b.n	8018caa <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 8019208:	bf00      	nop
 801920a:	37ac      	adds	r7, #172	; 0xac
 801920c:	46bd      	mov	sp, r7
 801920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019212:	4770      	bx	lr

08019214 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b08e      	sub	sp, #56	; 0x38
 8019218:	af00      	add	r7, sp, #0
 801921a:	60f8      	str	r0, [r7, #12]
 801921c:	60b9      	str	r1, [r7, #8]
 801921e:	607a      	str	r2, [r7, #4]
 8019220:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019228:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 8019230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019232:	00db      	lsls	r3, r3, #3
 8019234:	4618      	mov	r0, r3
 8019236:	f000 fe8b 	bl	8019f50 <_Z9ei_mallocj>
 801923a:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 801923c:	2300      	movs	r3, #0
 801923e:	637b      	str	r3, [r7, #52]	; 0x34
 8019240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019242:	683b      	ldr	r3, [r7, #0]
 8019244:	429a      	cmp	r2, r3
 8019246:	f280 80b6 	bge.w	80193b6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 801924a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801924c:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801924e:	2300      	movs	r3, #0
 8019250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019256:	429a      	cmp	r2, r3
 8019258:	da14      	bge.n	8019284 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 801925a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801925c:	00db      	lsls	r3, r3, #3
 801925e:	68fa      	ldr	r2, [r7, #12]
 8019260:	18d1      	adds	r1, r2, r3
 8019262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019264:	00db      	lsls	r3, r3, #3
 8019266:	69ba      	ldr	r2, [r7, #24]
 8019268:	4413      	add	r3, r2
 801926a:	460a      	mov	r2, r1
 801926c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019270:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 8019274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019276:	683b      	ldr	r3, [r7, #0]
 8019278:	4413      	add	r3, r2
 801927a:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801927e:	3301      	adds	r3, #1
 8019280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019282:	e7e6      	b.n	8019252 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 8019284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019286:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8019288:	2300      	movs	r3, #0
 801928a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801928c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801928e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019290:	429a      	cmp	r2, r3
 8019292:	f280 808c 	bge.w	80193ae <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 8019296:	2300      	movs	r3, #0
 8019298:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 801929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801929c:	00db      	lsls	r3, r3, #3
 801929e:	68fa      	ldr	r2, [r7, #12]
 80192a0:	4413      	add	r3, r2
 80192a2:	69ba      	ldr	r2, [r7, #24]
 80192a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80192a8:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 80192ac:	2301      	movs	r3, #1
 80192ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80192b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192b4:	429a      	cmp	r2, r3
 80192b6:	da72      	bge.n	801939e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 80192b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ba:	68ba      	ldr	r2, [r7, #8]
 80192bc:	fb03 f202 	mul.w	r2, r3, r2
 80192c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192c2:	4413      	add	r3, r2
 80192c4:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 80192c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192c8:	69fb      	ldr	r3, [r7, #28]
 80192ca:	429a      	cmp	r2, r3
 80192cc:	db03      	blt.n	80192d6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 80192ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192d0:	69fb      	ldr	r3, [r7, #28]
 80192d2:	1ad3      	subs	r3, r2, r3
 80192d4:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 80192d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192d8:	00db      	lsls	r3, r3, #3
 80192da:	69ba      	ldr	r2, [r7, #24]
 80192dc:	4413      	add	r3, r2
 80192de:	ed93 7a00 	vldr	s14, [r3]
 80192e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192e4:	00db      	lsls	r3, r3, #3
 80192e6:	6a3a      	ldr	r2, [r7, #32]
 80192e8:	4413      	add	r3, r2
 80192ea:	edd3 7a00 	vldr	s15, [r3]
 80192ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80192f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192f4:	00db      	lsls	r3, r3, #3
 80192f6:	69ba      	ldr	r2, [r7, #24]
 80192f8:	4413      	add	r3, r2
 80192fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80192fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019300:	00db      	lsls	r3, r3, #3
 8019302:	6a3a      	ldr	r2, [r7, #32]
 8019304:	4413      	add	r3, r2
 8019306:	edd3 7a01 	vldr	s15, [r3, #4]
 801930a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801930e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019312:	edc7 7a04 	vstr	s15, [r7, #16]
 8019316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019318:	00db      	lsls	r3, r3, #3
 801931a:	69ba      	ldr	r2, [r7, #24]
 801931c:	4413      	add	r3, r2
 801931e:	ed93 7a00 	vldr	s14, [r3]
 8019322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019324:	00db      	lsls	r3, r3, #3
 8019326:	6a3a      	ldr	r2, [r7, #32]
 8019328:	4413      	add	r3, r2
 801932a:	edd3 7a01 	vldr	s15, [r3, #4]
 801932e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019334:	00db      	lsls	r3, r3, #3
 8019336:	69ba      	ldr	r2, [r7, #24]
 8019338:	4413      	add	r3, r2
 801933a:	edd3 6a01 	vldr	s13, [r3, #4]
 801933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019340:	00db      	lsls	r3, r3, #3
 8019342:	6a3a      	ldr	r2, [r7, #32]
 8019344:	4413      	add	r3, r2
 8019346:	edd3 7a00 	vldr	s15, [r3]
 801934a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801934e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019352:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 8019356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019358:	00db      	lsls	r3, r3, #3
 801935a:	68fa      	ldr	r2, [r7, #12]
 801935c:	4413      	add	r3, r2
 801935e:	ed93 7a00 	vldr	s14, [r3]
 8019362:	edd7 7a04 	vldr	s15, [r7, #16]
 8019366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019368:	00db      	lsls	r3, r3, #3
 801936a:	68fa      	ldr	r2, [r7, #12]
 801936c:	4413      	add	r3, r2
 801936e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019372:	edc3 7a00 	vstr	s15, [r3]
 8019376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019378:	00db      	lsls	r3, r3, #3
 801937a:	68fa      	ldr	r2, [r7, #12]
 801937c:	4413      	add	r3, r2
 801937e:	ed93 7a01 	vldr	s14, [r3, #4]
 8019382:	edd7 7a05 	vldr	s15, [r7, #20]
 8019386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019388:	00db      	lsls	r3, r3, #3
 801938a:	68fa      	ldr	r2, [r7, #12]
 801938c:	4413      	add	r3, r2
 801938e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019392:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 8019396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019398:	3301      	adds	r3, #1
 801939a:	62bb      	str	r3, [r7, #40]	; 0x28
 801939c:	e788      	b.n	80192b0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 801939e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80193a0:	683b      	ldr	r3, [r7, #0]
 80193a2:	4413      	add	r3, r2
 80193a4:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80193a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193a8:	3301      	adds	r3, #1
 80193aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80193ac:	e76e      	b.n	801928c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 80193ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193b0:	3301      	adds	r3, #1
 80193b2:	637b      	str	r3, [r7, #52]	; 0x34
 80193b4:	e744      	b.n	8019240 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 80193b6:	69b8      	ldr	r0, [r7, #24]
 80193b8:	f000 fde4 	bl	8019f84 <_Z7ei_freePv>
}
 80193bc:	bf00      	nop
 80193be:	3738      	adds	r7, #56	; 0x38
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bd80      	pop	{r7, pc}

080193c4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b08a      	sub	sp, #40	; 0x28
 80193c8:	af02      	add	r7, sp, #8
 80193ca:	60f8      	str	r0, [r7, #12]
 80193cc:	60b9      	str	r1, [r7, #8]
 80193ce:	607a      	str	r2, [r7, #4]
 80193d0:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 80193d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193d8:	1d1a      	adds	r2, r3, #4
 80193da:	62ba      	str	r2, [r7, #40]	; 0x28
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 80193e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e2:	1d1a      	adds	r2, r3, #4
 80193e4:	62ba      	str	r2, [r7, #40]	; 0x28
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 80193ea:	69bb      	ldr	r3, [r7, #24]
 80193ec:	697a      	ldr	r2, [r7, #20]
 80193ee:	fb02 f303 	mul.w	r3, r2, r3
 80193f2:	00db      	lsls	r3, r3, #3
 80193f4:	68fa      	ldr	r2, [r7, #12]
 80193f6:	4413      	add	r3, r2
 80193f8:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 80193fa:	697b      	ldr	r3, [r7, #20]
 80193fc:	2b01      	cmp	r3, #1
 80193fe:	d11a      	bne.n	8019436 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	68ba      	ldr	r2, [r7, #8]
 8019404:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019408:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 801940c:	683b      	ldr	r3, [r7, #0]
 801940e:	687a      	ldr	r2, [r7, #4]
 8019410:	fb02 f303 	mul.w	r3, r2, r3
 8019414:	00db      	lsls	r3, r3, #3
 8019416:	68ba      	ldr	r2, [r7, #8]
 8019418:	4413      	add	r3, r2
 801941a:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	3308      	adds	r3, #8
 8019420:	60fb      	str	r3, [r7, #12]
 8019422:	68fa      	ldr	r2, [r7, #12]
 8019424:	693b      	ldr	r3, [r7, #16]
 8019426:	429a      	cmp	r2, r3
 8019428:	bf14      	ite	ne
 801942a:	2301      	movne	r3, #1
 801942c:	2300      	moveq	r3, #0
 801942e:	b2db      	uxtb	r3, r3
 8019430:	2b00      	cmp	r3, #0
 8019432:	d024      	beq.n	801947e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 8019434:	e7e4      	b.n	8019400 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 8019436:	69bb      	ldr	r3, [r7, #24]
 8019438:	687a      	ldr	r2, [r7, #4]
 801943a:	fb03 f202 	mul.w	r2, r3, r2
 801943e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019440:	9301      	str	r3, [sp, #4]
 8019442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019444:	9300      	str	r3, [sp, #0]
 8019446:	683b      	ldr	r3, [r7, #0]
 8019448:	68b9      	ldr	r1, [r7, #8]
 801944a:	68f8      	ldr	r0, [r7, #12]
 801944c:	f7ff ffba 	bl	80193c4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 8019450:	683b      	ldr	r3, [r7, #0]
 8019452:	687a      	ldr	r2, [r7, #4]
 8019454:	fb02 f303 	mul.w	r3, r2, r3
 8019458:	00db      	lsls	r3, r3, #3
 801945a:	68ba      	ldr	r2, [r7, #8]
 801945c:	4413      	add	r3, r2
 801945e:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 8019460:	697b      	ldr	r3, [r7, #20]
 8019462:	00db      	lsls	r3, r3, #3
 8019464:	68fa      	ldr	r2, [r7, #12]
 8019466:	4413      	add	r3, r2
 8019468:	60fb      	str	r3, [r7, #12]
 801946a:	68fa      	ldr	r2, [r7, #12]
 801946c:	693b      	ldr	r3, [r7, #16]
 801946e:	429a      	cmp	r2, r3
 8019470:	bf14      	ite	ne
 8019472:	2301      	movne	r3, #1
 8019474:	2300      	moveq	r3, #0
 8019476:	b2db      	uxtb	r3, r3
 8019478:	2b00      	cmp	r3, #0
 801947a:	d000      	beq.n	801947e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 801947c:	e7db      	b.n	8019436 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 801947e:	69fb      	ldr	r3, [r7, #28]
 8019480:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 8019482:	69bb      	ldr	r3, [r7, #24]
 8019484:	3b02      	subs	r3, #2
 8019486:	2b03      	cmp	r3, #3
 8019488:	d826      	bhi.n	80194d8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 801948a:	a201      	add	r2, pc, #4	; (adr r2, 8019490 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 801948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019490:	080194a1 	.word	0x080194a1
 8019494:	080194af 	.word	0x080194af
 8019498:	080194bd 	.word	0x080194bd
 801949c:	080194cb 	.word	0x080194cb
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 80194a0:	697b      	ldr	r3, [r7, #20]
 80194a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80194a4:	6879      	ldr	r1, [r7, #4]
 80194a6:	68f8      	ldr	r0, [r7, #12]
 80194a8:	f7ff f808 	bl	80184bc <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 80194ac:	e01d      	b.n	80194ea <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 80194ae:	697b      	ldr	r3, [r7, #20]
 80194b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80194b2:	6879      	ldr	r1, [r7, #4]
 80194b4:	68f8      	ldr	r0, [r7, #12]
 80194b6:	f7ff fa35 	bl	8018924 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 80194ba:	e016      	b.n	80194ea <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 80194bc:	697b      	ldr	r3, [r7, #20]
 80194be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80194c0:	6879      	ldr	r1, [r7, #4]
 80194c2:	68f8      	ldr	r0, [r7, #12]
 80194c4:	f7ff f877 	bl	80185b6 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 80194c8:	e00f      	b.n	80194ea <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 80194ca:	697b      	ldr	r3, [r7, #20]
 80194cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80194ce:	6879      	ldr	r1, [r7, #4]
 80194d0:	68f8      	ldr	r0, [r7, #12]
 80194d2:	f7ff fb97 	bl	8018c04 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 80194d6:	e008      	b.n	80194ea <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 80194d8:	69bb      	ldr	r3, [r7, #24]
 80194da:	9300      	str	r3, [sp, #0]
 80194dc:	697b      	ldr	r3, [r7, #20]
 80194de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80194e0:	6879      	ldr	r1, [r7, #4]
 80194e2:	68f8      	ldr	r0, [r7, #12]
 80194e4:	f7ff fe96 	bl	8019214 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 80194e8:	bf00      	nop
    }
}
 80194ea:	bf00      	nop
 80194ec:	3720      	adds	r7, #32
 80194ee:	46bd      	mov	sp, r7
 80194f0:	bd80      	pop	{r7, pc}
 80194f2:	bf00      	nop

080194f4 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b086      	sub	sp, #24
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]
 80194fc:	6039      	str	r1, [r7, #0]
    int p=4;
 80194fe:	2304      	movs	r3, #4
 8019500:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 8019502:	6878      	ldr	r0, [r7, #4]
 8019504:	f7e7 f818 	bl	8000538 <__aeabi_i2d>
 8019508:	4602      	mov	r2, r0
 801950a:	460b      	mov	r3, r1
 801950c:	ec43 2b10 	vmov	d0, r2, r3
 8019510:	f006 fea0 	bl	8020254 <sqrt>
 8019514:	eeb0 7a40 	vmov.f32	s14, s0
 8019518:	eef0 7a60 	vmov.f32	s15, s1
 801951c:	eeb0 0a47 	vmov.f32	s0, s14
 8019520:	eef0 0a67 	vmov.f32	s1, s15
 8019524:	f006 fc50 	bl	801fdc8 <floor>
 8019528:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	697a      	ldr	r2, [r7, #20]
 8019530:	fb93 f2f2 	sdiv	r2, r3, r2
 8019534:	6979      	ldr	r1, [r7, #20]
 8019536:	fb01 f202 	mul.w	r2, r1, r2
 801953a:	1a9b      	subs	r3, r3, r2
 801953c:	2b00      	cmp	r3, #0
 801953e:	d01e      	beq.n	801957e <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 8019540:	697b      	ldr	r3, [r7, #20]
 8019542:	2b02      	cmp	r3, #2
 8019544:	d005      	beq.n	8019552 <_ZL9kf_factoriPi+0x5e>
 8019546:	697b      	ldr	r3, [r7, #20]
 8019548:	2b04      	cmp	r3, #4
 801954a:	d105      	bne.n	8019558 <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 801954c:	2302      	movs	r3, #2
 801954e:	617b      	str	r3, [r7, #20]
 8019550:	e006      	b.n	8019560 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 8019552:	2303      	movs	r3, #3
 8019554:	617b      	str	r3, [r7, #20]
 8019556:	e003      	b.n	8019560 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 8019558:	697b      	ldr	r3, [r7, #20]
 801955a:	3302      	adds	r3, #2
 801955c:	617b      	str	r3, [r7, #20]
 801955e:	bf00      	nop
            }
            if (p > floor_sqrt)
 8019560:	6978      	ldr	r0, [r7, #20]
 8019562:	f7e6 ffe9 	bl	8000538 <__aeabi_i2d>
 8019566:	4602      	mov	r2, r0
 8019568:	460b      	mov	r3, r1
 801956a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801956e:	f7e7 fabf 	bl	8000af0 <__aeabi_dcmplt>
 8019572:	4603      	mov	r3, r0
 8019574:	2b00      	cmp	r3, #0
 8019576:	d001      	beq.n	801957c <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	617b      	str	r3, [r7, #20]
        while (n % p) {
 801957c:	e7d6      	b.n	801952c <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 801957e:	687a      	ldr	r2, [r7, #4]
 8019580:	697b      	ldr	r3, [r7, #20]
 8019582:	fb92 f3f3 	sdiv	r3, r2, r3
 8019586:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 8019588:	683b      	ldr	r3, [r7, #0]
 801958a:	1d1a      	adds	r2, r3, #4
 801958c:	603a      	str	r2, [r7, #0]
 801958e:	697a      	ldr	r2, [r7, #20]
 8019590:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 8019592:	683b      	ldr	r3, [r7, #0]
 8019594:	1d1a      	adds	r2, r3, #4
 8019596:	603a      	str	r2, [r7, #0]
 8019598:	687a      	ldr	r2, [r7, #4]
 801959a:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	2b01      	cmp	r3, #1
 80195a0:	dd00      	ble.n	80195a4 <_ZL9kf_factoriPi+0xb0>
    do {
 80195a2:	e7c3      	b.n	801952c <_ZL9kf_factoriPi+0x38>
}
 80195a4:	bf00      	nop
 80195a6:	3718      	adds	r7, #24
 80195a8:	46bd      	mov	sp, r7
 80195aa:	bd80      	pop	{r7, pc}
 80195ac:	0000      	movs	r0, r0
	...

080195b0 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 80195b0:	b5b0      	push	{r4, r5, r7, lr}
 80195b2:	b090      	sub	sp, #64	; 0x40
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	60f8      	str	r0, [r7, #12]
 80195b8:	60b9      	str	r1, [r7, #8]
 80195ba:	607a      	str	r2, [r7, #4]
 80195bc:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 80195be:	2300      	movs	r3, #0
 80195c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 80195c6:	00db      	lsls	r3, r3, #3
 80195c8:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 80195ca:	683b      	ldr	r3, [r7, #0]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d104      	bne.n	80195da <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 80195d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80195d2:	f000 fcbd 	bl	8019f50 <_Z9ei_mallocj>
 80195d6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80195d8:	e00c      	b.n	80195f4 <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d006      	beq.n	80195ee <kiss_fft_alloc+0x3e>
 80195e0:	683b      	ldr	r3, [r7, #0]
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80195e6:	429a      	cmp	r2, r3
 80195e8:	d801      	bhi.n	80195ee <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 80195ee:	683b      	ldr	r3, [r7, #0]
 80195f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80195f2:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 80195f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	f000 80a0 	beq.w	801973c <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 80195fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195fe:	68fa      	ldr	r2, [r7, #12]
 8019600:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 8019602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019604:	68ba      	ldr	r2, [r7, #8]
 8019606:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 8019608:	68bb      	ldr	r3, [r7, #8]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d048      	beq.n	80196a0 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 801960e:	2300      	movs	r3, #0
 8019610:	63bb      	str	r3, [r7, #56]	; 0x38
 8019612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	429a      	cmp	r2, r3
 8019618:	f280 808a 	bge.w	8019730 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801961c:	a34e      	add	r3, pc, #312	; (adr r3, 8019758 <kiss_fft_alloc+0x1a8>)
 801961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019622:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 8019626:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019628:	f7e6 ff86 	bl	8000538 <__aeabi_i2d>
 801962c:	a34c      	add	r3, pc, #304	; (adr r3, 8019760 <kiss_fft_alloc+0x1b0>)
 801962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019632:	f7e6 ffeb 	bl	800060c <__aeabi_dmul>
 8019636:	4602      	mov	r2, r0
 8019638:	460b      	mov	r3, r1
 801963a:	4614      	mov	r4, r2
 801963c:	461d      	mov	r5, r3
 801963e:	68f8      	ldr	r0, [r7, #12]
 8019640:	f7e6 ff7a 	bl	8000538 <__aeabi_i2d>
 8019644:	4602      	mov	r2, r0
 8019646:	460b      	mov	r3, r1
 8019648:	4620      	mov	r0, r4
 801964a:	4629      	mov	r1, r5
 801964c:	f7e7 f908 	bl	8000860 <__aeabi_ddiv>
 8019650:	4602      	mov	r2, r0
 8019652:	460b      	mov	r3, r1
 8019654:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 8019658:	ed97 0b04 	vldr	d0, [r7, #16]
 801965c:	f006 fb60 	bl	801fd20 <cos>
 8019660:	ec51 0b10 	vmov	r0, r1, d0
 8019664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019666:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801966a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801966c:	00db      	lsls	r3, r3, #3
 801966e:	18d4      	adds	r4, r2, r3
 8019670:	f7e7 fac4 	bl	8000bfc <__aeabi_d2f>
 8019674:	4603      	mov	r3, r0
 8019676:	6023      	str	r3, [r4, #0]
 8019678:	ed97 0b04 	vldr	d0, [r7, #16]
 801967c:	f006 fca4 	bl	801ffc8 <sin>
 8019680:	ec51 0b10 	vmov	r0, r1, d0
 8019684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019686:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801968c:	00db      	lsls	r3, r3, #3
 801968e:	18d4      	adds	r4, r2, r3
 8019690:	f7e7 fab4 	bl	8000bfc <__aeabi_d2f>
 8019694:	4603      	mov	r3, r0
 8019696:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8019698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801969a:	3301      	adds	r3, #1
 801969c:	63bb      	str	r3, [r7, #56]	; 0x38
 801969e:	e7b8      	b.n	8019612 <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 80196a0:	2300      	movs	r3, #0
 80196a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80196a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	429a      	cmp	r2, r3
 80196aa:	da41      	bge.n	8019730 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 80196ac:	a32a      	add	r3, pc, #168	; (adr r3, 8019758 <kiss_fft_alloc+0x1a8>)
 80196ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 80196b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80196b8:	f7e6 ff3e 	bl	8000538 <__aeabi_i2d>
 80196bc:	a32a      	add	r3, pc, #168	; (adr r3, 8019768 <kiss_fft_alloc+0x1b8>)
 80196be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196c2:	f7e6 ffa3 	bl	800060c <__aeabi_dmul>
 80196c6:	4602      	mov	r2, r0
 80196c8:	460b      	mov	r3, r1
 80196ca:	4614      	mov	r4, r2
 80196cc:	461d      	mov	r5, r3
 80196ce:	68f8      	ldr	r0, [r7, #12]
 80196d0:	f7e6 ff32 	bl	8000538 <__aeabi_i2d>
 80196d4:	4602      	mov	r2, r0
 80196d6:	460b      	mov	r3, r1
 80196d8:	4620      	mov	r0, r4
 80196da:	4629      	mov	r1, r5
 80196dc:	f7e7 f8c0 	bl	8000860 <__aeabi_ddiv>
 80196e0:	4602      	mov	r2, r0
 80196e2:	460b      	mov	r3, r1
 80196e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 80196e8:	ed97 0b08 	vldr	d0, [r7, #32]
 80196ec:	f006 fb18 	bl	801fd20 <cos>
 80196f0:	ec51 0b10 	vmov	r0, r1, d0
 80196f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196f6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80196fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196fc:	00db      	lsls	r3, r3, #3
 80196fe:	18d4      	adds	r4, r2, r3
 8019700:	f7e7 fa7c 	bl	8000bfc <__aeabi_d2f>
 8019704:	4603      	mov	r3, r0
 8019706:	6023      	str	r3, [r4, #0]
 8019708:	ed97 0b08 	vldr	d0, [r7, #32]
 801970c:	f006 fc5c 	bl	801ffc8 <sin>
 8019710:	ec51 0b10 	vmov	r0, r1, d0
 8019714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019716:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801971c:	00db      	lsls	r3, r3, #3
 801971e:	18d4      	adds	r4, r2, r3
 8019720:	f7e7 fa6c 	bl	8000bfc <__aeabi_d2f>
 8019724:	4603      	mov	r3, r0
 8019726:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8019728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801972a:	3301      	adds	r3, #1
 801972c:	63bb      	str	r3, [r7, #56]	; 0x38
 801972e:	e7b9      	b.n	80196a4 <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 8019730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019732:	3308      	adds	r3, #8
 8019734:	4619      	mov	r1, r3
 8019736:	68f8      	ldr	r0, [r7, #12]
 8019738:	f7ff fedc 	bl	80194f4 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 801973c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801973e:	2b00      	cmp	r3, #0
 8019740:	d002      	beq.n	8019748 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 8019742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019746:	601a      	str	r2, [r3, #0]
    }

    return st;
 8019748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801974a:	4618      	mov	r0, r3
 801974c:	3740      	adds	r7, #64	; 0x40
 801974e:	46bd      	mov	sp, r7
 8019750:	bdb0      	pop	{r4, r5, r7, pc}
 8019752:	bf00      	nop
 8019754:	f3af 8000 	nop.w
 8019758:	54442d18 	.word	0x54442d18
 801975c:	400921fb 	.word	0x400921fb
 8019760:	54442d18 	.word	0x54442d18
 8019764:	401921fb 	.word	0x401921fb
 8019768:	54442d18 	.word	0x54442d18
 801976c:	c01921fb 	.word	0xc01921fb

08019770 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 8019770:	b580      	push	{r7, lr}
 8019772:	b088      	sub	sp, #32
 8019774:	af02      	add	r7, sp, #8
 8019776:	60f8      	str	r0, [r7, #12]
 8019778:	60b9      	str	r1, [r7, #8]
 801977a:	607a      	str	r2, [r7, #4]
 801977c:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 801977e:	68ba      	ldr	r2, [r7, #8]
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	429a      	cmp	r2, r3
 8019784:	d11d      	bne.n	80197c2 <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	00db      	lsls	r3, r3, #3
 801978c:	4618      	mov	r0, r3
 801978e:	f000 fbdf 	bl	8019f50 <_Z9ei_mallocj>
 8019792:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	3308      	adds	r3, #8
 8019798:	68fa      	ldr	r2, [r7, #12]
 801979a:	9201      	str	r2, [sp, #4]
 801979c:	9300      	str	r3, [sp, #0]
 801979e:	683b      	ldr	r3, [r7, #0]
 80197a0:	2201      	movs	r2, #1
 80197a2:	68b9      	ldr	r1, [r7, #8]
 80197a4:	6978      	ldr	r0, [r7, #20]
 80197a6:	f7ff fe0d 	bl	80193c4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	00db      	lsls	r3, r3, #3
 80197b0:	461a      	mov	r2, r3
 80197b2:	6979      	ldr	r1, [r7, #20]
 80197b4:	6878      	ldr	r0, [r7, #4]
 80197b6:	f009 f86f 	bl	8022898 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 80197ba:	6978      	ldr	r0, [r7, #20]
 80197bc:	f000 fbe2 	bl	8019f84 <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 80197c0:	e00a      	b.n	80197d8 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	3308      	adds	r3, #8
 80197c6:	68fa      	ldr	r2, [r7, #12]
 80197c8:	9201      	str	r2, [sp, #4]
 80197ca:	9300      	str	r3, [sp, #0]
 80197cc:	683b      	ldr	r3, [r7, #0]
 80197ce:	2201      	movs	r2, #1
 80197d0:	68b9      	ldr	r1, [r7, #8]
 80197d2:	6878      	ldr	r0, [r7, #4]
 80197d4:	f7ff fdf6 	bl	80193c4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 80197d8:	bf00      	nop
 80197da:	3718      	adds	r7, #24
 80197dc:	46bd      	mov	sp, r7
 80197de:	bd80      	pop	{r7, pc}

080197e0 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 80197e0:	b580      	push	{r7, lr}
 80197e2:	b084      	sub	sp, #16
 80197e4:	af00      	add	r7, sp, #0
 80197e6:	60f8      	str	r0, [r7, #12]
 80197e8:	60b9      	str	r1, [r7, #8]
 80197ea:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 80197ec:	2301      	movs	r3, #1
 80197ee:	687a      	ldr	r2, [r7, #4]
 80197f0:	68b9      	ldr	r1, [r7, #8]
 80197f2:	68f8      	ldr	r0, [r7, #12]
 80197f4:	f7ff ffbc 	bl	8019770 <kiss_fft_stride>
}
 80197f8:	bf00      	nop
 80197fa:	3710      	adds	r7, #16
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd80      	pop	{r7, pc}

08019800 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8019800:	b5b0      	push	{r4, r5, r7, lr}
 8019802:	b090      	sub	sp, #64	; 0x40
 8019804:	af02      	add	r7, sp, #8
 8019806:	60f8      	str	r0, [r7, #12]
 8019808:	60b9      	str	r1, [r7, #8]
 801980a:	607a      	str	r2, [r7, #4]
 801980c:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 801980e:	2300      	movs	r3, #0
 8019810:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 8019812:	2300      	movs	r3, #0
 8019814:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	f003 0301 	and.w	r3, r3, #1
 801981c:	2b00      	cmp	r3, #0
 801981e:	d004      	beq.n	801982a <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 8019820:	4885      	ldr	r0, [pc, #532]	; (8019a38 <kiss_fftr_alloc+0x238>)
 8019822:	f7ec fa04 	bl	8005c2e <_Z9ei_printfPKcz>
        return NULL;
 8019826:	2300      	movs	r3, #0
 8019828:	e0f9      	b.n	8019a1e <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	105b      	asrs	r3, r3, #1
 801982e:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8019830:	f107 0314 	add.w	r3, r7, #20
 8019834:	2200      	movs	r2, #0
 8019836:	9200      	str	r2, [sp, #0]
 8019838:	2200      	movs	r2, #0
 801983a:	68b9      	ldr	r1, [r7, #8]
 801983c:	68f8      	ldr	r0, [r7, #12]
 801983e:	f7ff feb7 	bl	80195b0 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 8019842:	68fa      	ldr	r2, [r7, #12]
 8019844:	4613      	mov	r3, r2
 8019846:	005b      	lsls	r3, r3, #1
 8019848:	4413      	add	r3, r2
 801984a:	0fda      	lsrs	r2, r3, #31
 801984c:	4413      	add	r3, r2
 801984e:	105b      	asrs	r3, r3, #1
 8019850:	00da      	lsls	r2, r3, #3
 8019852:	697b      	ldr	r3, [r7, #20]
 8019854:	4413      	add	r3, r2
 8019856:	330c      	adds	r3, #12
 8019858:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d104      	bne.n	801986a <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 8019860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019862:	f000 fb75 	bl	8019f50 <_Z9ei_mallocj>
 8019866:	6338      	str	r0, [r7, #48]	; 0x30
 8019868:	e009      	b.n	801987e <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 801986a:	683b      	ldr	r3, [r7, #0]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019870:	429a      	cmp	r2, r3
 8019872:	d801      	bhi.n	8019878 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 8019878:	683b      	ldr	r3, [r7, #0]
 801987a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801987c:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 801987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019880:	2b00      	cmp	r3, #0
 8019882:	d101      	bne.n	8019888 <kiss_fftr_alloc+0x88>
        return NULL;
 8019884:	2300      	movs	r3, #0
 8019886:	e0ca      	b.n	8019a1e <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 8019888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801988a:	f103 020c 	add.w	r2, r3, #12
 801988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019890:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 8019892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019894:	681a      	ldr	r2, [r3, #0]
 8019896:	697b      	ldr	r3, [r7, #20]
 8019898:	441a      	add	r2, r3
 801989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801989c:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 801989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198a0:	685a      	ldr	r2, [r3, #4]
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	00db      	lsls	r3, r3, #3
 80198a6:	441a      	add	r2, r3
 80198a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198aa:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 80198ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198ae:	681a      	ldr	r2, [r3, #0]
 80198b0:	f107 0314 	add.w	r3, r7, #20
 80198b4:	2100      	movs	r1, #0
 80198b6:	9100      	str	r1, [sp, #0]
 80198b8:	68b9      	ldr	r1, [r7, #8]
 80198ba:	68f8      	ldr	r0, [r7, #12]
 80198bc:	f7ff fe78 	bl	80195b0 <kiss_fft_alloc>

    if (inverse_fft) {
 80198c0:	68bb      	ldr	r3, [r7, #8]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d052      	beq.n	801996c <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 80198c6:	2300      	movs	r3, #0
 80198c8:	637b      	str	r3, [r7, #52]	; 0x34
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	0fda      	lsrs	r2, r3, #31
 80198ce:	4413      	add	r3, r2
 80198d0:	105b      	asrs	r3, r3, #1
 80198d2:	461a      	mov	r2, r3
 80198d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198d6:	4293      	cmp	r3, r2
 80198d8:	f280 809a 	bge.w	8019a10 <kiss_fftr_alloc+0x210>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 80198dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198de:	3301      	adds	r3, #1
 80198e0:	4618      	mov	r0, r3
 80198e2:	f7e6 fe29 	bl	8000538 <__aeabi_i2d>
 80198e6:	4604      	mov	r4, r0
 80198e8:	460d      	mov	r5, r1
 80198ea:	68f8      	ldr	r0, [r7, #12]
 80198ec:	f7e6 fe24 	bl	8000538 <__aeabi_i2d>
 80198f0:	4602      	mov	r2, r0
 80198f2:	460b      	mov	r3, r1
 80198f4:	4620      	mov	r0, r4
 80198f6:	4629      	mov	r1, r5
 80198f8:	f7e6 ffb2 	bl	8000860 <__aeabi_ddiv>
 80198fc:	4602      	mov	r2, r0
 80198fe:	460b      	mov	r3, r1
 8019900:	4610      	mov	r0, r2
 8019902:	4619      	mov	r1, r3
 8019904:	f04f 0200 	mov.w	r2, #0
 8019908:	4b4c      	ldr	r3, [pc, #304]	; (8019a3c <kiss_fftr_alloc+0x23c>)
 801990a:	f7e6 fcc9 	bl	80002a0 <__adddf3>
 801990e:	4602      	mov	r2, r0
 8019910:	460b      	mov	r3, r1
 8019912:	4610      	mov	r0, r2
 8019914:	4619      	mov	r1, r3
            double phase =
 8019916:	a344      	add	r3, pc, #272	; (adr r3, 8019a28 <kiss_fftr_alloc+0x228>)
 8019918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801991c:	f7e6 fe76 	bl	800060c <__aeabi_dmul>
 8019920:	4602      	mov	r2, r0
 8019922:	460b      	mov	r3, r1
 8019924:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 8019928:	ed97 0b06 	vldr	d0, [r7, #24]
 801992c:	f006 f9f8 	bl	801fd20 <cos>
 8019930:	ec51 0b10 	vmov	r0, r1, d0
 8019934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019936:	689a      	ldr	r2, [r3, #8]
 8019938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801993a:	00db      	lsls	r3, r3, #3
 801993c:	18d4      	adds	r4, r2, r3
 801993e:	f7e7 f95d 	bl	8000bfc <__aeabi_d2f>
 8019942:	4603      	mov	r3, r0
 8019944:	6023      	str	r3, [r4, #0]
 8019946:	ed97 0b06 	vldr	d0, [r7, #24]
 801994a:	f006 fb3d 	bl	801ffc8 <sin>
 801994e:	ec51 0b10 	vmov	r0, r1, d0
 8019952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019954:	689a      	ldr	r2, [r3, #8]
 8019956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019958:	00db      	lsls	r3, r3, #3
 801995a:	18d4      	adds	r4, r2, r3
 801995c:	f7e7 f94e 	bl	8000bfc <__aeabi_d2f>
 8019960:	4603      	mov	r3, r0
 8019962:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8019964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019966:	3301      	adds	r3, #1
 8019968:	637b      	str	r3, [r7, #52]	; 0x34
 801996a:	e7ae      	b.n	80198ca <kiss_fftr_alloc+0xca>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 801996c:	2300      	movs	r3, #0
 801996e:	637b      	str	r3, [r7, #52]	; 0x34
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	0fda      	lsrs	r2, r3, #31
 8019974:	4413      	add	r3, r2
 8019976:	105b      	asrs	r3, r3, #1
 8019978:	461a      	mov	r2, r3
 801997a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801997c:	4293      	cmp	r3, r2
 801997e:	da47      	bge.n	8019a10 <kiss_fftr_alloc+0x210>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8019980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019982:	3301      	adds	r3, #1
 8019984:	4618      	mov	r0, r3
 8019986:	f7e6 fdd7 	bl	8000538 <__aeabi_i2d>
 801998a:	4604      	mov	r4, r0
 801998c:	460d      	mov	r5, r1
 801998e:	68f8      	ldr	r0, [r7, #12]
 8019990:	f7e6 fdd2 	bl	8000538 <__aeabi_i2d>
 8019994:	4602      	mov	r2, r0
 8019996:	460b      	mov	r3, r1
 8019998:	4620      	mov	r0, r4
 801999a:	4629      	mov	r1, r5
 801999c:	f7e6 ff60 	bl	8000860 <__aeabi_ddiv>
 80199a0:	4602      	mov	r2, r0
 80199a2:	460b      	mov	r3, r1
 80199a4:	4610      	mov	r0, r2
 80199a6:	4619      	mov	r1, r3
 80199a8:	f04f 0200 	mov.w	r2, #0
 80199ac:	4b23      	ldr	r3, [pc, #140]	; (8019a3c <kiss_fftr_alloc+0x23c>)
 80199ae:	f7e6 fc77 	bl	80002a0 <__adddf3>
 80199b2:	4602      	mov	r2, r0
 80199b4:	460b      	mov	r3, r1
 80199b6:	4610      	mov	r0, r2
 80199b8:	4619      	mov	r1, r3
            double phase =
 80199ba:	a31d      	add	r3, pc, #116	; (adr r3, 8019a30 <kiss_fftr_alloc+0x230>)
 80199bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199c0:	f7e6 fe24 	bl	800060c <__aeabi_dmul>
 80199c4:	4602      	mov	r2, r0
 80199c6:	460b      	mov	r3, r1
 80199c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 80199cc:	ed97 0b08 	vldr	d0, [r7, #32]
 80199d0:	f006 f9a6 	bl	801fd20 <cos>
 80199d4:	ec51 0b10 	vmov	r0, r1, d0
 80199d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199da:	689a      	ldr	r2, [r3, #8]
 80199dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199de:	00db      	lsls	r3, r3, #3
 80199e0:	18d4      	adds	r4, r2, r3
 80199e2:	f7e7 f90b 	bl	8000bfc <__aeabi_d2f>
 80199e6:	4603      	mov	r3, r0
 80199e8:	6023      	str	r3, [r4, #0]
 80199ea:	ed97 0b08 	vldr	d0, [r7, #32]
 80199ee:	f006 faeb 	bl	801ffc8 <sin>
 80199f2:	ec51 0b10 	vmov	r0, r1, d0
 80199f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f8:	689a      	ldr	r2, [r3, #8]
 80199fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199fc:	00db      	lsls	r3, r3, #3
 80199fe:	18d4      	adds	r4, r2, r3
 8019a00:	f7e7 f8fc 	bl	8000bfc <__aeabi_d2f>
 8019a04:	4603      	mov	r3, r0
 8019a06:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8019a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a0a:	3301      	adds	r3, #1
 8019a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8019a0e:	e7af      	b.n	8019970 <kiss_fftr_alloc+0x170>
        }
    }

    if (memallocated != NULL) {
 8019a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d002      	beq.n	8019a1c <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 8019a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019a1a:	601a      	str	r2, [r3, #0]
    }

    return st;
 8019a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8019a1e:	4618      	mov	r0, r3
 8019a20:	3738      	adds	r7, #56	; 0x38
 8019a22:	46bd      	mov	sp, r7
 8019a24:	bdb0      	pop	{r4, r5, r7, pc}
 8019a26:	bf00      	nop
 8019a28:	54442d18 	.word	0x54442d18
 8019a2c:	400921fb 	.word	0x400921fb
 8019a30:	54442d18 	.word	0x54442d18
 8019a34:	c00921fb 	.word	0xc00921fb
 8019a38:	08027740 	.word	0x08027740
 8019a3c:	3fe00000 	.word	0x3fe00000

08019a40 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b092      	sub	sp, #72	; 0x48
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	60f8      	str	r0, [r7, #12]
 8019a48:	60b9      	str	r1, [r7, #8]
 8019a4a:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	685b      	ldr	r3, [r3, #4]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d002      	beq.n	8019a5c <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 8019a56:	4887      	ldr	r0, [pc, #540]	; (8019c74 <kiss_fftr+0x234>)
 8019a58:	f7ec f8e9 	bl	8005c2e <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	6818      	ldr	r0, [r3, #0]
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	685b      	ldr	r3, [r3, #4]
 8019a6c:	461a      	mov	r2, r3
 8019a6e:	68b9      	ldr	r1, [r7, #8]
 8019a70:	f7ff feb6 	bl	80197e0 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	685b      	ldr	r3, [r3, #4]
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	685b      	ldr	r3, [r3, #4]
 8019a80:	685b      	ldr	r3, [r3, #4]
 8019a82:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 8019a84:	ed97 7a04 	vldr	s14, [r7, #16]
 8019a88:	edd7 7a05 	vldr	s15, [r7, #20]
 8019a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 8019a96:	ed97 7a04 	vldr	s14, [r7, #16]
 8019a9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8019a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019aa0:	00db      	lsls	r3, r3, #3
 8019aa2:	687a      	ldr	r2, [r7, #4]
 8019aa4:	4413      	add	r3, r2
 8019aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019aaa:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	f04f 0200 	mov.w	r2, #0
 8019ab4:	605a      	str	r2, [r3, #4]
 8019ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ab8:	00db      	lsls	r3, r3, #3
 8019aba:	687a      	ldr	r2, [r7, #4]
 8019abc:	4413      	add	r3, r2
 8019abe:	687a      	ldr	r2, [r7, #4]
 8019ac0:	6852      	ldr	r2, [r2, #4]
 8019ac2:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 8019ac4:	2301      	movs	r3, #1
 8019ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8019ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019aca:	0fda      	lsrs	r2, r3, #31
 8019acc:	4413      	add	r3, r2
 8019ace:	105b      	asrs	r3, r3, #1
 8019ad0:	461a      	mov	r2, r3
 8019ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ad4:	4293      	cmp	r3, r2
 8019ad6:	f300 80c9 	bgt.w	8019c6c <kiss_fftr+0x22c>
        fpk    = st->tmpbuf[k];
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	685a      	ldr	r2, [r3, #4]
 8019ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ae0:	00db      	lsls	r3, r3, #3
 8019ae2:	441a      	add	r2, r3
 8019ae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019aec:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	685a      	ldr	r2, [r3, #4]
 8019af4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019af8:	1acb      	subs	r3, r1, r3
 8019afa:	00db      	lsls	r3, r3, #3
 8019afc:	4413      	add	r3, r2
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	685a      	ldr	r2, [r3, #4]
 8019b06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b0a:	1acb      	subs	r3, r1, r3
 8019b0c:	00db      	lsls	r3, r3, #3
 8019b0e:	4413      	add	r3, r2
 8019b10:	edd3 7a01 	vldr	s15, [r3, #4]
 8019b14:	eef1 7a67 	vneg.f32	s15, s15
 8019b18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 8019b1c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019b20:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b28:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8019b2c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019b30:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8019b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b38:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 8019b3c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019b40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b48:	edc7 7a08 	vstr	s15, [r7, #32]
 8019b4c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019b50:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8019b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 8019b5c:	ed97 7a08 	vldr	s14, [r7, #32]
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	689a      	ldr	r2, [r3, #8]
 8019b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b66:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019b6a:	3b01      	subs	r3, #1
 8019b6c:	00db      	lsls	r3, r3, #3
 8019b6e:	4413      	add	r3, r2
 8019b70:	edd3 7a00 	vldr	s15, [r3]
 8019b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019b78:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	689a      	ldr	r2, [r3, #8]
 8019b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b82:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019b86:	3b01      	subs	r3, #1
 8019b88:	00db      	lsls	r3, r3, #3
 8019b8a:	4413      	add	r3, r2
 8019b8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8019b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b98:	edc7 7a06 	vstr	s15, [r7, #24]
 8019b9c:	ed97 7a08 	vldr	s14, [r7, #32]
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	689a      	ldr	r2, [r3, #8]
 8019ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ba6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019baa:	3b01      	subs	r3, #1
 8019bac:	00db      	lsls	r3, r3, #3
 8019bae:	4413      	add	r3, r2
 8019bb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8019bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019bb8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	689a      	ldr	r2, [r3, #8]
 8019bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bc2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019bc6:	3b01      	subs	r3, #1
 8019bc8:	00db      	lsls	r3, r3, #3
 8019bca:	4413      	add	r3, r2
 8019bcc:	edd3 7a00 	vldr	s15, [r3]
 8019bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019bd8:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 8019bdc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019be0:	edd7 7a06 	vldr	s15, [r7, #24]
 8019be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bea:	00db      	lsls	r3, r3, #3
 8019bec:	687a      	ldr	r2, [r7, #4]
 8019bee:	4413      	add	r3, r2
 8019bf0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019bf8:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 8019bfc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019c00:	edd7 7a07 	vldr	s15, [r7, #28]
 8019c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c0a:	00db      	lsls	r3, r3, #3
 8019c0c:	687a      	ldr	r2, [r7, #4]
 8019c0e:	4413      	add	r3, r2
 8019c10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c18:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 8019c1c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019c20:	edd7 7a06 	vldr	s15, [r7, #24]
 8019c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c2c:	1ad3      	subs	r3, r2, r3
 8019c2e:	00db      	lsls	r3, r3, #3
 8019c30:	687a      	ldr	r2, [r7, #4]
 8019c32:	4413      	add	r3, r2
 8019c34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c3c:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 8019c40:	ed97 7a07 	vldr	s14, [r7, #28]
 8019c44:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c50:	1ad3      	subs	r3, r2, r3
 8019c52:	00db      	lsls	r3, r3, #3
 8019c54:	687a      	ldr	r2, [r7, #4]
 8019c56:	4413      	add	r3, r2
 8019c58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c60:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 8019c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c66:	3301      	adds	r3, #1
 8019c68:	647b      	str	r3, [r7, #68]	; 0x44
 8019c6a:	e72d      	b.n	8019ac8 <kiss_fftr+0x88>
    }
}
 8019c6c:	bf00      	nop
 8019c6e:	3748      	adds	r7, #72	; 0x48
 8019c70:	46bd      	mov	sp, r7
 8019c72:	bd80      	pop	{r7, pc}
 8019c74:	0802775c 	.word	0x0802775c

08019c78 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b082      	sub	sp, #8
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8019c82:	ed97 0a01 	vldr	s0, [r7, #4]
 8019c86:	f006 fb47 	bl	8020318 <log10f>
 8019c8a:	eef0 7a40 	vmov.f32	s15, s0
 8019c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8019c92:	3708      	adds	r7, #8
 8019c94:	46bd      	mov	sp, r7
 8019c96:	bd80      	pop	{r7, pc}

08019c98 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8019c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c9a:	b083      	sub	sp, #12
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	ed87 0b00 	vstr	d0, [r7]
 8019ca2:	683c      	ldr	r4, [r7, #0]
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8019caa:	2301      	movs	r3, #1
 8019cac:	461e      	mov	r6, r3
 8019cae:	f04f 32ff 	mov.w	r2, #4294967295
 8019cb2:	4b10      	ldr	r3, [pc, #64]	; (8019cf4 <_ZSt5isinfd+0x5c>)
 8019cb4:	4620      	mov	r0, r4
 8019cb6:	4629      	mov	r1, r5
 8019cb8:	f7e6 ff42 	bl	8000b40 <__aeabi_dcmpun>
 8019cbc:	4603      	mov	r3, r0
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d10b      	bne.n	8019cda <_ZSt5isinfd+0x42>
 8019cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8019cc6:	4b0b      	ldr	r3, [pc, #44]	; (8019cf4 <_ZSt5isinfd+0x5c>)
 8019cc8:	4620      	mov	r0, r4
 8019cca:	4629      	mov	r1, r5
 8019ccc:	f7e6 ff1a 	bl	8000b04 <__aeabi_dcmple>
 8019cd0:	4603      	mov	r3, r0
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d101      	bne.n	8019cda <_ZSt5isinfd+0x42>
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	461e      	mov	r6, r3
 8019cda:	b2f3      	uxtb	r3, r6
 8019cdc:	f083 0301 	eor.w	r3, r3, #1
 8019ce0:	b2db      	uxtb	r3, r3
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	bf14      	ite	ne
 8019ce6:	2301      	movne	r3, #1
 8019ce8:	2300      	moveq	r3, #0
 8019cea:	b2db      	uxtb	r3, r3
 8019cec:	4618      	mov	r0, r3
 8019cee:	370c      	adds	r7, #12
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cf4:	7fefffff 	.word	0x7fefffff

08019cf8 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8019cf8:	b480      	push	{r7}
 8019cfa:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8019cfc:	2300      	movs	r3, #0
}
 8019cfe:	4618      	mov	r0, r3
 8019d00:	46bd      	mov	sp, r7
 8019d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d06:	4770      	bx	lr

08019d08 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8019d08:	b5b0      	push	{r4, r5, r7, lr}
 8019d0a:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8019d0c:	f7ef f858 	bl	8008dc0 <HAL_GetTick>
 8019d10:	4603      	mov	r3, r0
 8019d12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019d16:	fb02 f303 	mul.w	r3, r2, r3
 8019d1a:	2200      	movs	r2, #0
 8019d1c:	461c      	mov	r4, r3
 8019d1e:	4615      	mov	r5, r2
 8019d20:	4622      	mov	r2, r4
 8019d22:	462b      	mov	r3, r5
}
 8019d24:	4610      	mov	r0, r2
 8019d26:	4619      	mov	r1, r3
 8019d28:	bdb0      	pop	{r4, r5, r7, pc}
 8019d2a:	0000      	movs	r0, r0
 8019d2c:	0000      	movs	r0, r0
	...

08019d30 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8019d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d34:	b08c      	sub	sp, #48	; 0x30
 8019d36:	af00      	add	r7, sp, #0
 8019d38:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8019d3c:	466b      	mov	r3, sp
 8019d3e:	4698      	mov	r8, r3
    float n = f;
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8019d44:	4b7e      	ldr	r3, [pc, #504]	; (8019f40 <_Z15ei_printf_floatf+0x210>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	1e5e      	subs	r6, r3, #1
 8019d4a:	623e      	str	r6, [r7, #32]
 8019d4c:	4633      	mov	r3, r6
 8019d4e:	3301      	adds	r3, #1
 8019d50:	2200      	movs	r2, #0
 8019d52:	461c      	mov	r4, r3
 8019d54:	4615      	mov	r5, r2
 8019d56:	f04f 0200 	mov.w	r2, #0
 8019d5a:	f04f 0300 	mov.w	r3, #0
 8019d5e:	00eb      	lsls	r3, r5, #3
 8019d60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8019d64:	00e2      	lsls	r2, r4, #3
 8019d66:	4633      	mov	r3, r6
 8019d68:	3301      	adds	r3, #1
 8019d6a:	2200      	movs	r2, #0
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	4611      	mov	r1, r2
 8019d70:	f04f 0200 	mov.w	r2, #0
 8019d74:	f04f 0300 	mov.w	r3, #0
 8019d78:	00cb      	lsls	r3, r1, #3
 8019d7a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8019d7e:	00c2      	lsls	r2, r0, #3
 8019d80:	4633      	mov	r3, r6
 8019d82:	3301      	adds	r3, #1
 8019d84:	3307      	adds	r3, #7
 8019d86:	08db      	lsrs	r3, r3, #3
 8019d88:	00db      	lsls	r3, r3, #3
 8019d8a:	ebad 0d03 	sub.w	sp, sp, r3
 8019d8e:	466b      	mov	r3, sp
 8019d90:	3300      	adds	r3, #0
 8019d92:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8019d94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019d98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019da0:	d106      	bne.n	8019db0 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 8019da2:	69fb      	ldr	r3, [r7, #28]
 8019da4:	4967      	ldr	r1, [pc, #412]	; (8019f44 <_Z15ei_printf_floatf+0x214>)
 8019da6:	461a      	mov	r2, r3
 8019da8:	460b      	mov	r3, r1
 8019daa:	881b      	ldrh	r3, [r3, #0]
 8019dac:	8013      	strh	r3, [r2, #0]
 8019dae:	e0b6      	b.n	8019f1e <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 8019db0:	69fb      	ldr	r3, [r7, #28]
 8019db2:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8019db4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019db8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dc0:	bf4c      	ite	mi
 8019dc2:	2301      	movmi	r3, #1
 8019dc4:	2300      	movpl	r3, #0
 8019dc6:	b2db      	uxtb	r3, r3
 8019dc8:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8019dca:	69bb      	ldr	r3, [r7, #24]
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d005      	beq.n	8019ddc <_Z15ei_printf_floatf+0xac>
            n = -n;
 8019dd0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019dd4:	eef1 7a67 	vneg.f32	s15, s15
 8019dd8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8019ddc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8019de0:	f7ff ff4a 	bl	8019c78 <_ZSt5log10f>
 8019de4:	eef0 7a40 	vmov.f32	s15, s0
 8019de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019dec:	ee17 3a90 	vmov	r3, s15
 8019df0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8019df2:	69bb      	ldr	r3, [r7, #24]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d004      	beq.n	8019e02 <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 8019df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfa:	1c5a      	adds	r2, r3, #1
 8019dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019dfe:	222d      	movs	r2, #45	; 0x2d
 8019e00:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8019e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	dc01      	bgt.n	8019e0c <_Z15ei_printf_floatf+0xdc>
            m = 0;
 8019e08:	2300      	movs	r3, #0
 8019e0a:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8019e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e0e:	f7e6 fba5 	bl	800055c <__aeabi_f2d>
 8019e12:	4b4d      	ldr	r3, [pc, #308]	; (8019f48 <_Z15ei_printf_floatf+0x218>)
 8019e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e18:	2401      	movs	r4, #1
 8019e1a:	f7e6 fe87 	bl	8000b2c <__aeabi_dcmpgt>
 8019e1e:	4603      	mov	r3, r0
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d101      	bne.n	8019e28 <_Z15ei_printf_floatf+0xf8>
 8019e24:	2300      	movs	r3, #0
 8019e26:	461c      	mov	r4, r3
 8019e28:	b2e3      	uxtb	r3, r4
 8019e2a:	f083 0301 	eor.w	r3, r3, #1
 8019e2e:	b2db      	uxtb	r3, r3
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d002      	beq.n	8019e3a <_Z15ei_printf_floatf+0x10a>
 8019e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	db6e      	blt.n	8019f18 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 8019e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e3c:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8019f38 <_Z15ei_printf_floatf+0x208>
 8019e40:	f000 f8ab 	bl	8019f9a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8019e44:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8019e48:	f04f 0200 	mov.w	r2, #0
 8019e4c:	f04f 0300 	mov.w	r3, #0
 8019e50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8019e54:	f7e6 fe6a 	bl	8000b2c <__aeabi_dcmpgt>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d00b      	beq.n	8019e76 <_Z15ei_printf_floatf+0x146>
 8019e5e:	ed97 0b04 	vldr	d0, [r7, #16]
 8019e62:	f7ff ff19 	bl	8019c98 <_ZSt5isinfd>
 8019e66:	4603      	mov	r3, r0
 8019e68:	f083 0301 	eor.w	r3, r3, #1
 8019e6c:	b2db      	uxtb	r3, r3
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d001      	beq.n	8019e76 <_Z15ei_printf_floatf+0x146>
 8019e72:	2301      	movs	r3, #1
 8019e74:	e000      	b.n	8019e78 <_Z15ei_printf_floatf+0x148>
 8019e76:	2300      	movs	r3, #0
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d03a      	beq.n	8019ef2 <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 8019e7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e7e:	f7e6 fb6d 	bl	800055c <__aeabi_f2d>
 8019e82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8019e86:	f7e6 fceb 	bl	8000860 <__aeabi_ddiv>
 8019e8a:	4602      	mov	r2, r0
 8019e8c:	460b      	mov	r3, r1
 8019e8e:	ec43 2b17 	vmov	d7, r2, r3
 8019e92:	eeb0 0a47 	vmov.f32	s0, s14
 8019e96:	eef0 0a67 	vmov.f32	s1, s15
 8019e9a:	f005 ff95 	bl	801fdc8 <floor>
 8019e9e:	ec53 2b10 	vmov	r2, r3, d0
 8019ea2:	4610      	mov	r0, r2
 8019ea4:	4619      	mov	r1, r3
 8019ea6:	f7e6 fe61 	bl	8000b6c <__aeabi_d2iz>
 8019eaa:	4603      	mov	r3, r0
 8019eac:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 8019eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019eb0:	f7e6 fb54 	bl	800055c <__aeabi_f2d>
 8019eb4:	4604      	mov	r4, r0
 8019eb6:	460d      	mov	r5, r1
 8019eb8:	68f8      	ldr	r0, [r7, #12]
 8019eba:	f7e6 fb3d 	bl	8000538 <__aeabi_i2d>
 8019ebe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8019ec2:	f7e6 fba3 	bl	800060c <__aeabi_dmul>
 8019ec6:	4602      	mov	r2, r0
 8019ec8:	460b      	mov	r3, r1
 8019eca:	4620      	mov	r0, r4
 8019ecc:	4629      	mov	r1, r5
 8019ece:	f7e6 f9e5 	bl	800029c <__aeabi_dsub>
 8019ed2:	4602      	mov	r2, r0
 8019ed4:	460b      	mov	r3, r1
 8019ed6:	4610      	mov	r0, r2
 8019ed8:	4619      	mov	r1, r3
 8019eda:	f7e6 fe8f 	bl	8000bfc <__aeabi_d2f>
 8019ede:	4603      	mov	r3, r0
 8019ee0:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8019ee2:	68fb      	ldr	r3, [r7, #12]
 8019ee4:	b2da      	uxtb	r2, r3
 8019ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee8:	1c59      	adds	r1, r3, #1
 8019eea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019eec:	3230      	adds	r2, #48	; 0x30
 8019eee:	b2d2      	uxtb	r2, r2
 8019ef0:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8019ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d10b      	bne.n	8019f10 <_Z15ei_printf_floatf+0x1e0>
 8019ef8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019efc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f04:	dd04      	ble.n	8019f10 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 8019f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f08:	1c5a      	adds	r2, r3, #1
 8019f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019f0c:	222e      	movs	r2, #46	; 0x2e
 8019f0e:	701a      	strb	r2, [r3, #0]
            m--;
 8019f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f12:	3b01      	subs	r3, #1
 8019f14:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8019f16:	e779      	b.n	8019e0c <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 8019f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f1a:	2200      	movs	r2, #0
 8019f1c:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8019f1e:	69f9      	ldr	r1, [r7, #28]
 8019f20:	480a      	ldr	r0, [pc, #40]	; (8019f4c <_Z15ei_printf_floatf+0x21c>)
 8019f22:	f7eb fe84 	bl	8005c2e <_Z9ei_printfPKcz>
 8019f26:	46c5      	mov	sp, r8
}
 8019f28:	bf00      	nop
 8019f2a:	3730      	adds	r7, #48	; 0x30
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f32:	bf00      	nop
 8019f34:	f3af 8000 	nop.w
 8019f38:	00000000 	.word	0x00000000
 8019f3c:	40240000 	.word	0x40240000
 8019f40:	20000100 	.word	0x20000100
 8019f44:	08027784 	.word	0x08027784
 8019f48:	200000f8 	.word	0x200000f8
 8019f4c:	08027788 	.word	0x08027788

08019f50 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b082      	sub	sp, #8
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	6078      	str	r0, [r7, #4]
    return malloc(size);
 8019f58:	6878      	ldr	r0, [r7, #4]
 8019f5a:	f008 fc8d 	bl	8022878 <malloc>
 8019f5e:	4603      	mov	r3, r0
}
 8019f60:	4618      	mov	r0, r3
 8019f62:	3708      	adds	r7, #8
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}

08019f68 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b082      	sub	sp, #8
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
 8019f70:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8019f72:	6839      	ldr	r1, [r7, #0]
 8019f74:	6878      	ldr	r0, [r7, #4]
 8019f76:	f008 fc37 	bl	80227e8 <calloc>
 8019f7a:	4603      	mov	r3, r0
}
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	3708      	adds	r7, #8
 8019f80:	46bd      	mov	sp, r7
 8019f82:	bd80      	pop	{r7, pc}

08019f84 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 8019f84:	b580      	push	{r7, lr}
 8019f86:	b082      	sub	sp, #8
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	6078      	str	r0, [r7, #4]
    free(ptr);
 8019f8c:	6878      	ldr	r0, [r7, #4]
 8019f8e:	f008 fc7b 	bl	8022888 <free>
}
 8019f92:	bf00      	nop
 8019f94:	3708      	adds	r7, #8
 8019f96:	46bd      	mov	sp, r7
 8019f98:	bd80      	pop	{r7, pc}

08019f9a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8019f9a:	b580      	push	{r7, lr}
 8019f9c:	b084      	sub	sp, #16
 8019f9e:	af00      	add	r7, sp, #0
 8019fa0:	ed87 0b02 	vstr	d0, [r7, #8]
 8019fa4:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 8019fa6:	6878      	ldr	r0, [r7, #4]
 8019fa8:	f7e6 fac6 	bl	8000538 <__aeabi_i2d>
 8019fac:	4602      	mov	r2, r0
 8019fae:	460b      	mov	r3, r1
 8019fb0:	ec43 2b11 	vmov	d1, r2, r3
 8019fb4:	ed97 0b02 	vldr	d0, [r7, #8]
 8019fb8:	f006 f8dc 	bl	8020174 <pow>
 8019fbc:	eeb0 7a40 	vmov.f32	s14, s0
 8019fc0:	eef0 7a60 	vmov.f32	s15, s1
    }
 8019fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8019fc8:	eef0 0a67 	vmov.f32	s1, s15
 8019fcc:	3710      	adds	r7, #16
 8019fce:	46bd      	mov	sp, r7
 8019fd0:	bd80      	pop	{r7, pc}
	...

08019fd4 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8019fd4:	b480      	push	{r7}
 8019fd6:	b083      	sub	sp, #12
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	4603      	mov	r3, r0
 8019fdc:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8019fde:	79fb      	ldrb	r3, [r7, #7]
 8019fe0:	2b10      	cmp	r3, #16
 8019fe2:	d847      	bhi.n	801a074 <TfLiteTypeGetName+0xa0>
 8019fe4:	a201      	add	r2, pc, #4	; (adr r2, 8019fec <TfLiteTypeGetName+0x18>)
 8019fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019fea:	bf00      	nop
 8019fec:	0801a031 	.word	0x0801a031
 8019ff0:	0801a035 	.word	0x0801a035
 8019ff4:	0801a03d 	.word	0x0801a03d
 8019ff8:	0801a045 	.word	0x0801a045
 8019ffc:	0801a04d 	.word	0x0801a04d
 801a000:	0801a061 	.word	0x0801a061
 801a004:	0801a055 	.word	0x0801a055
 801a008:	0801a039 	.word	0x0801a039
 801a00c:	0801a059 	.word	0x0801a059
 801a010:	0801a049 	.word	0x0801a049
 801a014:	0801a065 	.word	0x0801a065
 801a018:	0801a069 	.word	0x0801a069
 801a01c:	0801a05d 	.word	0x0801a05d
 801a020:	0801a051 	.word	0x0801a051
 801a024:	0801a06d 	.word	0x0801a06d
 801a028:	0801a071 	.word	0x0801a071
 801a02c:	0801a041 	.word	0x0801a041
    case kTfLiteNoType:
      return "NOTYPE";
 801a030:	4b14      	ldr	r3, [pc, #80]	; (801a084 <TfLiteTypeGetName+0xb0>)
 801a032:	e020      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 801a034:	4b14      	ldr	r3, [pc, #80]	; (801a088 <TfLiteTypeGetName+0xb4>)
 801a036:	e01e      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 801a038:	4b14      	ldr	r3, [pc, #80]	; (801a08c <TfLiteTypeGetName+0xb8>)
 801a03a:	e01c      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 801a03c:	4b14      	ldr	r3, [pc, #80]	; (801a090 <TfLiteTypeGetName+0xbc>)
 801a03e:	e01a      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 801a040:	4b14      	ldr	r3, [pc, #80]	; (801a094 <TfLiteTypeGetName+0xc0>)
 801a042:	e018      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 801a044:	4b14      	ldr	r3, [pc, #80]	; (801a098 <TfLiteTypeGetName+0xc4>)
 801a046:	e016      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 801a048:	4b14      	ldr	r3, [pc, #80]	; (801a09c <TfLiteTypeGetName+0xc8>)
 801a04a:	e014      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 801a04c:	4b14      	ldr	r3, [pc, #80]	; (801a0a0 <TfLiteTypeGetName+0xcc>)
 801a04e:	e012      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 801a050:	4b14      	ldr	r3, [pc, #80]	; (801a0a4 <TfLiteTypeGetName+0xd0>)
 801a052:	e010      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 801a054:	4b14      	ldr	r3, [pc, #80]	; (801a0a8 <TfLiteTypeGetName+0xd4>)
 801a056:	e00e      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 801a058:	4b14      	ldr	r3, [pc, #80]	; (801a0ac <TfLiteTypeGetName+0xd8>)
 801a05a:	e00c      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 801a05c:	4b14      	ldr	r3, [pc, #80]	; (801a0b0 <TfLiteTypeGetName+0xdc>)
 801a05e:	e00a      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 801a060:	4b14      	ldr	r3, [pc, #80]	; (801a0b4 <TfLiteTypeGetName+0xe0>)
 801a062:	e008      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 801a064:	4b14      	ldr	r3, [pc, #80]	; (801a0b8 <TfLiteTypeGetName+0xe4>)
 801a066:	e006      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 801a068:	4b14      	ldr	r3, [pc, #80]	; (801a0bc <TfLiteTypeGetName+0xe8>)
 801a06a:	e004      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 801a06c:	4b14      	ldr	r3, [pc, #80]	; (801a0c0 <TfLiteTypeGetName+0xec>)
 801a06e:	e002      	b.n	801a076 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 801a070:	4b14      	ldr	r3, [pc, #80]	; (801a0c4 <TfLiteTypeGetName+0xf0>)
 801a072:	e000      	b.n	801a076 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 801a074:	4b14      	ldr	r3, [pc, #80]	; (801a0c8 <TfLiteTypeGetName+0xf4>)
}
 801a076:	4618      	mov	r0, r3
 801a078:	370c      	adds	r7, #12
 801a07a:	46bd      	mov	sp, r7
 801a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a080:	4770      	bx	lr
 801a082:	bf00      	nop
 801a084:	0802778c 	.word	0x0802778c
 801a088:	08027794 	.word	0x08027794
 801a08c:	0802779c 	.word	0x0802779c
 801a090:	080277a4 	.word	0x080277a4
 801a094:	080277ac 	.word	0x080277ac
 801a098:	080277b4 	.word	0x080277b4
 801a09c:	080277bc 	.word	0x080277bc
 801a0a0:	080277c4 	.word	0x080277c4
 801a0a4:	080277cc 	.word	0x080277cc
 801a0a8:	080277d4 	.word	0x080277d4
 801a0ac:	080277dc 	.word	0x080277dc
 801a0b0:	080277e8 	.word	0x080277e8
 801a0b4:	080277f4 	.word	0x080277f4
 801a0b8:	080277fc 	.word	0x080277fc
 801a0bc:	08027804 	.word	0x08027804
 801a0c0:	0802780c 	.word	0x0802780c
 801a0c4:	08027818 	.word	0x08027818
 801a0c8:	08027820 	.word	0x08027820

0801a0cc <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 801a0cc:	b480      	push	{r7}
 801a0ce:	af00      	add	r7, sp, #0
 801a0d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0dc:	4770      	bx	lr
	...

0801a0e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 801a0e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a0e4:	b088      	sub	sp, #32
 801a0e6:	af00      	add	r7, sp, #0
 801a0e8:	ed87 0b02 	vstr	d0, [r7, #8]
 801a0ec:	6078      	str	r0, [r7, #4]
 801a0ee:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 801a0f0:	f04f 0200 	mov.w	r2, #0
 801a0f4:	f04f 0300 	mov.w	r3, #0
 801a0f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a0fc:	f7e6 fcee 	bl	8000adc <__aeabi_dcmpeq>
 801a100:	4603      	mov	r3, r0
 801a102:	2b00      	cmp	r3, #0
 801a104:	d006      	beq.n	801a114 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	2200      	movs	r2, #0
 801a10a:	601a      	str	r2, [r3, #0]
    *shift = 0;
 801a10c:	683b      	ldr	r3, [r7, #0]
 801a10e:	2200      	movs	r2, #0
 801a110:	601a      	str	r2, [r3, #0]
    return;
 801a112:	e068      	b.n	801a1e6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 801a114:	6838      	ldr	r0, [r7, #0]
 801a116:	ed97 0b02 	vldr	d0, [r7, #8]
 801a11a:	f005 fed5 	bl	801fec8 <frexp>
 801a11e:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 801a122:	f04f 0200 	mov.w	r2, #0
 801a126:	4b32      	ldr	r3, [pc, #200]	; (801a1f0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 801a128:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a12c:	f7e6 fa6e 	bl	800060c <__aeabi_dmul>
 801a130:	4602      	mov	r2, r0
 801a132:	460b      	mov	r3, r1
 801a134:	ec43 2b17 	vmov	d7, r2, r3
 801a138:	eeb0 0a47 	vmov.f32	s0, s14
 801a13c:	eef0 0a67 	vmov.f32	s1, s15
 801a140:	f000 f962 	bl	801a408 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 801a144:	ec53 2b10 	vmov	r2, r3, d0
 801a148:	4610      	mov	r0, r2
 801a14a:	4619      	mov	r1, r3
 801a14c:	f7e6 fe0e 	bl	8000d6c <__aeabi_d2lz>
 801a150:	4602      	mov	r2, r0
 801a152:	460b      	mov	r3, r1
 801a154:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 801a158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a15c:	4925      	ldr	r1, [pc, #148]	; (801a1f4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 801a15e:	428a      	cmp	r2, r1
 801a160:	f173 0300 	sbcs.w	r3, r3, #0
 801a164:	db01      	blt.n	801a16a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 801a166:	f008 fb15 	bl	8022794 <abort>
  if (q_fixed == (1ll << 31)) {
 801a16a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a16e:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 801a172:	430b      	orrs	r3, r1
 801a174:	d118      	bne.n	801a1a8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 801a176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a17a:	0fd9      	lsrs	r1, r3, #31
 801a17c:	2000      	movs	r0, #0
 801a17e:	468a      	mov	sl, r1
 801a180:	4683      	mov	fp, r0
 801a182:	eb1a 0402 	adds.w	r4, sl, r2
 801a186:	eb4b 0503 	adc.w	r5, fp, r3
 801a18a:	f04f 0200 	mov.w	r2, #0
 801a18e:	f04f 0300 	mov.w	r3, #0
 801a192:	0862      	lsrs	r2, r4, #1
 801a194:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801a198:	106b      	asrs	r3, r5, #1
 801a19a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 801a19e:	683b      	ldr	r3, [r7, #0]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	1c5a      	adds	r2, r3, #1
 801a1a4:	683b      	ldr	r3, [r7, #0]
 801a1a6:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 801a1a8:	f7ff ff90 	bl	801a0cc <_ZNSt14numeric_limitsIlE3maxEv>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	17da      	asrs	r2, r3, #31
 801a1b0:	4698      	mov	r8, r3
 801a1b2:	4691      	mov	r9, r2
 801a1b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a1b8:	4590      	cmp	r8, r2
 801a1ba:	eb79 0303 	sbcs.w	r3, r9, r3
 801a1be:	da01      	bge.n	801a1c4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 801a1c0:	f008 fae8 	bl	8022794 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 801a1c4:	683b      	ldr	r3, [r7, #0]
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	f113 0f1f 	cmn.w	r3, #31
 801a1cc:	da08      	bge.n	801a1e0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 801a1ce:	683b      	ldr	r3, [r7, #0]
 801a1d0:	2200      	movs	r2, #0
 801a1d2:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 801a1d4:	f04f 0200 	mov.w	r2, #0
 801a1d8:	f04f 0300 	mov.w	r3, #0
 801a1dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 801a1e0:	69ba      	ldr	r2, [r7, #24]
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	601a      	str	r2, [r3, #0]
}
 801a1e6:	3720      	adds	r7, #32
 801a1e8:	46bd      	mov	sp, r7
 801a1ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a1ee:	bf00      	nop
 801a1f0:	41e00000 	.word	0x41e00000
 801a1f4:	80000001 	.word	0x80000001

0801a1f8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b084      	sub	sp, #16
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	ed87 0b02 	vstr	d0, [r7, #8]
 801a202:	6078      	str	r0, [r7, #4]
 801a204:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 801a206:	f04f 0200 	mov.w	r2, #0
 801a20a:	4b0d      	ldr	r3, [pc, #52]	; (801a240 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 801a20c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a210:	f7e6 fc8c 	bl	8000b2c <__aeabi_dcmpgt>
 801a214:	4603      	mov	r3, r0
 801a216:	2b00      	cmp	r3, #0
 801a218:	d101      	bne.n	801a21e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 801a21a:	f008 fabb 	bl	8022794 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 801a21e:	6839      	ldr	r1, [r7, #0]
 801a220:	6878      	ldr	r0, [r7, #4]
 801a222:	ed97 0b02 	vldr	d0, [r7, #8]
 801a226:	f7ff ff5b 	bl	801a0e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 801a22a:	683b      	ldr	r3, [r7, #0]
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	da01      	bge.n	801a236 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 801a232:	f008 faaf 	bl	8022794 <abort>
}
 801a236:	bf00      	nop
 801a238:	3710      	adds	r7, #16
 801a23a:	46bd      	mov	sp, r7
 801a23c:	bd80      	pop	{r7, pc}
 801a23e:	bf00      	nop
 801a240:	3ff00000 	.word	0x3ff00000

0801a244 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801a244:	b580      	push	{r7, lr}
 801a246:	b082      	sub	sp, #8
 801a248:	af00      	add	r7, sp, #0
 801a24a:	6078      	str	r0, [r7, #4]
 801a24c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801a24e:	683b      	ldr	r3, [r7, #0]
 801a250:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a25a:	f7e6 fc49 	bl	8000af0 <__aeabi_dcmplt>
 801a25e:	4603      	mov	r3, r0
 801a260:	2b00      	cmp	r3, #0
 801a262:	d001      	beq.n	801a268 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 801a264:	683b      	ldr	r3, [r7, #0]
 801a266:	e000      	b.n	801a26a <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 801a268:	687b      	ldr	r3, [r7, #4]
    }
 801a26a:	4618      	mov	r0, r3
 801a26c:	3708      	adds	r7, #8
 801a26e:	46bd      	mov	sp, r7
 801a270:	bd80      	pop	{r7, pc}
 801a272:	0000      	movs	r0, r0
 801a274:	0000      	movs	r0, r0
	...

0801a278 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 801a278:	b5b0      	push	{r4, r5, r7, lr}
 801a27a:	b08e      	sub	sp, #56	; 0x38
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	ed87 0b06 	vstr	d0, [r7, #24]
 801a282:	ed87 1b04 	vstr	d1, [r7, #16]
 801a286:	60f8      	str	r0, [r7, #12]
 801a288:	60b9      	str	r1, [r7, #8]
 801a28a:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 801a28c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a290:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a294:	f7e6 f9ba 	bl	800060c <__aeabi_dmul>
 801a298:	4602      	mov	r2, r0
 801a29a:	460b      	mov	r3, r1
 801a29c:	4614      	mov	r4, r2
 801a29e:	461d      	mov	r5, r3
 801a2a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	fa22 f303 	lsr.w	r3, r2, r3
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f7e6 f944 	bl	8000538 <__aeabi_i2d>
 801a2b0:	4602      	mov	r2, r0
 801a2b2:	460b      	mov	r3, r1
 801a2b4:	4620      	mov	r0, r4
 801a2b6:	4629      	mov	r1, r5
 801a2b8:	f7e6 f9a8 	bl	800060c <__aeabi_dmul>
 801a2bc:	4602      	mov	r2, r0
 801a2be:	460b      	mov	r3, r1
 801a2c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801a2c4:	a30e      	add	r3, pc, #56	; (adr r3, 801a300 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 801a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801a2ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a2d2:	f107 0320 	add.w	r3, r7, #32
 801a2d6:	4611      	mov	r1, r2
 801a2d8:	4618      	mov	r0, r3
 801a2da:	f7ff ffb3 	bl	801a244 <_ZSt3minIdERKT_S2_S2_>
 801a2de:	4603      	mov	r3, r0
 801a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 801a2e8:	6879      	ldr	r1, [r7, #4]
 801a2ea:	68b8      	ldr	r0, [r7, #8]
 801a2ec:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801a2f0:	f7ff ff82 	bl	801a1f8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 801a2f4:	bf00      	nop
 801a2f6:	3738      	adds	r7, #56	; 0x38
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	bdb0      	pop	{r4, r5, r7, pc}
 801a2fc:	f3af 8000 	nop.w
 801a300:	ffc00000 	.word	0xffc00000
 801a304:	41dfffff 	.word	0x41dfffff

0801a308 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 801a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a30c:	b087      	sub	sp, #28
 801a30e:	af00      	add	r7, sp, #0
 801a310:	60f8      	str	r0, [r7, #12]
 801a312:	60b9      	str	r1, [r7, #8]
 801a314:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 801a316:	2201      	movs	r2, #1
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	fa02 f303 	lsl.w	r3, r2, r3
 801a31e:	3b01      	subs	r3, #1
 801a320:	4618      	mov	r0, r3
 801a322:	f7e6 f909 	bl	8000538 <__aeabi_i2d>
 801a326:	4682      	mov	sl, r0
 801a328:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801a32a:	687a      	ldr	r2, [r7, #4]
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	1ad1      	subs	r1, r2, r3
 801a330:	f04f 0201 	mov.w	r2, #1
 801a334:	f04f 0300 	mov.w	r3, #0
 801a338:	f1a1 0620 	sub.w	r6, r1, #32
 801a33c:	f1c1 0020 	rsb	r0, r1, #32
 801a340:	fa03 f901 	lsl.w	r9, r3, r1
 801a344:	fa02 f606 	lsl.w	r6, r2, r6
 801a348:	ea49 0906 	orr.w	r9, r9, r6
 801a34c:	fa22 f000 	lsr.w	r0, r2, r0
 801a350:	ea49 0900 	orr.w	r9, r9, r0
 801a354:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 801a358:	4640      	mov	r0, r8
 801a35a:	4649      	mov	r1, r9
 801a35c:	f7e6 f928 	bl	80005b0 <__aeabi_l2d>
 801a360:	4602      	mov	r2, r0
 801a362:	460b      	mov	r3, r1
 801a364:	4650      	mov	r0, sl
 801a366:	4659      	mov	r1, fp
 801a368:	f7e6 f950 	bl	800060c <__aeabi_dmul>
 801a36c:	4602      	mov	r2, r0
 801a36e:	460b      	mov	r3, r1
 801a370:	4690      	mov	r8, r2
 801a372:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 801a374:	f04f 0201 	mov.w	r2, #1
 801a378:	f04f 0300 	mov.w	r3, #0
 801a37c:	68b9      	ldr	r1, [r7, #8]
 801a37e:	f1a1 0620 	sub.w	r6, r1, #32
 801a382:	f1c1 0020 	rsb	r0, r1, #32
 801a386:	fa03 f501 	lsl.w	r5, r3, r1
 801a38a:	fa02 f606 	lsl.w	r6, r2, r6
 801a38e:	4335      	orrs	r5, r6
 801a390:	fa22 f000 	lsr.w	r0, r2, r0
 801a394:	4305      	orrs	r5, r0
 801a396:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801a39a:	4620      	mov	r0, r4
 801a39c:	4629      	mov	r1, r5
 801a39e:	f7e6 f907 	bl	80005b0 <__aeabi_l2d>
 801a3a2:	4602      	mov	r2, r0
 801a3a4:	460b      	mov	r3, r1
  const double max_input_rescaled =
 801a3a6:	4640      	mov	r0, r8
 801a3a8:	4649      	mov	r1, r9
 801a3aa:	f7e6 fa59 	bl	8000860 <__aeabi_ddiv>
 801a3ae:	4602      	mov	r2, r0
 801a3b0:	460b      	mov	r3, r1
 801a3b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 801a3b6:	ed97 0b04 	vldr	d0, [r7, #16]
 801a3ba:	f005 fd05 	bl	801fdc8 <floor>
 801a3be:	ec53 2b10 	vmov	r2, r3, d0
 801a3c2:	4610      	mov	r0, r2
 801a3c4:	4619      	mov	r1, r3
 801a3c6:	f7e6 fbd1 	bl	8000b6c <__aeabi_d2iz>
 801a3ca:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	371c      	adds	r7, #28
 801a3d0:	46bd      	mov	sp, r7
 801a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a3d6 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801a3d6:	b480      	push	{r7}
 801a3d8:	b083      	sub	sp, #12
 801a3da:	af00      	add	r7, sp, #0
 801a3dc:	6078      	str	r0, [r7, #4]
 801a3de:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801a3e0:	683b      	ldr	r3, [r7, #0]
 801a3e2:	ed93 7a00 	vldr	s14, [r3]
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	edd3 7a00 	vldr	s15, [r3]
 801a3ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3f4:	d501      	bpl.n	801a3fa <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801a3f6:	683b      	ldr	r3, [r7, #0]
 801a3f8:	e000      	b.n	801a3fc <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 801a3fa:	687b      	ldr	r3, [r7, #4]
    }
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	370c      	adds	r7, #12
 801a400:	46bd      	mov	sp, r7
 801a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a406:	4770      	bx	lr

0801a408 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 801a408:	b580      	push	{r7, lr}
 801a40a:	b082      	sub	sp, #8
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	ed87 0b00 	vstr	d0, [r7]
 801a412:	ed97 0b00 	vldr	d0, [r7]
 801a416:	f005 fd8f 	bl	801ff38 <round>
 801a41a:	eeb0 7a40 	vmov.f32	s14, s0
 801a41e:	eef0 7a60 	vmov.f32	s15, s1
 801a422:	eeb0 0a47 	vmov.f32	s0, s14
 801a426:	eef0 0a67 	vmov.f32	s1, s15
 801a42a:	3708      	adds	r7, #8
 801a42c:	46bd      	mov	sp, r7
 801a42e:	bd80      	pop	{r7, pc}

0801a430 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 801a430:	b580      	push	{r7, lr}
 801a432:	b082      	sub	sp, #8
 801a434:	af00      	add	r7, sp, #0
 801a436:	ed87 0a01 	vstr	s0, [r7, #4]
 801a43a:	ed97 0a01 	vldr	s0, [r7, #4]
 801a43e:	f7e7 f98e 	bl	800175e <_ZSt5roundf>
 801a442:	eef0 7a40 	vmov.f32	s15, s0
 801a446:	eeb0 0a67 	vmov.f32	s0, s15
 801a44a:	3708      	adds	r7, #8
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 801a450:	b480      	push	{r7}
 801a452:	af00      	add	r7, sp, #0
 801a454:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801a458:	4618      	mov	r0, r3
 801a45a:	46bd      	mov	sp, r7
 801a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a460:	4770      	bx	lr

0801a462 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 801a462:	b480      	push	{r7}
 801a464:	af00      	add	r7, sp, #0
 801a466:	237f      	movs	r3, #127	; 0x7f
 801a468:	4618      	mov	r0, r3
 801a46a:	46bd      	mov	sp, r7
 801a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a470:	4770      	bx	lr

0801a472 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801a472:	b480      	push	{r7}
 801a474:	af00      	add	r7, sp, #0
 801a476:	2300      	movs	r3, #0
 801a478:	4618      	mov	r0, r3
 801a47a:	46bd      	mov	sp, r7
 801a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a480:	4770      	bx	lr

0801a482 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801a482:	b480      	push	{r7}
 801a484:	af00      	add	r7, sp, #0
 801a486:	23ff      	movs	r3, #255	; 0xff
 801a488:	4618      	mov	r0, r3
 801a48a:	46bd      	mov	sp, r7
 801a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a490:	4770      	bx	lr
	...

0801a494 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 801a494:	b480      	push	{r7}
 801a496:	af00      	add	r7, sp, #0
 801a498:	4b02      	ldr	r3, [pc, #8]	; (801a4a4 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801a49a:	4618      	mov	r0, r3
 801a49c:	46bd      	mov	sp, r7
 801a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a2:	4770      	bx	lr
 801a4a4:	ffff8000 	.word	0xffff8000

0801a4a8 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 801a4a8:	b480      	push	{r7}
 801a4aa:	af00      	add	r7, sp, #0
 801a4ac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a4b0:	4618      	mov	r0, r3
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b8:	4770      	bx	lr

0801a4ba <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 801a4ba:	b480      	push	{r7}
 801a4bc:	b083      	sub	sp, #12
 801a4be:	af00      	add	r7, sp, #0
 801a4c0:	6078      	str	r0, [r7, #4]
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	689b      	ldr	r3, [r3, #8]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	370c      	adds	r7, #12
 801a4cc:	46bd      	mov	sp, r7
 801a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d2:	4770      	bx	lr

0801a4d4 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 801a4d4:	b480      	push	{r7}
 801a4d6:	b083      	sub	sp, #12
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	ed87 0b00 	vstr	d0, [r7]
 801a4de:	683a      	ldr	r2, [r7, #0]
 801a4e0:	6879      	ldr	r1, [r7, #4]
 801a4e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a4e6:	ec43 2b17 	vmov	d7, r2, r3
 801a4ea:	eeb0 0a47 	vmov.f32	s0, s14
 801a4ee:	eef0 0a67 	vmov.f32	s1, s15
 801a4f2:	370c      	adds	r7, #12
 801a4f4:	46bd      	mov	sp, r7
 801a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4fa:	4770      	bx	lr

0801a4fc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b082      	sub	sp, #8
 801a500:	af00      	add	r7, sp, #0
 801a502:	6078      	str	r0, [r7, #4]
 801a504:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	689b      	ldr	r3, [r3, #8]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d005      	beq.n	801a51a <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	689a      	ldr	r2, [r3, #8]
 801a512:	683b      	ldr	r3, [r7, #0]
 801a514:	019b      	lsls	r3, r3, #6
 801a516:	4413      	add	r3, r2
 801a518:	e006      	b.n	801a528 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a51e:	6839      	ldr	r1, [r7, #0]
 801a520:	6878      	ldr	r0, [r7, #4]
 801a522:	4798      	blx	r3
 801a524:	4603      	mov	r3, r0
 801a526:	bf00      	nop
  }
}
 801a528:	4618      	mov	r0, r3
 801a52a:	3708      	adds	r7, #8
 801a52c:	46bd      	mov	sp, r7
 801a52e:	bd80      	pop	{r7, pc}

0801a530 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 801a530:	b480      	push	{r7}
 801a532:	b087      	sub	sp, #28
 801a534:	af00      	add	r7, sp, #0
 801a536:	60f8      	str	r0, [r7, #12]
 801a538:	60b9      	str	r1, [r7, #8]
 801a53a:	607a      	str	r2, [r7, #4]
 801a53c:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 801a53e:	68bb      	ldr	r3, [r7, #8]
 801a540:	2b00      	cmp	r3, #0
 801a542:	db0f      	blt.n	801a564 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 801a544:	68ba      	ldr	r2, [r7, #8]
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	429a      	cmp	r2, r3
 801a54a:	da0b      	bge.n	801a564 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 801a54c:	68bb      	ldr	r3, [r7, #8]
 801a54e:	009b      	lsls	r3, r3, #2
 801a550:	683a      	ldr	r2, [r7, #0]
 801a552:	4413      	add	r3, r2
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 801a558:	697b      	ldr	r3, [r7, #20]
 801a55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a55e:	d001      	beq.n	801a564 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 801a560:	697b      	ldr	r3, [r7, #20]
 801a562:	e001      	b.n	801a568 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 801a564:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a568:	4618      	mov	r0, r3
 801a56a:	371c      	adds	r7, #28
 801a56c:	46bd      	mov	sp, r7
 801a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a572:	4770      	bx	lr

0801a574 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801a574:	b580      	push	{r7, lr}
 801a576:	b086      	sub	sp, #24
 801a578:	af00      	add	r7, sp, #0
 801a57a:	60f8      	str	r0, [r7, #12]
 801a57c:	60b9      	str	r1, [r7, #8]
 801a57e:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 801a580:	68bb      	ldr	r3, [r7, #8]
 801a582:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 801a584:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 801a586:	68bb      	ldr	r3, [r7, #8]
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801a58c:	6879      	ldr	r1, [r7, #4]
 801a58e:	68f8      	ldr	r0, [r7, #12]
 801a590:	f7ff ffce 	bl	801a530 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801a594:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801a596:	697b      	ldr	r3, [r7, #20]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	da01      	bge.n	801a5a0 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801a59c:	2300      	movs	r3, #0
 801a59e:	e005      	b.n	801a5ac <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801a5a0:	6979      	ldr	r1, [r7, #20]
 801a5a2:	68f8      	ldr	r0, [r7, #12]
 801a5a4:	f7ff ffaa 	bl	801a4fc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801a5a8:	4603      	mov	r3, r0
 801a5aa:	bf00      	nop
}
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	3718      	adds	r7, #24
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	bd80      	pop	{r7, pc}

0801a5b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b084      	sub	sp, #16
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	60f8      	str	r0, [r7, #12]
 801a5bc:	60b9      	str	r1, [r7, #8]
 801a5be:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 801a5c0:	687a      	ldr	r2, [r7, #4]
 801a5c2:	68b9      	ldr	r1, [r7, #8]
 801a5c4:	68f8      	ldr	r0, [r7, #12]
 801a5c6:	f7ff ffd5 	bl	801a574 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 801a5ca:	4603      	mov	r3, r0
}
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	3710      	adds	r7, #16
 801a5d0:	46bd      	mov	sp, r7
 801a5d2:	bd80      	pop	{r7, pc}

0801a5d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 801a5d4:	b580      	push	{r7, lr}
 801a5d6:	b086      	sub	sp, #24
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	60f8      	str	r0, [r7, #12]
 801a5dc:	60b9      	str	r1, [r7, #8]
 801a5de:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 801a5e0:	68bb      	ldr	r3, [r7, #8]
 801a5e2:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 801a5e4:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 801a5e6:	68bb      	ldr	r3, [r7, #8]
 801a5e8:	685b      	ldr	r3, [r3, #4]
 801a5ea:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801a5ec:	6879      	ldr	r1, [r7, #4]
 801a5ee:	68f8      	ldr	r0, [r7, #12]
 801a5f0:	f7ff ff9e 	bl	801a530 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801a5f4:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801a5f6:	697b      	ldr	r3, [r7, #20]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	da01      	bge.n	801a600 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	e005      	b.n	801a60c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801a600:	6979      	ldr	r1, [r7, #20]
 801a602:	68f8      	ldr	r0, [r7, #12]
 801a604:	f7ff ff7a 	bl	801a4fc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801a608:	4603      	mov	r3, r0
 801a60a:	bf00      	nop
}
 801a60c:	4618      	mov	r0, r3
 801a60e:	3718      	adds	r7, #24
 801a610:	46bd      	mov	sp, r7
 801a612:	bd80      	pop	{r7, pc}

0801a614 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 801a614:	b580      	push	{r7, lr}
 801a616:	b084      	sub	sp, #16
 801a618:	af00      	add	r7, sp, #0
 801a61a:	60f8      	str	r0, [r7, #12]
 801a61c:	60b9      	str	r1, [r7, #8]
 801a61e:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 801a620:	687a      	ldr	r2, [r7, #4]
 801a622:	68b9      	ldr	r1, [r7, #8]
 801a624:	68f8      	ldr	r0, [r7, #12]
 801a626:	f7ff ffc5 	bl	801a5b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801a62a:	4603      	mov	r3, r0
}
 801a62c:	4618      	mov	r0, r3
 801a62e:	3710      	adds	r7, #16
 801a630:	46bd      	mov	sp, r7
 801a632:	bd80      	pop	{r7, pc}
 801a634:	0000      	movs	r0, r0
	...

0801a638 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801a638:	b5b0      	push	{r4, r5, r7, lr}
 801a63a:	b08e      	sub	sp, #56	; 0x38
 801a63c:	af02      	add	r7, sp, #8
 801a63e:	60f8      	str	r0, [r7, #12]
 801a640:	60b9      	str	r1, [r7, #8]
 801a642:	607a      	str	r2, [r7, #4]
 801a644:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801a646:	68bb      	ldr	r3, [r7, #8]
 801a648:	68db      	ldr	r3, [r3, #12]
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7e5 ff86 	bl	800055c <__aeabi_f2d>
 801a650:	4604      	mov	r4, r0
 801a652:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	68db      	ldr	r3, [r3, #12]
 801a658:	4618      	mov	r0, r3
 801a65a:	f7e5 ff7f 	bl	800055c <__aeabi_f2d>
 801a65e:	4602      	mov	r2, r0
 801a660:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801a662:	4620      	mov	r0, r4
 801a664:	4629      	mov	r1, r5
 801a666:	f7e5 ffd1 	bl	800060c <__aeabi_dmul>
 801a66a:	4602      	mov	r2, r0
 801a66c:	460b      	mov	r3, r1
 801a66e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 801a672:	683b      	ldr	r3, [r7, #0]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d04b      	beq.n	801a710 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 801a678:	683b      	ldr	r3, [r7, #0]
 801a67a:	68db      	ldr	r3, [r3, #12]
 801a67c:	4618      	mov	r0, r3
 801a67e:	f7e5 ff6d 	bl	800055c <__aeabi_f2d>
 801a682:	4602      	mov	r2, r0
 801a684:	460b      	mov	r3, r1
 801a686:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 801a68a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801a68e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801a692:	f7e5 fe03 	bl	800029c <__aeabi_dsub>
 801a696:	4602      	mov	r2, r0
 801a698:	460b      	mov	r3, r1
 801a69a:	ec43 2b17 	vmov	d7, r2, r3
 801a69e:	eeb0 0a47 	vmov.f32	s0, s14
 801a6a2:	eef0 0a67 	vmov.f32	s1, s15
 801a6a6:	f7ff ff15 	bl	801a4d4 <_ZSt3absd>
 801a6aa:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 801a6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a6b0:	68db      	ldr	r3, [r3, #12]
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	f7e5 ff52 	bl	800055c <__aeabi_f2d>
 801a6b8:	4602      	mov	r2, r0
 801a6ba:	460b      	mov	r3, r1
 801a6bc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 801a6c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a6c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a6c8:	f7e6 f8ca 	bl	8000860 <__aeabi_ddiv>
 801a6cc:	4602      	mov	r2, r0
 801a6ce:	460b      	mov	r3, r1
 801a6d0:	4610      	mov	r0, r2
 801a6d2:	4619      	mov	r1, r3
 801a6d4:	2301      	movs	r3, #1
 801a6d6:	461c      	mov	r4, r3
 801a6d8:	a318      	add	r3, pc, #96	; (adr r3, 801a73c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 801a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6de:	f7e6 fa11 	bl	8000b04 <__aeabi_dcmple>
 801a6e2:	4603      	mov	r3, r0
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d101      	bne.n	801a6ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	461c      	mov	r4, r3
 801a6ec:	b2e3      	uxtb	r3, r4
 801a6ee:	f083 0301 	eor.w	r3, r3, #1
 801a6f2:	b2db      	uxtb	r3, r3
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d00b      	beq.n	801a710 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	695c      	ldr	r4, [r3, #20]
 801a6fc:	4b0c      	ldr	r3, [pc, #48]	; (801a730 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 801a6fe:	9300      	str	r3, [sp, #0]
 801a700:	f44f 73a2 	mov.w	r3, #324	; 0x144
 801a704:	4a0b      	ldr	r2, [pc, #44]	; (801a734 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 801a706:	490c      	ldr	r1, [pc, #48]	; (801a738 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 801a708:	68f8      	ldr	r0, [r7, #12]
 801a70a:	47a0      	blx	r4
 801a70c:	2301      	movs	r3, #1
 801a70e:	e009      	b.n	801a724 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 801a710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a712:	9300      	str	r3, [sp, #0]
 801a714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a716:	687a      	ldr	r2, [r7, #4]
 801a718:	68b9      	ldr	r1, [r7, #8]
 801a71a:	68f8      	ldr	r0, [r7, #12]
 801a71c:	f000 f812 	bl	801a744 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 801a720:	4603      	mov	r3, r0
                                          multiplier);
 801a722:	bf00      	nop
}
 801a724:	4618      	mov	r0, r3
 801a726:	3730      	adds	r7, #48	; 0x30
 801a728:	46bd      	mov	sp, r7
 801a72a:	bdb0      	pop	{r4, r5, r7, pc}
 801a72c:	f3af 8000 	nop.w
 801a730:	08027aa4 	.word	0x08027aa4
 801a734:	08027890 	.word	0x08027890
 801a738:	08027990 	.word	0x08027990
 801a73c:	47ae147b 	.word	0x47ae147b
 801a740:	3f947ae1 	.word	0x3f947ae1

0801a744 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801a744:	b590      	push	{r4, r7, lr}
 801a746:	b089      	sub	sp, #36	; 0x24
 801a748:	af02      	add	r7, sp, #8
 801a74a:	60f8      	str	r0, [r7, #12]
 801a74c:	60b9      	str	r1, [r7, #8]
 801a74e:	607a      	str	r2, [r7, #4]
 801a750:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 801a752:	68bb      	ldr	r3, [r7, #8]
 801a754:	ed93 7a03 	vldr	s14, [r3, #12]
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	edd3 7a03 	vldr	s15, [r3, #12]
 801a75e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801a762:	ee17 0a90 	vmov	r0, s15
 801a766:	f7e5 fef9 	bl	800055c <__aeabi_f2d>
 801a76a:	4602      	mov	r2, r0
 801a76c:	460b      	mov	r3, r1
 801a76e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 801a772:	2301      	movs	r3, #1
 801a774:	461c      	mov	r4, r3
 801a776:	f04f 0200 	mov.w	r2, #0
 801a77a:	f04f 0300 	mov.w	r3, #0
 801a77e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a782:	f7e6 f9c9 	bl	8000b18 <__aeabi_dcmpge>
 801a786:	4603      	mov	r3, r0
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d101      	bne.n	801a790 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 801a78c:	2300      	movs	r3, #0
 801a78e:	461c      	mov	r4, r3
 801a790:	b2e3      	uxtb	r3, r4
 801a792:	f083 0301 	eor.w	r3, r3, #1
 801a796:	b2db      	uxtb	r3, r3
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d00b      	beq.n	801a7b4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	695c      	ldr	r4, [r3, #20]
 801a7a0:	4b0f      	ldr	r3, [pc, #60]	; (801a7e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 801a7a2:	9300      	str	r3, [sp, #0]
 801a7a4:	f240 1351 	movw	r3, #337	; 0x151
 801a7a8:	4a0e      	ldr	r2, [pc, #56]	; (801a7e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 801a7aa:	490f      	ldr	r1, [pc, #60]	; (801a7e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 801a7ac:	68f8      	ldr	r0, [r7, #12]
 801a7ae:	47a0      	blx	r4
 801a7b0:	2301      	movs	r3, #1
 801a7b2:	e010      	b.n	801a7d6 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 801a7b4:	683b      	ldr	r3, [r7, #0]
 801a7b6:	68db      	ldr	r3, [r3, #12]
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	f7e5 fecf 	bl	800055c <__aeabi_f2d>
 801a7be:	4602      	mov	r2, r0
 801a7c0:	460b      	mov	r3, r1
 801a7c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a7c6:	f7e6 f84b 	bl	8000860 <__aeabi_ddiv>
 801a7ca:	4602      	mov	r2, r0
 801a7cc:	460b      	mov	r3, r1
 801a7ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a7d0:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 801a7d4:	2300      	movs	r3, #0
}
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	371c      	adds	r7, #28
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	bd90      	pop	{r4, r7, pc}
 801a7de:	bf00      	nop
 801a7e0:	08027ac8 	.word	0x08027ac8
 801a7e4:	08027890 	.word	0x08027890
 801a7e8:	08027990 	.word	0x08027990

0801a7ec <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b082      	sub	sp, #8
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	6078      	str	r0, [r7, #4]
 801a7f4:	ed87 0a00 	vstr	s0, [r7]
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801a7fe:	ed97 7a00 	vldr	s14, [r7]
 801a802:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a806:	eeb0 0a66 	vmov.f32	s0, s13
 801a80a:	f7ff fe11 	bl	801a430 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801a80e:	eef0 7a40 	vmov.f32	s15, s0
 801a812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a816:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801a81e:	4413      	add	r3, r2
  };
 801a820:	4618      	mov	r0, r3
 801a822:	3708      	adds	r7, #8
 801a824:	46bd      	mov	sp, r7
 801a826:	bd80      	pop	{r7, pc}

0801a828 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 801a828:	b580      	push	{r7, lr}
 801a82a:	b08e      	sub	sp, #56	; 0x38
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	60b9      	str	r1, [r7, #8]
 801a830:	607a      	str	r2, [r7, #4]
 801a832:	603b      	str	r3, [r7, #0]
 801a834:	4603      	mov	r3, r0
 801a836:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 801a838:	683b      	ldr	r3, [r7, #0]
 801a83a:	68db      	ldr	r3, [r3, #12]
 801a83c:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 801a83e:	683b      	ldr	r3, [r7, #0]
 801a840:	691b      	ldr	r3, [r3, #16]
 801a842:	633b      	str	r3, [r7, #48]	; 0x30
  };
 801a844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a846:	617b      	str	r3, [r7, #20]
 801a848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a84a:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 801a84c:	7bfb      	ldrb	r3, [r7, #15]
 801a84e:	2b01      	cmp	r3, #1
 801a850:	d118      	bne.n	801a884 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 801a852:	f107 0314 	add.w	r3, r7, #20
 801a856:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801a94c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801a85a:	4618      	mov	r0, r3
 801a85c:	f7ff ffc6 	bl	801a7ec <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a860:	4603      	mov	r3, r0
 801a862:	61fb      	str	r3, [r7, #28]
 801a864:	f107 021c 	add.w	r2, r7, #28
 801a868:	f107 0308 	add.w	r3, r7, #8
 801a86c:	4611      	mov	r1, r2
 801a86e:	4618      	mov	r0, r3
 801a870:	f000 f8d6 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801a874:	4603      	mov	r3, r0
 801a876:	681a      	ldr	r2, [r3, #0]
 801a878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a87a:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801a87c:	687a      	ldr	r2, [r7, #4]
 801a87e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a880:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 801a882:	e05f      	b.n	801a944 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 801a884:	7bfb      	ldrb	r3, [r7, #15]
 801a886:	2b03      	cmp	r3, #3
 801a888:	d129      	bne.n	801a8de <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 801a88a:	f107 0314 	add.w	r3, r7, #20
 801a88e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 801a94c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801a892:	4618      	mov	r0, r3
 801a894:	f7ff ffaa 	bl	801a7ec <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a898:	4603      	mov	r3, r0
 801a89a:	623b      	str	r3, [r7, #32]
 801a89c:	f107 0220 	add.w	r2, r7, #32
 801a8a0:	f107 0308 	add.w	r3, r7, #8
 801a8a4:	4611      	mov	r1, r2
 801a8a6:	4618      	mov	r0, r3
 801a8a8:	f000 f8ba 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801a8ac:	4603      	mov	r3, r0
 801a8ae:	681a      	ldr	r2, [r3, #0]
 801a8b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8b2:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 801a8b4:	f107 0314 	add.w	r3, r7, #20
 801a8b8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801a8bc:	4618      	mov	r0, r3
 801a8be:	f7ff ff95 	bl	801a7ec <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a8c2:	4603      	mov	r3, r0
 801a8c4:	627b      	str	r3, [r7, #36]	; 0x24
 801a8c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a8ca:	1d3b      	adds	r3, r7, #4
 801a8cc:	4611      	mov	r1, r2
 801a8ce:	4618      	mov	r0, r3
 801a8d0:	f000 f892 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801a8d4:	4603      	mov	r3, r0
 801a8d6:	681a      	ldr	r2, [r3, #0]
 801a8d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8da:	601a      	str	r2, [r3, #0]
}
 801a8dc:	e032      	b.n	801a944 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 801a8de:	7bfb      	ldrb	r3, [r7, #15]
 801a8e0:	2b02      	cmp	r3, #2
 801a8e2:	d129      	bne.n	801a938 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 801a8e4:	f107 0314 	add.w	r3, r7, #20
 801a8e8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801a8ec:	4618      	mov	r0, r3
 801a8ee:	f7ff ff7d 	bl	801a7ec <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	62bb      	str	r3, [r7, #40]	; 0x28
 801a8f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a8fa:	f107 0308 	add.w	r3, r7, #8
 801a8fe:	4611      	mov	r1, r2
 801a900:	4618      	mov	r0, r3
 801a902:	f000 f88d 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801a906:	4603      	mov	r3, r0
 801a908:	681a      	ldr	r2, [r3, #0]
 801a90a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a90c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 801a90e:	f107 0314 	add.w	r3, r7, #20
 801a912:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a916:	4618      	mov	r0, r3
 801a918:	f7ff ff68 	bl	801a7ec <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a91c:	4603      	mov	r3, r0
 801a91e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a920:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801a924:	1d3b      	adds	r3, r7, #4
 801a926:	4611      	mov	r1, r2
 801a928:	4618      	mov	r0, r3
 801a92a:	f000 f865 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801a92e:	4603      	mov	r3, r0
 801a930:	681a      	ldr	r2, [r3, #0]
 801a932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a934:	601a      	str	r2, [r3, #0]
}
 801a936:	e005      	b.n	801a944 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 801a938:	68ba      	ldr	r2, [r7, #8]
 801a93a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a93c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801a93e:	687a      	ldr	r2, [r7, #4]
 801a940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a942:	601a      	str	r2, [r3, #0]
}
 801a944:	bf00      	nop
 801a946:	3738      	adds	r7, #56	; 0x38
 801a948:	46bd      	mov	sp, r7
 801a94a:	bd80      	pop	{r7, pc}
 801a94c:	00000000 	.word	0x00000000

0801a950 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 801a950:	b590      	push	{r4, r7, lr}
 801a952:	b089      	sub	sp, #36	; 0x24
 801a954:	af02      	add	r7, sp, #8
 801a956:	60f8      	str	r0, [r7, #12]
 801a958:	607a      	str	r2, [r7, #4]
 801a95a:	603b      	str	r3, [r7, #0]
 801a95c:	460b      	mov	r3, r1
 801a95e:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 801a960:	2300      	movs	r3, #0
 801a962:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 801a964:	2300      	movs	r3, #0
 801a966:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	781b      	ldrb	r3, [r3, #0]
 801a96c:	2b03      	cmp	r3, #3
 801a96e:	d108      	bne.n	801a982 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 801a970:	f7ff fd7f 	bl	801a472 <_ZNSt14numeric_limitsIhE3minEv>
 801a974:	4603      	mov	r3, r0
 801a976:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 801a978:	f7ff fd83 	bl	801a482 <_ZNSt14numeric_limitsIhE3maxEv>
 801a97c:	4603      	mov	r3, r0
 801a97e:	613b      	str	r3, [r7, #16]
 801a980:	e025      	b.n	801a9ce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	781b      	ldrb	r3, [r3, #0]
 801a986:	2b09      	cmp	r3, #9
 801a988:	d108      	bne.n	801a99c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 801a98a:	f7ff fd61 	bl	801a450 <_ZNSt14numeric_limitsIaE3minEv>
 801a98e:	4603      	mov	r3, r0
 801a990:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 801a992:	f7ff fd66 	bl	801a462 <_ZNSt14numeric_limitsIaE3maxEv>
 801a996:	4603      	mov	r3, r0
 801a998:	613b      	str	r3, [r7, #16]
 801a99a:	e018      	b.n	801a9ce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	781b      	ldrb	r3, [r3, #0]
 801a9a0:	2b07      	cmp	r3, #7
 801a9a2:	d108      	bne.n	801a9b6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 801a9a4:	f7ff fd76 	bl	801a494 <_ZNSt14numeric_limitsIsE3minEv>
 801a9a8:	4603      	mov	r3, r0
 801a9aa:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 801a9ac:	f7ff fd7c 	bl	801a4a8 <_ZNSt14numeric_limitsIsE3maxEv>
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	613b      	str	r3, [r7, #16]
 801a9b4:	e00b      	b.n	801a9ce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	695c      	ldr	r4, [r3, #20]
 801a9ba:	4b0c      	ldr	r3, [pc, #48]	; (801a9ec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 801a9bc:	9300      	str	r3, [sp, #0]
 801a9be:	f44f 73c2 	mov.w	r3, #388	; 0x184
 801a9c2:	4a0b      	ldr	r2, [pc, #44]	; (801a9f0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 801a9c4:	490b      	ldr	r1, [pc, #44]	; (801a9f4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 801a9c6:	68f8      	ldr	r0, [r7, #12]
 801a9c8:	47a0      	blx	r4
 801a9ca:	2301      	movs	r3, #1
 801a9cc:	e00a      	b.n	801a9e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 801a9ce:	7af8      	ldrb	r0, [r7, #11]
 801a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9d2:	9301      	str	r3, [sp, #4]
 801a9d4:	683b      	ldr	r3, [r7, #0]
 801a9d6:	9300      	str	r3, [sp, #0]
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	693a      	ldr	r2, [r7, #16]
 801a9dc:	6979      	ldr	r1, [r7, #20]
 801a9de:	f7ff ff23 	bl	801a828 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 801a9e2:	2300      	movs	r3, #0
}
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	371c      	adds	r7, #28
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	bd90      	pop	{r4, r7, pc}
 801a9ec:	08027ae4 	.word	0x08027ae4
 801a9f0:	08027890 	.word	0x08027890
 801a9f4:	08027990 	.word	0x08027990

0801a9f8 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801a9f8:	b480      	push	{r7}
 801a9fa:	b083      	sub	sp, #12
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
 801aa00:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801aa02:	683b      	ldr	r3, [r7, #0]
 801aa04:	681a      	ldr	r2, [r3, #0]
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	429a      	cmp	r2, r3
 801aa0c:	da01      	bge.n	801aa12 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 801aa0e:	683b      	ldr	r3, [r7, #0]
 801aa10:	e000      	b.n	801aa14 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 801aa12:	687b      	ldr	r3, [r7, #4]
    }
 801aa14:	4618      	mov	r0, r3
 801aa16:	370c      	adds	r7, #12
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1e:	4770      	bx	lr

0801aa20 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801aa20:	b480      	push	{r7}
 801aa22:	b083      	sub	sp, #12
 801aa24:	af00      	add	r7, sp, #0
 801aa26:	6078      	str	r0, [r7, #4]
 801aa28:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	681a      	ldr	r2, [r3, #0]
 801aa2e:	683b      	ldr	r3, [r7, #0]
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	429a      	cmp	r2, r3
 801aa34:	da01      	bge.n	801aa3a <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 801aa36:	683b      	ldr	r3, [r7, #0]
 801aa38:	e000      	b.n	801aa3c <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 801aa3a:	687b      	ldr	r3, [r7, #4]
    }
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	370c      	adds	r7, #12
 801aa40:	46bd      	mov	sp, r7
 801aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa46:	4770      	bx	lr

0801aa48 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 801aa48:	b480      	push	{r7}
 801aa4a:	b083      	sub	sp, #12
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	6078      	str	r0, [r7, #4]
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	2200      	movs	r2, #0
 801aa54:	601a      	str	r2, [r3, #0]
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	4618      	mov	r0, r3
 801aa5a:	370c      	adds	r7, #12
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa62:	4770      	bx	lr

0801aa64 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 801aa64:	b580      	push	{r7, lr}
 801aa66:	b084      	sub	sp, #16
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	60f8      	str	r0, [r7, #12]
 801aa6c:	60b9      	str	r1, [r7, #8]
 801aa6e:	607a      	str	r2, [r7, #4]
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	2200      	movs	r2, #0
 801aa74:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 801aa76:	687a      	ldr	r2, [r7, #4]
 801aa78:	68b9      	ldr	r1, [r7, #8]
 801aa7a:	68f8      	ldr	r0, [r7, #12]
 801aa7c:	f000 f866 	bl	801ab4c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	4618      	mov	r0, r3
 801aa84:	3710      	adds	r7, #16
 801aa86:	46bd      	mov	sp, r7
 801aa88:	bd80      	pop	{r7, pc}

0801aa8a <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 801aa8a:	b580      	push	{r7, lr}
 801aa8c:	b082      	sub	sp, #8
 801aa8e:	af00      	add	r7, sp, #0
 801aa90:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	2b05      	cmp	r3, #5
 801aa98:	dd08      	ble.n	801aaac <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	685b      	ldr	r3, [r3, #4]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d004      	beq.n	801aaac <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	685b      	ldr	r3, [r3, #4]
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f005 f918 	bl	801fcdc <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	4618      	mov	r0, r3
 801aab0:	3708      	adds	r7, #8
 801aab2:	46bd      	mov	sp, r7
 801aab4:	bd80      	pop	{r7, pc}

0801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 801aab6:	b480      	push	{r7}
 801aab8:	b083      	sub	sp, #12
 801aaba:	af00      	add	r7, sp, #0
 801aabc:	6078      	str	r0, [r7, #4]
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	4618      	mov	r0, r3
 801aac4:	370c      	adds	r7, #12
 801aac6:	46bd      	mov	sp, r7
 801aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aacc:	4770      	bx	lr

0801aace <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 801aace:	b480      	push	{r7}
 801aad0:	b083      	sub	sp, #12
 801aad2:	af00      	add	r7, sp, #0
 801aad4:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	2b05      	cmp	r3, #5
 801aadc:	dd02      	ble.n	801aae4 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	685b      	ldr	r3, [r3, #4]
 801aae2:	e001      	b.n	801aae8 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	3304      	adds	r3, #4
  }
 801aae8:	4618      	mov	r0, r3
 801aaea:	370c      	adds	r7, #12
 801aaec:	46bd      	mov	sp, r7
 801aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf2:	4770      	bx	lr

0801aaf4 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b082      	sub	sp, #8
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	6078      	str	r0, [r7, #4]
 801aafc:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	2b05      	cmp	r3, #5
 801ab04:	dd08      	ble.n	801ab18 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	685b      	ldr	r3, [r3, #4]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d004      	beq.n	801ab18 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	685b      	ldr	r3, [r3, #4]
 801ab12:	4618      	mov	r0, r3
 801ab14:	f005 f8e2 	bl	801fcdc <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	683a      	ldr	r2, [r7, #0]
 801ab1c:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 801ab1e:	683b      	ldr	r3, [r7, #0]
 801ab20:	2b05      	cmp	r3, #5
 801ab22:	dd0f      	ble.n	801ab44 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 801ab24:	683b      	ldr	r3, [r7, #0]
 801ab26:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801ab2a:	4293      	cmp	r3, r2
 801ab2c:	d201      	bcs.n	801ab32 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 801ab2e:	009b      	lsls	r3, r3, #2
 801ab30:	e001      	b.n	801ab36 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 801ab32:	f04f 33ff 	mov.w	r3, #4294967295
 801ab36:	4618      	mov	r0, r3
 801ab38:	f005 f8e3 	bl	801fd02 <_Znaj>
 801ab3c:	4603      	mov	r3, r0
 801ab3e:	461a      	mov	r2, r3
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801ab44:	bf00      	nop
 801ab46:	3708      	adds	r7, #8
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	bd80      	pop	{r7, pc}

0801ab4c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 801ab4c:	b580      	push	{r7, lr}
 801ab4e:	b086      	sub	sp, #24
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	60f8      	str	r0, [r7, #12]
 801ab54:	60b9      	str	r1, [r7, #8]
 801ab56:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 801ab58:	68b9      	ldr	r1, [r7, #8]
 801ab5a:	68f8      	ldr	r0, [r7, #12]
 801ab5c:	f7ff ffca 	bl	801aaf4 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 801ab60:	68f8      	ldr	r0, [r7, #12]
 801ab62:	f7ff ffb4 	bl	801aace <_ZN6tflite12RuntimeShape8DimsDataEv>
 801ab66:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 801ab68:	68bb      	ldr	r3, [r7, #8]
 801ab6a:	009b      	lsls	r3, r3, #2
 801ab6c:	461a      	mov	r2, r3
 801ab6e:	6879      	ldr	r1, [r7, #4]
 801ab70:	6978      	ldr	r0, [r7, #20]
 801ab72:	f007 fe91 	bl	8022898 <memcpy>
  }
 801ab76:	bf00      	nop
 801ab78:	3718      	adds	r7, #24
 801ab7a:	46bd      	mov	sp, r7
 801ab7c:	bd80      	pop	{r7, pc}

0801ab7e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 801ab7e:	b580      	push	{r7, lr}
 801ab80:	b086      	sub	sp, #24
 801ab82:	af00      	add	r7, sp, #0
 801ab84:	6078      	str	r0, [r7, #4]
 801ab86:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 801ab88:	683b      	ldr	r3, [r7, #0]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d103      	bne.n	801ab96 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 801ab8e:	6878      	ldr	r0, [r7, #4]
 801ab90:	f7ff ff5a 	bl	801aa48 <_ZN6tflite12RuntimeShapeC1Ev>
 801ab94:	e00d      	b.n	801abb2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 801ab96:	683b      	ldr	r3, [r7, #0]
 801ab98:	689b      	ldr	r3, [r3, #8]
 801ab9a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801ab9c:	697b      	ldr	r3, [r7, #20]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801aba2:	697b      	ldr	r3, [r7, #20]
 801aba4:	3304      	adds	r3, #4
 801aba6:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801aba8:	68fa      	ldr	r2, [r7, #12]
 801abaa:	6939      	ldr	r1, [r7, #16]
 801abac:	6878      	ldr	r0, [r7, #4]
 801abae:	f7ff ff59 	bl	801aa64 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801abb2:	6878      	ldr	r0, [r7, #4]
 801abb4:	3718      	adds	r7, #24
 801abb6:	46bd      	mov	sp, r7
 801abb8:	bd80      	pop	{r7, pc}

0801abba <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 801abba:	b480      	push	{r7}
 801abbc:	af00      	add	r7, sp, #0
 801abbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801abc2:	4618      	mov	r0, r3
 801abc4:	46bd      	mov	sp, r7
 801abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abca:	4770      	bx	lr

0801abcc <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 801abcc:	b480      	push	{r7}
 801abce:	af00      	add	r7, sp, #0
 801abd0:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801abd4:	ee07 3a90 	vmov	s15, r3
 801abd8:	eeb0 0a67 	vmov.f32	s0, s15
 801abdc:	46bd      	mov	sp, r7
 801abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abe2:	4770      	bx	lr

0801abe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 801abe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801abe8:	b092      	sub	sp, #72	; 0x48
 801abea:	af00      	add	r7, sp, #0
 801abec:	61f8      	str	r0, [r7, #28]
 801abee:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 801abf0:	69fa      	ldr	r2, [r7, #28]
 801abf2:	69bb      	ldr	r3, [r7, #24]
 801abf4:	429a      	cmp	r2, r3
 801abf6:	d107      	bne.n	801ac08 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801abf8:	f7ff ffdf 	bl	801abba <_ZNSt14numeric_limitsIlE3minEv>
 801abfc:	4602      	mov	r2, r0
 801abfe:	69fb      	ldr	r3, [r7, #28]
 801ac00:	4293      	cmp	r3, r2
 801ac02:	d101      	bne.n	801ac08 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801ac04:	2301      	movs	r3, #1
 801ac06:	e000      	b.n	801ac0a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 801ac08:	2300      	movs	r3, #0
 801ac0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 801ac0e:	69fb      	ldr	r3, [r7, #28]
 801ac10:	17da      	asrs	r2, r3, #31
 801ac12:	60bb      	str	r3, [r7, #8]
 801ac14:	60fa      	str	r2, [r7, #12]
 801ac16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ac1a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 801ac1e:	69bb      	ldr	r3, [r7, #24]
 801ac20:	17da      	asrs	r2, r3, #31
 801ac22:	603b      	str	r3, [r7, #0]
 801ac24:	607a      	str	r2, [r7, #4]
 801ac26:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ac2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 801ac2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ac30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac32:	fb03 f202 	mul.w	r2, r3, r2
 801ac36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ac3a:	fb01 f303 	mul.w	r3, r1, r3
 801ac3e:	4413      	add	r3, r2
 801ac40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ac42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac44:	fba1 4502 	umull	r4, r5, r1, r2
 801ac48:	442b      	add	r3, r5
 801ac4a:	461d      	mov	r5, r3
 801ac4c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 801ac50:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 801ac54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	db02      	blt.n	801ac62 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 801ac5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ac60:	e000      	b.n	801ac64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 801ac62:	4b1a      	ldr	r3, [pc, #104]	; (801accc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 801ac64:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 801ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac68:	17da      	asrs	r2, r3, #31
 801ac6a:	4698      	mov	r8, r3
 801ac6c:	4691      	mov	r9, r2
 801ac6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801ac72:	eb18 0102 	adds.w	r1, r8, r2
 801ac76:	6139      	str	r1, [r7, #16]
 801ac78:	eb49 0303 	adc.w	r3, r9, r3
 801ac7c:	617b      	str	r3, [r7, #20]
 801ac7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	da07      	bge.n	801ac96 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 801ac86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ac8a:	eb12 0a01 	adds.w	sl, r2, r1
 801ac8e:	f143 0b00 	adc.w	fp, r3, #0
 801ac92:	4652      	mov	r2, sl
 801ac94:	465b      	mov	r3, fp
 801ac96:	f04f 0000 	mov.w	r0, #0
 801ac9a:	f04f 0100 	mov.w	r1, #0
 801ac9e:	0fd0      	lsrs	r0, r2, #31
 801aca0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801aca4:	17d9      	asrs	r1, r3, #31
 801aca6:	4602      	mov	r2, r0
 801aca8:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 801acaa:	4613      	mov	r3, r2
 801acac:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 801acae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d003      	beq.n	801acbe <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 801acb6:	f7ff fa09 	bl	801a0cc <_ZNSt14numeric_limitsIlE3maxEv>
 801acba:	4603      	mov	r3, r0
 801acbc:	e000      	b.n	801acc0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 801acbe:	6a3b      	ldr	r3, [r7, #32]
}
 801acc0:	4618      	mov	r0, r3
 801acc2:	3748      	adds	r7, #72	; 0x48
 801acc4:	46bd      	mov	sp, r7
 801acc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801acca:	bf00      	nop
 801accc:	c0000001 	.word	0xc0000001

0801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 801acd0:	b580      	push	{r7, lr}
 801acd2:	b082      	sub	sp, #8
 801acd4:	af00      	add	r7, sp, #0
 801acd6:	6078      	str	r0, [r7, #4]
 801acd8:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801acda:	683b      	ldr	r3, [r7, #0]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	da01      	bge.n	801ace4 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 801ace0:	f007 fd58 	bl	8022794 <abort>
    TFLITE_DCHECK_LT(i, size_);
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	683a      	ldr	r2, [r7, #0]
 801acea:	429a      	cmp	r2, r3
 801acec:	db01      	blt.n	801acf2 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 801acee:	f007 fd51 	bl	8022794 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	2b05      	cmp	r3, #5
 801acf8:	dd06      	ble.n	801ad08 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	685a      	ldr	r2, [r3, #4]
 801acfe:	683b      	ldr	r3, [r7, #0]
 801ad00:	009b      	lsls	r3, r3, #2
 801ad02:	4413      	add	r3, r2
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	e004      	b.n	801ad12 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 801ad08:	687a      	ldr	r2, [r7, #4]
 801ad0a:	683b      	ldr	r3, [r7, #0]
 801ad0c:	009b      	lsls	r3, r3, #2
 801ad0e:	4413      	add	r3, r2
 801ad10:	685b      	ldr	r3, [r3, #4]
  }
 801ad12:	4618      	mov	r0, r3
 801ad14:	3708      	adds	r7, #8
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd80      	pop	{r7, pc}

0801ad1a <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 801ad1a:	b480      	push	{r7}
 801ad1c:	b083      	sub	sp, #12
 801ad1e:	af00      	add	r7, sp, #0
 801ad20:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	2b05      	cmp	r3, #5
 801ad28:	dd02      	ble.n	801ad30 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	685b      	ldr	r3, [r3, #4]
 801ad2e:	e001      	b.n	801ad34 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	3304      	adds	r3, #4
  }
 801ad34:	4618      	mov	r0, r3
 801ad36:	370c      	adds	r7, #12
 801ad38:	46bd      	mov	sp, r7
 801ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad3e:	4770      	bx	lr

0801ad40 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 801ad40:	b580      	push	{r7, lr}
 801ad42:	b086      	sub	sp, #24
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 801ad48:	2301      	movs	r3, #1
 801ad4a:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 801ad4c:	6878      	ldr	r0, [r7, #4]
 801ad4e:	f7ff ffe4 	bl	801ad1a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801ad52:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 801ad54:	2300      	movs	r3, #0
 801ad56:	613b      	str	r3, [r7, #16]
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	693a      	ldr	r2, [r7, #16]
 801ad5e:	429a      	cmp	r2, r3
 801ad60:	da0c      	bge.n	801ad7c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 801ad62:	693b      	ldr	r3, [r7, #16]
 801ad64:	009b      	lsls	r3, r3, #2
 801ad66:	68fa      	ldr	r2, [r7, #12]
 801ad68:	4413      	add	r3, r2
 801ad6a:	681a      	ldr	r2, [r3, #0]
 801ad6c:	697b      	ldr	r3, [r7, #20]
 801ad6e:	fb02 f303 	mul.w	r3, r2, r3
 801ad72:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 801ad74:	693b      	ldr	r3, [r7, #16]
 801ad76:	3301      	adds	r3, #1
 801ad78:	613b      	str	r3, [r7, #16]
 801ad7a:	e7ed      	b.n	801ad58 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 801ad7c:	697b      	ldr	r3, [r7, #20]
  }
 801ad7e:	4618      	mov	r0, r3
 801ad80:	3718      	adds	r7, #24
 801ad82:	46bd      	mov	sp, r7
 801ad84:	bd80      	pop	{r7, pc}

0801ad86 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 801ad86:	b590      	push	{r4, r7, lr}
 801ad88:	b085      	sub	sp, #20
 801ad8a:	af00      	add	r7, sp, #0
 801ad8c:	6078      	str	r0, [r7, #4]
 801ad8e:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 801ad90:	6878      	ldr	r0, [r7, #4]
 801ad92:	f7ff fe90 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ad96:	4604      	mov	r4, r0
 801ad98:	6838      	ldr	r0, [r7, #0]
 801ad9a:	f7ff fe8c 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ad9e:	4603      	mov	r3, r0
 801ada0:	429c      	cmp	r4, r3
 801ada2:	d001      	beq.n	801ada8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 801ada4:	f007 fcf6 	bl	8022794 <abort>
  const int dims_count = shape.DimensionsCount();
 801ada8:	6878      	ldr	r0, [r7, #4]
 801adaa:	f7ff fe84 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801adae:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 801adb0:	2300      	movs	r3, #0
 801adb2:	60fb      	str	r3, [r7, #12]
 801adb4:	68fa      	ldr	r2, [r7, #12]
 801adb6:	68bb      	ldr	r3, [r7, #8]
 801adb8:	429a      	cmp	r2, r3
 801adba:	da11      	bge.n	801ade0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801adbc:	68f9      	ldr	r1, [r7, #12]
 801adbe:	6878      	ldr	r0, [r7, #4]
 801adc0:	f7ff ff86 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801adc4:	4604      	mov	r4, r0
 801adc6:	68f9      	ldr	r1, [r7, #12]
 801adc8:	6838      	ldr	r0, [r7, #0]
 801adca:	f7ff ff81 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801adce:	4603      	mov	r3, r0
 801add0:	429c      	cmp	r4, r3
 801add2:	d001      	beq.n	801add8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 801add4:	f007 fcde 	bl	8022794 <abort>
  for (int i = 0; i < dims_count; ++i) {
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	3301      	adds	r3, #1
 801addc:	60fb      	str	r3, [r7, #12]
 801adde:	e7e9      	b.n	801adb4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 801ade0:	6878      	ldr	r0, [r7, #4]
 801ade2:	f7ff ffad 	bl	801ad40 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801ade6:	4603      	mov	r3, r0
}
 801ade8:	4618      	mov	r0, r3
 801adea:	3714      	adds	r7, #20
 801adec:	46bd      	mov	sp, r7
 801adee:	bd90      	pop	{r4, r7, pc}

0801adf0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b086      	sub	sp, #24
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	60f8      	str	r0, [r7, #12]
 801adf8:	60b9      	str	r1, [r7, #8]
 801adfa:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae02:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	dc02      	bgt.n	801ae10 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	425b      	negs	r3, r3
 801ae0e:	e000      	b.n	801ae12 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 801ae10:	2300      	movs	r3, #0
 801ae12:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 801ae14:	68fa      	ldr	r2, [r7, #12]
 801ae16:	697b      	ldr	r3, [r7, #20]
 801ae18:	fa02 f303 	lsl.w	r3, r2, r3
 801ae1c:	68b9      	ldr	r1, [r7, #8]
 801ae1e:	4618      	mov	r0, r3
 801ae20:	f7ff fee0 	bl	801abe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801ae24:	4603      	mov	r3, r0
 801ae26:	6939      	ldr	r1, [r7, #16]
 801ae28:	4618      	mov	r0, r3
 801ae2a:	f000 fb4b 	bl	801b4c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801ae2e:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 801ae30:	4618      	mov	r0, r3
 801ae32:	3718      	adds	r7, #24
 801ae34:	46bd      	mov	sp, r7
 801ae36:	bd80      	pop	{r7, pc}

0801ae38 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 801ae38:	b580      	push	{r7, lr}
 801ae3a:	b084      	sub	sp, #16
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	60f8      	str	r0, [r7, #12]
 801ae40:	60b9      	str	r1, [r7, #8]
 801ae42:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d101      	bne.n	801ae4e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801ae4a:	f007 fca3 	bl	8022794 <abort>
  TFLITE_DCHECK(node != nullptr);
 801ae4e:	68bb      	ldr	r3, [r7, #8]
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d101      	bne.n	801ae58 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801ae54:	f007 fc9e 	bl	8022794 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 801ae58:	68fb      	ldr	r3, [r7, #12]
 801ae5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ae5c:	68bb      	ldr	r3, [r7, #8]
 801ae5e:	6819      	ldr	r1, [r3, #0]
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	009b      	lsls	r3, r3, #2
 801ae64:	440b      	add	r3, r1
 801ae66:	685b      	ldr	r3, [r3, #4]
 801ae68:	4619      	mov	r1, r3
 801ae6a:	68f8      	ldr	r0, [r7, #12]
 801ae6c:	4790      	blx	r2
 801ae6e:	4603      	mov	r3, r0
}
 801ae70:	4618      	mov	r0, r3
 801ae72:	3710      	adds	r7, #16
 801ae74:	46bd      	mov	sp, r7
 801ae76:	bd80      	pop	{r7, pc}

0801ae78 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b084      	sub	sp, #16
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	60f8      	str	r0, [r7, #12]
 801ae80:	60b9      	str	r1, [r7, #8]
 801ae82:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 801ae84:	687a      	ldr	r2, [r7, #4]
 801ae86:	68b9      	ldr	r1, [r7, #8]
 801ae88:	68f8      	ldr	r0, [r7, #12]
 801ae8a:	f7ff ffd5 	bl	801ae38 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801ae8e:	4603      	mov	r3, r0
}
 801ae90:	4618      	mov	r0, r3
 801ae92:	3710      	adds	r7, #16
 801ae94:	46bd      	mov	sp, r7
 801ae96:	bd80      	pop	{r7, pc}

0801ae98 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 801ae98:	b580      	push	{r7, lr}
 801ae9a:	b084      	sub	sp, #16
 801ae9c:	af00      	add	r7, sp, #0
 801ae9e:	60f8      	str	r0, [r7, #12]
 801aea0:	60b9      	str	r1, [r7, #8]
 801aea2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d101      	bne.n	801aeae <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801aeaa:	f007 fc73 	bl	8022794 <abort>
  TFLITE_DCHECK(node != nullptr);
 801aeae:	68bb      	ldr	r3, [r7, #8]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d101      	bne.n	801aeb8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801aeb4:	f007 fc6e 	bl	8022794 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801aebc:	68bb      	ldr	r3, [r7, #8]
 801aebe:	6859      	ldr	r1, [r3, #4]
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	009b      	lsls	r3, r3, #2
 801aec4:	440b      	add	r3, r1
 801aec6:	685b      	ldr	r3, [r3, #4]
 801aec8:	4619      	mov	r1, r3
 801aeca:	68f8      	ldr	r0, [r7, #12]
 801aecc:	4790      	blx	r2
 801aece:	4603      	mov	r3, r0
}
 801aed0:	4618      	mov	r0, r3
 801aed2:	3710      	adds	r7, #16
 801aed4:	46bd      	mov	sp, r7
 801aed6:	bd80      	pop	{r7, pc}

0801aed8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 801aed8:	b580      	push	{r7, lr}
 801aeda:	b08a      	sub	sp, #40	; 0x28
 801aedc:	af00      	add	r7, sp, #0
 801aede:	60f8      	str	r0, [r7, #12]
 801aee0:	60b9      	str	r1, [r7, #8]
 801aee2:	607a      	str	r2, [r7, #4]
 801aee4:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801aee6:	6879      	ldr	r1, [r7, #4]
 801aee8:	68f8      	ldr	r0, [r7, #12]
 801aeea:	f7ff ff4c 	bl	801ad86 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801aeee:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801aef0:	2300      	movs	r3, #0
 801aef2:	627b      	str	r3, [r7, #36]	; 0x24
 801aef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aef6:	6a3b      	ldr	r3, [r7, #32]
 801aef8:	429a      	cmp	r2, r3
 801aefa:	da1d      	bge.n	801af38 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 801aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aefe:	009b      	lsls	r3, r3, #2
 801af00:	68ba      	ldr	r2, [r7, #8]
 801af02:	4413      	add	r3, r2
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 801af08:	f04f 0300 	mov.w	r3, #0
 801af0c:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 801af0e:	edd7 7a07 	vldr	s15, [r7, #28]
 801af12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801af16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af1a:	d501      	bpl.n	801af20 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 801af1c:	69bb      	ldr	r3, [r7, #24]
 801af1e:	e000      	b.n	801af22 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 801af20:	69fb      	ldr	r3, [r7, #28]
 801af22:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 801af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af26:	009b      	lsls	r3, r3, #2
 801af28:	683a      	ldr	r2, [r7, #0]
 801af2a:	4413      	add	r3, r2
 801af2c:	697a      	ldr	r2, [r7, #20]
 801af2e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af32:	3301      	adds	r3, #1
 801af34:	627b      	str	r3, [r7, #36]	; 0x24
 801af36:	e7dd      	b.n	801aef4 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801af38:	bf00      	nop
 801af3a:	3728      	adds	r7, #40	; 0x28
 801af3c:	46bd      	mov	sp, r7
 801af3e:	bd80      	pop	{r7, pc}

0801af40 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 801af40:	b580      	push	{r7, lr}
 801af42:	b08a      	sub	sp, #40	; 0x28
 801af44:	af00      	add	r7, sp, #0
 801af46:	60f8      	str	r0, [r7, #12]
 801af48:	60b9      	str	r1, [r7, #8]
 801af4a:	607a      	str	r2, [r7, #4]
 801af4c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801af4e:	6879      	ldr	r1, [r7, #4]
 801af50:	68f8      	ldr	r0, [r7, #12]
 801af52:	f7ff ff18 	bl	801ad86 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801af56:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801af58:	2300      	movs	r3, #0
 801af5a:	627b      	str	r3, [r7, #36]	; 0x24
 801af5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af5e:	6a3b      	ldr	r3, [r7, #32]
 801af60:	429a      	cmp	r2, r3
 801af62:	da2a      	bge.n	801afba <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 801af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af66:	009b      	lsls	r3, r3, #2
 801af68:	68ba      	ldr	r2, [r7, #8]
 801af6a:	4413      	add	r3, r2
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 801af70:	4b14      	ldr	r3, [pc, #80]	; (801afc4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 801af72:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 801af74:	f04f 0300 	mov.w	r3, #0
 801af78:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 801af7a:	edd7 7a07 	vldr	s15, [r7, #28]
 801af7e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801af82:	eef4 7ac7 	vcmpe.f32	s15, s14
 801af86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af8a:	dd01      	ble.n	801af90 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 801af8c:	69bb      	ldr	r3, [r7, #24]
 801af8e:	e009      	b.n	801afa4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801af90:	edd7 7a07 	vldr	s15, [r7, #28]
 801af94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801af98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af9c:	d501      	bpl.n	801afa2 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 801af9e:	697b      	ldr	r3, [r7, #20]
 801afa0:	e000      	b.n	801afa4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801afa2:	69fb      	ldr	r3, [r7, #28]
 801afa4:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801afa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afa8:	009b      	lsls	r3, r3, #2
 801afaa:	683a      	ldr	r2, [r7, #0]
 801afac:	4413      	add	r3, r2
 801afae:	693a      	ldr	r2, [r7, #16]
 801afb0:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afb4:	3301      	adds	r3, #1
 801afb6:	627b      	str	r3, [r7, #36]	; 0x24
 801afb8:	e7d0      	b.n	801af5c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801afba:	bf00      	nop
 801afbc:	3728      	adds	r7, #40	; 0x28
 801afbe:	46bd      	mov	sp, r7
 801afc0:	bd80      	pop	{r7, pc}
 801afc2:	bf00      	nop
 801afc4:	40c00000 	.word	0x40c00000

0801afc8 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 801afc8:	b580      	push	{r7, lr}
 801afca:	b084      	sub	sp, #16
 801afcc:	af00      	add	r7, sp, #0
 801afce:	60f8      	str	r0, [r7, #12]
 801afd0:	60b9      	str	r1, [r7, #8]
 801afd2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d101      	bne.n	801afe0 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 801afdc:	f007 fbda 	bl	8022794 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801afe4:	211c      	movs	r1, #28
 801afe6:	68f8      	ldr	r0, [r7, #12]
 801afe8:	4798      	blx	r3
 801afea:	4603      	mov	r3, r0
}
 801afec:	4618      	mov	r0, r3
 801afee:	3710      	adds	r7, #16
 801aff0:	46bd      	mov	sp, r7
 801aff2:	bd80      	pop	{r7, pc}

0801aff4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 801aff4:	b590      	push	{r4, r7, lr}
 801aff6:	b089      	sub	sp, #36	; 0x24
 801aff8:	af02      	add	r7, sp, #8
 801affa:	6078      	str	r0, [r7, #4]
 801affc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801affe:	683b      	ldr	r3, [r7, #0]
 801b000:	691b      	ldr	r3, [r3, #16]
 801b002:	2b00      	cmp	r3, #0
 801b004:	d101      	bne.n	801b00a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801b006:	f007 fbc5 	bl	8022794 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 801b00a:	683b      	ldr	r3, [r7, #0]
 801b00c:	691b      	ldr	r3, [r3, #16]
 801b00e:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801b010:	2200      	movs	r2, #0
 801b012:	6839      	ldr	r1, [r7, #0]
 801b014:	6878      	ldr	r0, [r7, #4]
 801b016:	f7ff facd 	bl	801a5b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b01a:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 801b01c:	693b      	ldr	r3, [r7, #16]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d10a      	bne.n	801b038 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	695c      	ldr	r4, [r3, #20]
 801b026:	4b1a      	ldr	r3, [pc, #104]	; (801b090 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 801b028:	9300      	str	r3, [sp, #0]
 801b02a:	238e      	movs	r3, #142	; 0x8e
 801b02c:	4a19      	ldr	r2, [pc, #100]	; (801b094 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801b02e:	491a      	ldr	r1, [pc, #104]	; (801b098 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801b030:	6878      	ldr	r0, [r7, #4]
 801b032:	47a0      	blx	r4
 801b034:	2301      	movs	r3, #1
 801b036:	e027      	b.n	801b088 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801b038:	2200      	movs	r2, #0
 801b03a:	6839      	ldr	r1, [r7, #0]
 801b03c:	6878      	ldr	r0, [r7, #4]
 801b03e:	f7ff fac9 	bl	801a5d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801b042:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 801b044:	68fb      	ldr	r3, [r7, #12]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d10a      	bne.n	801b060 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	695c      	ldr	r4, [r3, #20]
 801b04e:	4b13      	ldr	r3, [pc, #76]	; (801b09c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 801b050:	9300      	str	r3, [sp, #0]
 801b052:	2390      	movs	r3, #144	; 0x90
 801b054:	4a0f      	ldr	r2, [pc, #60]	; (801b094 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801b056:	4910      	ldr	r1, [pc, #64]	; (801b098 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801b058:	6878      	ldr	r0, [r7, #4]
 801b05a:	47a0      	blx	r4
 801b05c:	2301      	movs	r3, #1
 801b05e:	e013      	b.n	801b088 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 801b060:	693b      	ldr	r3, [r7, #16]
 801b062:	781b      	ldrb	r3, [r3, #0]
 801b064:	2b09      	cmp	r3, #9
 801b066:	d105      	bne.n	801b074 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 801b068:	697a      	ldr	r2, [r7, #20]
 801b06a:	68f9      	ldr	r1, [r7, #12]
 801b06c:	6938      	ldr	r0, [r7, #16]
 801b06e:	f000 fa9d 	bl	801b5ac <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 801b072:	e008      	b.n	801b086 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 801b074:	693b      	ldr	r3, [r7, #16]
 801b076:	781b      	ldrb	r3, [r3, #0]
 801b078:	2b03      	cmp	r3, #3
 801b07a:	d104      	bne.n	801b086 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 801b07c:	697a      	ldr	r2, [r7, #20]
 801b07e:	68f9      	ldr	r1, [r7, #12]
 801b080:	6938      	ldr	r0, [r7, #16]
 801b082:	f000 fb35 	bl	801b6f0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 801b086:	2300      	movs	r3, #0
}
 801b088:	4618      	mov	r0, r3
 801b08a:	371c      	adds	r7, #28
 801b08c:	46bd      	mov	sp, r7
 801b08e:	bd90      	pop	{r4, r7, pc}
 801b090:	08027c0c 	.word	0x08027c0c
 801b094:	08027b64 	.word	0x08027b64
 801b098:	08027bf4 	.word	0x08027bf4
 801b09c:	08027c20 	.word	0x08027c20

0801b0a0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 801b0a0:	b590      	push	{r4, r7, lr}
 801b0a2:	b0ad      	sub	sp, #180	; 0xb4
 801b0a4:	af02      	add	r7, sp, #8
 801b0a6:	6078      	str	r0, [r7, #4]
 801b0a8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b0aa:	683b      	ldr	r3, [r7, #0]
 801b0ac:	691b      	ldr	r3, [r3, #16]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d101      	bne.n	801b0b6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801b0b2:	f007 fb6f 	bl	8022794 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 801b0b6:	683b      	ldr	r3, [r7, #0]
 801b0b8:	691b      	ldr	r3, [r3, #16]
 801b0ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801b0be:	2200      	movs	r2, #0
 801b0c0:	6839      	ldr	r1, [r7, #0]
 801b0c2:	6878      	ldr	r0, [r7, #4]
 801b0c4:	f7ff fed8 	bl	801ae78 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801b0c8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	6839      	ldr	r1, [r7, #0]
 801b0d0:	6878      	ldr	r0, [r7, #4]
 801b0d2:	f7ff fee1 	bl	801ae98 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801b0d6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801b0da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b0de:	7a1b      	ldrb	r3, [r3, #8]
 801b0e0:	2b09      	cmp	r3, #9
 801b0e2:	d032      	beq.n	801b14a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801b0e4:	2b09      	cmp	r3, #9
 801b0e6:	f300 808c 	bgt.w	801b202 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 801b0ea:	2b01      	cmp	r3, #1
 801b0ec:	d002      	beq.n	801b0f4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 801b0ee:	2b03      	cmp	r3, #3
 801b0f0:	d059      	beq.n	801b1a6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 801b0f2:	e086      	b.n	801b202 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 801b0f4:	f107 030c 	add.w	r3, r7, #12
 801b0f8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	f001 fe2f 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801b102:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b106:	f000 fb95 	bl	801b834 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801b10a:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 801b10c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b110:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b114:	4618      	mov	r0, r3
 801b116:	f001 fe23 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801b11a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b11e:	f000 fb98 	bl	801b852 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801b122:	4603      	mov	r3, r0
 801b124:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b128:	f107 000c 	add.w	r0, r7, #12
 801b12c:	4621      	mov	r1, r4
 801b12e:	f7ff fed3 	bl	801aed8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 801b132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b136:	4618      	mov	r0, r3
 801b138:	f7ff fca7 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801b13c:	f107 030c 	add.w	r3, r7, #12
 801b140:	4618      	mov	r0, r3
 801b142:	f7ff fca2 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801b146:	2300      	movs	r3, #0
 801b148:	e069      	b.n	801b21e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801b14a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b14e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b152:	4618      	mov	r0, r3
 801b154:	f001 fe04 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 801b158:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b15c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b160:	4618      	mov	r0, r3
 801b162:	f001 fdfd 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801b166:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b16a:	f000 fb83 	bl	801b874 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801b16e:	4604      	mov	r4, r0
 801b170:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b174:	f000 fb8d 	bl	801b892 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801b178:	4603      	mov	r3, r0
 801b17a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801b17e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801b182:	9300      	str	r3, [sp, #0]
 801b184:	4623      	mov	r3, r4
 801b186:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801b18a:	f000 fb93 	bl	801b8b4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 801b18e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b192:	4618      	mov	r0, r3
 801b194:	f7ff fc79 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801b198:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b19c:	4618      	mov	r0, r3
 801b19e:	f7ff fc74 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801b1a2:	2300      	movs	r3, #0
 801b1a4:	e03b      	b.n	801b21e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801b1a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b1aa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f001 fdd6 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 801b1b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b1b8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b1bc:	4618      	mov	r0, r3
 801b1be:	f001 fdcf 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801b1c2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b1c6:	f000 fbc1 	bl	801b94c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801b1ca:	4604      	mov	r4, r0
 801b1cc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b1d0:	f000 fbcb 	bl	801b96a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801b1d4:	4603      	mov	r3, r0
 801b1d6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801b1da:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801b1de:	9300      	str	r3, [sp, #0]
 801b1e0:	4623      	mov	r3, r4
 801b1e2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801b1e6:	f000 fbd1 	bl	801b98c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 801b1ea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b1ee:	4618      	mov	r0, r3
 801b1f0:	f7ff fc4b 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801b1f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	f7ff fc46 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801b1fe:	2300      	movs	r3, #0
 801b200:	e00d      	b.n	801b21e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	695c      	ldr	r4, [r3, #20]
 801b206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b20a:	7a1b      	ldrb	r3, [r3, #8]
 801b20c:	4618      	mov	r0, r3
 801b20e:	f7fe fee1 	bl	8019fd4 <TfLiteTypeGetName>
 801b212:	4603      	mov	r3, r0
 801b214:	461a      	mov	r2, r3
 801b216:	4904      	ldr	r1, [pc, #16]	; (801b228 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 801b218:	6878      	ldr	r0, [r7, #4]
 801b21a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801b21c:	2301      	movs	r3, #1
    }
  }
}
 801b21e:	4618      	mov	r0, r3
 801b220:	37ac      	adds	r7, #172	; 0xac
 801b222:	46bd      	mov	sp, r7
 801b224:	bd90      	pop	{r4, r7, pc}
 801b226:	bf00      	nop
 801b228:	08027c34 	.word	0x08027c34

0801b22c <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 801b22c:	b580      	push	{r7, lr}
 801b22e:	b084      	sub	sp, #16
 801b230:	af00      	add	r7, sp, #0
 801b232:	60f8      	str	r0, [r7, #12]
 801b234:	60b9      	str	r1, [r7, #8]
 801b236:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d101      	bne.n	801b244 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 801b240:	f007 faa8 	bl	8022794 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b248:	2104      	movs	r1, #4
 801b24a:	68f8      	ldr	r0, [r7, #12]
 801b24c:	4798      	blx	r3
 801b24e:	4603      	mov	r3, r0
}
 801b250:	4618      	mov	r0, r3
 801b252:	3710      	adds	r7, #16
 801b254:	46bd      	mov	sp, r7
 801b256:	bd80      	pop	{r7, pc}

0801b258 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 801b258:	b590      	push	{r4, r7, lr}
 801b25a:	b087      	sub	sp, #28
 801b25c:	af02      	add	r7, sp, #8
 801b25e:	6078      	str	r0, [r7, #4]
 801b260:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b262:	683b      	ldr	r3, [r7, #0]
 801b264:	691b      	ldr	r3, [r3, #16]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d101      	bne.n	801b26e <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801b26a:	f007 fa93 	bl	8022794 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 801b26e:	683b      	ldr	r3, [r7, #0]
 801b270:	691b      	ldr	r3, [r3, #16]
 801b272:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801b274:	2200      	movs	r2, #0
 801b276:	6839      	ldr	r1, [r7, #0]
 801b278:	6878      	ldr	r0, [r7, #4]
 801b27a:	f7ff f99b 	bl	801a5b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b27e:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 801b280:	68bb      	ldr	r3, [r7, #8]
 801b282:	2b00      	cmp	r3, #0
 801b284:	d10a      	bne.n	801b29c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	695c      	ldr	r4, [r3, #20]
 801b28a:	4b20      	ldr	r3, [pc, #128]	; (801b30c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 801b28c:	9300      	str	r3, [sp, #0]
 801b28e:	23cd      	movs	r3, #205	; 0xcd
 801b290:	4a1f      	ldr	r2, [pc, #124]	; (801b310 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 801b292:	4920      	ldr	r1, [pc, #128]	; (801b314 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 801b294:	6878      	ldr	r0, [r7, #4]
 801b296:	47a0      	blx	r4
 801b298:	2301      	movs	r3, #1
 801b29a:	e033      	b.n	801b304 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 801b29c:	68bb      	ldr	r3, [r7, #8]
 801b29e:	781b      	ldrb	r3, [r3, #0]
 801b2a0:	2b09      	cmp	r3, #9
 801b2a2:	d115      	bne.n	801b2d0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801b2a4:	68bb      	ldr	r3, [r7, #8]
 801b2a6:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 801b2aa:	68bb      	ldr	r3, [r7, #8]
 801b2ac:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801b2ae:	4618      	mov	r0, r3
 801b2b0:	eef0 0a67 	vmov.f32	s1, s15
 801b2b4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801b2b8:	f000 fbb3 	bl	801ba22 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 801b2bc:	4603      	mov	r3, r0
 801b2be:	461a      	mov	r2, r3
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 801b2c4:	68bb      	ldr	r3, [r7, #8]
 801b2c6:	691b      	ldr	r3, [r3, #16]
 801b2c8:	b25a      	sxtb	r2, r3
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	705a      	strb	r2, [r3, #1]
 801b2ce:	e018      	b.n	801b302 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 801b2d0:	68bb      	ldr	r3, [r7, #8]
 801b2d2:	781b      	ldrb	r3, [r3, #0]
 801b2d4:	2b03      	cmp	r3, #3
 801b2d6:	d114      	bne.n	801b302 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801b2d8:	68bb      	ldr	r3, [r7, #8]
 801b2da:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 801b2de:	68bb      	ldr	r3, [r7, #8]
 801b2e0:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	eef0 0a67 	vmov.f32	s1, s15
 801b2e8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801b2ec:	f000 fbe8 	bl	801bac0 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	461a      	mov	r2, r3
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 801b2f8:	68bb      	ldr	r3, [r7, #8]
 801b2fa:	691b      	ldr	r3, [r3, #16]
 801b2fc:	b2da      	uxtb	r2, r3
 801b2fe:	68fb      	ldr	r3, [r7, #12]
 801b300:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 801b302:	2300      	movs	r3, #0
}
 801b304:	4618      	mov	r0, r3
 801b306:	3714      	adds	r7, #20
 801b308:	46bd      	mov	sp, r7
 801b30a:	bd90      	pop	{r4, r7, pc}
 801b30c:	08027c0c 	.word	0x08027c0c
 801b310:	08027b64 	.word	0x08027b64
 801b314:	08027bf4 	.word	0x08027bf4

0801b318 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 801b318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b31a:	b0ad      	sub	sp, #180	; 0xb4
 801b31c:	af02      	add	r7, sp, #8
 801b31e:	6078      	str	r0, [r7, #4]
 801b320:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b322:	683b      	ldr	r3, [r7, #0]
 801b324:	691b      	ldr	r3, [r3, #16]
 801b326:	2b00      	cmp	r3, #0
 801b328:	d101      	bne.n	801b32e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 801b32a:	f007 fa33 	bl	8022794 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 801b32e:	683b      	ldr	r3, [r7, #0]
 801b330:	691b      	ldr	r3, [r3, #16]
 801b332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801b336:	2200      	movs	r2, #0
 801b338:	6839      	ldr	r1, [r7, #0]
 801b33a:	6878      	ldr	r0, [r7, #4]
 801b33c:	f7ff fd9c 	bl	801ae78 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801b340:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801b344:	2200      	movs	r2, #0
 801b346:	6839      	ldr	r1, [r7, #0]
 801b348:	6878      	ldr	r0, [r7, #4]
 801b34a:	f7ff fda5 	bl	801ae98 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801b34e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801b352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b356:	7a1b      	ldrb	r3, [r3, #8]
 801b358:	2b09      	cmp	r3, #9
 801b35a:	d032      	beq.n	801b3c2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801b35c:	2b09      	cmp	r3, #9
 801b35e:	f300 809c 	bgt.w	801b49a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 801b362:	2b01      	cmp	r3, #1
 801b364:	d002      	beq.n	801b36c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 801b366:	2b03      	cmp	r3, #3
 801b368:	d062      	beq.n	801b430 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 801b36a:	e096      	b.n	801b49a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 801b36c:	f107 030c 	add.w	r3, r7, #12
 801b370:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b374:	4618      	mov	r0, r3
 801b376:	f001 fcf3 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801b37a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b37e:	f000 fa59 	bl	801b834 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801b382:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 801b384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b388:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b38c:	4618      	mov	r0, r3
 801b38e:	f001 fce7 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801b392:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b396:	f000 fa5c 	bl	801b852 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801b39a:	4603      	mov	r3, r0
 801b39c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b3a0:	f107 000c 	add.w	r0, r7, #12
 801b3a4:	4621      	mov	r1, r4
 801b3a6:	f7ff fdcb 	bl	801af40 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 801b3aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f7ff fb6b 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801b3b4:	f107 030c 	add.w	r3, r7, #12
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f7ff fb66 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801b3be:	2300      	movs	r3, #0
 801b3c0:	e079      	b.n	801b4b6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801b3c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b3c6:	f993 4001 	ldrsb.w	r4, [r3, #1]
 801b3ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b3ce:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 801b3d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b3d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b3da:	4618      	mov	r0, r3
 801b3dc:	f001 fcc0 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801b3e0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b3e4:	f000 fa46 	bl	801b874 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801b3e8:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 801b3ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b3ee:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b3f2:	4618      	mov	r0, r3
 801b3f4:	f001 fcb4 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801b3f8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b3fc:	f000 fa49 	bl	801b892 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801b400:	4603      	mov	r3, r0
 801b402:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801b406:	9301      	str	r3, [sp, #4]
 801b408:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b40c:	9300      	str	r3, [sp, #0]
 801b40e:	4633      	mov	r3, r6
 801b410:	4629      	mov	r1, r5
 801b412:	4620      	mov	r0, r4
 801b414:	f000 fba3 	bl	801bb5e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 801b418:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b41c:	4618      	mov	r0, r3
 801b41e:	f7ff fb34 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 801b422:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b426:	4618      	mov	r0, r3
 801b428:	f7ff fb2f 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801b42c:	2300      	movs	r3, #0
 801b42e:	e042      	b.n	801b4b6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801b430:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b434:	78dc      	ldrb	r4, [r3, #3]
 801b436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b43a:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 801b43c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b440:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b444:	4618      	mov	r0, r3
 801b446:	f001 fc8b 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801b44a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b44e:	f000 fa7d 	bl	801b94c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801b452:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 801b454:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b458:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b45c:	4618      	mov	r0, r3
 801b45e:	f001 fc7f 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801b462:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b466:	f000 fa80 	bl	801b96a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801b46a:	4603      	mov	r3, r0
 801b46c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801b470:	9301      	str	r3, [sp, #4]
 801b472:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b476:	9300      	str	r3, [sp, #0]
 801b478:	4633      	mov	r3, r6
 801b47a:	4629      	mov	r1, r5
 801b47c:	4620      	mov	r0, r4
 801b47e:	f000 fbad 	bl	801bbdc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 801b482:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b486:	4618      	mov	r0, r3
 801b488:	f7ff faff 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 801b48c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b490:	4618      	mov	r0, r3
 801b492:	f7ff fafa 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801b496:	2300      	movs	r3, #0
 801b498:	e00d      	b.n	801b4b6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	695c      	ldr	r4, [r3, #20]
 801b49e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b4a2:	7a1b      	ldrb	r3, [r3, #8]
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f7fe fd95 	bl	8019fd4 <TfLiteTypeGetName>
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	461a      	mov	r2, r3
 801b4ae:	4904      	ldr	r1, [pc, #16]	; (801b4c0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 801b4b0:	6878      	ldr	r0, [r7, #4]
 801b4b2:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801b4b4:	2301      	movs	r3, #1
    }
  }
}
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	37ac      	adds	r7, #172	; 0xac
 801b4ba:	46bd      	mov	sp, r7
 801b4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4be:	bf00      	nop
 801b4c0:	08027c34 	.word	0x08027c34

0801b4c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 801b4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4c6:	b089      	sub	sp, #36	; 0x24
 801b4c8:	af00      	add	r7, sp, #0
 801b4ca:	6078      	str	r0, [r7, #4]
 801b4cc:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 801b4ce:	6839      	ldr	r1, [r7, #0]
 801b4d0:	2900      	cmp	r1, #0
 801b4d2:	da06      	bge.n	801b4e2 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 801b4d4:	4b31      	ldr	r3, [pc, #196]	; (801b59c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 801b4d6:	4a32      	ldr	r2, [pc, #200]	; (801b5a0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801b4d8:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801b4dc:	4831      	ldr	r0, [pc, #196]	; (801b5a4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801b4de:	f007 f961 	bl	80227a4 <__assert_func>
  assert(exponent <= 31);
 801b4e2:	6839      	ldr	r1, [r7, #0]
 801b4e4:	291f      	cmp	r1, #31
 801b4e6:	dd06      	ble.n	801b4f6 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 801b4e8:	4b2f      	ldr	r3, [pc, #188]	; (801b5a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 801b4ea:	4a2d      	ldr	r2, [pc, #180]	; (801b5a0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801b4ec:	f240 1167 	movw	r1, #359	; 0x167
 801b4f0:	482c      	ldr	r0, [pc, #176]	; (801b5a4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801b4f2:	f007 f957 	bl	80227a4 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 801b4f6:	f04f 0001 	mov.w	r0, #1
 801b4fa:	f04f 0100 	mov.w	r1, #0
 801b4fe:	683c      	ldr	r4, [r7, #0]
 801b500:	f1a4 0620 	sub.w	r6, r4, #32
 801b504:	f1c4 0520 	rsb	r5, r4, #32
 801b508:	fa01 f304 	lsl.w	r3, r1, r4
 801b50c:	fa00 f606 	lsl.w	r6, r0, r6
 801b510:	4333      	orrs	r3, r6
 801b512:	fa20 f505 	lsr.w	r5, r0, r5
 801b516:	432b      	orrs	r3, r5
 801b518:	fa00 f204 	lsl.w	r2, r0, r4
 801b51c:	4613      	mov	r3, r2
 801b51e:	3b01      	subs	r3, #1
 801b520:	4618      	mov	r0, r3
 801b522:	f000 fb93 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801b526:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 801b528:	2000      	movs	r0, #0
 801b52a:	f000 fb8f 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801b52e:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 801b530:	2001      	movs	r0, #1
 801b532:	f000 fb8b 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801b536:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 801b538:	69f9      	ldr	r1, [r7, #28]
 801b53a:	6878      	ldr	r0, [r7, #4]
 801b53c:	f000 fb91 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801b540:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 801b542:	2101      	movs	r1, #1
 801b544:	69f8      	ldr	r0, [r7, #28]
 801b546:	f000 fb9a 	bl	801bc7e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801b54a:	4604      	mov	r4, r0
 801b54c:	69b9      	ldr	r1, [r7, #24]
 801b54e:	6878      	ldr	r0, [r7, #4]
 801b550:	f000 fba4 	bl	801bc9c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801b554:	4603      	mov	r3, r0
 801b556:	6979      	ldr	r1, [r7, #20]
 801b558:	4618      	mov	r0, r3
 801b55a:	f000 fb82 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801b55e:	4603      	mov	r3, r0
 801b560:	4619      	mov	r1, r3
 801b562:	4620      	mov	r0, r4
 801b564:	f000 fbae 	bl	801bcc4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801b568:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 801b56a:	6839      	ldr	r1, [r7, #0]
 801b56c:	6878      	ldr	r0, [r7, #4]
 801b56e:	f000 fb86 	bl	801bc7e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801b572:	4604      	mov	r4, r0
 801b574:	68f9      	ldr	r1, [r7, #12]
 801b576:	6938      	ldr	r0, [r7, #16]
 801b578:	f000 fbb2 	bl	801bce0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801b57c:	4603      	mov	r3, r0
 801b57e:	6979      	ldr	r1, [r7, #20]
 801b580:	4618      	mov	r0, r3
 801b582:	f000 fb6e 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801b586:	4603      	mov	r3, r0
 801b588:	4619      	mov	r1, r3
 801b58a:	4620      	mov	r0, r4
 801b58c:	f000 fb9a 	bl	801bcc4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801b590:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 801b592:	4618      	mov	r0, r3
 801b594:	3724      	adds	r7, #36	; 0x24
 801b596:	46bd      	mov	sp, r7
 801b598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b59a:	bf00      	nop
 801b59c:	08027ca0 	.word	0x08027ca0
 801b5a0:	08027cb0 	.word	0x08027cb0
 801b5a4:	08027d0c 	.word	0x08027d0c
 801b5a8:	08027d9c 	.word	0x08027d9c

0801b5ac <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801b5ac:	b590      	push	{r4, r7, lr}
 801b5ae:	b099      	sub	sp, #100	; 0x64
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	60f8      	str	r0, [r7, #12]
 801b5b4:	60b9      	str	r1, [r7, #8]
 801b5b6:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801b5b8:	f04f 0300 	mov.w	r3, #0
 801b5bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801b5be:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801b5c2:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	ed93 7a03 	vldr	s14, [r3, #12]
 801b5ca:	68bb      	ldr	r3, [r7, #8]
 801b5cc:	edd3 7a03 	vldr	s15, [r3, #12]
 801b5d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801b5d4:	ee16 0a90 	vmov	r0, s13
 801b5d8:	f7e4 ffc0 	bl	800055c <__aeabi_f2d>
 801b5dc:	4602      	mov	r2, r0
 801b5de:	460b      	mov	r3, r1
 801b5e0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801b5e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b5e8:	68f9      	ldr	r1, [r7, #12]
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f7ff fac7 	bl	801ab7e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801b5f0:	f107 0310 	add.w	r3, r7, #16
 801b5f4:	68b9      	ldr	r1, [r7, #8]
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7ff fac1 	bl	801ab7e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	f103 0214 	add.w	r2, r3, #20
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	3318      	adds	r3, #24
 801b606:	4619      	mov	r1, r3
 801b608:	4610      	mov	r0, r2
 801b60a:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801b60e:	f7fe fd67 	bl	801a0e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801b612:	f7fe ff1d 	bl	801a450 <_ZNSt14numeric_limitsIaE3minEv>
 801b616:	4603      	mov	r3, r0
 801b618:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801b61a:	68bb      	ldr	r3, [r7, #8]
 801b61c:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b61e:	68bb      	ldr	r3, [r7, #8]
 801b620:	edd3 7a03 	vldr	s15, [r3, #12]
 801b624:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801b628:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b62c:	eeb0 0a66 	vmov.f32	s0, s13
 801b630:	f004 fd7c 	bl	802012c <roundf>
 801b634:	eef0 7a40 	vmov.f32	s15, s0
 801b638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b63c:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801b640:	4423      	add	r3, r4
 801b642:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b644:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801b648:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b64c:	4611      	mov	r1, r2
 801b64e:	4618      	mov	r0, r3
 801b650:	f7ff f9e6 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801b654:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801b656:	681a      	ldr	r2, [r3, #0]
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801b65c:	f7ff fab6 	bl	801abcc <_ZNSt14numeric_limitsIfE8infinityEv>
 801b660:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b664:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b668:	eef4 7a47 	vcmp.f32	s15, s14
 801b66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b670:	d103      	bne.n	801b67a <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801b672:	f7fe fef6 	bl	801a462 <_ZNSt14numeric_limitsIaE3maxEv>
 801b676:	4603      	mov	r3, r0
 801b678:	e022      	b.n	801b6c0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801b67a:	f7fe fef2 	bl	801a462 <_ZNSt14numeric_limitsIaE3maxEv>
 801b67e:	4603      	mov	r3, r0
 801b680:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801b682:	68bb      	ldr	r3, [r7, #8]
 801b684:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801b686:	68bb      	ldr	r3, [r7, #8]
 801b688:	edd3 7a03 	vldr	s15, [r3, #12]
 801b68c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801b690:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b694:	eeb0 0a66 	vmov.f32	s0, s13
 801b698:	f004 fd48 	bl	802012c <roundf>
 801b69c:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801b6a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b6a4:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801b6a8:	4423      	add	r3, r4
 801b6aa:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801b6ac:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b6b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b6b4:	4611      	mov	r1, r2
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	f7ff f99e 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801b6bc:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b6be:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801b6c0:	687a      	ldr	r2, [r7, #4]
 801b6c2:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	691a      	ldr	r2, [r3, #16]
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801b6cc:	68bb      	ldr	r3, [r7, #8]
 801b6ce:	691a      	ldr	r2, [r3, #16]
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801b6d4:	f107 0310 	add.w	r3, r7, #16
 801b6d8:	4618      	mov	r0, r3
 801b6da:	f7ff f9d6 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801b6de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	f7ff f9d1 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
}
 801b6e8:	bf00      	nop
 801b6ea:	3764      	adds	r7, #100	; 0x64
 801b6ec:	46bd      	mov	sp, r7
 801b6ee:	bd90      	pop	{r4, r7, pc}

0801b6f0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801b6f0:	b590      	push	{r4, r7, lr}
 801b6f2:	b099      	sub	sp, #100	; 0x64
 801b6f4:	af00      	add	r7, sp, #0
 801b6f6:	60f8      	str	r0, [r7, #12]
 801b6f8:	60b9      	str	r1, [r7, #8]
 801b6fa:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801b6fc:	f04f 0300 	mov.w	r3, #0
 801b700:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801b702:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801b706:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	ed93 7a03 	vldr	s14, [r3, #12]
 801b70e:	68bb      	ldr	r3, [r7, #8]
 801b710:	edd3 7a03 	vldr	s15, [r3, #12]
 801b714:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801b718:	ee16 0a90 	vmov	r0, s13
 801b71c:	f7e4 ff1e 	bl	800055c <__aeabi_f2d>
 801b720:	4602      	mov	r2, r0
 801b722:	460b      	mov	r3, r1
 801b724:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801b728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b72c:	68f9      	ldr	r1, [r7, #12]
 801b72e:	4618      	mov	r0, r3
 801b730:	f7ff fa25 	bl	801ab7e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801b734:	f107 0310 	add.w	r3, r7, #16
 801b738:	68b9      	ldr	r1, [r7, #8]
 801b73a:	4618      	mov	r0, r3
 801b73c:	f7ff fa1f 	bl	801ab7e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	f103 0214 	add.w	r2, r3, #20
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	3318      	adds	r3, #24
 801b74a:	4619      	mov	r1, r3
 801b74c:	4610      	mov	r0, r2
 801b74e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801b752:	f7fe fcc5 	bl	801a0e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801b756:	f7fe fe8c 	bl	801a472 <_ZNSt14numeric_limitsIhE3minEv>
 801b75a:	4603      	mov	r3, r0
 801b75c:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801b75e:	68bb      	ldr	r3, [r7, #8]
 801b760:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b762:	68bb      	ldr	r3, [r7, #8]
 801b764:	edd3 7a03 	vldr	s15, [r3, #12]
 801b768:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801b76c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b770:	eeb0 0a66 	vmov.f32	s0, s13
 801b774:	f004 fcda 	bl	802012c <roundf>
 801b778:	eef0 7a40 	vmov.f32	s15, s0
 801b77c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b780:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801b784:	4423      	add	r3, r4
 801b786:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b788:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801b78c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b790:	4611      	mov	r1, r2
 801b792:	4618      	mov	r0, r3
 801b794:	f7ff f944 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801b798:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801b79a:	681a      	ldr	r2, [r3, #0]
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801b7a0:	f7ff fa14 	bl	801abcc <_ZNSt14numeric_limitsIfE8infinityEv>
 801b7a4:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b7a8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b7ac:	eef4 7a47 	vcmp.f32	s15, s14
 801b7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7b4:	d103      	bne.n	801b7be <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801b7b6:	f7fe fe64 	bl	801a482 <_ZNSt14numeric_limitsIhE3maxEv>
 801b7ba:	4603      	mov	r3, r0
 801b7bc:	e022      	b.n	801b804 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801b7be:	f7fe fe60 	bl	801a482 <_ZNSt14numeric_limitsIhE3maxEv>
 801b7c2:	4603      	mov	r3, r0
 801b7c4:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801b7c6:	68bb      	ldr	r3, [r7, #8]
 801b7c8:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801b7ca:	68bb      	ldr	r3, [r7, #8]
 801b7cc:	edd3 7a03 	vldr	s15, [r3, #12]
 801b7d0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801b7d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b7d8:	eeb0 0a66 	vmov.f32	s0, s13
 801b7dc:	f004 fca6 	bl	802012c <roundf>
 801b7e0:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801b7e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b7e8:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801b7ec:	4423      	add	r3, r4
 801b7ee:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801b7f0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b7f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b7f8:	4611      	mov	r1, r2
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f7ff f8fc 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801b800:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b802:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801b804:	687a      	ldr	r2, [r7, #4]
 801b806:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	691a      	ldr	r2, [r3, #16]
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801b810:	68bb      	ldr	r3, [r7, #8]
 801b812:	691a      	ldr	r2, [r3, #16]
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801b818:	f107 0310 	add.w	r3, r7, #16
 801b81c:	4618      	mov	r0, r3
 801b81e:	f7ff f934 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801b822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b826:	4618      	mov	r0, r3
 801b828:	f7ff f92f 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
}
 801b82c:	bf00      	nop
 801b82e:	3764      	adds	r7, #100	; 0x64
 801b830:	46bd      	mov	sp, r7
 801b832:	bd90      	pop	{r4, r7, pc}

0801b834 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801b834:	b580      	push	{r7, lr}
 801b836:	b082      	sub	sp, #8
 801b838:	af00      	add	r7, sp, #0
 801b83a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d101      	bne.n	801b846 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 801b842:	f006 ffa7 	bl	8022794 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	681b      	ldr	r3, [r3, #0]
}
 801b84a:	4618      	mov	r0, r3
 801b84c:	3708      	adds	r7, #8
 801b84e:	46bd      	mov	sp, r7
 801b850:	bd80      	pop	{r7, pc}

0801b852 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801b852:	b480      	push	{r7}
 801b854:	b083      	sub	sp, #12
 801b856:	af00      	add	r7, sp, #0
 801b858:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d002      	beq.n	801b866 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	e000      	b.n	801b868 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 801b866:	2300      	movs	r3, #0
}
 801b868:	4618      	mov	r0, r3
 801b86a:	370c      	adds	r7, #12
 801b86c:	46bd      	mov	sp, r7
 801b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b872:	4770      	bx	lr

0801b874 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801b874:	b580      	push	{r7, lr}
 801b876:	b082      	sub	sp, #8
 801b878:	af00      	add	r7, sp, #0
 801b87a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d101      	bne.n	801b886 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 801b882:	f006 ff87 	bl	8022794 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	681b      	ldr	r3, [r3, #0]
}
 801b88a:	4618      	mov	r0, r3
 801b88c:	3708      	adds	r7, #8
 801b88e:	46bd      	mov	sp, r7
 801b890:	bd80      	pop	{r7, pc}

0801b892 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801b892:	b480      	push	{r7}
 801b894:	b083      	sub	sp, #12
 801b896:	af00      	add	r7, sp, #0
 801b898:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d002      	beq.n	801b8a6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	e000      	b.n	801b8a8 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 801b8a6:	2300      	movs	r3, #0
}
 801b8a8:	4618      	mov	r0, r3
 801b8aa:	370c      	adds	r7, #12
 801b8ac:	46bd      	mov	sp, r7
 801b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8b2:	4770      	bx	lr

0801b8b4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801b8b4:	b590      	push	{r4, r7, lr}
 801b8b6:	b089      	sub	sp, #36	; 0x24
 801b8b8:	af00      	add	r7, sp, #0
 801b8ba:	60f8      	str	r0, [r7, #12]
 801b8bc:	60b9      	str	r1, [r7, #8]
 801b8be:	607a      	str	r2, [r7, #4]
 801b8c0:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801b8c2:	6879      	ldr	r1, [r7, #4]
 801b8c4:	68b8      	ldr	r0, [r7, #8]
 801b8c6:	f7ff fa5e 	bl	801ad86 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801b8ca:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	61fb      	str	r3, [r7, #28]
 801b8d0:	69fa      	ldr	r2, [r7, #28]
 801b8d2:	69bb      	ldr	r3, [r7, #24]
 801b8d4:	429a      	cmp	r2, r3
 801b8d6:	da35      	bge.n	801b944 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801b8d8:	69fb      	ldr	r3, [r7, #28]
 801b8da:	683a      	ldr	r2, [r7, #0]
 801b8dc:	4413      	add	r3, r2
 801b8de:	f993 3000 	ldrsb.w	r3, [r3]
 801b8e2:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801b8e8:	68fb      	ldr	r3, [r7, #12]
 801b8ea:	68db      	ldr	r3, [r3, #12]
 801b8ec:	697a      	ldr	r2, [r7, #20]
 801b8ee:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801b8f8:	461a      	mov	r2, r3
 801b8fa:	f7ff fa79 	bl	801adf0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801b8fe:	4603      	mov	r3, r0
        data.params.output_offset +
 801b900:	4423      	add	r3, r4
    int32_t clamped =
 801b902:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	3304      	adds	r3, #4
 801b908:	f107 0210 	add.w	r2, r7, #16
 801b90c:	4611      	mov	r1, r2
 801b90e:	4618      	mov	r0, r3
 801b910:	f7ff f886 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801b914:	4603      	mov	r3, r0
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	3308      	adds	r3, #8
 801b91e:	f107 0210 	add.w	r2, r7, #16
 801b922:	4611      	mov	r1, r2
 801b924:	4618      	mov	r0, r3
 801b926:	f7ff f867 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801b92a:	4603      	mov	r3, r0
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801b930:	6939      	ldr	r1, [r7, #16]
 801b932:	69fb      	ldr	r3, [r7, #28]
 801b934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b936:	4413      	add	r3, r2
 801b938:	b24a      	sxtb	r2, r1
 801b93a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801b93c:	69fb      	ldr	r3, [r7, #28]
 801b93e:	3301      	adds	r3, #1
 801b940:	61fb      	str	r3, [r7, #28]
 801b942:	e7c5      	b.n	801b8d0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801b944:	bf00      	nop
 801b946:	3724      	adds	r7, #36	; 0x24
 801b948:	46bd      	mov	sp, r7
 801b94a:	bd90      	pop	{r4, r7, pc}

0801b94c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801b94c:	b580      	push	{r7, lr}
 801b94e:	b082      	sub	sp, #8
 801b950:	af00      	add	r7, sp, #0
 801b952:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d101      	bne.n	801b95e <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 801b95a:	f006 ff1b 	bl	8022794 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	681b      	ldr	r3, [r3, #0]
}
 801b962:	4618      	mov	r0, r3
 801b964:	3708      	adds	r7, #8
 801b966:	46bd      	mov	sp, r7
 801b968:	bd80      	pop	{r7, pc}

0801b96a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801b96a:	b480      	push	{r7}
 801b96c:	b083      	sub	sp, #12
 801b96e:	af00      	add	r7, sp, #0
 801b970:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	2b00      	cmp	r3, #0
 801b976:	d002      	beq.n	801b97e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	e000      	b.n	801b980 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 801b97e:	2300      	movs	r3, #0
}
 801b980:	4618      	mov	r0, r3
 801b982:	370c      	adds	r7, #12
 801b984:	46bd      	mov	sp, r7
 801b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b98a:	4770      	bx	lr

0801b98c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801b98c:	b590      	push	{r4, r7, lr}
 801b98e:	b089      	sub	sp, #36	; 0x24
 801b990:	af00      	add	r7, sp, #0
 801b992:	60f8      	str	r0, [r7, #12]
 801b994:	60b9      	str	r1, [r7, #8]
 801b996:	607a      	str	r2, [r7, #4]
 801b998:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801b99a:	6879      	ldr	r1, [r7, #4]
 801b99c:	68b8      	ldr	r0, [r7, #8]
 801b99e:	f7ff f9f2 	bl	801ad86 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801b9a2:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	61fb      	str	r3, [r7, #28]
 801b9a8:	69fa      	ldr	r2, [r7, #28]
 801b9aa:	69bb      	ldr	r3, [r7, #24]
 801b9ac:	429a      	cmp	r2, r3
 801b9ae:	da34      	bge.n	801ba1a <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801b9b0:	69fb      	ldr	r3, [r7, #28]
 801b9b2:	683a      	ldr	r2, [r7, #0]
 801b9b4:	4413      	add	r3, r2
 801b9b6:	781b      	ldrb	r3, [r3, #0]
 801b9b8:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	68db      	ldr	r3, [r3, #12]
 801b9c2:	697a      	ldr	r2, [r7, #20]
 801b9c4:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801b9c6:	68fb      	ldr	r3, [r7, #12]
 801b9c8:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801b9ce:	461a      	mov	r2, r3
 801b9d0:	f7ff fa0e 	bl	801adf0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801b9d4:	4603      	mov	r3, r0
        data.params.output_offset +
 801b9d6:	4423      	add	r3, r4
    int32_t clamped =
 801b9d8:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	3304      	adds	r3, #4
 801b9de:	f107 0210 	add.w	r2, r7, #16
 801b9e2:	4611      	mov	r1, r2
 801b9e4:	4618      	mov	r0, r3
 801b9e6:	f7ff f81b 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801b9ea:	4603      	mov	r3, r0
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	3308      	adds	r3, #8
 801b9f4:	f107 0210 	add.w	r2, r7, #16
 801b9f8:	4611      	mov	r1, r2
 801b9fa:	4618      	mov	r0, r3
 801b9fc:	f7fe fffc 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801ba00:	4603      	mov	r3, r0
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801ba06:	6939      	ldr	r1, [r7, #16]
 801ba08:	69fb      	ldr	r3, [r7, #28]
 801ba0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ba0c:	4413      	add	r3, r2
 801ba0e:	b2ca      	uxtb	r2, r1
 801ba10:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801ba12:	69fb      	ldr	r3, [r7, #28]
 801ba14:	3301      	adds	r3, #1
 801ba16:	61fb      	str	r3, [r7, #28]
 801ba18:	e7c6      	b.n	801b9a8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801ba1a:	bf00      	nop
 801ba1c:	3724      	adds	r7, #36	; 0x24
 801ba1e:	46bd      	mov	sp, r7
 801ba20:	bd90      	pop	{r4, r7, pc}

0801ba22 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801ba22:	b5b0      	push	{r4, r5, r7, lr}
 801ba24:	b088      	sub	sp, #32
 801ba26:	af00      	add	r7, sp, #0
 801ba28:	ed87 0a03 	vstr	s0, [r7, #12]
 801ba2c:	edc7 0a02 	vstr	s1, [r7, #8]
 801ba30:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801ba32:	ed97 7a03 	vldr	s14, [r7, #12]
 801ba36:	edd7 7a02 	vldr	s15, [r7, #8]
 801ba3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ba3e:	ee16 0a90 	vmov	r0, s13
 801ba42:	f7e4 fd8b 	bl	800055c <__aeabi_f2d>
 801ba46:	4602      	mov	r2, r0
 801ba48:	460b      	mov	r3, r1
 801ba4a:	ec43 2b10 	vmov	d0, r2, r3
 801ba4e:	f004 fa73 	bl	801ff38 <round>
 801ba52:	ec55 4b10 	vmov	r4, r5, d0
 801ba56:	6878      	ldr	r0, [r7, #4]
 801ba58:	f7e4 fd6e 	bl	8000538 <__aeabi_i2d>
 801ba5c:	4602      	mov	r2, r0
 801ba5e:	460b      	mov	r3, r1
 801ba60:	4620      	mov	r0, r4
 801ba62:	4629      	mov	r1, r5
 801ba64:	f7e4 fc1c 	bl	80002a0 <__adddf3>
 801ba68:	4602      	mov	r2, r0
 801ba6a:	460b      	mov	r3, r1
 801ba6c:	4610      	mov	r0, r2
 801ba6e:	4619      	mov	r1, r3
 801ba70:	f7e5 f87c 	bl	8000b6c <__aeabi_d2iz>
 801ba74:	4603      	mov	r3, r0
 801ba76:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801ba78:	f7fe fcea 	bl	801a450 <_ZNSt14numeric_limitsIaE3minEv>
 801ba7c:	4603      	mov	r3, r0
 801ba7e:	61bb      	str	r3, [r7, #24]
 801ba80:	f107 0214 	add.w	r2, r7, #20
 801ba84:	f107 0318 	add.w	r3, r7, #24
 801ba88:	4611      	mov	r1, r2
 801ba8a:	4618      	mov	r0, r3
 801ba8c:	f7fe ffc8 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801ba90:	4603      	mov	r3, r0
  result =
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801ba96:	f7fe fce4 	bl	801a462 <_ZNSt14numeric_limitsIaE3maxEv>
 801ba9a:	4603      	mov	r3, r0
 801ba9c:	61fb      	str	r3, [r7, #28]
 801ba9e:	f107 0214 	add.w	r2, r7, #20
 801baa2:	f107 031c 	add.w	r3, r7, #28
 801baa6:	4611      	mov	r1, r2
 801baa8:	4618      	mov	r0, r3
 801baaa:	f7fe ffa5 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801baae:	4603      	mov	r3, r0
  result =
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	617b      	str	r3, [r7, #20]
  return result;
 801bab4:	697b      	ldr	r3, [r7, #20]
 801bab6:	b25b      	sxtb	r3, r3
}
 801bab8:	4618      	mov	r0, r3
 801baba:	3720      	adds	r7, #32
 801babc:	46bd      	mov	sp, r7
 801babe:	bdb0      	pop	{r4, r5, r7, pc}

0801bac0 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801bac0:	b5b0      	push	{r4, r5, r7, lr}
 801bac2:	b088      	sub	sp, #32
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	ed87 0a03 	vstr	s0, [r7, #12]
 801baca:	edc7 0a02 	vstr	s1, [r7, #8]
 801bace:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801bad0:	ed97 7a03 	vldr	s14, [r7, #12]
 801bad4:	edd7 7a02 	vldr	s15, [r7, #8]
 801bad8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801badc:	ee16 0a90 	vmov	r0, s13
 801bae0:	f7e4 fd3c 	bl	800055c <__aeabi_f2d>
 801bae4:	4602      	mov	r2, r0
 801bae6:	460b      	mov	r3, r1
 801bae8:	ec43 2b10 	vmov	d0, r2, r3
 801baec:	f004 fa24 	bl	801ff38 <round>
 801baf0:	ec55 4b10 	vmov	r4, r5, d0
 801baf4:	6878      	ldr	r0, [r7, #4]
 801baf6:	f7e4 fd1f 	bl	8000538 <__aeabi_i2d>
 801bafa:	4602      	mov	r2, r0
 801bafc:	460b      	mov	r3, r1
 801bafe:	4620      	mov	r0, r4
 801bb00:	4629      	mov	r1, r5
 801bb02:	f7e4 fbcd 	bl	80002a0 <__adddf3>
 801bb06:	4602      	mov	r2, r0
 801bb08:	460b      	mov	r3, r1
 801bb0a:	4610      	mov	r0, r2
 801bb0c:	4619      	mov	r1, r3
 801bb0e:	f7e5 f82d 	bl	8000b6c <__aeabi_d2iz>
 801bb12:	4603      	mov	r3, r0
 801bb14:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801bb16:	f7fe fcac 	bl	801a472 <_ZNSt14numeric_limitsIhE3minEv>
 801bb1a:	4603      	mov	r3, r0
 801bb1c:	61bb      	str	r3, [r7, #24]
 801bb1e:	f107 0214 	add.w	r2, r7, #20
 801bb22:	f107 0318 	add.w	r3, r7, #24
 801bb26:	4611      	mov	r1, r2
 801bb28:	4618      	mov	r0, r3
 801bb2a:	f7fe ff79 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801bb2e:	4603      	mov	r3, r0
  result =
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801bb34:	f7fe fca5 	bl	801a482 <_ZNSt14numeric_limitsIhE3maxEv>
 801bb38:	4603      	mov	r3, r0
 801bb3a:	61fb      	str	r3, [r7, #28]
 801bb3c:	f107 0214 	add.w	r2, r7, #20
 801bb40:	f107 031c 	add.w	r3, r7, #28
 801bb44:	4611      	mov	r1, r2
 801bb46:	4618      	mov	r0, r3
 801bb48:	f7fe ff56 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801bb4c:	4603      	mov	r3, r0
  result =
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	617b      	str	r3, [r7, #20]
  return result;
 801bb52:	697b      	ldr	r3, [r7, #20]
 801bb54:	b2db      	uxtb	r3, r3
}
 801bb56:	4618      	mov	r0, r3
 801bb58:	3720      	adds	r7, #32
 801bb5a:	46bd      	mov	sp, r7
 801bb5c:	bdb0      	pop	{r4, r5, r7, pc}

0801bb5e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801bb5e:	b580      	push	{r7, lr}
 801bb60:	b088      	sub	sp, #32
 801bb62:	af00      	add	r7, sp, #0
 801bb64:	60ba      	str	r2, [r7, #8]
 801bb66:	607b      	str	r3, [r7, #4]
 801bb68:	4603      	mov	r3, r0
 801bb6a:	73fb      	strb	r3, [r7, #15]
 801bb6c:	460b      	mov	r3, r1
 801bb6e:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801bb70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bb72:	68b8      	ldr	r0, [r7, #8]
 801bb74:	f7ff f907 	bl	801ad86 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801bb78:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801bb7a:	2300      	movs	r3, #0
 801bb7c:	61fb      	str	r3, [r7, #28]
 801bb7e:	69fa      	ldr	r2, [r7, #28]
 801bb80:	69bb      	ldr	r3, [r7, #24]
 801bb82:	429a      	cmp	r2, r3
 801bb84:	da26      	bge.n	801bbd4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 801bb86:	69fb      	ldr	r3, [r7, #28]
 801bb88:	687a      	ldr	r2, [r7, #4]
 801bb8a:	4413      	add	r3, r2
 801bb8c:	781b      	ldrb	r3, [r3, #0]
 801bb8e:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801bb90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801bb94:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801bb98:	429a      	cmp	r2, r3
 801bb9a:	dd04      	ble.n	801bba6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 801bb9c:	f107 030e 	add.w	r3, r7, #14
 801bba0:	f993 3000 	ldrsb.w	r3, [r3]
 801bba4:	e00c      	b.n	801bbc0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801bba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bbaa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801bbae:	429a      	cmp	r2, r3
 801bbb0:	da04      	bge.n	801bbbc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 801bbb2:	f107 030f 	add.w	r3, r7, #15
 801bbb6:	f993 3000 	ldrsb.w	r3, [r3]
 801bbba:	e001      	b.n	801bbc0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801bbbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bbc0:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801bbc2:	69fb      	ldr	r3, [r7, #28]
 801bbc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bbc6:	4413      	add	r3, r2
 801bbc8:	7dba      	ldrb	r2, [r7, #22]
 801bbca:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801bbcc:	69fb      	ldr	r3, [r7, #28]
 801bbce:	3301      	adds	r3, #1
 801bbd0:	61fb      	str	r3, [r7, #28]
 801bbd2:	e7d4      	b.n	801bb7e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801bbd4:	bf00      	nop
 801bbd6:	3720      	adds	r7, #32
 801bbd8:	46bd      	mov	sp, r7
 801bbda:	bd80      	pop	{r7, pc}

0801bbdc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801bbdc:	b580      	push	{r7, lr}
 801bbde:	b088      	sub	sp, #32
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	60ba      	str	r2, [r7, #8]
 801bbe4:	607b      	str	r3, [r7, #4]
 801bbe6:	4603      	mov	r3, r0
 801bbe8:	73fb      	strb	r3, [r7, #15]
 801bbea:	460b      	mov	r3, r1
 801bbec:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801bbee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bbf0:	68b8      	ldr	r0, [r7, #8]
 801bbf2:	f7ff f8c8 	bl	801ad86 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801bbf6:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801bbf8:	2300      	movs	r3, #0
 801bbfa:	61fb      	str	r3, [r7, #28]
 801bbfc:	69fa      	ldr	r2, [r7, #28]
 801bbfe:	69bb      	ldr	r3, [r7, #24]
 801bc00:	429a      	cmp	r2, r3
 801bc02:	da1f      	bge.n	801bc44 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 801bc04:	69fb      	ldr	r3, [r7, #28]
 801bc06:	687a      	ldr	r2, [r7, #4]
 801bc08:	4413      	add	r3, r2
 801bc0a:	781b      	ldrb	r3, [r3, #0]
 801bc0c:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801bc0e:	7bbb      	ldrb	r3, [r7, #14]
 801bc10:	7dfa      	ldrb	r2, [r7, #23]
 801bc12:	429a      	cmp	r2, r3
 801bc14:	d903      	bls.n	801bc1e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 801bc16:	f107 030e 	add.w	r3, r7, #14
 801bc1a:	781b      	ldrb	r3, [r3, #0]
 801bc1c:	e008      	b.n	801bc30 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801bc1e:	7bfb      	ldrb	r3, [r7, #15]
 801bc20:	7dfa      	ldrb	r2, [r7, #23]
 801bc22:	429a      	cmp	r2, r3
 801bc24:	d203      	bcs.n	801bc2e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 801bc26:	f107 030f 	add.w	r3, r7, #15
 801bc2a:	781b      	ldrb	r3, [r3, #0]
 801bc2c:	e000      	b.n	801bc30 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801bc2e:	7dfb      	ldrb	r3, [r7, #23]
 801bc30:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801bc32:	69fb      	ldr	r3, [r7, #28]
 801bc34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bc36:	4413      	add	r3, r2
 801bc38:	7dba      	ldrb	r2, [r7, #22]
 801bc3a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801bc3c:	69fb      	ldr	r3, [r7, #28]
 801bc3e:	3301      	adds	r3, #1
 801bc40:	61fb      	str	r3, [r7, #28]
 801bc42:	e7db      	b.n	801bbfc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801bc44:	bf00      	nop
 801bc46:	3720      	adds	r7, #32
 801bc48:	46bd      	mov	sp, r7
 801bc4a:	bd80      	pop	{r7, pc}

0801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 801bc4c:	b480      	push	{r7}
 801bc4e:	b083      	sub	sp, #12
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	6078      	str	r0, [r7, #4]
  return x;
 801bc54:	687b      	ldr	r3, [r7, #4]
}
 801bc56:	4618      	mov	r0, r3
 801bc58:	370c      	adds	r7, #12
 801bc5a:	46bd      	mov	sp, r7
 801bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc60:	4770      	bx	lr

0801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 801bc62:	b480      	push	{r7}
 801bc64:	b083      	sub	sp, #12
 801bc66:	af00      	add	r7, sp, #0
 801bc68:	6078      	str	r0, [r7, #4]
 801bc6a:	6039      	str	r1, [r7, #0]
  return a & b;
 801bc6c:	687a      	ldr	r2, [r7, #4]
 801bc6e:	683b      	ldr	r3, [r7, #0]
 801bc70:	4013      	ands	r3, r2
}
 801bc72:	4618      	mov	r0, r3
 801bc74:	370c      	adds	r7, #12
 801bc76:	46bd      	mov	sp, r7
 801bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc7c:	4770      	bx	lr

0801bc7e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 801bc7e:	b480      	push	{r7}
 801bc80:	b083      	sub	sp, #12
 801bc82:	af00      	add	r7, sp, #0
 801bc84:	6078      	str	r0, [r7, #4]
 801bc86:	6039      	str	r1, [r7, #0]
  return a >> offset;
 801bc88:	687a      	ldr	r2, [r7, #4]
 801bc8a:	683b      	ldr	r3, [r7, #0]
 801bc8c:	fa42 f303 	asr.w	r3, r2, r3
}
 801bc90:	4618      	mov	r0, r3
 801bc92:	370c      	adds	r7, #12
 801bc94:	46bd      	mov	sp, r7
 801bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc9a:	4770      	bx	lr

0801bc9c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 801bc9c:	b580      	push	{r7, lr}
 801bc9e:	b082      	sub	sp, #8
 801bca0:	af00      	add	r7, sp, #0
 801bca2:	6078      	str	r0, [r7, #4]
 801bca4:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 801bca6:	687a      	ldr	r2, [r7, #4]
 801bca8:	683b      	ldr	r3, [r7, #0]
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	bfb4      	ite	lt
 801bcae:	2301      	movlt	r3, #1
 801bcb0:	2300      	movge	r3, #0
 801bcb2:	b2db      	uxtb	r3, r3
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	f000 f827 	bl	801bd08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801bcba:	4603      	mov	r3, r0
}
 801bcbc:	4618      	mov	r0, r3
 801bcbe:	3708      	adds	r7, #8
 801bcc0:	46bd      	mov	sp, r7
 801bcc2:	bd80      	pop	{r7, pc}

0801bcc4 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 801bcc4:	b480      	push	{r7}
 801bcc6:	b083      	sub	sp, #12
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	6078      	str	r0, [r7, #4]
 801bccc:	6039      	str	r1, [r7, #0]
  return a + b;
 801bcce:	687a      	ldr	r2, [r7, #4]
 801bcd0:	683b      	ldr	r3, [r7, #0]
 801bcd2:	4413      	add	r3, r2
}
 801bcd4:	4618      	mov	r0, r3
 801bcd6:	370c      	adds	r7, #12
 801bcd8:	46bd      	mov	sp, r7
 801bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcde:	4770      	bx	lr

0801bce0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 801bce0:	b580      	push	{r7, lr}
 801bce2:	b082      	sub	sp, #8
 801bce4:	af00      	add	r7, sp, #0
 801bce6:	6078      	str	r0, [r7, #4]
 801bce8:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 801bcea:	687a      	ldr	r2, [r7, #4]
 801bcec:	683b      	ldr	r3, [r7, #0]
 801bcee:	429a      	cmp	r2, r3
 801bcf0:	bfcc      	ite	gt
 801bcf2:	2301      	movgt	r3, #1
 801bcf4:	2300      	movle	r3, #0
 801bcf6:	b2db      	uxtb	r3, r3
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f000 f805 	bl	801bd08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801bcfe:	4603      	mov	r3, r0
}
 801bd00:	4618      	mov	r0, r3
 801bd02:	3708      	adds	r7, #8
 801bd04:	46bd      	mov	sp, r7
 801bd06:	bd80      	pop	{r7, pc}

0801bd08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 801bd08:	b580      	push	{r7, lr}
 801bd0a:	b082      	sub	sp, #8
 801bd0c:	af00      	add	r7, sp, #0
 801bd0e:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d004      	beq.n	801bd20 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 801bd16:	2000      	movs	r0, #0
 801bd18:	f000 f807 	bl	801bd2a <_ZN8gemmlowp6BitNotIlEET_S1_>
 801bd1c:	4603      	mov	r3, r0
 801bd1e:	e000      	b.n	801bd22 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 801bd20:	2300      	movs	r3, #0
}
 801bd22:	4618      	mov	r0, r3
 801bd24:	3708      	adds	r7, #8
 801bd26:	46bd      	mov	sp, r7
 801bd28:	bd80      	pop	{r7, pc}

0801bd2a <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 801bd2a:	b480      	push	{r7}
 801bd2c:	b083      	sub	sp, #12
 801bd2e:	af00      	add	r7, sp, #0
 801bd30:	6078      	str	r0, [r7, #4]
  return ~a;
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	43db      	mvns	r3, r3
}
 801bd36:	4618      	mov	r0, r3
 801bd38:	370c      	adds	r7, #12
 801bd3a:	46bd      	mov	sp, r7
 801bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd40:	4770      	bx	lr

0801bd42 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 801bd42:	b480      	push	{r7}
 801bd44:	b083      	sub	sp, #12
 801bd46:	af00      	add	r7, sp, #0
 801bd48:	6078      	str	r0, [r7, #4]
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	681b      	ldr	r3, [r3, #0]
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	4618      	mov	r0, r3
 801bd52:	370c      	adds	r7, #12
 801bd54:	46bd      	mov	sp, r7
 801bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd5a:	4770      	bx	lr

0801bd5c <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 801bd5c:	b480      	push	{r7}
 801bd5e:	b083      	sub	sp, #12
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	685b      	ldr	r3, [r3, #4]
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	370c      	adds	r7, #12
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd74:	4770      	bx	lr

0801bd76 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801bd76:	b580      	push	{r7, lr}
 801bd78:	b082      	sub	sp, #8
 801bd7a:	af00      	add	r7, sp, #0
 801bd7c:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d101      	bne.n	801bd88 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 801bd84:	f006 fd06 	bl	8022794 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	681b      	ldr	r3, [r3, #0]
}
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	3708      	adds	r7, #8
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd80      	pop	{r7, pc}

0801bd94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 801bd94:	b590      	push	{r4, r7, lr}
 801bd96:	b087      	sub	sp, #28
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	60f8      	str	r0, [r7, #12]
 801bd9c:	60b9      	str	r1, [r7, #8]
 801bd9e:	607a      	str	r2, [r7, #4]
 801bda0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 801bda2:	68b9      	ldr	r1, [r7, #8]
 801bda4:	68f8      	ldr	r0, [r7, #12]
 801bda6:	f7fe ff93 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bdaa:	4604      	mov	r4, r0
 801bdac:	6839      	ldr	r1, [r7, #0]
 801bdae:	6878      	ldr	r0, [r7, #4]
 801bdb0:	f7fe ff8e 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bdb4:	4603      	mov	r3, r0
 801bdb6:	429c      	cmp	r4, r3
 801bdb8:	d001      	beq.n	801bdbe <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 801bdba:	f006 fceb 	bl	8022794 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 801bdbe:	68b9      	ldr	r1, [r7, #8]
 801bdc0:	68f8      	ldr	r0, [r7, #12]
 801bdc2:	f7fe ff85 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bdc6:	4603      	mov	r3, r0
 801bdc8:	613b      	str	r3, [r7, #16]
 801bdca:	6839      	ldr	r1, [r7, #0]
 801bdcc:	6878      	ldr	r0, [r7, #4]
 801bdce:	f7fe ff7f 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bdd2:	4603      	mov	r3, r0
 801bdd4:	617b      	str	r3, [r7, #20]
 801bdd6:	f107 0214 	add.w	r2, r7, #20
 801bdda:	f107 0310 	add.w	r3, r7, #16
 801bdde:	4611      	mov	r1, r2
 801bde0:	4618      	mov	r0, r3
 801bde2:	f7fe fe09 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801bde6:	4603      	mov	r3, r0
 801bde8:	681b      	ldr	r3, [r3, #0]
}
 801bdea:	4618      	mov	r0, r3
 801bdec:	371c      	adds	r7, #28
 801bdee:	46bd      	mov	sp, r7
 801bdf0:	bd90      	pop	{r4, r7, pc}

0801bdf2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801bdf2:	b580      	push	{r7, lr}
 801bdf4:	b082      	sub	sp, #8
 801bdf6:	af00      	add	r7, sp, #0
 801bdf8:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d101      	bne.n	801be04 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 801be00:	f006 fcc8 	bl	8022794 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	681b      	ldr	r3, [r3, #0]
}
 801be08:	4618      	mov	r0, r3
 801be0a:	3708      	adds	r7, #8
 801be0c:	46bd      	mov	sp, r7
 801be0e:	bd80      	pop	{r7, pc}

0801be10 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 801be10:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801be14:	b090      	sub	sp, #64	; 0x40
 801be16:	af00      	add	r7, sp, #0
 801be18:	61f8      	str	r0, [r7, #28]
 801be1a:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 801be1c:	69fb      	ldr	r3, [r7, #28]
 801be1e:	17da      	asrs	r2, r3, #31
 801be20:	613b      	str	r3, [r7, #16]
 801be22:	617a      	str	r2, [r7, #20]
 801be24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801be28:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 801be2c:	69bb      	ldr	r3, [r7, #24]
 801be2e:	17da      	asrs	r2, r3, #31
 801be30:	60bb      	str	r3, [r7, #8]
 801be32:	60fa      	str	r2, [r7, #12]
 801be34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801be38:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 801be3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801be40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801be44:	1886      	adds	r6, r0, r2
 801be46:	603e      	str	r6, [r7, #0]
 801be48:	eb41 0303 	adc.w	r3, r1, r3
 801be4c:	607b      	str	r3, [r7, #4]
 801be4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801be52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 801be56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	db04      	blt.n	801be68 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 801be5e:	f04f 0201 	mov.w	r2, #1
 801be62:	f04f 0300 	mov.w	r3, #0
 801be66:	e003      	b.n	801be70 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 801be68:	f04f 32ff 	mov.w	r2, #4294967295
 801be6c:	f04f 33ff 	mov.w	r3, #4294967295
 801be70:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 801be74:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801be78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801be7c:	eb10 0802 	adds.w	r8, r0, r2
 801be80:	eb41 0903 	adc.w	r9, r1, r3
 801be84:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 801be88:	2200      	movs	r2, #0
 801be8a:	469a      	mov	sl, r3
 801be8c:	4693      	mov	fp, r2
 801be8e:	eb1a 0408 	adds.w	r4, sl, r8
 801be92:	eb4b 0509 	adc.w	r5, fp, r9
 801be96:	f04f 0200 	mov.w	r2, #0
 801be9a:	f04f 0300 	mov.w	r3, #0
 801be9e:	0862      	lsrs	r2, r4, #1
 801bea0:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801bea4:	106b      	asrs	r3, r5, #1
 801bea6:	4613      	mov	r3, r2
}
 801bea8:	4618      	mov	r0, r3
 801beaa:	3740      	adds	r7, #64	; 0x40
 801beac:	46bd      	mov	sp, r7
 801beae:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801beb2:	4770      	bx	lr

0801beb4 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 801beb4:	b580      	push	{r7, lr}
 801beb6:	b084      	sub	sp, #16
 801beb8:	af00      	add	r7, sp, #0
 801beba:	60f8      	str	r0, [r7, #12]
 801bebc:	60b9      	str	r1, [r7, #8]
 801bebe:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 801bec0:	68fa      	ldr	r2, [r7, #12]
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	fa02 f303 	lsl.w	r3, r2, r3
 801bec8:	68b9      	ldr	r1, [r7, #8]
 801beca:	4618      	mov	r0, r3
 801becc:	f7fe fe8a 	bl	801abe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801bed0:	4603      	mov	r3, r0
}
 801bed2:	4618      	mov	r0, r3
 801bed4:	3710      	adds	r7, #16
 801bed6:	46bd      	mov	sp, r7
 801bed8:	bd80      	pop	{r7, pc}

0801beda <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 801beda:	b580      	push	{r7, lr}
 801bedc:	b088      	sub	sp, #32
 801bede:	af00      	add	r7, sp, #0
 801bee0:	60f8      	str	r0, [r7, #12]
 801bee2:	60b9      	str	r1, [r7, #8]
 801bee4:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	4618      	mov	r0, r3
 801beea:	f000 f821 	bl	801bf30 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801beee:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 801bef0:	68ba      	ldr	r2, [r7, #8]
 801bef2:	69fb      	ldr	r3, [r7, #28]
 801bef4:	1ad2      	subs	r2, r2, r3
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 801befa:	68fa      	ldr	r2, [r7, #12]
 801befc:	69fb      	ldr	r3, [r7, #28]
 801befe:	fa02 f303 	lsl.w	r3, r2, r3
 801bf02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 801bf06:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 801bf08:	69b8      	ldr	r0, [r7, #24]
 801bf0a:	f000 f823 	bl	801bf54 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801bf0e:	4603      	mov	r3, r0
 801bf10:	4618      	mov	r0, r3
 801bf12:	f000 f831 	bl	801bf78 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 801bf16:	4603      	mov	r3, r0
 801bf18:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 801bf1a:	f107 0314 	add.w	r3, r7, #20
 801bf1e:	4618      	mov	r0, r3
 801bf20:	f000 f88a 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bf24:	4603      	mov	r3, r0
 801bf26:	681b      	ldr	r3, [r3, #0]
}
 801bf28:	4618      	mov	r0, r3
 801bf2a:	3720      	adds	r7, #32
 801bf2c:	46bd      	mov	sp, r7
 801bf2e:	bd80      	pop	{r7, pc}

0801bf30 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 801bf30:	b480      	push	{r7}
 801bf32:	b083      	sub	sp, #12
 801bf34:	af00      	add	r7, sp, #0
 801bf36:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d003      	beq.n	801bf46 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 801bf44:	e000      	b.n	801bf48 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 801bf46:	2320      	movs	r3, #32
}
 801bf48:	4618      	mov	r0, r3
 801bf4a:	370c      	adds	r7, #12
 801bf4c:	46bd      	mov	sp, r7
 801bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf52:	4770      	bx	lr

0801bf54 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 801bf54:	b580      	push	{r7, lr}
 801bf56:	b084      	sub	sp, #16
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 801bf5c:	f107 030c 	add.w	r3, r7, #12
 801bf60:	4618      	mov	r0, r3
 801bf62:	f000 f869 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bf66:	4602      	mov	r2, r0
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	6013      	str	r3, [r2, #0]
    return retval;
 801bf6c:	68fb      	ldr	r3, [r7, #12]
  }
 801bf6e:	4618      	mov	r0, r3
 801bf70:	3710      	adds	r7, #16
 801bf72:	46bd      	mov	sp, r7
 801bf74:	bd80      	pop	{r7, pc}
	...

0801bf78 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 801bf78:	b580      	push	{r7, lr}
 801bf7a:	b08a      	sub	sp, #40	; 0x28
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 801bf80:	f000 f879 	bl	801c076 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801bf84:	4603      	mov	r3, r0
 801bf86:	4619      	mov	r1, r3
 801bf88:	6878      	ldr	r0, [r7, #4]
 801bf8a:	f000 f87f 	bl	801c08c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801bf8e:	4603      	mov	r3, r0
 801bf90:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 801bf92:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 801bf96:	f000 f8ab 	bl	801c0f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801bf9a:	4603      	mov	r3, r0
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	f000 f893 	bl	801c0c8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 801bfa6:	4823      	ldr	r0, [pc, #140]	; (801c034 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801bfa8:	f000 f8a2 	bl	801c0f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801bfac:	4603      	mov	r3, r0
 801bfae:	4618      	mov	r0, r3
 801bfb0:	f000 f88a 	bl	801c0c8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801bfb4:	4603      	mov	r3, r0
 801bfb6:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 801bfb8:	69b9      	ldr	r1, [r7, #24]
 801bfba:	6a38      	ldr	r0, [r7, #32]
 801bfbc:	f000 f8a5 	bl	801c10a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801bfc0:	4603      	mov	r3, r0
 801bfc2:	4619      	mov	r1, r3
 801bfc4:	69f8      	ldr	r0, [r7, #28]
 801bfc6:	f000 f8c2 	bl	801c14e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801bfca:	4603      	mov	r3, r0
 801bfcc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801bfce:	2300      	movs	r3, #0
 801bfd0:	627b      	str	r3, [r7, #36]	; 0x24
 801bfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfd4:	2b02      	cmp	r3, #2
 801bfd6:	dc21      	bgt.n	801c01c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 801bfd8:	6979      	ldr	r1, [r7, #20]
 801bfda:	6a38      	ldr	r0, [r7, #32]
 801bfdc:	f000 f895 	bl	801c10a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801bfe0:	4603      	mov	r3, r0
 801bfe2:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 801bfe4:	f000 f8d1 	bl	801c18a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 801bfe8:	4603      	mov	r3, r0
 801bfea:	6939      	ldr	r1, [r7, #16]
 801bfec:	4618      	mov	r0, r3
 801bfee:	f000 f8d5 	bl	801c19c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801bff2:	4603      	mov	r3, r0
 801bff4:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801bff6:	68f9      	ldr	r1, [r7, #12]
 801bff8:	6978      	ldr	r0, [r7, #20]
 801bffa:	f000 f8ed 	bl	801c1d8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801bffe:	4603      	mov	r3, r0
 801c000:	4618      	mov	r0, r3
 801c002:	f000 f90b 	bl	801c21c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801c006:	4603      	mov	r3, r0
 801c008:	4619      	mov	r1, r3
 801c00a:	6978      	ldr	r0, [r7, #20]
 801c00c:	f000 f89f 	bl	801c14e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c010:	4603      	mov	r3, r0
 801c012:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c016:	3301      	adds	r3, #1
 801c018:	627b      	str	r3, [r7, #36]	; 0x24
 801c01a:	e7da      	b.n	801bfd2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 801c01c:	6978      	ldr	r0, [r7, #20]
 801c01e:	f000 f917 	bl	801c250 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 801c022:	4603      	mov	r3, r0
 801c024:	4618      	mov	r0, r3
 801c026:	f000 f929 	bl	801c27c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801c02a:	4603      	mov	r3, r0
}
 801c02c:	4618      	mov	r0, r3
 801c02e:	3728      	adds	r7, #40	; 0x28
 801c030:	46bd      	mov	sp, r7
 801c032:	bd80      	pop	{r7, pc}
 801c034:	c3c3c3c4 	.word	0xc3c3c3c4

0801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 801c038:	b480      	push	{r7}
 801c03a:	b083      	sub	sp, #12
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	4618      	mov	r0, r3
 801c044:	370c      	adds	r7, #12
 801c046:	46bd      	mov	sp, r7
 801c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c04c:	4770      	bx	lr

0801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801c04e:	b590      	push	{r4, r7, lr}
 801c050:	b085      	sub	sp, #20
 801c052:	af00      	add	r7, sp, #0
 801c054:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801c056:	f107 030c 	add.w	r3, r7, #12
 801c05a:	4618      	mov	r0, r3
 801c05c:	f7ff ffec 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c060:	4604      	mov	r4, r0
 801c062:	6878      	ldr	r0, [r7, #4]
 801c064:	f7ff fdf2 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c068:	4603      	mov	r3, r0
 801c06a:	6023      	str	r3, [r4, #0]
    return retval;
 801c06c:	68fb      	ldr	r3, [r7, #12]
  }
 801c06e:	4618      	mov	r0, r3
 801c070:	3714      	adds	r7, #20
 801c072:	46bd      	mov	sp, r7
 801c074:	bd90      	pop	{r4, r7, pc}

0801c076 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 801c076:	b580      	push	{r7, lr}
 801c078:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801c07a:	f000 f927 	bl	801c2cc <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 801c07e:	4603      	mov	r3, r0
 801c080:	4618      	mov	r0, r3
 801c082:	f7ff ffe4 	bl	801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801c086:	4603      	mov	r3, r0
  }
 801c088:	4618      	mov	r0, r3
 801c08a:	bd80      	pop	{r7, pc}

0801c08c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 801c08c:	b590      	push	{r4, r7, lr}
 801c08e:	b083      	sub	sp, #12
 801c090:	af00      	add	r7, sp, #0
 801c092:	6078      	str	r0, [r7, #4]
 801c094:	6039      	str	r1, [r7, #0]
 801c096:	1d3b      	adds	r3, r7, #4
 801c098:	4618      	mov	r0, r3
 801c09a:	f7ff ffcd 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c09e:	4603      	mov	r3, r0
 801c0a0:	681c      	ldr	r4, [r3, #0]
 801c0a2:	463b      	mov	r3, r7
 801c0a4:	4618      	mov	r0, r3
 801c0a6:	f7ff ffc7 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c0aa:	4603      	mov	r3, r0
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	4619      	mov	r1, r3
 801c0b0:	4620      	mov	r0, r4
 801c0b2:	f7ff fead 	bl	801be10 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801c0b6:	4603      	mov	r3, r0
 801c0b8:	4618      	mov	r0, r3
 801c0ba:	f7ff ff4b 	bl	801bf54 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801c0be:	4603      	mov	r3, r0
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	370c      	adds	r7, #12
 801c0c4:	46bd      	mov	sp, r7
 801c0c6:	bd90      	pop	{r4, r7, pc}

0801c0c8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801c0c8:	b590      	push	{r4, r7, lr}
 801c0ca:	b085      	sub	sp, #20
 801c0cc:	af00      	add	r7, sp, #0
 801c0ce:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801c0d0:	f107 030c 	add.w	r3, r7, #12
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	f000 f900 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c0da:	4604      	mov	r4, r0
 801c0dc:	6878      	ldr	r0, [r7, #4]
 801c0de:	f7ff fdb5 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c0e2:	4603      	mov	r3, r0
 801c0e4:	6023      	str	r3, [r4, #0]
    return retval;
 801c0e6:	68fb      	ldr	r3, [r7, #12]
  }
 801c0e8:	4618      	mov	r0, r3
 801c0ea:	3714      	adds	r7, #20
 801c0ec:	46bd      	mov	sp, r7
 801c0ee:	bd90      	pop	{r4, r7, pc}

0801c0f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	b082      	sub	sp, #8
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801c0f8:	2100      	movs	r1, #0
 801c0fa:	6878      	ldr	r0, [r7, #4]
 801c0fc:	f7ff f9e2 	bl	801b4c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801c100:	4603      	mov	r3, r0
}
 801c102:	4618      	mov	r0, r3
 801c104:	3708      	adds	r7, #8
 801c106:	46bd      	mov	sp, r7
 801c108:	bd80      	pop	{r7, pc}

0801c10a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801c10a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c10c:	b085      	sub	sp, #20
 801c10e:	af00      	add	r7, sp, #0
 801c110:	6078      	str	r0, [r7, #4]
 801c112:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801c114:	1d3b      	adds	r3, r7, #4
 801c116:	4618      	mov	r0, r3
 801c118:	f7ff ff8e 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c11c:	4603      	mov	r3, r0
 801c11e:	681d      	ldr	r5, [r3, #0]
 801c120:	463b      	mov	r3, r7
 801c122:	4618      	mov	r0, r3
 801c124:	f000 f8d9 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c128:	4603      	mov	r3, r0
 801c12a:	681e      	ldr	r6, [r3, #0]
 801c12c:	f107 030c 	add.w	r3, r7, #12
 801c130:	4618      	mov	r0, r3
 801c132:	f000 f8d2 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c136:	4604      	mov	r4, r0
 801c138:	4631      	mov	r1, r6
 801c13a:	4628      	mov	r0, r5
 801c13c:	f7fe fd52 	bl	801abe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801c140:	4603      	mov	r3, r0
 801c142:	6023      	str	r3, [r4, #0]
  return c;
 801c144:	68fb      	ldr	r3, [r7, #12]
}
 801c146:	4618      	mov	r0, r3
 801c148:	3714      	adds	r7, #20
 801c14a:	46bd      	mov	sp, r7
 801c14c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c14e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801c14e:	b590      	push	{r4, r7, lr}
 801c150:	b083      	sub	sp, #12
 801c152:	af00      	add	r7, sp, #0
 801c154:	6078      	str	r0, [r7, #4]
 801c156:	6039      	str	r1, [r7, #0]
 801c158:	1d3b      	adds	r3, r7, #4
 801c15a:	4618      	mov	r0, r3
 801c15c:	f000 f8bd 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c160:	4603      	mov	r3, r0
 801c162:	681c      	ldr	r4, [r3, #0]
 801c164:	463b      	mov	r3, r7
 801c166:	4618      	mov	r0, r3
 801c168:	f000 f8b7 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c16c:	4603      	mov	r3, r0
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	4619      	mov	r1, r3
 801c172:	4620      	mov	r0, r4
 801c174:	f7ff fda6 	bl	801bcc4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801c178:	4603      	mov	r3, r0
 801c17a:	4618      	mov	r0, r3
 801c17c:	f000 f8b8 	bl	801c2f0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801c180:	4603      	mov	r3, r0
 801c182:	4618      	mov	r0, r3
 801c184:	370c      	adds	r7, #12
 801c186:	46bd      	mov	sp, r7
 801c188:	bd90      	pop	{r4, r7, pc}

0801c18a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 801c18a:	b580      	push	{r7, lr}
 801c18c:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801c18e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801c192:	f7ff ff99 	bl	801c0c8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801c196:	4603      	mov	r3, r0
  }
 801c198:	4618      	mov	r0, r3
 801c19a:	bd80      	pop	{r7, pc}

0801c19c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801c19c:	b590      	push	{r4, r7, lr}
 801c19e:	b083      	sub	sp, #12
 801c1a0:	af00      	add	r7, sp, #0
 801c1a2:	6078      	str	r0, [r7, #4]
 801c1a4:	6039      	str	r1, [r7, #0]
 801c1a6:	1d3b      	adds	r3, r7, #4
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	f000 f896 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c1ae:	4603      	mov	r3, r0
 801c1b0:	681c      	ldr	r4, [r3, #0]
 801c1b2:	463b      	mov	r3, r7
 801c1b4:	4618      	mov	r0, r3
 801c1b6:	f000 f890 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c1ba:	4603      	mov	r3, r0
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	4619      	mov	r1, r3
 801c1c0:	4620      	mov	r0, r4
 801c1c2:	f000 f875 	bl	801c2b0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801c1c6:	4603      	mov	r3, r0
 801c1c8:	4618      	mov	r0, r3
 801c1ca:	f000 f891 	bl	801c2f0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801c1ce:	4603      	mov	r3, r0
 801c1d0:	4618      	mov	r0, r3
 801c1d2:	370c      	adds	r7, #12
 801c1d4:	46bd      	mov	sp, r7
 801c1d6:	bd90      	pop	{r4, r7, pc}

0801c1d8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801c1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1da:	b085      	sub	sp, #20
 801c1dc:	af00      	add	r7, sp, #0
 801c1de:	6078      	str	r0, [r7, #4]
 801c1e0:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801c1e2:	1d3b      	adds	r3, r7, #4
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	f000 f878 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	681d      	ldr	r5, [r3, #0]
 801c1ee:	463b      	mov	r3, r7
 801c1f0:	4618      	mov	r0, r3
 801c1f2:	f000 f872 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c1f6:	4603      	mov	r3, r0
 801c1f8:	681e      	ldr	r6, [r3, #0]
 801c1fa:	f107 030c 	add.w	r3, r7, #12
 801c1fe:	4618      	mov	r0, r3
 801c200:	f000 f887 	bl	801c312 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801c204:	4604      	mov	r4, r0
 801c206:	4631      	mov	r1, r6
 801c208:	4628      	mov	r0, r5
 801c20a:	f7fe fceb 	bl	801abe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801c20e:	4603      	mov	r3, r0
 801c210:	6023      	str	r3, [r4, #0]
  return c;
 801c212:	68fb      	ldr	r3, [r7, #12]
}
 801c214:	4618      	mov	r0, r3
 801c216:	3714      	adds	r7, #20
 801c218:	46bd      	mov	sp, r7
 801c21a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c21c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801c21c:	b5b0      	push	{r4, r5, r7, lr}
 801c21e:	b084      	sub	sp, #16
 801c220:	af00      	add	r7, sp, #0
 801c222:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801c224:	1d3b      	adds	r3, r7, #4
 801c226:	4618      	mov	r0, r3
 801c228:	f000 f873 	bl	801c312 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801c22c:	4603      	mov	r3, r0
 801c22e:	681d      	ldr	r5, [r3, #0]
 801c230:	f107 030c 	add.w	r3, r7, #12
 801c234:	4618      	mov	r0, r3
 801c236:	f000 f850 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c23a:	4604      	mov	r4, r0
 801c23c:	4628      	mov	r0, r5
 801c23e:	f000 f873 	bl	801c328 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 801c242:	4603      	mov	r3, r0
 801c244:	6023      	str	r3, [r4, #0]
  return result;
 801c246:	68fb      	ldr	r3, [r7, #12]
}
 801c248:	4618      	mov	r0, r3
 801c24a:	3710      	adds	r7, #16
 801c24c:	46bd      	mov	sp, r7
 801c24e:	bdb0      	pop	{r4, r5, r7, pc}

0801c250 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 801c250:	b590      	push	{r4, r7, lr}
 801c252:	b085      	sub	sp, #20
 801c254:	af00      	add	r7, sp, #0
 801c256:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 801c258:	1d3b      	adds	r3, r7, #4
 801c25a:	4618      	mov	r0, r3
 801c25c:	f000 f83d 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c260:	4604      	mov	r4, r0
 801c262:	f107 030c 	add.w	r3, r7, #12
 801c266:	4618      	mov	r0, r3
 801c268:	f000 f86a 	bl	801c340 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801c26c:	4602      	mov	r2, r0
 801c26e:	6823      	ldr	r3, [r4, #0]
 801c270:	6013      	str	r3, [r2, #0]
  return c;
 801c272:	68fb      	ldr	r3, [r7, #12]
}
 801c274:	4618      	mov	r0, r3
 801c276:	3714      	adds	r7, #20
 801c278:	46bd      	mov	sp, r7
 801c27a:	bd90      	pop	{r4, r7, pc}

0801c27c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801c27c:	b5b0      	push	{r4, r5, r7, lr}
 801c27e:	b084      	sub	sp, #16
 801c280:	af00      	add	r7, sp, #0
 801c282:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801c284:	1d3b      	adds	r3, r7, #4
 801c286:	4618      	mov	r0, r3
 801c288:	f000 f85a 	bl	801c340 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801c28c:	4603      	mov	r3, r0
 801c28e:	681d      	ldr	r5, [r3, #0]
 801c290:	f107 030c 	add.w	r3, r7, #12
 801c294:	4618      	mov	r0, r3
 801c296:	f7ff fecf 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c29a:	4604      	mov	r4, r0
 801c29c:	4628      	mov	r0, r5
 801c29e:	f000 f85a 	bl	801c356 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801c2a2:	4603      	mov	r3, r0
 801c2a4:	6023      	str	r3, [r4, #0]
  return result;
 801c2a6:	68fb      	ldr	r3, [r7, #12]
}
 801c2a8:	4618      	mov	r0, r3
 801c2aa:	3710      	adds	r7, #16
 801c2ac:	46bd      	mov	sp, r7
 801c2ae:	bdb0      	pop	{r4, r5, r7, pc}

0801c2b0 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 801c2b0:	b480      	push	{r7}
 801c2b2:	b083      	sub	sp, #12
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	6078      	str	r0, [r7, #4]
 801c2b8:	6039      	str	r1, [r7, #0]
  return a - b;
 801c2ba:	687a      	ldr	r2, [r7, #4]
 801c2bc:	683b      	ldr	r3, [r7, #0]
 801c2be:	1ad3      	subs	r3, r2, r3
}
 801c2c0:	4618      	mov	r0, r3
 801c2c2:	370c      	adds	r7, #12
 801c2c4:	46bd      	mov	sp, r7
 801c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ca:	4770      	bx	lr

0801c2cc <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 801c2d0:	f7fd fefc 	bl	801a0cc <_ZNSt14numeric_limitsIlE3maxEv>
 801c2d4:	4603      	mov	r3, r0
  }
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	bd80      	pop	{r7, pc}

0801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 801c2da:	b480      	push	{r7}
 801c2dc:	b083      	sub	sp, #12
 801c2de:	af00      	add	r7, sp, #0
 801c2e0:	6078      	str	r0, [r7, #4]
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	4618      	mov	r0, r3
 801c2e6:	370c      	adds	r7, #12
 801c2e8:	46bd      	mov	sp, r7
 801c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ee:	4770      	bx	lr

0801c2f0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b084      	sub	sp, #16
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801c2f8:	f107 030c 	add.w	r3, r7, #12
 801c2fc:	4618      	mov	r0, r3
 801c2fe:	f7ff ffec 	bl	801c2da <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c302:	4602      	mov	r2, r0
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	6013      	str	r3, [r2, #0]
    return retval;
 801c308:	68fb      	ldr	r3, [r7, #12]
  }
 801c30a:	4618      	mov	r0, r3
 801c30c:	3710      	adds	r7, #16
 801c30e:	46bd      	mov	sp, r7
 801c310:	bd80      	pop	{r7, pc}

0801c312 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 801c312:	b480      	push	{r7}
 801c314:	b083      	sub	sp, #12
 801c316:	af00      	add	r7, sp, #0
 801c318:	6078      	str	r0, [r7, #4]
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	4618      	mov	r0, r3
 801c31e:	370c      	adds	r7, #12
 801c320:	46bd      	mov	sp, r7
 801c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c326:	4770      	bx	lr

0801c328 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801c328:	b580      	push	{r7, lr}
 801c32a:	b082      	sub	sp, #8
 801c32c:	af00      	add	r7, sp, #0
 801c32e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801c330:	6878      	ldr	r0, [r7, #4]
 801c332:	f000 f81d 	bl	801c370 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 801c336:	4603      	mov	r3, r0
}
 801c338:	4618      	mov	r0, r3
 801c33a:	3708      	adds	r7, #8
 801c33c:	46bd      	mov	sp, r7
 801c33e:	bd80      	pop	{r7, pc}

0801c340 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 801c340:	b480      	push	{r7}
 801c342:	b083      	sub	sp, #12
 801c344:	af00      	add	r7, sp, #0
 801c346:	6078      	str	r0, [r7, #4]
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	4618      	mov	r0, r3
 801c34c:	370c      	adds	r7, #12
 801c34e:	46bd      	mov	sp, r7
 801c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c354:	4770      	bx	lr

0801c356 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801c356:	b580      	push	{r7, lr}
 801c358:	b082      	sub	sp, #8
 801c35a:	af00      	add	r7, sp, #0
 801c35c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801c35e:	6878      	ldr	r0, [r7, #4]
 801c360:	f000 f848 	bl	801c3f4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 801c364:	4603      	mov	r3, r0
}
 801c366:	4618      	mov	r0, r3
 801c368:	3708      	adds	r7, #8
 801c36a:	46bd      	mov	sp, r7
 801c36c:	bd80      	pop	{r7, pc}
	...

0801c370 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801c370:	b580      	push	{r7, lr}
 801c372:	b08a      	sub	sp, #40	; 0x28
 801c374:	af00      	add	r7, sp, #0
 801c376:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801c378:	f7fe fc1f 	bl	801abba <_ZNSt14numeric_limitsIlE3minEv>
 801c37c:	4603      	mov	r3, r0
 801c37e:	4618      	mov	r0, r3
 801c380:	f7ff fc64 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c384:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801c386:	f7fd fea1 	bl	801a0cc <_ZNSt14numeric_limitsIlE3maxEv>
 801c38a:	4603      	mov	r3, r0
 801c38c:	4618      	mov	r0, r3
 801c38e:	f7ff fc5d 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c392:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801c394:	2320      	movs	r3, #32
 801c396:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801c398:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801c39c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801c39e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801c3a2:	f7ff fc53 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c3a6:	4603      	mov	r3, r0
 801c3a8:	4619      	mov	r1, r3
 801c3aa:	6878      	ldr	r0, [r7, #4]
 801c3ac:	f7ff fc98 	bl	801bce0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801c3b0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801c3b2:	480f      	ldr	r0, [pc, #60]	; (801c3f0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 801c3b4:	f7ff fc4a 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c3b8:	4603      	mov	r3, r0
 801c3ba:	4619      	mov	r1, r3
 801c3bc:	6878      	ldr	r0, [r7, #4]
 801c3be:	f7ff fc6d 	bl	801bc9c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801c3c2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801c3c4:	2102      	movs	r1, #2
 801c3c6:	6878      	ldr	r0, [r7, #4]
 801c3c8:	f000 f856 	bl	801c478 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801c3cc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801c3ce:	68fa      	ldr	r2, [r7, #12]
 801c3d0:	6a39      	ldr	r1, [r7, #32]
 801c3d2:	6978      	ldr	r0, [r7, #20]
 801c3d4:	f000 f894 	bl	801c500 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c3d8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801c3da:	68fa      	ldr	r2, [r7, #12]
 801c3dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c3de:	6938      	ldr	r0, [r7, #16]
 801c3e0:	f000 f88e 	bl	801c500 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c3e4:	60f8      	str	r0, [r7, #12]
    return result;
 801c3e6:	68fb      	ldr	r3, [r7, #12]
  }
 801c3e8:	4618      	mov	r0, r3
 801c3ea:	3728      	adds	r7, #40	; 0x28
 801c3ec:	46bd      	mov	sp, r7
 801c3ee:	bd80      	pop	{r7, pc}
 801c3f0:	e0000001 	.word	0xe0000001

0801c3f4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801c3f4:	b580      	push	{r7, lr}
 801c3f6:	b08a      	sub	sp, #40	; 0x28
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801c3fc:	f7fe fbdd 	bl	801abba <_ZNSt14numeric_limitsIlE3minEv>
 801c400:	4603      	mov	r3, r0
 801c402:	4618      	mov	r0, r3
 801c404:	f7ff fc22 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c408:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801c40a:	f7fd fe5f 	bl	801a0cc <_ZNSt14numeric_limitsIlE3maxEv>
 801c40e:	4603      	mov	r3, r0
 801c410:	4618      	mov	r0, r3
 801c412:	f7ff fc1b 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c416:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801c418:	2320      	movs	r3, #32
 801c41a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801c41c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801c420:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801c422:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801c426:	f7ff fc11 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c42a:	4603      	mov	r3, r0
 801c42c:	4619      	mov	r1, r3
 801c42e:	6878      	ldr	r0, [r7, #4]
 801c430:	f7ff fc56 	bl	801bce0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801c434:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801c436:	480f      	ldr	r0, [pc, #60]	; (801c474 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 801c438:	f7ff fc08 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c43c:	4603      	mov	r3, r0
 801c43e:	4619      	mov	r1, r3
 801c440:	6878      	ldr	r0, [r7, #4]
 801c442:	f7ff fc2b 	bl	801bc9c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801c446:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801c448:	2101      	movs	r1, #1
 801c44a:	6878      	ldr	r0, [r7, #4]
 801c44c:	f000 f814 	bl	801c478 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801c450:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801c452:	68fa      	ldr	r2, [r7, #12]
 801c454:	6a39      	ldr	r1, [r7, #32]
 801c456:	6978      	ldr	r0, [r7, #20]
 801c458:	f000 f852 	bl	801c500 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c45c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801c45e:	68fa      	ldr	r2, [r7, #12]
 801c460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c462:	6938      	ldr	r0, [r7, #16]
 801c464:	f000 f84c 	bl	801c500 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c468:	60f8      	str	r0, [r7, #12]
    return result;
 801c46a:	68fb      	ldr	r3, [r7, #12]
  }
 801c46c:	4618      	mov	r0, r3
 801c46e:	3728      	adds	r7, #40	; 0x28
 801c470:	46bd      	mov	sp, r7
 801c472:	bd80      	pop	{r7, pc}
 801c474:	c0000001 	.word	0xc0000001

0801c478 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 801c478:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801c47c:	b089      	sub	sp, #36	; 0x24
 801c47e:	af00      	add	r7, sp, #0
 801c480:	6078      	str	r0, [r7, #4]
 801c482:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 801c484:	6879      	ldr	r1, [r7, #4]
 801c486:	17c8      	asrs	r0, r1, #31
 801c488:	4688      	mov	r8, r1
 801c48a:	4681      	mov	r9, r0
 801c48c:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 801c490:	2001      	movs	r0, #1
 801c492:	6839      	ldr	r1, [r7, #0]
 801c494:	fa00 f101 	lsl.w	r1, r0, r1
 801c498:	17c8      	asrs	r0, r1, #31
 801c49a:	460c      	mov	r4, r1
 801c49c:	4605      	mov	r5, r0
 801c49e:	69f9      	ldr	r1, [r7, #28]
 801c4a0:	fb04 f001 	mul.w	r0, r4, r1
 801c4a4:	69b9      	ldr	r1, [r7, #24]
 801c4a6:	fb05 f101 	mul.w	r1, r5, r1
 801c4aa:	4401      	add	r1, r0
 801c4ac:	69b8      	ldr	r0, [r7, #24]
 801c4ae:	fba0 2304 	umull	r2, r3, r0, r4
 801c4b2:	4419      	add	r1, r3
 801c4b4:	460b      	mov	r3, r1
 801c4b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801c4ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 801c4be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801c4c2:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 801c4c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c4c8:	60bb      	str	r3, [r7, #8]
             ? min
 801c4ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801c4ce:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801c4d2:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801c4d6:	db0b      	blt.n	801c4f0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 801c4d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801c4dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801c4e0:	f173 0300 	sbcs.w	r3, r3, #0
 801c4e4:	da01      	bge.n	801c4ea <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 801c4e6:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 801c4e8:	e004      	b.n	801c4f4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 801c4ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 801c4ee:	e001      	b.n	801c4f4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 801c4f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801c4f4:	4618      	mov	r0, r3
 801c4f6:	3724      	adds	r7, #36	; 0x24
 801c4f8:	46bd      	mov	sp, r7
 801c4fa:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801c4fe:	4770      	bx	lr

0801c500 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 801c500:	b590      	push	{r4, r7, lr}
 801c502:	b085      	sub	sp, #20
 801c504:	af00      	add	r7, sp, #0
 801c506:	60f8      	str	r0, [r7, #12]
 801c508:	60b9      	str	r1, [r7, #8]
 801c50a:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 801c50c:	68b9      	ldr	r1, [r7, #8]
 801c50e:	68f8      	ldr	r0, [r7, #12]
 801c510:	f7ff fba7 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c514:	4604      	mov	r4, r0
 801c516:	68f8      	ldr	r0, [r7, #12]
 801c518:	f7ff fc07 	bl	801bd2a <_ZN8gemmlowp6BitNotIlEET_S1_>
 801c51c:	4603      	mov	r3, r0
 801c51e:	6879      	ldr	r1, [r7, #4]
 801c520:	4618      	mov	r0, r3
 801c522:	f7ff fb9e 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c526:	4603      	mov	r3, r0
 801c528:	4619      	mov	r1, r3
 801c52a:	4620      	mov	r0, r4
 801c52c:	f000 f805 	bl	801c53a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 801c530:	4603      	mov	r3, r0
}
 801c532:	4618      	mov	r0, r3
 801c534:	3714      	adds	r7, #20
 801c536:	46bd      	mov	sp, r7
 801c538:	bd90      	pop	{r4, r7, pc}

0801c53a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801c53a:	b480      	push	{r7}
 801c53c:	b083      	sub	sp, #12
 801c53e:	af00      	add	r7, sp, #0
 801c540:	6078      	str	r0, [r7, #4]
 801c542:	6039      	str	r1, [r7, #0]
  return a ^ b;
 801c544:	687a      	ldr	r2, [r7, #4]
 801c546:	683b      	ldr	r3, [r7, #0]
 801c548:	4053      	eors	r3, r2
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	370c      	adds	r7, #12
 801c54e:	46bd      	mov	sp, r7
 801c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c554:	4770      	bx	lr

0801c556 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801c556:	b580      	push	{r7, lr}
 801c558:	b084      	sub	sp, #16
 801c55a:	af00      	add	r7, sp, #0
 801c55c:	60f8      	str	r0, [r7, #12]
 801c55e:	60b9      	str	r1, [r7, #8]
 801c560:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c566:	2b00      	cmp	r3, #0
 801c568:	d101      	bne.n	801c56e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 801c56a:	f006 f913 	bl	8022794 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c572:	2124      	movs	r1, #36	; 0x24
 801c574:	68f8      	ldr	r0, [r7, #12]
 801c576:	4798      	blx	r3
 801c578:	4603      	mov	r3, r0
}
 801c57a:	4618      	mov	r0, r3
 801c57c:	3710      	adds	r7, #16
 801c57e:	46bd      	mov	sp, r7
 801c580:	bd80      	pop	{r7, pc}
	...

0801c584 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801c584:	b5b0      	push	{r4, r5, r7, lr}
 801c586:	b0a0      	sub	sp, #128	; 0x80
 801c588:	af04      	add	r7, sp, #16
 801c58a:	6078      	str	r0, [r7, #4]
 801c58c:	6039      	str	r1, [r7, #0]
 801c58e:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 801c590:	683b      	ldr	r3, [r7, #0]
 801c592:	691b      	ldr	r3, [r3, #16]
 801c594:	2b00      	cmp	r3, #0
 801c596:	d101      	bne.n	801c59c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 801c598:	f006 f8fc 	bl	8022794 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801c59c:	683b      	ldr	r3, [r7, #0]
 801c59e:	695b      	ldr	r3, [r3, #20]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d101      	bne.n	801c5a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 801c5a4:	f006 f8f6 	bl	8022794 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801c5a8:	683b      	ldr	r3, [r7, #0]
 801c5aa:	691b      	ldr	r3, [r3, #16]
 801c5ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 801c5ae:	683b      	ldr	r3, [r7, #0]
 801c5b0:	695b      	ldr	r3, [r3, #20]
 801c5b2:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 801c5b4:	4b81      	ldr	r3, [pc, #516]	; (801c7bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	461a      	mov	r2, r3
 801c5ba:	6839      	ldr	r1, [r7, #0]
 801c5bc:	6878      	ldr	r0, [r7, #4]
 801c5be:	f7fd fff9 	bl	801a5b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801c5c2:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 801c5c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d10a      	bne.n	801c5e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	695c      	ldr	r4, [r3, #20]
 801c5ce:	4b7c      	ldr	r3, [pc, #496]	; (801c7c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801c5d0:	9300      	str	r3, [sp, #0]
 801c5d2:	2340      	movs	r3, #64	; 0x40
 801c5d4:	4a7b      	ldr	r2, [pc, #492]	; (801c7c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c5d6:	497c      	ldr	r1, [pc, #496]	; (801c7c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801c5d8:	6878      	ldr	r0, [r7, #4]
 801c5da:	47a0      	blx	r4
 801c5dc:	2401      	movs	r4, #1
 801c5de:	e0e7      	b.n	801c7b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 801c5e0:	4b7a      	ldr	r3, [pc, #488]	; (801c7cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	461a      	mov	r2, r3
 801c5e6:	6839      	ldr	r1, [r7, #0]
 801c5e8:	6878      	ldr	r0, [r7, #4]
 801c5ea:	f7fd ffe3 	bl	801a5b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801c5ee:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 801c5f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d10a      	bne.n	801c60c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	695c      	ldr	r4, [r3, #20]
 801c5fa:	4b75      	ldr	r3, [pc, #468]	; (801c7d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801c5fc:	9300      	str	r3, [sp, #0]
 801c5fe:	2343      	movs	r3, #67	; 0x43
 801c600:	4a70      	ldr	r2, [pc, #448]	; (801c7c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c602:	4971      	ldr	r1, [pc, #452]	; (801c7c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801c604:	6878      	ldr	r0, [r7, #4]
 801c606:	47a0      	blx	r4
 801c608:	2401      	movs	r4, #1
 801c60a:	e0d1      	b.n	801c7b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 801c60c:	4b71      	ldr	r3, [pc, #452]	; (801c7d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	461a      	mov	r2, r3
 801c612:	6839      	ldr	r1, [r7, #0]
 801c614:	6878      	ldr	r0, [r7, #4]
 801c616:	f7fd fffd 	bl	801a614 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 801c61a:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 801c61c:	4b6e      	ldr	r3, [pc, #440]	; (801c7d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	461a      	mov	r2, r3
 801c622:	6839      	ldr	r1, [r7, #0]
 801c624:	6878      	ldr	r0, [r7, #4]
 801c626:	f7fd ffd5 	bl	801a5d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801c62a:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 801c62c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d10a      	bne.n	801c648 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	695c      	ldr	r4, [r3, #20]
 801c636:	4b69      	ldr	r3, [pc, #420]	; (801c7dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801c638:	9300      	str	r3, [sp, #0]
 801c63a:	2347      	movs	r3, #71	; 0x47
 801c63c:	4a61      	ldr	r2, [pc, #388]	; (801c7c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c63e:	4962      	ldr	r1, [pc, #392]	; (801c7c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801c640:	6878      	ldr	r0, [r7, #4]
 801c642:	47a0      	blx	r4
 801c644:	2401      	movs	r4, #1
 801c646:	e0b3      	b.n	801c7b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801c648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c64a:	781a      	ldrb	r2, [r3, #0]
 801c64c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c64e:	781b      	ldrb	r3, [r3, #0]
 801c650:	429a      	cmp	r2, r3
 801c652:	d01a      	beq.n	801c68a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	695c      	ldr	r4, [r3, #20]
 801c658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c65a:	781b      	ldrb	r3, [r3, #0]
 801c65c:	4618      	mov	r0, r3
 801c65e:	f7fd fcb9 	bl	8019fd4 <TfLiteTypeGetName>
 801c662:	4605      	mov	r5, r0
 801c664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c666:	781b      	ldrb	r3, [r3, #0]
 801c668:	4618      	mov	r0, r3
 801c66a:	f7fd fcb3 	bl	8019fd4 <TfLiteTypeGetName>
 801c66e:	4603      	mov	r3, r0
 801c670:	9303      	str	r3, [sp, #12]
 801c672:	9502      	str	r5, [sp, #8]
 801c674:	4b5a      	ldr	r3, [pc, #360]	; (801c7e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801c676:	9301      	str	r3, [sp, #4]
 801c678:	4b5a      	ldr	r3, [pc, #360]	; (801c7e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801c67a:	9300      	str	r3, [sp, #0]
 801c67c:	2349      	movs	r3, #73	; 0x49
 801c67e:	4a51      	ldr	r2, [pc, #324]	; (801c7c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c680:	4959      	ldr	r1, [pc, #356]	; (801c7e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801c682:	6878      	ldr	r0, [r7, #4]
 801c684:	47a0      	blx	r4
 801c686:	2401      	movs	r4, #1
 801c688:	e092      	b.n	801c7b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 801c68a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c68c:	781a      	ldrb	r2, [r3, #0]
 801c68e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c690:	781b      	ldrb	r3, [r3, #0]
 801c692:	429a      	cmp	r2, r3
 801c694:	d006      	beq.n	801c6a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	695b      	ldr	r3, [r3, #20]
 801c69a:	4954      	ldr	r1, [pc, #336]	; (801c7ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 801c69c:	6878      	ldr	r0, [r7, #4]
 801c69e:	4798      	blx	r3
 801c6a0:	2401      	movs	r4, #1
 801c6a2:	e085      	b.n	801c7b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 801c6a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c6a6:	f04f 32ff 	mov.w	r2, #4294967295
 801c6aa:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 801c6ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c6ae:	7819      	ldrb	r1, [r3, #0]
 801c6b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c6b2:	781a      	ldrb	r2, [r3, #0]
 801c6b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c6b6:	9303      	str	r3, [sp, #12]
 801c6b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c6ba:	9302      	str	r3, [sp, #8]
 801c6bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c6be:	9301      	str	r3, [sp, #4]
 801c6c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c6c2:	9300      	str	r3, [sp, #0]
 801c6c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c6c6:	6878      	ldr	r0, [r7, #4]
 801c6c8:	f000 fae4 	bl	801cc94 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 801c6cc:	4603      	mov	r3, r0
 801c6ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801c6d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d002      	beq.n	801c6e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 801c6da:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 801c6de:	e067      	b.n	801c7b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 801c6e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c6e2:	781b      	ldrb	r3, [r3, #0]
 801c6e4:	2b09      	cmp	r3, #9
 801c6e6:	d162      	bne.n	801c7ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 801c6e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c6ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801c6ee:	4618      	mov	r0, r3
 801c6f0:	f7fe fa45 	bl	801ab7e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 801c6f4:	f107 0318 	add.w	r3, r7, #24
 801c6f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c6fa:	4618      	mov	r0, r3
 801c6fc:	f7fe fa3f 	bl	801ab7e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801c700:	f107 0318 	add.w	r3, r7, #24
 801c704:	4618      	mov	r0, r3
 801c706:	f7fe f9d6 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c70a:	4603      	mov	r3, r0
 801c70c:	2b02      	cmp	r3, #2
 801c70e:	d001      	beq.n	801c714 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 801c710:	f006 f840 	bl	8022794 <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 801c714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c718:	4618      	mov	r0, r3
 801c71a:	f7fe f9cc 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c71e:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 801c720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c722:	1e5a      	subs	r2, r3, #1
 801c724:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c728:	4611      	mov	r1, r2
 801c72a:	4618      	mov	r0, r3
 801c72c:	f7fe fad0 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c730:	4603      	mov	r3, r0
 801c732:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 801c734:	2301      	movs	r3, #1
 801c736:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 801c738:	2301      	movs	r3, #1
 801c73a:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 801c73c:	f107 0318 	add.w	r3, r7, #24
 801c740:	2101      	movs	r1, #1
 801c742:	4618      	mov	r0, r3
 801c744:	f7fe fac4 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c748:	4603      	mov	r3, r0
 801c74a:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 801c74c:	f107 0308 	add.w	r3, r7, #8
 801c750:	4618      	mov	r0, r3
 801c752:	f7f5 f81d 	bl	8011790 <arm_fully_connected_s8_get_buffer_size>
 801c756:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 801c758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	dd11      	ble.n	801c782 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c762:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c764:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c766:	3220      	adds	r2, #32
 801c768:	6878      	ldr	r0, [r7, #4]
 801c76a:	4798      	blx	r3
 801c76c:	4603      	mov	r3, r0
 801c76e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801c772:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801c776:	2b00      	cmp	r3, #0
 801c778:	d007      	beq.n	801c78a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 801c77a:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 801c77e:	2500      	movs	r5, #0
 801c780:	e004      	b.n	801c78c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801c782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c784:	f04f 32ff 	mov.w	r2, #4294967295
 801c788:	621a      	str	r2, [r3, #32]
 801c78a:	2501      	movs	r5, #1
 801c78c:	f107 0318 	add.w	r3, r7, #24
 801c790:	4618      	mov	r0, r3
 801c792:	f7fe f97a 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
 801c796:	2d01      	cmp	r5, #1
 801c798:	d001      	beq.n	801c79e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 801c79a:	2500      	movs	r5, #0
 801c79c:	e000      	b.n	801c7a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 801c79e:	2501      	movs	r5, #1
 801c7a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	f7fe f970 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
 801c7aa:	2d01      	cmp	r5, #1
 801c7ac:	d100      	bne.n	801c7b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 801c7ae:	2400      	movs	r4, #0
}
 801c7b0:	4623      	mov	r3, r4
 801c7b2:	4618      	mov	r0, r3
 801c7b4:	3770      	adds	r7, #112	; 0x70
 801c7b6:	46bd      	mov	sp, r7
 801c7b8:	bdb0      	pop	{r4, r5, r7, pc}
 801c7ba:	bf00      	nop
 801c7bc:	08028ce0 	.word	0x08028ce0
 801c7c0:	08027e58 	.word	0x08027e58
 801c7c4:	08027dac 	.word	0x08027dac
 801c7c8:	08027e40 	.word	0x08027e40
 801c7cc:	08028ce4 	.word	0x08028ce4
 801c7d0:	08027e6c 	.word	0x08027e6c
 801c7d4:	08028ce8 	.word	0x08028ce8
 801c7d8:	08028cec 	.word	0x08028cec
 801c7dc:	08027e80 	.word	0x08027e80
 801c7e0:	08027eb0 	.word	0x08027eb0
 801c7e4:	08027ec0 	.word	0x08027ec0
 801c7e8:	08027e94 	.word	0x08027e94
 801c7ec:	08027ecc 	.word	0x08027ecc

0801c7f0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 801c7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7f2:	b0bf      	sub	sp, #252	; 0xfc
 801c7f4:	af08      	add	r7, sp, #32
 801c7f6:	6178      	str	r0, [r7, #20]
 801c7f8:	6139      	str	r1, [r7, #16]
 801c7fa:	60fa      	str	r2, [r7, #12]
 801c7fc:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801c7fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c802:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801c806:	4618      	mov	r0, r3
 801c808:	f000 faaa 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801c80c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c810:	4618      	mov	r0, r3
 801c812:	f7fe f950 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c816:	4603      	mov	r3, r0
 801c818:	2b02      	cmp	r3, #2
 801c81a:	d001      	beq.n	801c820 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 801c81c:	f005 ffba 	bl	8022794 <abort>
  const int batches = output_shape.Dims(0);
 801c820:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c824:	2100      	movs	r1, #0
 801c826:	4618      	mov	r0, r3
 801c828:	f7fe fa52 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c82c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 801c830:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c834:	2101      	movs	r1, #1
 801c836:	4618      	mov	r0, r3
 801c838:	f7fe fa4a 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c83c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801c840:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c844:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801c848:	4618      	mov	r0, r3
 801c84a:	f000 fa89 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 801c84e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c852:	4618      	mov	r0, r3
 801c854:	f7fe f92f 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c858:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801c85c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c860:	1e5a      	subs	r2, r3, #1
 801c862:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c866:	4611      	mov	r1, r2
 801c868:	4618      	mov	r0, r3
 801c86a:	f7fe fa31 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c86e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801c872:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c876:	68b9      	ldr	r1, [r7, #8]
 801c878:	4618      	mov	r0, r3
 801c87a:	f000 fa71 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	695b      	ldr	r3, [r3, #20]
 801c882:	425b      	negs	r3, r3
 801c884:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	69db      	ldr	r3, [r3, #28]
 801c88a:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	699b      	ldr	r3, [r3, #24]
 801c890:	425b      	negs	r3, r3
 801c892:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	689b      	ldr	r3, [r3, #8]
 801c898:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	68db      	ldr	r3, [r3, #12]
 801c89e:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	685b      	ldr	r3, [r3, #4]
 801c8aa:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 801c8ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c8b0:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 801c8b2:	2301      	movs	r3, #1
 801c8b4:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 801c8b6:	2301      	movs	r3, #1
 801c8b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 801c8ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c8be:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 801c8c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c8c4:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 801c8c6:	2301      	movs	r3, #1
 801c8c8:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 801c8ca:	2301      	movs	r3, #1
 801c8cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 801c8ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c8d2:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 801c8d4:	2301      	movs	r3, #1
 801c8d6:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 801c8d8:	2301      	movs	r3, #1
 801c8da:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 801c8dc:	2301      	movs	r3, #1
 801c8de:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 801c8e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c8e4:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 801c8e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c8ea:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 801c8ec:	2301      	movs	r3, #1
 801c8ee:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 801c8f0:	2301      	movs	r3, #1
 801c8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 801c8f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c8f8:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 801c8fa:	2300      	movs	r3, #0
 801c8fc:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 801c8fe:	2300      	movs	r3, #0
 801c900:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	6a1b      	ldr	r3, [r3, #32]
 801c906:	2b00      	cmp	r3, #0
 801c908:	db08      	blt.n	801c91c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801c90a:	697b      	ldr	r3, [r7, #20]
 801c90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c90e:	68fa      	ldr	r2, [r7, #12]
 801c910:	6a12      	ldr	r2, [r2, #32]
 801c912:	4611      	mov	r1, r2
 801c914:	6978      	ldr	r0, [r7, #20]
 801c916:	4798      	blx	r3
 801c918:	4603      	mov	r3, r0
 801c91a:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 801c91c:	68b8      	ldr	r0, [r7, #8]
 801c91e:	f7fe ffa9 	bl	801b874 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c922:	4605      	mov	r5, r0
 801c924:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801c928:	f7fe ffa4 	bl	801b874 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c92c:	4606      	mov	r6, r0
 801c92e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801c932:	f7ff fa20 	bl	801bd76 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801c936:	6078      	str	r0, [r7, #4]
 801c938:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801c93c:	f7fe ffa9 	bl	801b892 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801c940:	4603      	mov	r3, r0
 801c942:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801c946:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801c94a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801c94e:	f107 001c 	add.w	r0, r7, #28
 801c952:	9306      	str	r3, [sp, #24]
 801c954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c958:	9305      	str	r3, [sp, #20]
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	9304      	str	r3, [sp, #16]
 801c95e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c962:	9303      	str	r3, [sp, #12]
 801c964:	9602      	str	r6, [sp, #8]
 801c966:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c96a:	9301      	str	r3, [sp, #4]
 801c96c:	9500      	str	r5, [sp, #0]
 801c96e:	4623      	mov	r3, r4
 801c970:	f7f4 fec7 	bl	8011702 <arm_fully_connected_s8>
 801c974:	4603      	mov	r3, r0
 801c976:	2b00      	cmp	r3, #0
 801c978:	bf14      	ite	ne
 801c97a:	2301      	movne	r3, #1
 801c97c:	2300      	moveq	r3, #0
 801c97e:	b2db      	uxtb	r3, r3
 801c980:	2b00      	cmp	r3, #0
 801c982:	d03e      	beq.n	801ca02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 801c984:	697b      	ldr	r3, [r7, #20]
 801c986:	695c      	ldr	r4, [r3, #20]
 801c988:	68b8      	ldr	r0, [r7, #8]
 801c98a:	f7fe ff73 	bl	801b874 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c98e:	4606      	mov	r6, r0
 801c990:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801c994:	f7fe ff6e 	bl	801b874 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c998:	6078      	str	r0, [r7, #4]
 801c99a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801c99e:	f7ff f9ea 	bl	801bd76 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801c9a2:	6038      	str	r0, [r7, #0]
 801c9a4:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801c9a8:	f7fe ff73 	bl	801b892 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801c9ac:	4603      	mov	r3, r0
 801c9ae:	f107 0554 	add.w	r5, r7, #84	; 0x54
 801c9b2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801c9b6:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801c9ba:	f107 001c 	add.w	r0, r7, #28
 801c9be:	9306      	str	r3, [sp, #24]
 801c9c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c9c4:	9305      	str	r3, [sp, #20]
 801c9c6:	683b      	ldr	r3, [r7, #0]
 801c9c8:	9304      	str	r3, [sp, #16]
 801c9ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c9ce:	9303      	str	r3, [sp, #12]
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	9302      	str	r3, [sp, #8]
 801c9d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c9d8:	9301      	str	r3, [sp, #4]
 801c9da:	9600      	str	r6, [sp, #0]
 801c9dc:	462b      	mov	r3, r5
 801c9de:	f7f4 fe90 	bl	8011702 <arm_fully_connected_s8>
 801c9e2:	4603      	mov	r3, r0
 801c9e4:	461a      	mov	r2, r3
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	9303      	str	r3, [sp, #12]
 801c9ea:	9202      	str	r2, [sp, #8]
 801c9ec:	4b0f      	ldr	r3, [pc, #60]	; (801ca2c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 801c9ee:	9301      	str	r3, [sp, #4]
 801c9f0:	4b0f      	ldr	r3, [pc, #60]	; (801ca30 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 801c9f2:	9300      	str	r3, [sp, #0]
 801c9f4:	23a6      	movs	r3, #166	; 0xa6
 801c9f6:	4a0f      	ldr	r2, [pc, #60]	; (801ca34 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 801c9f8:	490f      	ldr	r1, [pc, #60]	; (801ca38 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 801c9fa:	6978      	ldr	r0, [r7, #20]
 801c9fc:	47a0      	blx	r4
 801c9fe:	2401      	movs	r4, #1
 801ca00:	e000      	b.n	801ca04 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 801ca02:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801ca04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f7fe f83e 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801ca0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ca12:	4618      	mov	r0, r3
 801ca14:	f7fe f839 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801ca18:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ca1c:	4618      	mov	r0, r3
 801ca1e:	f7fe f834 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
}
 801ca22:	4623      	mov	r3, r4
 801ca24:	4618      	mov	r0, r3
 801ca26:	37dc      	adds	r7, #220	; 0xdc
 801ca28:	46bd      	mov	sp, r7
 801ca2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca2c:	08027fac 	.word	0x08027fac
 801ca30:	08027fc0 	.word	0x08027fc0
 801ca34:	08027dac 	.word	0x08027dac
 801ca38:	08027f90 	.word	0x08027f90

0801ca3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801ca3c:	b590      	push	{r4, r7, lr}
 801ca3e:	b0d1      	sub	sp, #324	; 0x144
 801ca40:	af04      	add	r7, sp, #16
 801ca42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ca4a:	6018      	str	r0, [r3, #0]
 801ca4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801ca54:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801ca56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	695b      	ldr	r3, [r3, #20]
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d101      	bne.n	801ca6a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801ca66:	f005 fe95 	bl	8022794 <abort>
  const auto* params =
 801ca6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	695b      	ldr	r3, [r3, #20]
 801ca76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 801ca7a:	4b67      	ldr	r3, [pc, #412]	; (801cc18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 801ca7c:	681a      	ldr	r2, [r3, #0]
 801ca7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca82:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801ca86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ca8e:	6809      	ldr	r1, [r1, #0]
 801ca90:	6818      	ldr	r0, [r3, #0]
 801ca92:	f7fe f9f1 	bl	801ae78 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801ca96:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 801ca9a:	4b60      	ldr	r3, [pc, #384]	; (801cc1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 801ca9c:	681a      	ldr	r2, [r3, #0]
 801ca9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801caa2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801caa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801caaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801caae:	6809      	ldr	r1, [r1, #0]
 801cab0:	6818      	ldr	r0, [r3, #0]
 801cab2:	f7fe f9e1 	bl	801ae78 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801cab6:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 801caba:	4b59      	ldr	r3, [pc, #356]	; (801cc20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 801cabc:	681a      	ldr	r2, [r3, #0]
 801cabe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cac2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801cac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801caca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cace:	6809      	ldr	r1, [r1, #0]
 801cad0:	6818      	ldr	r0, [r3, #0]
 801cad2:	f7fe f9d1 	bl	801ae78 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801cad6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 801cada:	4b52      	ldr	r3, [pc, #328]	; (801cc24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 801cadc:	681a      	ldr	r2, [r3, #0]
 801cade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cae2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801cae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801caea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801caee:	6809      	ldr	r1, [r1, #0]
 801caf0:	6818      	ldr	r0, [r3, #0]
 801caf2:	f7fe f9d1 	bl	801ae98 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801caf6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 801cafa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cafe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	691b      	ldr	r3, [r3, #16]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d101      	bne.n	801cb0e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 801cb0a:	f005 fe43 	bl	8022794 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801cb0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	691b      	ldr	r3, [r3, #16]
 801cb1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 801cb1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cb22:	7a1b      	ldrb	r3, [r3, #8]
 801cb24:	2b09      	cmp	r3, #9
 801cb26:	d021      	beq.n	801cb6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 801cb28:	2b09      	cmp	r3, #9
 801cb2a:	dc55      	bgt.n	801cbd8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 801cb2c:	2b01      	cmp	r3, #1
 801cb2e:	d002      	beq.n	801cb36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 801cb30:	2b03      	cmp	r3, #3
 801cb32:	d036      	beq.n	801cba2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 801cb34:	e050      	b.n	801cbd8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801cb36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	695c      	ldr	r4, [r3, #20]
 801cb42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cb46:	7a1b      	ldrb	r3, [r3, #8]
 801cb48:	4618      	mov	r0, r3
 801cb4a:	f7fd fa43 	bl	8019fd4 <TfLiteTypeGetName>
 801cb4e:	4602      	mov	r2, r0
 801cb50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cb54:	7a1b      	ldrb	r3, [r3, #8]
 801cb56:	4619      	mov	r1, r3
 801cb58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb5c:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801cb60:	460b      	mov	r3, r1
 801cb62:	4931      	ldr	r1, [pc, #196]	; (801cc28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801cb64:	6800      	ldr	r0, [r0, #0]
 801cb66:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801cb68:	2301      	movs	r3, #1
 801cb6a:	e04f      	b.n	801cc0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 801cb6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb70:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801cb74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb78:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801cb7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801cb80:	9302      	str	r3, [sp, #8]
 801cb82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801cb86:	9301      	str	r3, [sp, #4]
 801cb88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801cb8c:	9300      	str	r3, [sp, #0]
 801cb8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cb92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801cb96:	6809      	ldr	r1, [r1, #0]
 801cb98:	6800      	ldr	r0, [r0, #0]
 801cb9a:	f7ff fe29 	bl	801c7f0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 801cb9e:	4603      	mov	r3, r0
                               output);
 801cba0:	e034      	b.n	801cc0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801cba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cba6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	695c      	ldr	r4, [r3, #20]
 801cbae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cbb2:	7a1b      	ldrb	r3, [r3, #8]
 801cbb4:	4618      	mov	r0, r3
 801cbb6:	f7fd fa0d 	bl	8019fd4 <TfLiteTypeGetName>
 801cbba:	4602      	mov	r2, r0
 801cbbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cbc0:	7a1b      	ldrb	r3, [r3, #8]
 801cbc2:	4619      	mov	r1, r3
 801cbc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbc8:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801cbcc:	460b      	mov	r3, r1
 801cbce:	4916      	ldr	r1, [pc, #88]	; (801cc28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801cbd0:	6800      	ldr	r0, [r0, #0]
 801cbd2:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801cbd4:	2301      	movs	r3, #1
 801cbd6:	e019      	b.n	801cc0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801cbd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cbe0:	681b      	ldr	r3, [r3, #0]
 801cbe2:	695c      	ldr	r4, [r3, #20]
 801cbe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cbe8:	7a1b      	ldrb	r3, [r3, #8]
 801cbea:	4618      	mov	r0, r3
 801cbec:	f7fd f9f2 	bl	8019fd4 <TfLiteTypeGetName>
 801cbf0:	4602      	mov	r2, r0
 801cbf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cbf6:	7a1b      	ldrb	r3, [r3, #8]
 801cbf8:	4619      	mov	r1, r3
 801cbfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbfe:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801cc02:	460b      	mov	r3, r1
 801cc04:	4908      	ldr	r1, [pc, #32]	; (801cc28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801cc06:	6800      	ldr	r0, [r0, #0]
 801cc08:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801cc0a:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801cc12:	46bd      	mov	sp, r7
 801cc14:	bd90      	pop	{r4, r7, pc}
 801cc16:	bf00      	nop
 801cc18:	08028ce0 	.word	0x08028ce0
 801cc1c:	08028ce4 	.word	0x08028ce4
 801cc20:	08028ce8 	.word	0x08028ce8
 801cc24:	08028cec 	.word	0x08028cec
 801cc28:	080280e4 	.word	0x080280e4

0801cc2c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 801cc2c:	b4b0      	push	{r4, r5, r7}
 801cc2e:	b083      	sub	sp, #12
 801cc30:	af00      	add	r7, sp, #0
 801cc32:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 801cc34:	4b13      	ldr	r3, [pc, #76]	; (801cc84 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc36:	4a14      	ldr	r2, [pc, #80]	; (801cc88 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 801cc38:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 801cc3a:	4b12      	ldr	r3, [pc, #72]	; (801cc84 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc3c:	2200      	movs	r2, #0
 801cc3e:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 801cc40:	4b10      	ldr	r3, [pc, #64]	; (801cc84 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc42:	4a12      	ldr	r2, [pc, #72]	; (801cc8c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 801cc44:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 801cc46:	4b0f      	ldr	r3, [pc, #60]	; (801cc84 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc48:	4a11      	ldr	r2, [pc, #68]	; (801cc90 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 801cc4a:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 801cc4c:	4b0d      	ldr	r3, [pc, #52]	; (801cc84 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc4e:	2200      	movs	r2, #0
 801cc50:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 801cc52:	4b0c      	ldr	r3, [pc, #48]	; (801cc84 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc54:	2200      	movs	r2, #0
 801cc56:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 801cc58:	4b0a      	ldr	r3, [pc, #40]	; (801cc84 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc5a:	2200      	movs	r2, #0
 801cc5c:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 801cc5e:	4b09      	ldr	r3, [pc, #36]	; (801cc84 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc60:	2200      	movs	r2, #0
 801cc62:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	4a07      	ldr	r2, [pc, #28]	; (801cc84 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc68:	461c      	mov	r4, r3
 801cc6a:	4615      	mov	r5, r2
 801cc6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cc6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cc70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801cc74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801cc78:	6878      	ldr	r0, [r7, #4]
 801cc7a:	370c      	adds	r7, #12
 801cc7c:	46bd      	mov	sp, r7
 801cc7e:	bcb0      	pop	{r4, r5, r7}
 801cc80:	4770      	bx	lr
 801cc82:	bf00      	nop
 801cc84:	20000574 	.word	0x20000574
 801cc88:	0801c557 	.word	0x0801c557
 801cc8c:	0801c585 	.word	0x0801c585
 801cc90:	0801ca3d 	.word	0x0801ca3d

0801cc94 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 801cc94:	b580      	push	{r7, lr}
 801cc96:	b08a      	sub	sp, #40	; 0x28
 801cc98:	af02      	add	r7, sp, #8
 801cc9a:	60f8      	str	r0, [r7, #12]
 801cc9c:	607b      	str	r3, [r7, #4]
 801cc9e:	460b      	mov	r3, r1
 801cca0:	72fb      	strb	r3, [r7, #11]
 801cca2:	4613      	mov	r3, r2
 801cca4:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 801cca6:	7abb      	ldrb	r3, [r7, #10]
 801cca8:	2b01      	cmp	r3, #1
 801ccaa:	d03e      	beq.n	801cd2a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 801ccac:	f04f 0200 	mov.w	r2, #0
 801ccb0:	f04f 0300 	mov.w	r3, #0
 801ccb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 801ccb8:	f107 0310 	add.w	r3, r7, #16
 801ccbc:	9301      	str	r3, [sp, #4]
 801ccbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ccc0:	9300      	str	r3, [sp, #0]
 801ccc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ccc6:	6879      	ldr	r1, [r7, #4]
 801ccc8:	68f8      	ldr	r0, [r7, #12]
 801ccca:	f7fd fcb5 	bl	801a638 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 801ccce:	4603      	mov	r3, r0
 801ccd0:	77fb      	strb	r3, [r7, #31]
 801ccd2:	7ffb      	ldrb	r3, [r7, #31]
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d001      	beq.n	801ccdc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 801ccd8:	7ffb      	ldrb	r3, [r7, #31]
 801ccda:	e027      	b.n	801cd2c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 801ccdc:	ed97 7b04 	vldr	d7, [r7, #16]
 801cce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cce4:	3304      	adds	r3, #4
 801cce6:	4619      	mov	r1, r3
 801cce8:	4610      	mov	r0, r2
 801ccea:	eeb0 0a47 	vmov.f32	s0, s14
 801ccee:	eef0 0a67 	vmov.f32	s1, s15
 801ccf2:	f7fd f9f5 	bl	801a0e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	691a      	ldr	r2, [r3, #16]
 801ccfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ccfc:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 801ccfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd00:	691a      	ldr	r2, [r3, #16]
 801cd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd04:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 801cd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd08:	691a      	ldr	r2, [r3, #16]
 801cd0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd0c:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 801cd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd10:	f103 0208 	add.w	r2, r3, #8
 801cd14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd16:	330c      	adds	r3, #12
 801cd18:	7af9      	ldrb	r1, [r7, #11]
 801cd1a:	9300      	str	r3, [sp, #0]
 801cd1c:	4613      	mov	r3, r2
 801cd1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cd20:	68f8      	ldr	r0, [r7, #12]
 801cd22:	f7fd fe15 	bl	801a950 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 801cd26:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 801cd28:	e000      	b.n	801cd2c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 801cd2a:	2300      	movs	r3, #0
}
 801cd2c:	4618      	mov	r0, r3
 801cd2e:	3720      	adds	r7, #32
 801cd30:	46bd      	mov	sp, r7
 801cd32:	bd80      	pop	{r7, pc}

0801cd34 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801cd34:	b480      	push	{r7}
 801cd36:	b083      	sub	sp, #12
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	6078      	str	r0, [r7, #4]
 801cd3c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cd44:	683b      	ldr	r3, [r7, #0]
 801cd46:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cd4a:	429a      	cmp	r2, r3
 801cd4c:	da01      	bge.n	801cd52 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 801cd4e:	683b      	ldr	r3, [r7, #0]
 801cd50:	e000      	b.n	801cd54 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 801cd52:	687b      	ldr	r3, [r7, #4]
    }
 801cd54:	4618      	mov	r0, r3
 801cd56:	370c      	adds	r7, #12
 801cd58:	46bd      	mov	sp, r7
 801cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd5e:	4770      	bx	lr

0801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 801cd60:	b580      	push	{r7, lr}
 801cd62:	b086      	sub	sp, #24
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	6078      	str	r0, [r7, #4]
 801cd68:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 801cd6a:	683b      	ldr	r3, [r7, #0]
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d003      	beq.n	801cd78 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 801cd70:	683b      	ldr	r3, [r7, #0]
 801cd72:	685b      	ldr	r3, [r3, #4]
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d103      	bne.n	801cd80 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 801cd78:	6878      	ldr	r0, [r7, #4]
 801cd7a:	f7fd fe65 	bl	801aa48 <_ZN6tflite12RuntimeShapeC1Ev>
 801cd7e:	e00d      	b.n	801cd9c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 801cd80:	683b      	ldr	r3, [r7, #0]
 801cd82:	685b      	ldr	r3, [r3, #4]
 801cd84:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801cd86:	697b      	ldr	r3, [r7, #20]
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801cd8c:	697b      	ldr	r3, [r7, #20]
 801cd8e:	3304      	adds	r3, #4
 801cd90:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801cd92:	68fa      	ldr	r2, [r7, #12]
 801cd94:	6939      	ldr	r1, [r7, #16]
 801cd96:	6878      	ldr	r0, [r7, #4]
 801cd98:	f7fd fe64 	bl	801aa64 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801cd9c:	6878      	ldr	r0, [r7, #4]
 801cd9e:	3718      	adds	r7, #24
 801cda0:	46bd      	mov	sp, r7
 801cda2:	bd80      	pop	{r7, pc}

0801cda4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801cda4:	b580      	push	{r7, lr}
 801cda6:	b086      	sub	sp, #24
 801cda8:	af00      	add	r7, sp, #0
 801cdaa:	6078      	str	r0, [r7, #4]
 801cdac:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 801cdae:	6878      	ldr	r0, [r7, #4]
 801cdb0:	f7fd fe81 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801cdb4:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 801cdb6:	683b      	ldr	r3, [r7, #0]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	db03      	blt.n	801cdc4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801cdbc:	683a      	ldr	r2, [r7, #0]
 801cdbe:	68fb      	ldr	r3, [r7, #12]
 801cdc0:	429a      	cmp	r2, r3
 801cdc2:	db01      	blt.n	801cdc8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 801cdc4:	f005 fce6 	bl	8022794 <abort>
  const auto* dims_data = shape.DimsData();
 801cdc8:	6878      	ldr	r0, [r7, #4]
 801cdca:	f7fd ffa6 	bl	801ad1a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801cdce:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 801cdd0:	2301      	movs	r3, #1
 801cdd2:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	613b      	str	r3, [r7, #16]
 801cdd8:	693a      	ldr	r2, [r7, #16]
 801cdda:	68fb      	ldr	r3, [r7, #12]
 801cddc:	429a      	cmp	r2, r3
 801cdde:	da12      	bge.n	801ce06 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801cde0:	693a      	ldr	r2, [r7, #16]
 801cde2:	683b      	ldr	r3, [r7, #0]
 801cde4:	429a      	cmp	r2, r3
 801cde6:	d005      	beq.n	801cdf4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 801cde8:	693b      	ldr	r3, [r7, #16]
 801cdea:	009b      	lsls	r3, r3, #2
 801cdec:	68ba      	ldr	r2, [r7, #8]
 801cdee:	4413      	add	r3, r2
 801cdf0:	681b      	ldr	r3, [r3, #0]
 801cdf2:	e000      	b.n	801cdf6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 801cdf4:	2301      	movs	r3, #1
 801cdf6:	697a      	ldr	r2, [r7, #20]
 801cdf8:	fb02 f303 	mul.w	r3, r2, r3
 801cdfc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801cdfe:	693b      	ldr	r3, [r7, #16]
 801ce00:	3301      	adds	r3, #1
 801ce02:	613b      	str	r3, [r7, #16]
 801ce04:	e7e8      	b.n	801cdd8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 801ce06:	697b      	ldr	r3, [r7, #20]
}
 801ce08:	4618      	mov	r0, r3
 801ce0a:	3718      	adds	r7, #24
 801ce0c:	46bd      	mov	sp, r7
 801ce0e:	bd80      	pop	{r7, pc}

0801ce10 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 801ce10:	b590      	push	{r4, r7, lr}
 801ce12:	b087      	sub	sp, #28
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	60f8      	str	r0, [r7, #12]
 801ce18:	60b9      	str	r1, [r7, #8]
 801ce1a:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801ce1c:	68f8      	ldr	r0, [r7, #12]
 801ce1e:	f7fd fe4a 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ce22:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 801ce24:	2300      	movs	r3, #0
 801ce26:	617b      	str	r3, [r7, #20]
 801ce28:	697a      	ldr	r2, [r7, #20]
 801ce2a:	693b      	ldr	r3, [r7, #16]
 801ce2c:	429a      	cmp	r2, r3
 801ce2e:	da15      	bge.n	801ce5c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 801ce30:	697a      	ldr	r2, [r7, #20]
 801ce32:	68bb      	ldr	r3, [r7, #8]
 801ce34:	429a      	cmp	r2, r3
 801ce36:	d00d      	beq.n	801ce54 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801ce38:	6979      	ldr	r1, [r7, #20]
 801ce3a:	68f8      	ldr	r0, [r7, #12]
 801ce3c:	f7fd ff48 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ce40:	4604      	mov	r4, r0
 801ce42:	6979      	ldr	r1, [r7, #20]
 801ce44:	6878      	ldr	r0, [r7, #4]
 801ce46:	f7fd ff43 	bl	801acd0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ce4a:	4603      	mov	r3, r0
 801ce4c:	429c      	cmp	r4, r3
 801ce4e:	d001      	beq.n	801ce54 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801ce50:	f005 fca0 	bl	8022794 <abort>
  for (int i = 0; i < dims_count; ++i) {
 801ce54:	697b      	ldr	r3, [r7, #20]
 801ce56:	3301      	adds	r3, #1
 801ce58:	617b      	str	r3, [r7, #20]
 801ce5a:	e7e5      	b.n	801ce28 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801ce5c:	68b9      	ldr	r1, [r7, #8]
 801ce5e:	68f8      	ldr	r0, [r7, #12]
 801ce60:	f7ff ffa0 	bl	801cda4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801ce64:	4603      	mov	r3, r0
}
 801ce66:	4618      	mov	r0, r3
 801ce68:	371c      	adds	r7, #28
 801ce6a:	46bd      	mov	sp, r7
 801ce6c:	bd90      	pop	{r4, r7, pc}

0801ce6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801ce6e:	b580      	push	{r7, lr}
 801ce70:	b082      	sub	sp, #8
 801ce72:	af00      	add	r7, sp, #0
 801ce74:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801ce76:	2100      	movs	r1, #0
 801ce78:	6878      	ldr	r0, [r7, #4]
 801ce7a:	f7fe fb23 	bl	801b4c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801ce7e:	4603      	mov	r3, r0
}
 801ce80:	4618      	mov	r0, r3
 801ce82:	3708      	adds	r7, #8
 801ce84:	46bd      	mov	sp, r7
 801ce86:	bd80      	pop	{r7, pc}

0801ce88 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b082      	sub	sp, #8
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801ce90:	6878      	ldr	r0, [r7, #4]
 801ce92:	f000 f805 	bl	801cea0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 801ce96:	4603      	mov	r3, r0
}
 801ce98:	4618      	mov	r0, r3
 801ce9a:	3708      	adds	r7, #8
 801ce9c:	46bd      	mov	sp, r7
 801ce9e:	bd80      	pop	{r7, pc}

0801cea0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801cea0:	b580      	push	{r7, lr}
 801cea2:	b082      	sub	sp, #8
 801cea4:	af00      	add	r7, sp, #0
 801cea6:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801cea8:	2101      	movs	r1, #1
 801ceaa:	6878      	ldr	r0, [r7, #4]
 801ceac:	f7fe fb0a 	bl	801b4c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801ceb0:	4603      	mov	r3, r0
  }
 801ceb2:	4618      	mov	r0, r3
 801ceb4:	3708      	adds	r7, #8
 801ceb6:	46bd      	mov	sp, r7
 801ceb8:	bd80      	pop	{r7, pc}

0801ceba <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 801ceba:	b590      	push	{r4, r7, lr}
 801cebc:	b085      	sub	sp, #20
 801cebe:	af00      	add	r7, sp, #0
 801cec0:	60f8      	str	r0, [r7, #12]
 801cec2:	60b9      	str	r1, [r7, #8]
 801cec4:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801cec6:	f107 0308 	add.w	r3, r7, #8
 801ceca:	4618      	mov	r0, r3
 801cecc:	f7ff f8b4 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801ced0:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801ced2:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801ced4:	1d3b      	adds	r3, r7, #4
 801ced6:	4618      	mov	r0, r3
 801ced8:	f7ff f8ae 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cedc:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	461a      	mov	r2, r3
 801cee2:	4621      	mov	r1, r4
 801cee4:	68f8      	ldr	r0, [r7, #12]
 801cee6:	f7ff fb0b 	bl	801c500 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801ceea:	4603      	mov	r3, r0
 801ceec:	4618      	mov	r0, r3
 801ceee:	f7ff f831 	bl	801bf54 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801cef2:	4603      	mov	r3, r0
}
 801cef4:	4618      	mov	r0, r3
 801cef6:	3714      	adds	r7, #20
 801cef8:	46bd      	mov	sp, r7
 801cefa:	bd90      	pop	{r4, r7, pc}

0801cefc <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 801cefc:	b580      	push	{r7, lr}
 801cefe:	b082      	sub	sp, #8
 801cf00:	af00      	add	r7, sp, #0
 801cf02:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	bf0c      	ite	eq
 801cf0a:	2301      	moveq	r3, #1
 801cf0c:	2300      	movne	r3, #0
 801cf0e:	b2db      	uxtb	r3, r3
 801cf10:	4618      	mov	r0, r3
 801cf12:	f7fe fef9 	bl	801bd08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801cf16:	4603      	mov	r3, r0
}
 801cf18:	4618      	mov	r0, r3
 801cf1a:	3708      	adds	r7, #8
 801cf1c:	46bd      	mov	sp, r7
 801cf1e:	bd80      	pop	{r7, pc}

0801cf20 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 801cf20:	b580      	push	{r7, lr}
 801cf22:	b08a      	sub	sp, #40	; 0x28
 801cf24:	af00      	add	r7, sp, #0
 801cf26:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 801cf28:	482c      	ldr	r0, [pc, #176]	; (801cfdc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801cf2a:	f7ff ffa0 	bl	801ce6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801cf2e:	4603      	mov	r3, r0
 801cf30:	4618      	mov	r0, r3
 801cf32:	f7ff f88c 	bl	801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801cf36:	4603      	mov	r3, r0
 801cf38:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 801cf3a:	4829      	ldr	r0, [pc, #164]	; (801cfe0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 801cf3c:	f7ff ff97 	bl	801ce6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801cf40:	4603      	mov	r3, r0
 801cf42:	4618      	mov	r0, r3
 801cf44:	f7ff f883 	bl	801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801cf48:	4603      	mov	r3, r0
 801cf4a:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 801cf4c:	f000 f86c 	bl	801d028 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 801cf50:	4603      	mov	r3, r0
 801cf52:	4619      	mov	r1, r3
 801cf54:	6878      	ldr	r0, [r7, #4]
 801cf56:	f000 f870 	bl	801d03a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cf5a:	4603      	mov	r3, r0
 801cf5c:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801cf5e:	69f9      	ldr	r1, [r7, #28]
 801cf60:	69f8      	ldr	r0, [r7, #28]
 801cf62:	f000 f83f 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cf66:	4603      	mov	r3, r0
 801cf68:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801cf6a:	69f9      	ldr	r1, [r7, #28]
 801cf6c:	69b8      	ldr	r0, [r7, #24]
 801cf6e:	f000 f839 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cf72:	4603      	mov	r3, r0
 801cf74:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 801cf76:	69b9      	ldr	r1, [r7, #24]
 801cf78:	69b8      	ldr	r0, [r7, #24]
 801cf7a:	f000 f833 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 801cf82:	6938      	ldr	r0, [r7, #16]
 801cf84:	f000 f877 	bl	801d076 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801cf88:	4603      	mov	r3, r0
 801cf8a:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 801cf8c:	6979      	ldr	r1, [r7, #20]
 801cf8e:	68f8      	ldr	r0, [r7, #12]
 801cf90:	f000 f853 	bl	801d03a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cf94:	4603      	mov	r3, r0
 801cf96:	6a39      	ldr	r1, [r7, #32]
 801cf98:	4618      	mov	r0, r3
 801cf9a:	f000 f823 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cf9e:	4603      	mov	r3, r0
 801cfa0:	69b9      	ldr	r1, [r7, #24]
 801cfa2:	4618      	mov	r0, r3
 801cfa4:	f000 f849 	bl	801d03a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cfa8:	4603      	mov	r3, r0
 801cfaa:	4618      	mov	r0, r3
 801cfac:	f000 f879 	bl	801d0a2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801cfb0:	4603      	mov	r3, r0
 801cfb2:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 801cfb4:	68b9      	ldr	r1, [r7, #8]
 801cfb6:	69f8      	ldr	r0, [r7, #28]
 801cfb8:	f000 f83f 	bl	801d03a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cfbc:	4603      	mov	r3, r0
 801cfbe:	4619      	mov	r1, r3
 801cfc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cfc2:	f000 f80f 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cfc6:	4603      	mov	r3, r0
 801cfc8:	4619      	mov	r1, r3
 801cfca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cfcc:	f000 f87f 	bl	801d0ce <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cfd0:	4603      	mov	r3, r0
}
 801cfd2:	4618      	mov	r0, r3
 801cfd4:	3728      	adds	r7, #40	; 0x28
 801cfd6:	46bd      	mov	sp, r7
 801cfd8:	bd80      	pop	{r7, pc}
 801cfda:	bf00      	nop
 801cfdc:	70f5a894 	.word	0x70f5a894
 801cfe0:	2aaaaaab 	.word	0x2aaaaaab

0801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801cfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfe6:	b085      	sub	sp, #20
 801cfe8:	af00      	add	r7, sp, #0
 801cfea:	6078      	str	r0, [r7, #4]
 801cfec:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801cfee:	1d3b      	adds	r3, r7, #4
 801cff0:	4618      	mov	r0, r3
 801cff2:	f7ff f821 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cff6:	4603      	mov	r3, r0
 801cff8:	681d      	ldr	r5, [r3, #0]
 801cffa:	463b      	mov	r3, r7
 801cffc:	4618      	mov	r0, r3
 801cffe:	f7ff f81b 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d002:	4603      	mov	r3, r0
 801d004:	681e      	ldr	r6, [r3, #0]
 801d006:	f107 030c 	add.w	r3, r7, #12
 801d00a:	4618      	mov	r0, r3
 801d00c:	f7ff f814 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d010:	4604      	mov	r4, r0
 801d012:	4631      	mov	r1, r6
 801d014:	4628      	mov	r0, r5
 801d016:	f7fd fde5 	bl	801abe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801d01a:	4603      	mov	r3, r0
 801d01c:	6023      	str	r3, [r4, #0]
  return c;
 801d01e:	68fb      	ldr	r3, [r7, #12]
}
 801d020:	4618      	mov	r0, r3
 801d022:	3714      	adds	r7, #20
 801d024:	46bd      	mov	sp, r7
 801d026:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d028 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 801d028:	b580      	push	{r7, lr}
 801d02a:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801d02c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801d030:	f7ff f80d 	bl	801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801d034:	4603      	mov	r3, r0
  }
 801d036:	4618      	mov	r0, r3
 801d038:	bd80      	pop	{r7, pc}

0801d03a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801d03a:	b590      	push	{r4, r7, lr}
 801d03c:	b083      	sub	sp, #12
 801d03e:	af00      	add	r7, sp, #0
 801d040:	6078      	str	r0, [r7, #4]
 801d042:	6039      	str	r1, [r7, #0]
 801d044:	1d3b      	adds	r3, r7, #4
 801d046:	4618      	mov	r0, r3
 801d048:	f7fe fff6 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d04c:	4603      	mov	r3, r0
 801d04e:	681c      	ldr	r4, [r3, #0]
 801d050:	463b      	mov	r3, r7
 801d052:	4618      	mov	r0, r3
 801d054:	f7fe fff0 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d058:	4603      	mov	r3, r0
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	4619      	mov	r1, r3
 801d05e:	4620      	mov	r0, r4
 801d060:	f7fe fe30 	bl	801bcc4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801d064:	4603      	mov	r3, r0
 801d066:	4618      	mov	r0, r3
 801d068:	f7fe ff74 	bl	801bf54 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d06c:	4603      	mov	r3, r0
 801d06e:	4618      	mov	r0, r3
 801d070:	370c      	adds	r7, #12
 801d072:	46bd      	mov	sp, r7
 801d074:	bd90      	pop	{r4, r7, pc}

0801d076 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801d076:	b580      	push	{r7, lr}
 801d078:	b082      	sub	sp, #8
 801d07a:	af00      	add	r7, sp, #0
 801d07c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801d07e:	1d3b      	adds	r3, r7, #4
 801d080:	4618      	mov	r0, r3
 801d082:	f7fe ffd9 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d086:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	4618      	mov	r0, r3
 801d08c:	f000 f83d 	bl	801d10a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 801d090:	4603      	mov	r3, r0
 801d092:	4618      	mov	r0, r3
 801d094:	f7fe ff5e 	bl	801bf54 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d098:	4603      	mov	r3, r0
}
 801d09a:	4618      	mov	r0, r3
 801d09c:	3708      	adds	r7, #8
 801d09e:	46bd      	mov	sp, r7
 801d0a0:	bd80      	pop	{r7, pc}

0801d0a2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801d0a2:	b580      	push	{r7, lr}
 801d0a4:	b082      	sub	sp, #8
 801d0a6:	af00      	add	r7, sp, #0
 801d0a8:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801d0aa:	1d3b      	adds	r3, r7, #4
 801d0ac:	4618      	mov	r0, r3
 801d0ae:	f7fe ffc3 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d0b2:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d0b4:	681b      	ldr	r3, [r3, #0]
 801d0b6:	4618      	mov	r0, r3
 801d0b8:	f7ff fee6 	bl	801ce88 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 801d0bc:	4603      	mov	r3, r0
 801d0be:	4618      	mov	r0, r3
 801d0c0:	f7fe ff48 	bl	801bf54 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d0c4:	4603      	mov	r3, r0
}
 801d0c6:	4618      	mov	r0, r3
 801d0c8:	3708      	adds	r7, #8
 801d0ca:	46bd      	mov	sp, r7
 801d0cc:	bd80      	pop	{r7, pc}

0801d0ce <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801d0ce:	b590      	push	{r4, r7, lr}
 801d0d0:	b083      	sub	sp, #12
 801d0d2:	af00      	add	r7, sp, #0
 801d0d4:	6078      	str	r0, [r7, #4]
 801d0d6:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801d0d8:	1d3b      	adds	r3, r7, #4
 801d0da:	4618      	mov	r0, r3
 801d0dc:	f7fe ffac 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d0e0:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d0e2:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801d0e4:	463b      	mov	r3, r7
 801d0e6:	4618      	mov	r0, r3
 801d0e8:	f7fe ffa6 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d0ec:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	4619      	mov	r1, r3
 801d0f2:	4620      	mov	r0, r4
 801d0f4:	f000 f815 	bl	801d122 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 801d0f8:	4603      	mov	r3, r0
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	f7fe ff2a 	bl	801bf54 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d100:	4603      	mov	r3, r0
}
 801d102:	4618      	mov	r0, r3
 801d104:	370c      	adds	r7, #12
 801d106:	46bd      	mov	sp, r7
 801d108:	bd90      	pop	{r4, r7, pc}

0801d10a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801d10a:	b580      	push	{r7, lr}
 801d10c:	b082      	sub	sp, #8
 801d10e:	af00      	add	r7, sp, #0
 801d110:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801d112:	6878      	ldr	r0, [r7, #4]
 801d114:	f000 f813 	bl	801d13e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 801d118:	4603      	mov	r3, r0
}
 801d11a:	4618      	mov	r0, r3
 801d11c:	3708      	adds	r7, #8
 801d11e:	46bd      	mov	sp, r7
 801d120:	bd80      	pop	{r7, pc}

0801d122 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 801d122:	b580      	push	{r7, lr}
 801d124:	b082      	sub	sp, #8
 801d126:	af00      	add	r7, sp, #0
 801d128:	6078      	str	r0, [r7, #4]
 801d12a:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 801d12c:	6839      	ldr	r1, [r7, #0]
 801d12e:	6878      	ldr	r0, [r7, #4]
 801d130:	f000 f812 	bl	801d158 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 801d134:	4603      	mov	r3, r0
}
 801d136:	4618      	mov	r0, r3
 801d138:	3708      	adds	r7, #8
 801d13a:	46bd      	mov	sp, r7
 801d13c:	bd80      	pop	{r7, pc}

0801d13e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801d13e:	b580      	push	{r7, lr}
 801d140:	b082      	sub	sp, #8
 801d142:	af00      	add	r7, sp, #0
 801d144:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801d146:	2102      	movs	r1, #2
 801d148:	6878      	ldr	r0, [r7, #4]
 801d14a:	f7fe f9bb 	bl	801b4c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801d14e:	4603      	mov	r3, r0
  }
 801d150:	4618      	mov	r0, r3
 801d152:	3708      	adds	r7, #8
 801d154:	46bd      	mov	sp, r7
 801d156:	bd80      	pop	{r7, pc}

0801d158 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 801d158:	b580      	push	{r7, lr}
 801d15a:	b082      	sub	sp, #8
 801d15c:	af00      	add	r7, sp, #0
 801d15e:	6078      	str	r0, [r7, #4]
 801d160:	6039      	str	r1, [r7, #0]
 801d162:	6839      	ldr	r1, [r7, #0]
 801d164:	6878      	ldr	r0, [r7, #4]
 801d166:	f7fe fdad 	bl	801bcc4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801d16a:	4603      	mov	r3, r0
 801d16c:	4618      	mov	r0, r3
 801d16e:	3708      	adds	r7, #8
 801d170:	46bd      	mov	sp, r7
 801d172:	bd80      	pop	{r7, pc}

0801d174 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801d174:	b480      	push	{r7}
 801d176:	b083      	sub	sp, #12
 801d178:	af00      	add	r7, sp, #0
 801d17a:	6078      	str	r0, [r7, #4]
 801d17c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	781a      	ldrb	r2, [r3, #0]
 801d182:	683b      	ldr	r3, [r7, #0]
 801d184:	781b      	ldrb	r3, [r3, #0]
 801d186:	429a      	cmp	r2, r3
 801d188:	d201      	bcs.n	801d18e <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801d18a:	683b      	ldr	r3, [r7, #0]
 801d18c:	e000      	b.n	801d190 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801d18e:	687b      	ldr	r3, [r7, #4]
    }
 801d190:	4618      	mov	r0, r3
 801d192:	370c      	adds	r7, #12
 801d194:	46bd      	mov	sp, r7
 801d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d19a:	4770      	bx	lr

0801d19c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801d19c:	b480      	push	{r7}
 801d19e:	b083      	sub	sp, #12
 801d1a0:	af00      	add	r7, sp, #0
 801d1a2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d002      	beq.n	801d1b0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	e000      	b.n	801d1b2 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 801d1b0:	2300      	movs	r3, #0
}
 801d1b2:	4618      	mov	r0, r3
 801d1b4:	370c      	adds	r7, #12
 801d1b6:	46bd      	mov	sp, r7
 801d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1bc:	4770      	bx	lr
	...

0801d1c0 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 801d1c0:	b580      	push	{r7, lr}
 801d1c2:	b086      	sub	sp, #24
 801d1c4:	af00      	add	r7, sp, #0
 801d1c6:	4603      	mov	r3, r0
 801d1c8:	6039      	str	r1, [r7, #0]
 801d1ca:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 801d1cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d1d0:	11db      	asrs	r3, r3, #7
 801d1d2:	b21b      	sxth	r3, r3
 801d1d4:	b29b      	uxth	r3, r3
 801d1d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d1da:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 801d1dc:	8afb      	ldrh	r3, [r7, #22]
 801d1de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d1e2:	d306      	bcc.n	801d1f2 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 801d1e4:	4b1a      	ldr	r3, [pc, #104]	; (801d250 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 801d1e6:	4a1b      	ldr	r2, [pc, #108]	; (801d254 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 801d1e8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801d1ec:	481a      	ldr	r0, [pc, #104]	; (801d258 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 801d1ee:	f005 fad9 	bl	80227a4 <__assert_func>
  int16_t offset = value & 0x7f;
 801d1f2:	88fb      	ldrh	r3, [r7, #6]
 801d1f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d1f8:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 801d1fa:	8afb      	ldrh	r3, [r7, #22]
 801d1fc:	005b      	lsls	r3, r3, #1
 801d1fe:	683a      	ldr	r2, [r7, #0]
 801d200:	4413      	add	r3, r2
 801d202:	881b      	ldrh	r3, [r3, #0]
 801d204:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 801d206:	8afb      	ldrh	r3, [r7, #22]
 801d208:	3301      	adds	r3, #1
 801d20a:	005b      	lsls	r3, r3, #1
 801d20c:	683a      	ldr	r2, [r7, #0]
 801d20e:	4413      	add	r3, r2
 801d210:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d214:	b29a      	uxth	r2, r3
 801d216:	8afb      	ldrh	r3, [r7, #22]
 801d218:	005b      	lsls	r3, r3, #1
 801d21a:	6839      	ldr	r1, [r7, #0]
 801d21c:	440b      	add	r3, r1
 801d21e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d222:	b29b      	uxth	r3, r3
 801d224:	1ad3      	subs	r3, r2, r3
 801d226:	b29b      	uxth	r3, r3
 801d228:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 801d22a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801d22e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d232:	fb02 f303 	mul.w	r3, r2, r3
 801d236:	3340      	adds	r3, #64	; 0x40
 801d238:	11db      	asrs	r3, r3, #7
 801d23a:	60fb      	str	r3, [r7, #12]
  return base + delta;
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	b29a      	uxth	r2, r3
 801d240:	8a7b      	ldrh	r3, [r7, #18]
 801d242:	4413      	add	r3, r2
 801d244:	b29b      	uxth	r3, r3
 801d246:	b21b      	sxth	r3, r3
}
 801d248:	4618      	mov	r0, r3
 801d24a:	3718      	adds	r7, #24
 801d24c:	46bd      	mov	sp, r7
 801d24e:	bd80      	pop	{r7, pc}
 801d250:	08028100 	.word	0x08028100
 801d254:	0802812c 	.word	0x0802812c
 801d258:	08028170 	.word	0x08028170

0801d25c <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b08a      	sub	sp, #40	; 0x28
 801d260:	af00      	add	r7, sp, #0
 801d262:	60f8      	str	r0, [r7, #12]
 801d264:	60b9      	str	r1, [r7, #8]
 801d266:	607a      	str	r2, [r7, #4]
 801d268:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d26c:	687a      	ldr	r2, [r7, #4]
 801d26e:	fb03 f202 	mul.w	r2, r3, r2
 801d272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d274:	4413      	add	r3, r2
 801d276:	005b      	lsls	r3, r3, #1
 801d278:	68ba      	ldr	r2, [r7, #8]
 801d27a:	4413      	add	r3, r2
 801d27c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d280:	461a      	mov	r2, r3
 801d282:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d286:	1ad3      	subs	r3, r2, r3
 801d288:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 801d28a:	68fb      	ldr	r3, [r7, #12]
 801d28c:	6899      	ldr	r1, [r3, #8]
 801d28e:	68fb      	ldr	r3, [r7, #12]
 801d290:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801d292:	461a      	mov	r2, r3
 801d294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d296:	f7fd fdab 	bl	801adf0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801d29a:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 801d29c:	6a3b      	ldr	r3, [r7, #32]
 801d29e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801d2a2:	337f      	adds	r3, #127	; 0x7f
 801d2a4:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801d2a6:	4b12      	ldr	r3, [pc, #72]	; (801d2f0 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 801d2a8:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 801d2aa:	f107 0214 	add.w	r2, r7, #20
 801d2ae:	f107 0310 	add.w	r3, r7, #16
 801d2b2:	4611      	mov	r1, r2
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	f7fd fbb3 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801d2ba:	4602      	mov	r2, r0
 801d2bc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d2c0:	61bb      	str	r3, [r7, #24]
 801d2c2:	f107 0318 	add.w	r3, r7, #24
 801d2c6:	4619      	mov	r1, r3
 801d2c8:	4610      	mov	r0, r2
 801d2ca:	f7fd fb95 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801d2ce:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801d2d0:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 801d2d2:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d2d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d2dc:	4611      	mov	r1, r2
 801d2de:	4618      	mov	r0, r3
 801d2e0:	f7ff ff6e 	bl	801d1c0 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801d2e4:	4603      	mov	r3, r0
}
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	3728      	adds	r7, #40	; 0x28
 801d2ea:	46bd      	mov	sp, r7
 801d2ec:	bd80      	pop	{r7, pc}
 801d2ee:	bf00      	nop
 801d2f0:	ffff8000 	.word	0xffff8000

0801d2f4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 801d2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2f8:	b0ab      	sub	sp, #172	; 0xac
 801d2fa:	af02      	add	r7, sp, #8
 801d2fc:	63f8      	str	r0, [r7, #60]	; 0x3c
 801d2fe:	63b9      	str	r1, [r7, #56]	; 0x38
 801d300:	637a      	str	r2, [r7, #52]	; 0x34
 801d302:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801d304:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d306:	f7fd fbd6 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d30a:	4603      	mov	r3, r0
 801d30c:	3b01      	subs	r3, #1
 801d30e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801d312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d314:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801d318:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d31a:	f7ff fd79 	bl	801ce10 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801d31e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801d322:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d328:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801d32c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d32e:	f7fe fd31 	bl	801bd94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801d332:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 801d336:	2300      	movs	r3, #0
 801d338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d33c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d344:	429a      	cmp	r2, r3
 801d346:	f280 8157 	bge.w	801d5f8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 801d34a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d34e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801d352:	2300      	movs	r3, #0
 801d354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d358:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801d35c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d360:	429a      	cmp	r2, r3
 801d362:	da1c      	bge.n	801d39e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801d364:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d368:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d36c:	fb03 f202 	mul.w	r2, r3, r2
 801d370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d374:	4413      	add	r3, r2
 801d376:	005a      	lsls	r2, r3, #1
 801d378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d37a:	441a      	add	r2, r3
 801d37c:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 801d380:	4611      	mov	r1, r2
 801d382:	4618      	mov	r0, r3
 801d384:	f7ff fcd6 	bl	801cd34 <_ZSt3maxIsERKT_S2_S2_>
 801d388:	4603      	mov	r3, r0
 801d38a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d38e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801d392:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d396:	3301      	adds	r3, #1
 801d398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d39c:	e7dc      	b.n	801d358 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801d39e:	2300      	movs	r3, #0
 801d3a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 801d3a4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d3a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d3ac:	fb02 f303 	mul.w	r3, r2, r3
 801d3b0:	005a      	lsls	r2, r3, #1
 801d3b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801d3b6:	4413      	add	r3, r2
 801d3b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 801d3ba:	2300      	movs	r3, #0
 801d3bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d3c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d3c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d3c8:	429a      	cmp	r2, r3
 801d3ca:	da28      	bge.n	801d41e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801d3cc:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 801d3d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d3d4:	005a      	lsls	r2, r3, #1
 801d3d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d3d8:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801d3da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d3de:	9301      	str	r3, [sp, #4]
 801d3e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d3e4:	9300      	str	r3, [sp, #0]
 801d3e6:	460b      	mov	r3, r1
 801d3e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801d3ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d3ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801d3f0:	f7ff ff34 	bl	801d25c <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801d3f4:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 801d3f6:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 801d3f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d3fc:	005a      	lsls	r2, r3, #1
 801d3fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d400:	4413      	add	r3, r2
 801d402:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d406:	461a      	mov	r2, r3
 801d408:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d40c:	4413      	add	r3, r2
 801d40e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 801d412:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d416:	3301      	adds	r3, #1
 801d418:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d41c:	e7d0      	b.n	801d3c0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 801d41e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d422:	4618      	mov	r0, r3
 801d424:	f7fe fd84 	bl	801bf30 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801d428:	4603      	mov	r3, r0
 801d42a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 801d42e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d432:	17da      	asrs	r2, r3, #31
 801d434:	623b      	str	r3, [r7, #32]
 801d436:	627a      	str	r2, [r7, #36]	; 0x24
 801d438:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801d43c:	1e59      	subs	r1, r3, #1
 801d43e:	f1a1 0320 	sub.w	r3, r1, #32
 801d442:	f1c1 0220 	rsb	r2, r1, #32
 801d446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d448:	fa00 f901 	lsl.w	r9, r0, r1
 801d44c:	6a38      	ldr	r0, [r7, #32]
 801d44e:	fa00 f303 	lsl.w	r3, r0, r3
 801d452:	ea49 0903 	orr.w	r9, r9, r3
 801d456:	6a3b      	ldr	r3, [r7, #32]
 801d458:	fa23 f202 	lsr.w	r2, r3, r2
 801d45c:	ea49 0902 	orr.w	r9, r9, r2
 801d460:	6a3b      	ldr	r3, [r7, #32]
 801d462:	fa03 f801 	lsl.w	r8, r3, r1
 801d466:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 801d46a:	61bb      	str	r3, [r7, #24]
 801d46c:	f149 0300 	adc.w	r3, r9, #0
 801d470:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 801d472:	f04f 0200 	mov.w	r2, #0
 801d476:	f04f 0300 	mov.w	r3, #0
 801d47a:	69b9      	ldr	r1, [r7, #24]
 801d47c:	0b8a      	lsrs	r2, r1, #14
 801d47e:	69f9      	ldr	r1, [r7, #28]
 801d480:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 801d484:	69f9      	ldr	r1, [r7, #28]
 801d486:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 801d488:	4613      	mov	r3, r2
 801d48a:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 801d48c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d48e:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 801d492:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801d494:	4b5b      	ldr	r3, [pc, #364]	; (801d604 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 801d496:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 801d498:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d49c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d4a0:	4611      	mov	r1, r2
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	f7fd fabc 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801d4a8:	4602      	mov	r2, r0
 801d4aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d4ae:	657b      	str	r3, [r7, #84]	; 0x54
 801d4b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d4b4:	4619      	mov	r1, r3
 801d4b6:	4610      	mov	r0, r2
 801d4b8:	f7fd fa9e 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801d4bc:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801d4be:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 801d4c0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801d4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 801d4c8:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801d4cc:	4611      	mov	r1, r2
 801d4ce:	4618      	mov	r0, r3
 801d4d0:	f7ff fe76 	bl	801d1c0 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801d4d4:	4603      	mov	r3, r0
 801d4d6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 801d4da:	2300      	movs	r3, #0
 801d4dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d4e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801d4e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d4e8:	429a      	cmp	r2, r3
 801d4ea:	da7f      	bge.n	801d5ec <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 801d4ec:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801d4f0:	f1c3 031f 	rsb	r3, r3, #31
 801d4f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 801d4f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801d4fc:	1e5a      	subs	r2, r3, #1
 801d4fe:	2301      	movs	r3, #1
 801d500:	4093      	lsls	r3, r2
 801d502:	17da      	asrs	r2, r3, #31
 801d504:	603b      	str	r3, [r7, #0]
 801d506:	607a      	str	r2, [r7, #4]
 801d508:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d50c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801d510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d514:	005a      	lsls	r2, r3, #1
 801d516:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d518:	4413      	add	r3, r2
 801d51a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d51e:	b21b      	sxth	r3, r3
 801d520:	17da      	asrs	r2, r3, #31
 801d522:	613b      	str	r3, [r7, #16]
 801d524:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801d526:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801d52a:	17da      	asrs	r2, r3, #31
 801d52c:	60bb      	str	r3, [r7, #8]
 801d52e:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801d530:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d534:	460b      	mov	r3, r1
 801d536:	68ba      	ldr	r2, [r7, #8]
 801d538:	fb02 f203 	mul.w	r2, r2, r3
 801d53c:	68fb      	ldr	r3, [r7, #12]
 801d53e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 801d542:	4601      	mov	r1, r0
 801d544:	fb01 f303 	mul.w	r3, r1, r3
 801d548:	4413      	add	r3, r2
 801d54a:	693a      	ldr	r2, [r7, #16]
 801d54c:	68b9      	ldr	r1, [r7, #8]
 801d54e:	fba2 ab01 	umull	sl, fp, r2, r1
 801d552:	445b      	add	r3, fp
 801d554:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801d556:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801d55a:	eb1a 0502 	adds.w	r5, sl, r2
 801d55e:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 801d562:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 801d566:	f1c1 0320 	rsb	r3, r1, #32
 801d56a:	f1b1 0220 	subs.w	r2, r1, #32
 801d56e:	fa25 f001 	lsr.w	r0, r5, r1
 801d572:	62b8      	str	r0, [r7, #40]	; 0x28
 801d574:	fa06 f303 	lsl.w	r3, r6, r3
 801d578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d57a:	ea40 0003 	orr.w	r0, r0, r3
 801d57e:	62b8      	str	r0, [r7, #40]	; 0x28
 801d580:	d404      	bmi.n	801d58c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 801d582:	fa46 f202 	asr.w	r2, r6, r2
 801d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d588:	4313      	orrs	r3, r2
 801d58a:	62bb      	str	r3, [r7, #40]	; 0x28
 801d58c:	fa46 f301 	asr.w	r3, r6, r1
 801d590:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d594:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 801d596:	2300      	movs	r3, #0
 801d598:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 801d59a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801d59e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d5a2:	4611      	mov	r1, r2
 801d5a4:	4618      	mov	r0, r3
 801d5a6:	f7fd fa3b 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801d5aa:	4602      	mov	r2, r0
 801d5ac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d5b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d5b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d5b6:	4619      	mov	r1, r3
 801d5b8:	4610      	mov	r0, r2
 801d5ba:	f7fd fa1d 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801d5be:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 801d5c0:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801d5c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d5c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d5ca:	fb03 f202 	mul.w	r2, r3, r2
 801d5ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d5d2:	4413      	add	r3, r2
 801d5d4:	005a      	lsls	r2, r3, #1
 801d5d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801d5da:	441a      	add	r2, r3
 801d5dc:	b20b      	sxth	r3, r1
 801d5de:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 801d5e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d5e4:	3301      	adds	r3, #1
 801d5e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d5ea:	e779      	b.n	801d4e0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 801d5ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d5f0:	3301      	adds	r3, #1
 801d5f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d5f6:	e6a1      	b.n	801d33c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 801d5f8:	bf00      	nop
 801d5fa:	37a4      	adds	r7, #164	; 0xa4
 801d5fc:	46bd      	mov	sp, r7
 801d5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d602:	bf00      	nop
 801d604:	ffff8000 	.word	0xffff8000

0801d608 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 801d608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d60c:	b0bc      	sub	sp, #240	; 0xf0
 801d60e:	af04      	add	r7, sp, #16
 801d610:	60f8      	str	r0, [r7, #12]
 801d612:	60b9      	str	r1, [r7, #8]
 801d614:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	7a1b      	ldrb	r3, [r3, #8]
 801d61a:	2b03      	cmp	r3, #3
 801d61c:	d127      	bne.n	801d66e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 801d61e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d622:	68f9      	ldr	r1, [r7, #12]
 801d624:	4618      	mov	r0, r3
 801d626:	f7ff fb9b 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801d62a:	68f8      	ldr	r0, [r7, #12]
 801d62c:	f7fe f98e 	bl	801b94c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801d630:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 801d632:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d636:	68b9      	ldr	r1, [r7, #8]
 801d638:	4618      	mov	r0, r3
 801d63a:	f7ff fb91 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801d63e:	68b8      	ldr	r0, [r7, #8]
 801d640:	f7fe f993 	bl	801b96a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801d644:	4602      	mov	r2, r0
 801d646:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d64a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801d64e:	9200      	str	r2, [sp, #0]
 801d650:	4622      	mov	r2, r4
 801d652:	6878      	ldr	r0, [r7, #4]
 801d654:	f000 f930 	bl	801d8b8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 801d658:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d65c:	4618      	mov	r0, r3
 801d65e:	f7fd fa14 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801d662:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d666:	4618      	mov	r0, r3
 801d668:	f7fd fa0f 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
 801d66c:	e080      	b.n	801d770 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	7a1b      	ldrb	r3, [r3, #8]
 801d672:	2b09      	cmp	r3, #9
 801d674:	d153      	bne.n	801d71e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 801d676:	68bb      	ldr	r3, [r7, #8]
 801d678:	7a1b      	ldrb	r3, [r3, #8]
 801d67a:	2b07      	cmp	r3, #7
 801d67c:	d077      	beq.n	801d76e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801d67e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d682:	68f9      	ldr	r1, [r7, #12]
 801d684:	4618      	mov	r0, r3
 801d686:	f7ff fb6b 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801d68a:	f107 0314 	add.w	r3, r7, #20
 801d68e:	68b9      	ldr	r1, [r7, #8]
 801d690:	4618      	mov	r0, r3
 801d692:	f7ff fb65 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 801d696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d69a:	4618      	mov	r0, r3
 801d69c:	f7fd fa0b 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d6a0:	4603      	mov	r3, r0
 801d6a2:	3b01      	subs	r3, #1
 801d6a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801d6a8:	f107 0214 	add.w	r2, r7, #20
 801d6ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d6b0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801d6b4:	4618      	mov	r0, r3
 801d6b6:	f7ff fbab 	bl	801ce10 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801d6ba:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801d6be:	f107 0214 	add.w	r2, r7, #20
 801d6c2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801d6c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d6ca:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801d6ce:	f7fe fb61 	bl	801bd94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801d6d2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801d6d6:	68f8      	ldr	r0, [r7, #12]
 801d6d8:	f7fe f8cc 	bl	801b874 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801d6dc:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	689e      	ldr	r6, [r3, #8]
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801d6ea:	68b8      	ldr	r0, [r7, #8]
 801d6ec:	f7fe f8d1 	bl	801b892 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801d6f0:	4603      	mov	r3, r0
 801d6f2:	9302      	str	r3, [sp, #8]
 801d6f4:	9501      	str	r5, [sp, #4]
 801d6f6:	9400      	str	r4, [sp, #0]
 801d6f8:	4633      	mov	r3, r6
 801d6fa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801d6fe:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801d702:	4640      	mov	r0, r8
 801d704:	f7f6 fe3c 	bl	8014380 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801d708:	f107 0314 	add.w	r3, r7, #20
 801d70c:	4618      	mov	r0, r3
 801d70e:	f7fd f9bc 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801d712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d716:	4618      	mov	r0, r3
 801d718:	f7fd f9b7 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
 801d71c:	e028      	b.n	801d770 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 801d71e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801d722:	68f9      	ldr	r1, [r7, #12]
 801d724:	4618      	mov	r0, r3
 801d726:	f7ff fb1b 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801d72a:	68f8      	ldr	r0, [r7, #12]
 801d72c:	f7fe fb61 	bl	801bdf2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 801d730:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 801d732:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d736:	68b9      	ldr	r1, [r7, #8]
 801d738:	4618      	mov	r0, r3
 801d73a:	f7ff fb11 	bl	801cd60 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801d73e:	68b8      	ldr	r0, [r7, #8]
 801d740:	f7ff fd2c 	bl	801d19c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 801d744:	4602      	mov	r2, r0
 801d746:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d74a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 801d74e:	9200      	str	r2, [sp, #0]
 801d750:	4622      	mov	r2, r4
 801d752:	6878      	ldr	r0, [r7, #4]
 801d754:	f7ff fdce 	bl	801d2f4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 801d758:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d75c:	4618      	mov	r0, r3
 801d75e:	f7fd f994 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801d762:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801d766:	4618      	mov	r0, r3
 801d768:	f7fd f98f 	bl	801aa8a <_ZN6tflite12RuntimeShapeD1Ev>
 801d76c:	e000      	b.n	801d770 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 801d76e:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 801d770:	37e0      	adds	r7, #224	; 0xe0
 801d772:	46bd      	mov	sp, r7
 801d774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d778 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801d778:	b5b0      	push	{r4, r5, r7, lr}
 801d77a:	b09e      	sub	sp, #120	; 0x78
 801d77c:	af00      	add	r7, sp, #0
 801d77e:	6078      	str	r0, [r7, #4]
 801d780:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801d782:	2200      	movs	r2, #0
 801d784:	6839      	ldr	r1, [r7, #0]
 801d786:	6878      	ldr	r0, [r7, #4]
 801d788:	f7fd fb76 	bl	801ae78 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801d78c:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801d78e:	2200      	movs	r2, #0
 801d790:	6839      	ldr	r1, [r7, #0]
 801d792:	6878      	ldr	r0, [r7, #4]
 801d794:	f7fd fb80 	bl	801ae98 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801d798:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 801d79a:	683b      	ldr	r3, [r7, #0]
 801d79c:	691b      	ldr	r3, [r3, #16]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d101      	bne.n	801d7a6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801d7a2:	f004 fff7 	bl	8022794 <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 801d7a6:	683b      	ldr	r3, [r7, #0]
 801d7a8:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 801d7aa:	f107 0408 	add.w	r4, r7, #8
 801d7ae:	461d      	mov	r5, r3
 801d7b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d7b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d7b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d7b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d7b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d7ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d7bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d7c0:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 801d7c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d7c6:	7a1b      	ldrb	r3, [r3, #8]
 801d7c8:	3b01      	subs	r3, #1
 801d7ca:	2b08      	cmp	r3, #8
 801d7cc:	d84a      	bhi.n	801d864 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 801d7ce:	a201      	add	r2, pc, #4	; (adr r2, 801d7d4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 801d7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d7d4:	0801d7f9 	.word	0x0801d7f9
 801d7d8:	0801d865 	.word	0x0801d865
 801d7dc:	0801d829 	.word	0x0801d829
 801d7e0:	0801d865 	.word	0x0801d865
 801d7e4:	0801d865 	.word	0x0801d865
 801d7e8:	0801d865 	.word	0x0801d865
 801d7ec:	0801d847 	.word	0x0801d847
 801d7f0:	0801d865 	.word	0x0801d865
 801d7f4:	0801d817 	.word	0x0801d817
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	695c      	ldr	r4, [r3, #20]
 801d7fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d7fe:	7a1b      	ldrb	r3, [r3, #8]
 801d800:	4618      	mov	r0, r3
 801d802:	f7fc fbe7 	bl	8019fd4 <TfLiteTypeGetName>
 801d806:	4602      	mov	r2, r0
 801d808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d80a:	7a1b      	ldrb	r3, [r3, #8]
 801d80c:	491e      	ldr	r1, [pc, #120]	; (801d888 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d80e:	6878      	ldr	r0, [r7, #4]
 801d810:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d812:	2301      	movs	r3, #1
 801d814:	e034      	b.n	801d880 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 801d816:	f107 0308 	add.w	r3, r7, #8
 801d81a:	461a      	mov	r2, r3
 801d81c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d81e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801d820:	f7ff fef2 	bl	801d608 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801d824:	2300      	movs	r3, #0
 801d826:	e02b      	b.n	801d880 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	695c      	ldr	r4, [r3, #20]
 801d82c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d82e:	7a1b      	ldrb	r3, [r3, #8]
 801d830:	4618      	mov	r0, r3
 801d832:	f7fc fbcf 	bl	8019fd4 <TfLiteTypeGetName>
 801d836:	4602      	mov	r2, r0
 801d838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d83a:	7a1b      	ldrb	r3, [r3, #8]
 801d83c:	4912      	ldr	r1, [pc, #72]	; (801d888 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d83e:	6878      	ldr	r0, [r7, #4]
 801d840:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d842:	2301      	movs	r3, #1
 801d844:	e01c      	b.n	801d880 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	695c      	ldr	r4, [r3, #20]
 801d84a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d84c:	7a1b      	ldrb	r3, [r3, #8]
 801d84e:	4618      	mov	r0, r3
 801d850:	f7fc fbc0 	bl	8019fd4 <TfLiteTypeGetName>
 801d854:	4602      	mov	r2, r0
 801d856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d858:	7a1b      	ldrb	r3, [r3, #8]
 801d85a:	490b      	ldr	r1, [pc, #44]	; (801d888 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d85c:	6878      	ldr	r0, [r7, #4]
 801d85e:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d860:	2301      	movs	r3, #1
 801d862:	e00d      	b.n	801d880 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	695c      	ldr	r4, [r3, #20]
 801d868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d86a:	7a1b      	ldrb	r3, [r3, #8]
 801d86c:	4618      	mov	r0, r3
 801d86e:	f7fc fbb1 	bl	8019fd4 <TfLiteTypeGetName>
 801d872:	4602      	mov	r2, r0
 801d874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d876:	7a1b      	ldrb	r3, [r3, #8]
 801d878:	4903      	ldr	r1, [pc, #12]	; (801d888 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d87a:	6878      	ldr	r0, [r7, #4]
 801d87c:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d87e:	2301      	movs	r3, #1
  }
}
 801d880:	4618      	mov	r0, r3
 801d882:	3778      	adds	r7, #120	; 0x78
 801d884:	46bd      	mov	sp, r7
 801d886:	bdb0      	pop	{r4, r5, r7, pc}
 801d888:	080281fc 	.word	0x080281fc

0801d88c <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801d88c:	b4b0      	push	{r4, r5, r7}
 801d88e:	b083      	sub	sp, #12
 801d890:	af00      	add	r7, sp, #0
 801d892:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	4a07      	ldr	r2, [pc, #28]	; (801d8b4 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 801d898:	461c      	mov	r4, r3
 801d89a:	4615      	mov	r5, r2
 801d89c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d89e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d8a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801d8a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801d8a8:	6878      	ldr	r0, [r7, #4]
 801d8aa:	370c      	adds	r7, #12
 801d8ac:	46bd      	mov	sp, r7
 801d8ae:	bcb0      	pop	{r4, r5, r7}
 801d8b0:	4770      	bx	lr
 801d8b2:	bf00      	nop
 801d8b4:	08028218 	.word	0x08028218

0801d8b8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801d8b8:	b590      	push	{r4, r7, lr}
 801d8ba:	b09f      	sub	sp, #124	; 0x7c
 801d8bc:	af00      	add	r7, sp, #0
 801d8be:	60f8      	str	r0, [r7, #12]
 801d8c0:	60b9      	str	r1, [r7, #8]
 801d8c2:	607a      	str	r2, [r7, #4]
 801d8c4:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801d8c6:	68fb      	ldr	r3, [r7, #12]
 801d8c8:	689b      	ldr	r3, [r3, #8]
 801d8ca:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	68db      	ldr	r3, [r3, #12]
 801d8d0:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	699b      	ldr	r3, [r3, #24]
 801d8d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801d8d8:	68b8      	ldr	r0, [r7, #8]
 801d8da:	f7fd f8ec 	bl	801aab6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d8de:	4603      	mov	r3, r0
 801d8e0:	3b01      	subs	r3, #1
 801d8e2:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801d8e4:	683a      	ldr	r2, [r7, #0]
 801d8e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d8e8:	68b8      	ldr	r0, [r7, #8]
 801d8ea:	f7ff fa91 	bl	801ce10 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801d8ee:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801d8f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d8f2:	683a      	ldr	r2, [r7, #0]
 801d8f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d8f6:	68b8      	ldr	r0, [r7, #8]
 801d8f8:	f7fe fa4c 	bl	801bd94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801d8fc:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801d8fe:	2300      	movs	r3, #0
 801d900:	677b      	str	r3, [r7, #116]	; 0x74
 801d902:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d906:	429a      	cmp	r2, r3
 801d908:	f280 80ed 	bge.w	801dae6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801d90c:	2300      	movs	r3, #0
 801d90e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801d912:	2300      	movs	r3, #0
 801d914:	673b      	str	r3, [r7, #112]	; 0x70
 801d916:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d91a:	429a      	cmp	r2, r3
 801d91c:	da16      	bge.n	801d94c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801d91e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d920:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d922:	fb03 f202 	mul.w	r2, r3, r2
 801d926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d928:	4413      	add	r3, r2
 801d92a:	461a      	mov	r2, r3
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	441a      	add	r2, r3
 801d930:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801d934:	4611      	mov	r1, r2
 801d936:	4618      	mov	r0, r3
 801d938:	f7ff fc1c 	bl	801d174 <_ZSt3maxIhERKT_S2_S2_>
 801d93c:	4603      	mov	r3, r0
 801d93e:	781b      	ldrb	r3, [r3, #0]
 801d940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801d944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d946:	3301      	adds	r3, #1
 801d948:	673b      	str	r3, [r7, #112]	; 0x70
 801d94a:	e7e4      	b.n	801d916 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801d94c:	f000 f8cf 	bl	801daee <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801d950:	4603      	mov	r3, r0
 801d952:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801d954:	2300      	movs	r3, #0
 801d956:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d958:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d95c:	429a      	cmp	r2, r3
 801d95e:	da2f      	bge.n	801d9c0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801d960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d962:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d964:	fb03 f202 	mul.w	r2, r3, r2
 801d968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d96a:	4413      	add	r3, r2
 801d96c:	461a      	mov	r2, r3
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	4413      	add	r3, r2
 801d972:	781b      	ldrb	r3, [r3, #0]
 801d974:	461a      	mov	r2, r3
 801d976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801d97a:	1ad3      	subs	r3, r2, r3
 801d97c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801d97e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d982:	429a      	cmp	r2, r3
 801d984:	db18      	blt.n	801d9b8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801d986:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d988:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801d98a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d98c:	f7fe fa92 	bl	801beb4 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801d990:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801d992:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d994:	f000 f8b3 	bl	801dafe <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801d998:	4603      	mov	r3, r0
 801d99a:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801d99c:	69f8      	ldr	r0, [r7, #28]
 801d99e:	f000 f8dd 	bl	801db5c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801d9a2:	4603      	mov	r3, r0
 801d9a4:	4618      	mov	r0, r3
 801d9a6:	f000 fa21 	bl	801ddec <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801d9aa:	4603      	mov	r3, r0
 801d9ac:	4619      	mov	r1, r3
 801d9ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d9b0:	f000 f8b6 	bl	801db20 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d9b4:	4603      	mov	r3, r0
 801d9b6:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801d9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d9ba:	3301      	adds	r3, #1
 801d9bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d9be:	e7cb      	b.n	801d958 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801d9c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d9c4:	4618      	mov	r0, r3
 801d9c6:	f000 fa2b 	bl	801de20 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801d9ca:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801d9cc:	681b      	ldr	r3, [r3, #0]
 801d9ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801d9d2:	210c      	movs	r1, #12
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	f7fe fa80 	bl	801beda <_ZN6tflite13GetReciprocalEliPi>
 801d9da:	4603      	mov	r3, r0
 801d9dc:	4618      	mov	r0, r3
 801d9de:	f7fe fab9 	bl	801bf54 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d9e2:	4603      	mov	r3, r0
 801d9e4:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801d9e6:	2300      	movs	r3, #0
 801d9e8:	66bb      	str	r3, [r7, #104]	; 0x68
 801d9ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d9ee:	429a      	cmp	r2, r3
 801d9f0:	da75      	bge.n	801dade <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801d9f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d9f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d9f6:	fb03 f202 	mul.w	r2, r3, r2
 801d9fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d9fc:	4413      	add	r3, r2
 801d9fe:	461a      	mov	r2, r3
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	4413      	add	r3, r2
 801da04:	781b      	ldrb	r3, [r3, #0]
 801da06:	461a      	mov	r2, r3
 801da08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801da0c:	1ad3      	subs	r3, r2, r3
 801da0e:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801da10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801da12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801da14:	429a      	cmp	r2, r3
 801da16:	db50      	blt.n	801daba <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801da18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801da1a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801da1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801da1e:	f7fe fa49 	bl	801beb4 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801da22:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801da24:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801da26:	f000 f86a 	bl	801dafe <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801da2a:	4603      	mov	r3, r0
 801da2c:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801da2e:	69b8      	ldr	r0, [r7, #24]
 801da30:	f000 f894 	bl	801db5c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801da34:	4603      	mov	r3, r0
 801da36:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801da38:	6979      	ldr	r1, [r7, #20]
 801da3a:	6a38      	ldr	r0, [r7, #32]
 801da3c:	f7ff fad2 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801da40:	4603      	mov	r3, r0
 801da42:	633b      	str	r3, [r7, #48]	; 0x30
 801da44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801da48:	4618      	mov	r0, r3
 801da4a:	f7fe faf5 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801da4e:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801da50:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801da52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801da54:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801da56:	4611      	mov	r1, r2
 801da58:	4618      	mov	r0, r3
 801da5a:	f7fd fd33 	bl	801b4c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801da5e:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 801da60:	f7fc fd07 	bl	801a472 <_ZNSt14numeric_limitsIhE3minEv>
 801da64:	4603      	mov	r3, r0
 801da66:	461a      	mov	r2, r3
            unsat_output +
 801da68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801da6a:	4413      	add	r3, r2
        const int32_t shifted_output =
 801da6c:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 801da6e:	f7fc fd08 	bl	801a482 <_ZNSt14numeric_limitsIhE3maxEv>
 801da72:	4603      	mov	r3, r0
 801da74:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 801da76:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801da7a:	f107 0310 	add.w	r3, r7, #16
 801da7e:	4611      	mov	r1, r2
 801da80:	4618      	mov	r0, r3
 801da82:	f7fc ffb9 	bl	801a9f8 <_ZSt3minIlERKT_S2_S2_>
 801da86:	4604      	mov	r4, r0
 801da88:	f7fc fcf3 	bl	801a472 <_ZNSt14numeric_limitsIhE3minEv>
 801da8c:	4603      	mov	r3, r0
 801da8e:	63bb      	str	r3, [r7, #56]	; 0x38
 801da90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801da94:	4619      	mov	r1, r3
 801da96:	4620      	mov	r0, r4
 801da98:	f7fc ffc2 	bl	801aa20 <_ZSt3maxIlERKT_S2_S2_>
 801da9c:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801da9e:	6819      	ldr	r1, [r3, #0]
 801daa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801daa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801daa4:	fb03 f202 	mul.w	r2, r3, r2
 801daa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801daaa:	4413      	add	r3, r2
 801daac:	461a      	mov	r2, r3
 801daae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801dab2:	4413      	add	r3, r2
 801dab4:	b2ca      	uxtb	r2, r1
 801dab6:	701a      	strb	r2, [r3, #0]
 801dab8:	e00d      	b.n	801dad6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801daba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dabc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801dabe:	fb03 f202 	mul.w	r2, r3, r2
 801dac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dac4:	4413      	add	r3, r2
 801dac6:	461a      	mov	r2, r3
 801dac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801dacc:	189c      	adds	r4, r3, r2
 801dace:	f7fc fcd0 	bl	801a472 <_ZNSt14numeric_limitsIhE3minEv>
 801dad2:	4603      	mov	r3, r0
 801dad4:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801dad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dad8:	3301      	adds	r3, #1
 801dada:	66bb      	str	r3, [r7, #104]	; 0x68
 801dadc:	e785      	b.n	801d9ea <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801dade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dae0:	3301      	adds	r3, #1
 801dae2:	677b      	str	r3, [r7, #116]	; 0x74
 801dae4:	e70d      	b.n	801d902 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801dae6:	bf00      	nop
 801dae8:	377c      	adds	r7, #124	; 0x7c
 801daea:	46bd      	mov	sp, r7
 801daec:	bd90      	pop	{r4, r7, pc}

0801daee <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 801daee:	b580      	push	{r7, lr}
 801daf0:	af00      	add	r7, sp, #0
 801daf2:	2000      	movs	r0, #0
 801daf4:	f000 f99f 	bl	801de36 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 801daf8:	4603      	mov	r3, r0
 801dafa:	4618      	mov	r0, r3
 801dafc:	bd80      	pop	{r7, pc}

0801dafe <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801dafe:	b580      	push	{r7, lr}
 801db00:	b084      	sub	sp, #16
 801db02:	af00      	add	r7, sp, #0
 801db04:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801db06:	f107 030c 	add.w	r3, r7, #12
 801db0a:	4618      	mov	r0, r3
 801db0c:	f000 f9a7 	bl	801de5e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801db10:	4602      	mov	r2, r0
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	6013      	str	r3, [r2, #0]
    return retval;
 801db16:	68fb      	ldr	r3, [r7, #12]
  }
 801db18:	4618      	mov	r0, r3
 801db1a:	3710      	adds	r7, #16
 801db1c:	46bd      	mov	sp, r7
 801db1e:	bd80      	pop	{r7, pc}

0801db20 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801db20:	b590      	push	{r4, r7, lr}
 801db22:	b083      	sub	sp, #12
 801db24:	af00      	add	r7, sp, #0
 801db26:	6078      	str	r0, [r7, #4]
 801db28:	6039      	str	r1, [r7, #0]
 801db2a:	1d3b      	adds	r3, r7, #4
 801db2c:	4618      	mov	r0, r3
 801db2e:	f000 f977 	bl	801de20 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801db32:	4603      	mov	r3, r0
 801db34:	681c      	ldr	r4, [r3, #0]
 801db36:	463b      	mov	r3, r7
 801db38:	4618      	mov	r0, r3
 801db3a:	f000 f971 	bl	801de20 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801db3e:	4603      	mov	r3, r0
 801db40:	681b      	ldr	r3, [r3, #0]
 801db42:	4619      	mov	r1, r3
 801db44:	4620      	mov	r0, r4
 801db46:	f7fe f8bd 	bl	801bcc4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801db4a:	4603      	mov	r3, r0
 801db4c:	4618      	mov	r0, r3
 801db4e:	f000 f991 	bl	801de74 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801db52:	4603      	mov	r3, r0
 801db54:	4618      	mov	r0, r3
 801db56:	370c      	adds	r7, #12
 801db58:	46bd      	mov	sp, r7
 801db5a:	bd90      	pop	{r4, r7, pc}

0801db5c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 801db5c:	b590      	push	{r4, r7, lr}
 801db5e:	b091      	sub	sp, #68	; 0x44
 801db60:	af00      	add	r7, sp, #0
 801db62:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 801db64:	f000 f997 	bl	801de96 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 801db68:	4603      	mov	r3, r0
 801db6a:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 801db6c:	2001      	movs	r0, #1
 801db6e:	f000 f99b 	bl	801dea8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801db72:	4603      	mov	r3, r0
 801db74:	4619      	mov	r1, r3
 801db76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801db78:	f000 f9aa 	bl	801ded0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801db7c:	4603      	mov	r3, r0
 801db7e:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 801db80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801db82:	6878      	ldr	r0, [r7, #4]
 801db84:	f000 f9c2 	bl	801df0c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801db88:	4603      	mov	r3, r0
 801db8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801db8c:	4618      	mov	r0, r3
 801db8e:	f000 f99f 	bl	801ded0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801db92:	4603      	mov	r3, r0
 801db94:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 801db96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801db98:	f000 f9d6 	bl	801df48 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801db9c:	4603      	mov	r3, r0
 801db9e:	4618      	mov	r0, r3
 801dba0:	f7ff f9be 	bl	801cf20 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 801dba4:	4603      	mov	r3, r0
 801dba6:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 801dba8:	6879      	ldr	r1, [r7, #4]
 801dbaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dbac:	f000 f990 	bl	801ded0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dbb0:	4603      	mov	r3, r0
 801dbb2:	63bb      	str	r3, [r7, #56]	; 0x38
 801dbb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dbb8:	4618      	mov	r0, r3
 801dbba:	f000 f950 	bl	801de5e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801dbbe:	4603      	mov	r3, r0
 801dbc0:	681b      	ldr	r3, [r3, #0]
 801dbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 801dbc4:	4883      	ldr	r0, [pc, #524]	; (801ddd4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 801dbc6:	f7ff f952 	bl	801ce6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dbca:	4603      	mov	r3, r0
 801dbcc:	4618      	mov	r0, r3
 801dbce:	f7fe fa3e 	bl	801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dbd2:	4603      	mov	r3, r0
 801dbd4:	627b      	str	r3, [r7, #36]	; 0x24
 801dbd6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801dbda:	f7fe f837 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dbde:	4603      	mov	r3, r0
 801dbe0:	4619      	mov	r1, r3
 801dbe2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dbe4:	f7fe f83d 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dbe8:	4603      	mov	r3, r0
 801dbea:	4618      	mov	r0, r3
 801dbec:	f7fe f88c 	bl	801bd08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dbf0:	4604      	mov	r4, r0
 801dbf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dbf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dbf6:	f7ff f9f5 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dbfa:	4603      	mov	r3, r0
 801dbfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dbfe:	4619      	mov	r1, r3
 801dc00:	4620      	mov	r0, r4
 801dc02:	f7ff f95a 	bl	801ceba <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dc06:	4603      	mov	r3, r0
 801dc08:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 801dc0a:	4873      	ldr	r0, [pc, #460]	; (801ddd8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 801dc0c:	f7ff f92f 	bl	801ce6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dc10:	4603      	mov	r3, r0
 801dc12:	4618      	mov	r0, r3
 801dc14:	f7fe fa1b 	bl	801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dc18:	4603      	mov	r3, r0
 801dc1a:	623b      	str	r3, [r7, #32]
 801dc1c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 801dc20:	f7fe f814 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dc24:	4603      	mov	r3, r0
 801dc26:	4619      	mov	r1, r3
 801dc28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dc2a:	f7fe f81a 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dc2e:	4603      	mov	r3, r0
 801dc30:	4618      	mov	r0, r3
 801dc32:	f7fe f869 	bl	801bd08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dc36:	4604      	mov	r4, r0
 801dc38:	6a39      	ldr	r1, [r7, #32]
 801dc3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dc3c:	f7ff f9d2 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dc40:	4603      	mov	r3, r0
 801dc42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dc44:	4619      	mov	r1, r3
 801dc46:	4620      	mov	r0, r4
 801dc48:	f7ff f937 	bl	801ceba <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dc4c:	4603      	mov	r3, r0
 801dc4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 801dc50:	4862      	ldr	r0, [pc, #392]	; (801dddc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 801dc52:	f7ff f90c 	bl	801ce6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dc56:	4603      	mov	r3, r0
 801dc58:	4618      	mov	r0, r3
 801dc5a:	f7fe f9f8 	bl	801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dc5e:	4603      	mov	r3, r0
 801dc60:	61fb      	str	r3, [r7, #28]
 801dc62:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801dc66:	f7fd fff1 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dc6a:	4603      	mov	r3, r0
 801dc6c:	4619      	mov	r1, r3
 801dc6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dc70:	f7fd fff7 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dc74:	4603      	mov	r3, r0
 801dc76:	4618      	mov	r0, r3
 801dc78:	f7fe f846 	bl	801bd08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dc7c:	4604      	mov	r4, r0
 801dc7e:	69f9      	ldr	r1, [r7, #28]
 801dc80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dc82:	f7ff f9af 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dc86:	4603      	mov	r3, r0
 801dc88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dc8a:	4619      	mov	r1, r3
 801dc8c:	4620      	mov	r0, r4
 801dc8e:	f7ff f914 	bl	801ceba <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dc92:	4603      	mov	r3, r0
 801dc94:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 801dc96:	4852      	ldr	r0, [pc, #328]	; (801dde0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 801dc98:	f7ff f8e9 	bl	801ce6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dc9c:	4603      	mov	r3, r0
 801dc9e:	4618      	mov	r0, r3
 801dca0:	f7fe f9d5 	bl	801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dca4:	4603      	mov	r3, r0
 801dca6:	61bb      	str	r3, [r7, #24]
 801dca8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 801dcac:	f7fd ffce 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dcb0:	4603      	mov	r3, r0
 801dcb2:	4619      	mov	r1, r3
 801dcb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dcb6:	f7fd ffd4 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dcba:	4603      	mov	r3, r0
 801dcbc:	4618      	mov	r0, r3
 801dcbe:	f7fe f823 	bl	801bd08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dcc2:	4604      	mov	r4, r0
 801dcc4:	69b9      	ldr	r1, [r7, #24]
 801dcc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dcc8:	f7ff f98c 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dccc:	4603      	mov	r3, r0
 801dcce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dcd0:	4619      	mov	r1, r3
 801dcd2:	4620      	mov	r0, r4
 801dcd4:	f7ff f8f1 	bl	801ceba <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dcd8:	4603      	mov	r3, r0
 801dcda:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 801dcdc:	4841      	ldr	r0, [pc, #260]	; (801dde4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 801dcde:	f7ff f8c6 	bl	801ce6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dce2:	4603      	mov	r3, r0
 801dce4:	4618      	mov	r0, r3
 801dce6:	f7fe f9b2 	bl	801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dcea:	4603      	mov	r3, r0
 801dcec:	617b      	str	r3, [r7, #20]
 801dcee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801dcf2:	f7fd ffab 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	4619      	mov	r1, r3
 801dcfa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dcfc:	f7fd ffb1 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dd00:	4603      	mov	r3, r0
 801dd02:	4618      	mov	r0, r3
 801dd04:	f7fe f800 	bl	801bd08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dd08:	4604      	mov	r4, r0
 801dd0a:	6979      	ldr	r1, [r7, #20]
 801dd0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dd0e:	f7ff f969 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dd12:	4603      	mov	r3, r0
 801dd14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dd16:	4619      	mov	r1, r3
 801dd18:	4620      	mov	r0, r4
 801dd1a:	f7ff f8ce 	bl	801ceba <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dd1e:	4603      	mov	r3, r0
 801dd20:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 801dd22:	4831      	ldr	r0, [pc, #196]	; (801dde8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 801dd24:	f7ff f8a3 	bl	801ce6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dd28:	4603      	mov	r3, r0
 801dd2a:	4618      	mov	r0, r3
 801dd2c:	f7fe f98f 	bl	801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dd30:	4603      	mov	r3, r0
 801dd32:	613b      	str	r3, [r7, #16]
 801dd34:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801dd38:	f7fd ff88 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dd3c:	4603      	mov	r3, r0
 801dd3e:	4619      	mov	r1, r3
 801dd40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dd42:	f7fd ff8e 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dd46:	4603      	mov	r3, r0
 801dd48:	4618      	mov	r0, r3
 801dd4a:	f7fd ffdd 	bl	801bd08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dd4e:	4604      	mov	r4, r0
 801dd50:	6939      	ldr	r1, [r7, #16]
 801dd52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dd54:	f7ff f946 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dd58:	4603      	mov	r3, r0
 801dd5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dd5c:	4619      	mov	r1, r3
 801dd5e:	4620      	mov	r0, r4
 801dd60:	f7ff f8ab 	bl	801ceba <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dd64:	4603      	mov	r3, r0
 801dd66:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 801dd68:	20f2      	movs	r0, #242	; 0xf2
 801dd6a:	f7ff f880 	bl	801ce6e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dd6e:	4603      	mov	r3, r0
 801dd70:	4618      	mov	r0, r3
 801dd72:	f7fe f96c 	bl	801c04e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dd76:	4603      	mov	r3, r0
 801dd78:	60fb      	str	r3, [r7, #12]
 801dd7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801dd7e:	f7fd ff65 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dd82:	4603      	mov	r3, r0
 801dd84:	4619      	mov	r1, r3
 801dd86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dd88:	f7fd ff6b 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dd8c:	4603      	mov	r3, r0
 801dd8e:	4618      	mov	r0, r3
 801dd90:	f7fd ffba 	bl	801bd08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dd94:	4604      	mov	r4, r0
 801dd96:	68f9      	ldr	r1, [r7, #12]
 801dd98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dd9a:	f7ff f923 	bl	801cfe4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dd9e:	4603      	mov	r3, r0
 801dda0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dda2:	4619      	mov	r1, r3
 801dda4:	4620      	mov	r0, r4
 801dda6:	f7ff f888 	bl	801ceba <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ddaa:	4603      	mov	r3, r0
 801ddac:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801ddae:	6878      	ldr	r0, [r7, #4]
 801ddb0:	f000 f8e4 	bl	801df7c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 801ddb4:	4604      	mov	r4, r0
 801ddb6:	f7fe f95e 	bl	801c076 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801ddba:	4603      	mov	r3, r0
 801ddbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ddbe:	4619      	mov	r1, r3
 801ddc0:	4620      	mov	r0, r4
 801ddc2:	f7ff f87a 	bl	801ceba <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ddc6:	4603      	mov	r3, r0
 801ddc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801ddca:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801ddcc:	4618      	mov	r0, r3
 801ddce:	3744      	adds	r7, #68	; 0x44
 801ddd0:	46bd      	mov	sp, r7
 801ddd2:	bd90      	pop	{r4, r7, pc}
 801ddd4:	63afbe7b 	.word	0x63afbe7b
 801ddd8:	4da2cbf2 	.word	0x4da2cbf2
 801dddc:	2f16ac6c 	.word	0x2f16ac6c
 801dde0:	1152aaa4 	.word	0x1152aaa4
 801dde4:	02582ab7 	.word	0x02582ab7
 801dde8:	000afe11 	.word	0x000afe11

0801ddec <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801ddec:	b5b0      	push	{r4, r5, r7, lr}
 801ddee:	b084      	sub	sp, #16
 801ddf0:	af00      	add	r7, sp, #0
 801ddf2:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801ddf4:	1d3b      	adds	r3, r7, #4
 801ddf6:	4618      	mov	r0, r3
 801ddf8:	f7fe f91e 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801ddfc:	4603      	mov	r3, r0
 801ddfe:	681d      	ldr	r5, [r3, #0]
 801de00:	f107 030c 	add.w	r3, r7, #12
 801de04:	4618      	mov	r0, r3
 801de06:	f000 f80b 	bl	801de20 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801de0a:	4604      	mov	r4, r0
 801de0c:	4628      	mov	r0, r5
 801de0e:	f000 f8c7 	bl	801dfa0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 801de12:	4603      	mov	r3, r0
 801de14:	6023      	str	r3, [r4, #0]
  return result;
 801de16:	68fb      	ldr	r3, [r7, #12]
}
 801de18:	4618      	mov	r0, r3
 801de1a:	3710      	adds	r7, #16
 801de1c:	46bd      	mov	sp, r7
 801de1e:	bdb0      	pop	{r4, r5, r7, pc}

0801de20 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 801de20:	b480      	push	{r7}
 801de22:	b083      	sub	sp, #12
 801de24:	af00      	add	r7, sp, #0
 801de26:	6078      	str	r0, [r7, #4]
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	4618      	mov	r0, r3
 801de2c:	370c      	adds	r7, #12
 801de2e:	46bd      	mov	sp, r7
 801de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de34:	4770      	bx	lr

0801de36 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801de36:	b590      	push	{r4, r7, lr}
 801de38:	b085      	sub	sp, #20
 801de3a:	af00      	add	r7, sp, #0
 801de3c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801de3e:	f107 030c 	add.w	r3, r7, #12
 801de42:	4618      	mov	r0, r3
 801de44:	f7ff ffec 	bl	801de20 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801de48:	4604      	mov	r4, r0
 801de4a:	6878      	ldr	r0, [r7, #4]
 801de4c:	f7fd fefe 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801de50:	4603      	mov	r3, r0
 801de52:	6023      	str	r3, [r4, #0]
    return retval;
 801de54:	68fb      	ldr	r3, [r7, #12]
  }
 801de56:	4618      	mov	r0, r3
 801de58:	3714      	adds	r7, #20
 801de5a:	46bd      	mov	sp, r7
 801de5c:	bd90      	pop	{r4, r7, pc}

0801de5e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 801de5e:	b480      	push	{r7}
 801de60:	b083      	sub	sp, #12
 801de62:	af00      	add	r7, sp, #0
 801de64:	6078      	str	r0, [r7, #4]
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	4618      	mov	r0, r3
 801de6a:	370c      	adds	r7, #12
 801de6c:	46bd      	mov	sp, r7
 801de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de72:	4770      	bx	lr

0801de74 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801de74:	b580      	push	{r7, lr}
 801de76:	b084      	sub	sp, #16
 801de78:	af00      	add	r7, sp, #0
 801de7a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801de7c:	f107 030c 	add.w	r3, r7, #12
 801de80:	4618      	mov	r0, r3
 801de82:	f7ff ffcd 	bl	801de20 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801de86:	4602      	mov	r2, r0
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	6013      	str	r3, [r2, #0]
    return retval;
 801de8c:	68fb      	ldr	r3, [r7, #12]
  }
 801de8e:	4618      	mov	r0, r3
 801de90:	3710      	adds	r7, #16
 801de92:	46bd      	mov	sp, r7
 801de94:	bd80      	pop	{r7, pc}

0801de96 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 801de96:	b580      	push	{r7, lr}
 801de98:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801de9a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801de9e:	f000 f803 	bl	801dea8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801dea2:	4603      	mov	r3, r0
  }
 801dea4:	4618      	mov	r0, r3
 801dea6:	bd80      	pop	{r7, pc}

0801dea8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801dea8:	b590      	push	{r4, r7, lr}
 801deaa:	b085      	sub	sp, #20
 801deac:	af00      	add	r7, sp, #0
 801deae:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801deb0:	f107 030c 	add.w	r3, r7, #12
 801deb4:	4618      	mov	r0, r3
 801deb6:	f7ff ffd2 	bl	801de5e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801deba:	4604      	mov	r4, r0
 801debc:	6878      	ldr	r0, [r7, #4]
 801debe:	f7fd fec5 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dec2:	4603      	mov	r3, r0
 801dec4:	6023      	str	r3, [r4, #0]
    return retval;
 801dec6:	68fb      	ldr	r3, [r7, #12]
  }
 801dec8:	4618      	mov	r0, r3
 801deca:	3714      	adds	r7, #20
 801decc:	46bd      	mov	sp, r7
 801dece:	bd90      	pop	{r4, r7, pc}

0801ded0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801ded0:	b590      	push	{r4, r7, lr}
 801ded2:	b083      	sub	sp, #12
 801ded4:	af00      	add	r7, sp, #0
 801ded6:	6078      	str	r0, [r7, #4]
 801ded8:	6039      	str	r1, [r7, #0]
 801deda:	1d3b      	adds	r3, r7, #4
 801dedc:	4618      	mov	r0, r3
 801dede:	f7ff ffbe 	bl	801de5e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801dee2:	4603      	mov	r3, r0
 801dee4:	681c      	ldr	r4, [r3, #0]
 801dee6:	463b      	mov	r3, r7
 801dee8:	4618      	mov	r0, r3
 801deea:	f7ff ffb8 	bl	801de5e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801deee:	4603      	mov	r3, r0
 801def0:	681b      	ldr	r3, [r3, #0]
 801def2:	4619      	mov	r1, r3
 801def4:	4620      	mov	r0, r4
 801def6:	f7fe f9db 	bl	801c2b0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801defa:	4603      	mov	r3, r0
 801defc:	4618      	mov	r0, r3
 801defe:	f7ff fdfe 	bl	801dafe <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801df02:	4603      	mov	r3, r0
 801df04:	4618      	mov	r0, r3
 801df06:	370c      	adds	r7, #12
 801df08:	46bd      	mov	sp, r7
 801df0a:	bd90      	pop	{r4, r7, pc}

0801df0c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801df0c:	b590      	push	{r4, r7, lr}
 801df0e:	b083      	sub	sp, #12
 801df10:	af00      	add	r7, sp, #0
 801df12:	6078      	str	r0, [r7, #4]
 801df14:	6039      	str	r1, [r7, #0]
 801df16:	1d3b      	adds	r3, r7, #4
 801df18:	4618      	mov	r0, r3
 801df1a:	f7ff ffa0 	bl	801de5e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801df1e:	4603      	mov	r3, r0
 801df20:	681c      	ldr	r4, [r3, #0]
 801df22:	463b      	mov	r3, r7
 801df24:	4618      	mov	r0, r3
 801df26:	f7ff ff9a 	bl	801de5e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801df2a:	4603      	mov	r3, r0
 801df2c:	681b      	ldr	r3, [r3, #0]
 801df2e:	4619      	mov	r1, r3
 801df30:	4620      	mov	r0, r4
 801df32:	f7fd fe96 	bl	801bc62 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801df36:	4603      	mov	r3, r0
 801df38:	4618      	mov	r0, r3
 801df3a:	f7ff fde0 	bl	801dafe <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801df3e:	4603      	mov	r3, r0
 801df40:	4618      	mov	r0, r3
 801df42:	370c      	adds	r7, #12
 801df44:	46bd      	mov	sp, r7
 801df46:	bd90      	pop	{r4, r7, pc}

0801df48 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801df48:	b5b0      	push	{r4, r5, r7, lr}
 801df4a:	b084      	sub	sp, #16
 801df4c:	af00      	add	r7, sp, #0
 801df4e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801df50:	1d3b      	adds	r3, r7, #4
 801df52:	4618      	mov	r0, r3
 801df54:	f7ff ff83 	bl	801de5e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801df58:	4603      	mov	r3, r0
 801df5a:	681d      	ldr	r5, [r3, #0]
 801df5c:	f107 030c 	add.w	r3, r7, #12
 801df60:	4618      	mov	r0, r3
 801df62:	f7fe f869 	bl	801c038 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801df66:	4604      	mov	r4, r0
 801df68:	4628      	mov	r0, r5
 801df6a:	f000 f825 	bl	801dfb8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 801df6e:	4603      	mov	r3, r0
 801df70:	6023      	str	r3, [r4, #0]
  return result;
 801df72:	68fb      	ldr	r3, [r7, #12]
}
 801df74:	4618      	mov	r0, r3
 801df76:	3710      	adds	r7, #16
 801df78:	46bd      	mov	sp, r7
 801df7a:	bdb0      	pop	{r4, r5, r7, pc}

0801df7c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801df7c:	b580      	push	{r7, lr}
 801df7e:	b082      	sub	sp, #8
 801df80:	af00      	add	r7, sp, #0
 801df82:	6078      	str	r0, [r7, #4]
 801df84:	1d3b      	adds	r3, r7, #4
 801df86:	4618      	mov	r0, r3
 801df88:	f7ff ff69 	bl	801de5e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801df8c:	4603      	mov	r3, r0
 801df8e:	681b      	ldr	r3, [r3, #0]
 801df90:	4618      	mov	r0, r3
 801df92:	f7fe ffb3 	bl	801cefc <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 801df96:	4603      	mov	r3, r0
 801df98:	4618      	mov	r0, r3
 801df9a:	3708      	adds	r7, #8
 801df9c:	46bd      	mov	sp, r7
 801df9e:	bd80      	pop	{r7, pc}

0801dfa0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801dfa0:	b580      	push	{r7, lr}
 801dfa2:	b082      	sub	sp, #8
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801dfa8:	6878      	ldr	r0, [r7, #4]
 801dfaa:	f000 f811 	bl	801dfd0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801dfae:	4603      	mov	r3, r0
}
 801dfb0:	4618      	mov	r0, r3
 801dfb2:	3708      	adds	r7, #8
 801dfb4:	46bd      	mov	sp, r7
 801dfb6:	bd80      	pop	{r7, pc}

0801dfb8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801dfb8:	b580      	push	{r7, lr}
 801dfba:	b082      	sub	sp, #8
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801dfc0:	6878      	ldr	r0, [r7, #4]
 801dfc2:	f000 f813 	bl	801dfec <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801dfc6:	4603      	mov	r3, r0
}
 801dfc8:	4618      	mov	r0, r3
 801dfca:	3708      	adds	r7, #8
 801dfcc:	46bd      	mov	sp, r7
 801dfce:	bd80      	pop	{r7, pc}

0801dfd0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801dfd0:	b580      	push	{r7, lr}
 801dfd2:	b082      	sub	sp, #8
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801dfd8:	210c      	movs	r1, #12
 801dfda:	6878      	ldr	r0, [r7, #4]
 801dfdc:	f7fd fa72 	bl	801b4c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801dfe0:	4603      	mov	r3, r0
  }
 801dfe2:	4618      	mov	r0, r3
 801dfe4:	3708      	adds	r7, #8
 801dfe6:	46bd      	mov	sp, r7
 801dfe8:	bd80      	pop	{r7, pc}
	...

0801dfec <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801dfec:	b580      	push	{r7, lr}
 801dfee:	b08a      	sub	sp, #40	; 0x28
 801dff0:	af00      	add	r7, sp, #0
 801dff2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801dff4:	f7fc fde1 	bl	801abba <_ZNSt14numeric_limitsIlE3minEv>
 801dff8:	4603      	mov	r3, r0
 801dffa:	4618      	mov	r0, r3
 801dffc:	f7fd fe26 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e000:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801e002:	f7fc f863 	bl	801a0cc <_ZNSt14numeric_limitsIlE3maxEv>
 801e006:	4603      	mov	r3, r0
 801e008:	4618      	mov	r0, r3
 801e00a:	f7fd fe1f 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e00e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801e010:	2320      	movs	r3, #32
 801e012:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801e014:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 801e018:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801e01a:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801e01e:	f7fd fe15 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e022:	4603      	mov	r3, r0
 801e024:	4619      	mov	r1, r3
 801e026:	6878      	ldr	r0, [r7, #4]
 801e028:	f7fd fe5a 	bl	801bce0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801e02c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801e02e:	480f      	ldr	r0, [pc, #60]	; (801e06c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 801e030:	f7fd fe0c 	bl	801bc4c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e034:	4603      	mov	r3, r0
 801e036:	4619      	mov	r1, r3
 801e038:	6878      	ldr	r0, [r7, #4]
 801e03a:	f7fd fe2f 	bl	801bc9c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801e03e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801e040:	2105      	movs	r1, #5
 801e042:	6878      	ldr	r0, [r7, #4]
 801e044:	f7fe fa18 	bl	801c478 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801e048:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801e04a:	68fa      	ldr	r2, [r7, #12]
 801e04c:	6a39      	ldr	r1, [r7, #32]
 801e04e:	6978      	ldr	r0, [r7, #20]
 801e050:	f7fe fa56 	bl	801c500 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801e054:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801e056:	68fa      	ldr	r2, [r7, #12]
 801e058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e05a:	6938      	ldr	r0, [r7, #16]
 801e05c:	f7fe fa50 	bl	801c500 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801e060:	60f8      	str	r0, [r7, #12]
    return result;
 801e062:	68fb      	ldr	r3, [r7, #12]
  }
 801e064:	4618      	mov	r0, r3
 801e066:	3728      	adds	r7, #40	; 0x28
 801e068:	46bd      	mov	sp, r7
 801e06a:	bd80      	pop	{r7, pc}
 801e06c:	fc000001 	.word	0xfc000001

0801e070 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 801e070:	b580      	push	{r7, lr}
 801e072:	ed2d 8b02 	vpush	{d8}
 801e076:	b094      	sub	sp, #80	; 0x50
 801e078:	af00      	add	r7, sp, #0
 801e07a:	6178      	str	r0, [r7, #20]
 801e07c:	ed87 0a04 	vstr	s0, [r7, #16]
 801e080:	edc7 0a03 	vstr	s1, [r7, #12]
 801e084:	60b9      	str	r1, [r7, #8]
 801e086:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 801e088:	ed97 7a03 	vldr	s14, [r7, #12]
 801e08c:	edd7 7a04 	vldr	s15, [r7, #16]
 801e090:	ee77 6a67 	vsub.f32	s13, s14, s15
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	3b01      	subs	r3, #1
 801e098:	ee07 3a90 	vmov	s15, r3
 801e09c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e0a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e0a4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 801e0a8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801e0ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e0b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801e0b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 801e0b8:	2300      	movs	r3, #0
 801e0ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	3b01      	subs	r3, #1
 801e0c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e0c2:	429a      	cmp	r2, r3
 801e0c4:	f280 80c0 	bge.w	801e248 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 801e0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e0ca:	ee07 3a90 	vmov	s15, r3
 801e0ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e0d2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e0d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e0da:	edd7 7a04 	vldr	s15, [r7, #16]
 801e0de:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e0e2:	697b      	ldr	r3, [r7, #20]
 801e0e4:	eeb0 0a67 	vmov.f32	s0, s15
 801e0e8:	4798      	blx	r3
 801e0ea:	eef0 7a40 	vmov.f32	s15, s0
 801e0ee:	ed9f 7a74 	vldr	s14, [pc, #464]	; 801e2c0 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e0f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e0f6:	eeb0 0a67 	vmov.f32	s0, s15
 801e0fa:	f7fc f999 	bl	801a430 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e0fe:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801e102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e104:	3301      	adds	r3, #1
 801e106:	ee07 3a90 	vmov	s15, r3
 801e10a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e10e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e112:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e116:	edd7 7a04 	vldr	s15, [r7, #16]
 801e11a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e11e:	697b      	ldr	r3, [r7, #20]
 801e120:	eeb0 0a67 	vmov.f32	s0, s15
 801e124:	4798      	blx	r3
 801e126:	eef0 7a40 	vmov.f32	s15, s0
 801e12a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801e2c0 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e12e:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 801e132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e134:	ee07 3a90 	vmov	s15, r3
 801e138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e13c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e140:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e144:	edd7 7a04 	vldr	s15, [r7, #16]
 801e148:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e14c:	697b      	ldr	r3, [r7, #20]
 801e14e:	eeb0 0a67 	vmov.f32	s0, s15
 801e152:	4798      	blx	r3
 801e154:	eef0 7a40 	vmov.f32	s15, s0
 801e158:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801e2c0 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e15c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e160:	eeb0 0a67 	vmov.f32	s0, s15
 801e164:	f7fc f964 	bl	801a430 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e168:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801e16c:	ee78 7a27 	vadd.f32	s15, s16, s15
 801e170:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e174:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e178:	eeb0 0a47 	vmov.f32	s0, s14
 801e17c:	f7fc f958 	bl	801a430 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e180:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 801e184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e186:	ee07 3a90 	vmov	s15, r3
 801e18a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e18e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e192:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e196:	edd7 7a04 	vldr	s15, [r7, #16]
 801e19a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e19e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801e1a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e1a6:	697b      	ldr	r3, [r7, #20]
 801e1a8:	eeb0 0a67 	vmov.f32	s0, s15
 801e1ac:	4798      	blx	r3
 801e1ae:	eef0 7a40 	vmov.f32	s15, s0
 801e1b2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801e2c0 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e1b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e1ba:	eeb0 0a67 	vmov.f32	s0, s15
 801e1be:	f7fc f937 	bl	801a430 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e1c2:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 801e1c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801e1ca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801e1ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e1d2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 801e1d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801e1da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e1de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e1e2:	eeb0 0a47 	vmov.f32	s0, s14
 801e1e6:	f7fc f923 	bl	801a430 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e1ea:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801e1ee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801e1f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801e1f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e1fa:	edc7 7a06 	vstr	s15, [r7, #24]
 801e1fe:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801e202:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 801e204:	f107 021c 	add.w	r2, r7, #28
 801e208:	f107 0318 	add.w	r3, r7, #24
 801e20c:	4611      	mov	r1, r2
 801e20e:	4618      	mov	r0, r3
 801e210:	f7e7 ffdf 	bl	80061d2 <_ZSt3maxIfERKT_S2_S2_>
 801e214:	4602      	mov	r2, r0
 801e216:	4b2b      	ldr	r3, [pc, #172]	; (801e2c4 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801e218:	623b      	str	r3, [r7, #32]
 801e21a:	f107 0320 	add.w	r3, r7, #32
 801e21e:	4619      	mov	r1, r3
 801e220:	4610      	mov	r0, r2
 801e222:	f7fc f8d8 	bl	801a3d6 <_ZSt3minIfERKT_S2_S2_>
 801e226:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801e228:	edd3 7a00 	vldr	s15, [r3]
 801e22c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e22e:	005b      	lsls	r3, r3, #1
 801e230:	68ba      	ldr	r2, [r7, #8]
 801e232:	4413      	add	r3, r2
 801e234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e238:	ee17 2a90 	vmov	r2, s15
 801e23c:	b212      	sxth	r2, r2
 801e23e:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 801e240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e242:	3301      	adds	r3, #1
 801e244:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e246:	e739      	b.n	801e0bc <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 801e248:	697b      	ldr	r3, [r7, #20]
 801e24a:	ed97 0a03 	vldr	s0, [r7, #12]
 801e24e:	4798      	blx	r3
 801e250:	eef0 7a40 	vmov.f32	s15, s0
 801e254:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801e2c0 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e258:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e25c:	eeb0 0a67 	vmov.f32	s0, s15
 801e260:	f7fc f8e6 	bl	801a430 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e264:	eef0 7a40 	vmov.f32	s15, s0
 801e268:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801e26c:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801e270:	62bb      	str	r3, [r7, #40]	; 0x28
 801e272:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e27a:	4611      	mov	r1, r2
 801e27c:	4618      	mov	r0, r3
 801e27e:	f7e7 ffa8 	bl	80061d2 <_ZSt3maxIfERKT_S2_S2_>
 801e282:	4602      	mov	r2, r0
 801e284:	4b0f      	ldr	r3, [pc, #60]	; (801e2c4 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801e286:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e28c:	4619      	mov	r1, r3
 801e28e:	4610      	mov	r0, r2
 801e290:	f7fc f8a1 	bl	801a3d6 <_ZSt3minIfERKT_S2_S2_>
 801e294:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 801e296:	edd3 7a00 	vldr	s15, [r3]
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e2a0:	3b01      	subs	r3, #1
 801e2a2:	005b      	lsls	r3, r3, #1
 801e2a4:	68ba      	ldr	r2, [r7, #8]
 801e2a6:	4413      	add	r3, r2
 801e2a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e2ac:	ee17 2a90 	vmov	r2, s15
 801e2b0:	b212      	sxth	r2, r2
 801e2b2:	801a      	strh	r2, [r3, #0]
}
 801e2b4:	bf00      	nop
 801e2b6:	3750      	adds	r7, #80	; 0x50
 801e2b8:	46bd      	mov	sp, r7
 801e2ba:	ecbd 8b02 	vpop	{d8}
 801e2be:	bd80      	pop	{r7, pc}
 801e2c0:	47000000 	.word	0x47000000
 801e2c4:	46fffe00 	.word	0x46fffe00

0801e2c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 801e2c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e2cc:	b090      	sub	sp, #64	; 0x40
 801e2ce:	af06      	add	r7, sp, #24
 801e2d0:	60f8      	str	r0, [r7, #12]
 801e2d2:	60b9      	str	r1, [r7, #8]
 801e2d4:	607a      	str	r2, [r7, #4]
 801e2d6:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 801e2d8:	68bb      	ldr	r3, [r7, #8]
 801e2da:	781b      	ldrb	r3, [r3, #0]
 801e2dc:	2b09      	cmp	r3, #9
 801e2de:	d004      	beq.n	801e2ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 801e2e0:	68bb      	ldr	r3, [r7, #8]
 801e2e2:	781b      	ldrb	r3, [r3, #0]
 801e2e4:	2b07      	cmp	r3, #7
 801e2e6:	f040 81b6 	bne.w	801e656 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 801e2ea:	68bb      	ldr	r3, [r7, #8]
 801e2ec:	781b      	ldrb	r3, [r3, #0]
 801e2ee:	2b07      	cmp	r3, #7
 801e2f0:	d156      	bne.n	801e3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	691b      	ldr	r3, [r3, #16]
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	d011      	beq.n	801e31e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	695c      	ldr	r4, [r3, #20]
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	691b      	ldr	r3, [r3, #16]
 801e302:	2200      	movs	r2, #0
 801e304:	9203      	str	r2, [sp, #12]
 801e306:	9302      	str	r3, [sp, #8]
 801e308:	4ba1      	ldr	r3, [pc, #644]	; (801e590 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 801e30a:	9301      	str	r3, [sp, #4]
 801e30c:	4ba1      	ldr	r3, [pc, #644]	; (801e594 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801e30e:	9300      	str	r3, [sp, #0]
 801e310:	2325      	movs	r3, #37	; 0x25
 801e312:	4aa1      	ldr	r2, [pc, #644]	; (801e598 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e314:	49a1      	ldr	r1, [pc, #644]	; (801e59c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801e316:	68f8      	ldr	r0, [r7, #12]
 801e318:	47a0      	blx	r4
 801e31a:	2301      	movs	r3, #1
 801e31c:	e1e0      	b.n	801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	edd3 7a03 	vldr	s15, [r3, #12]
 801e324:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 801e5a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801e328:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e330:	dd07      	ble.n	801e342 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	edd3 7a03 	vldr	s15, [r3, #12]
 801e338:	ed9f 7a99 	vldr	s14, [pc, #612]	; 801e5a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801e33c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e340:	e006      	b.n	801e350 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	edd3 7a03 	vldr	s15, [r3, #12]
 801e348:	ed9f 7a95 	vldr	s14, [pc, #596]	; 801e5a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801e34c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e350:	edc7 7a08 	vstr	s15, [r7, #32]
 801e354:	edd7 7a08 	vldr	s15, [r7, #32]
 801e358:	ed9f 7a92 	vldr	s14, [pc, #584]	; 801e5a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 801e35c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e364:	f340 80dd 	ble.w	801e522 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801e368:	68fb      	ldr	r3, [r7, #12]
 801e36a:	695c      	ldr	r4, [r3, #20]
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	68db      	ldr	r3, [r3, #12]
 801e370:	4618      	mov	r0, r3
 801e372:	f7e2 f8f3 	bl	800055c <__aeabi_f2d>
 801e376:	4602      	mov	r2, r0
 801e378:	460b      	mov	r3, r1
 801e37a:	f04f 0000 	mov.w	r0, #0
 801e37e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801e382:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e38a:	4b87      	ldr	r3, [pc, #540]	; (801e5a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 801e38c:	9301      	str	r3, [sp, #4]
 801e38e:	4b87      	ldr	r3, [pc, #540]	; (801e5ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801e390:	9300      	str	r3, [sp, #0]
 801e392:	2326      	movs	r3, #38	; 0x26
 801e394:	4a80      	ldr	r2, [pc, #512]	; (801e598 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e396:	4986      	ldr	r1, [pc, #536]	; (801e5b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801e398:	68f8      	ldr	r0, [r7, #12]
 801e39a:	47a0      	blx	r4
 801e39c:	2301      	movs	r3, #1
 801e39e:	e19f      	b.n	801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801e3a0:	68bb      	ldr	r3, [r7, #8]
 801e3a2:	781b      	ldrb	r3, [r3, #0]
 801e3a4:	2b09      	cmp	r3, #9
 801e3a6:	d018      	beq.n	801e3da <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	695c      	ldr	r4, [r3, #20]
 801e3ac:	68bb      	ldr	r3, [r7, #8]
 801e3ae:	781b      	ldrb	r3, [r3, #0]
 801e3b0:	4618      	mov	r0, r3
 801e3b2:	f7fb fe0f 	bl	8019fd4 <TfLiteTypeGetName>
 801e3b6:	4605      	mov	r5, r0
 801e3b8:	2009      	movs	r0, #9
 801e3ba:	f7fb fe0b 	bl	8019fd4 <TfLiteTypeGetName>
 801e3be:	4603      	mov	r3, r0
 801e3c0:	9303      	str	r3, [sp, #12]
 801e3c2:	9502      	str	r5, [sp, #8]
 801e3c4:	4b7b      	ldr	r3, [pc, #492]	; (801e5b4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801e3c6:	9301      	str	r3, [sp, #4]
 801e3c8:	4b7b      	ldr	r3, [pc, #492]	; (801e5b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 801e3ca:	9300      	str	r3, [sp, #0]
 801e3cc:	2329      	movs	r3, #41	; 0x29
 801e3ce:	4a72      	ldr	r2, [pc, #456]	; (801e598 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e3d0:	497a      	ldr	r1, [pc, #488]	; (801e5bc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801e3d2:	68f8      	ldr	r0, [r7, #12]
 801e3d4:	47a0      	blx	r4
 801e3d6:	2301      	movs	r3, #1
 801e3d8:	e182      	b.n	801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	781b      	ldrb	r3, [r3, #0]
 801e3de:	2b07      	cmp	r3, #7
 801e3e0:	d155      	bne.n	801e48e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	691b      	ldr	r3, [r3, #16]
 801e3e6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e3ea:	d011      	beq.n	801e410 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	695c      	ldr	r4, [r3, #20]
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	691b      	ldr	r3, [r3, #16]
 801e3f4:	4a72      	ldr	r2, [pc, #456]	; (801e5c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801e3f6:	9203      	str	r2, [sp, #12]
 801e3f8:	9302      	str	r3, [sp, #8]
 801e3fa:	4b72      	ldr	r3, [pc, #456]	; (801e5c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 801e3fc:	9301      	str	r3, [sp, #4]
 801e3fe:	4b65      	ldr	r3, [pc, #404]	; (801e594 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801e400:	9300      	str	r3, [sp, #0]
 801e402:	232b      	movs	r3, #43	; 0x2b
 801e404:	4a64      	ldr	r2, [pc, #400]	; (801e598 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e406:	4965      	ldr	r1, [pc, #404]	; (801e59c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801e408:	68f8      	ldr	r0, [r7, #12]
 801e40a:	47a0      	blx	r4
 801e40c:	2301      	movs	r3, #1
 801e40e:	e167      	b.n	801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	edd3 7a03 	vldr	s15, [r3, #12]
 801e416:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801e5c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801e41a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e422:	dd07      	ble.n	801e434 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	edd3 7a03 	vldr	s15, [r3, #12]
 801e42a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801e5c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801e42e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e432:	e006      	b.n	801e442 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 801e434:	687b      	ldr	r3, [r7, #4]
 801e436:	edd3 7a03 	vldr	s15, [r3, #12]
 801e43a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 801e5c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801e43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e442:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801e446:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801e44a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801e5cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 801e44e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e456:	dd64      	ble.n	801e522 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	695c      	ldr	r4, [r3, #20]
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	68db      	ldr	r3, [r3, #12]
 801e460:	4618      	mov	r0, r3
 801e462:	f7e2 f87b 	bl	800055c <__aeabi_f2d>
 801e466:	4602      	mov	r2, r0
 801e468:	460b      	mov	r3, r1
 801e46a:	f04f 0000 	mov.w	r0, #0
 801e46e:	4958      	ldr	r1, [pc, #352]	; (801e5d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 801e470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e474:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e478:	4b56      	ldr	r3, [pc, #344]	; (801e5d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 801e47a:	9301      	str	r3, [sp, #4]
 801e47c:	4b4b      	ldr	r3, [pc, #300]	; (801e5ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801e47e:	9300      	str	r3, [sp, #0]
 801e480:	232c      	movs	r3, #44	; 0x2c
 801e482:	4a45      	ldr	r2, [pc, #276]	; (801e598 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e484:	494a      	ldr	r1, [pc, #296]	; (801e5b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801e486:	68f8      	ldr	r0, [r7, #12]
 801e488:	47a0      	blx	r4
 801e48a:	2301      	movs	r3, #1
 801e48c:	e128      	b.n	801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	781b      	ldrb	r3, [r3, #0]
 801e492:	2b09      	cmp	r3, #9
 801e494:	d018      	beq.n	801e4c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 801e496:	68fb      	ldr	r3, [r7, #12]
 801e498:	695c      	ldr	r4, [r3, #20]
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	781b      	ldrb	r3, [r3, #0]
 801e49e:	4618      	mov	r0, r3
 801e4a0:	f7fb fd98 	bl	8019fd4 <TfLiteTypeGetName>
 801e4a4:	4605      	mov	r5, r0
 801e4a6:	2009      	movs	r0, #9
 801e4a8:	f7fb fd94 	bl	8019fd4 <TfLiteTypeGetName>
 801e4ac:	4603      	mov	r3, r0
 801e4ae:	9303      	str	r3, [sp, #12]
 801e4b0:	9502      	str	r5, [sp, #8]
 801e4b2:	4b40      	ldr	r3, [pc, #256]	; (801e5b4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801e4b4:	9301      	str	r3, [sp, #4]
 801e4b6:	4b48      	ldr	r3, [pc, #288]	; (801e5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 801e4b8:	9300      	str	r3, [sp, #0]
 801e4ba:	232f      	movs	r3, #47	; 0x2f
 801e4bc:	4a36      	ldr	r2, [pc, #216]	; (801e598 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e4be:	493f      	ldr	r1, [pc, #252]	; (801e5bc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801e4c0:	68f8      	ldr	r0, [r7, #12]
 801e4c2:	47a0      	blx	r4
 801e4c4:	2301      	movs	r3, #1
 801e4c6:	e10b      	b.n	801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	691b      	ldr	r3, [r3, #16]
 801e4cc:	f113 0f80 	cmn.w	r3, #128	; 0x80
 801e4d0:	d012      	beq.n	801e4f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 801e4d2:	68fb      	ldr	r3, [r7, #12]
 801e4d4:	695c      	ldr	r4, [r3, #20]
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	691b      	ldr	r3, [r3, #16]
 801e4da:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801e4de:	9203      	str	r2, [sp, #12]
 801e4e0:	9302      	str	r3, [sp, #8]
 801e4e2:	4b3e      	ldr	r3, [pc, #248]	; (801e5dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 801e4e4:	9301      	str	r3, [sp, #4]
 801e4e6:	4b2b      	ldr	r3, [pc, #172]	; (801e594 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801e4e8:	9300      	str	r3, [sp, #0]
 801e4ea:	2330      	movs	r3, #48	; 0x30
 801e4ec:	4a2a      	ldr	r2, [pc, #168]	; (801e598 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e4ee:	492b      	ldr	r1, [pc, #172]	; (801e59c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801e4f0:	68f8      	ldr	r0, [r7, #12]
 801e4f2:	47a0      	blx	r4
 801e4f4:	2301      	movs	r3, #1
 801e4f6:	e0f3      	b.n	801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	edd3 7a03 	vldr	s15, [r3, #12]
 801e4fe:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801e5e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 801e502:	eef4 7a47 	vcmp.f32	s15, s14
 801e506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e50a:	d00a      	beq.n	801e522 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801e50c:	68fb      	ldr	r3, [r7, #12]
 801e50e:	695c      	ldr	r4, [r3, #20]
 801e510:	4b34      	ldr	r3, [pc, #208]	; (801e5e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 801e512:	9300      	str	r3, [sp, #0]
 801e514:	2331      	movs	r3, #49	; 0x31
 801e516:	4a20      	ldr	r2, [pc, #128]	; (801e598 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e518:	4933      	ldr	r1, [pc, #204]	; (801e5e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 801e51a:	68f8      	ldr	r0, [r7, #12]
 801e51c:	47a0      	blx	r4
 801e51e:	2301      	movs	r3, #1
 801e520:	e0de      	b.n	801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 801e522:	68bb      	ldr	r3, [r7, #8]
 801e524:	781b      	ldrb	r3, [r3, #0]
 801e526:	2b07      	cmp	r3, #7
 801e528:	d160      	bne.n	801e5ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 801e52a:	68bb      	ldr	r3, [r7, #8]
 801e52c:	68db      	ldr	r3, [r3, #12]
 801e52e:	4618      	mov	r0, r3
 801e530:	f7e2 f814 	bl	800055c <__aeabi_f2d>
 801e534:	4604      	mov	r4, r0
 801e536:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 801e538:	683b      	ldr	r3, [r7, #0]
 801e53a:	681b      	ldr	r3, [r3, #0]
 801e53c:	4618      	mov	r0, r3
 801e53e:	f7e2 f80d 	bl	800055c <__aeabi_f2d>
 801e542:	4602      	mov	r2, r0
 801e544:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 801e546:	4620      	mov	r0, r4
 801e548:	4629      	mov	r1, r5
 801e54a:	f7e2 f85f 	bl	800060c <__aeabi_dmul>
 801e54e:	4602      	mov	r2, r0
 801e550:	460b      	mov	r3, r1
 801e552:	4610      	mov	r0, r2
 801e554:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 801e556:	a30c      	add	r3, pc, #48	; (adr r3, 801e588 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 801e558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e55c:	f7e2 f980 	bl	8000860 <__aeabi_ddiv>
 801e560:	4602      	mov	r2, r0
 801e562:	460b      	mov	r3, r1
 801e564:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 801e568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e56a:	3308      	adds	r3, #8
 801e56c:	f107 0214 	add.w	r2, r7, #20
 801e570:	4611      	mov	r1, r2
 801e572:	4618      	mov	r0, r3
 801e574:	ed97 0b06 	vldr	d0, [r7, #24]
 801e578:	f7fb fdb2 	bl	801a0e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 801e57c:	697a      	ldr	r2, [r7, #20]
 801e57e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e580:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 801e582:	e0ac      	b.n	801e6de <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 801e584:	f3af 8000 	nop.w
 801e588:	00140014 	.word	0x00140014
 801e58c:	3f240014 	.word	0x3f240014
 801e590:	080283f4 	.word	0x080283f4
 801e594:	080283f8 	.word	0x080283f8
 801e598:	08028344 	.word	0x08028344
 801e59c:	080283d8 	.word	0x080283d8
 801e5a0:	38000000 	.word	0x38000000
 801e5a4:	3303126f 	.word	0x3303126f
 801e5a8:	08028434 	.word	0x08028434
 801e5ac:	08028440 	.word	0x08028440
 801e5b0:	08028414 	.word	0x08028414
 801e5b4:	08028474 	.word	0x08028474
 801e5b8:	08028480 	.word	0x08028480
 801e5bc:	08028458 	.word	0x08028458
 801e5c0:	ffff8000 	.word	0xffff8000
 801e5c4:	0802848c 	.word	0x0802848c
 801e5c8:	37800000 	.word	0x37800000
 801e5cc:	3283126f 	.word	0x3283126f
 801e5d0:	3ef00000 	.word	0x3ef00000
 801e5d4:	08028494 	.word	0x08028494
 801e5d8:	080284a0 	.word	0x080284a0
 801e5dc:	080284b0 	.word	0x080284b0
 801e5e0:	3b800000 	.word	0x3b800000
 801e5e4:	080284d0 	.word	0x080284d0
 801e5e8:	080284b8 	.word	0x080284b8
          static_cast<double>(params->beta),
 801e5ec:	683b      	ldr	r3, [r7, #0]
 801e5ee:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 801e5f0:	4618      	mov	r0, r3
 801e5f2:	f7e1 ffb3 	bl	800055c <__aeabi_f2d>
 801e5f6:	4680      	mov	r8, r0
 801e5f8:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 801e5fa:	68bb      	ldr	r3, [r7, #8]
 801e5fc:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 801e5fe:	4618      	mov	r0, r3
 801e600:	f7e1 ffac 	bl	800055c <__aeabi_f2d>
 801e604:	4682      	mov	sl, r0
 801e606:	468b      	mov	fp, r1
 801e608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e60a:	3308      	adds	r3, #8
 801e60c:	f107 0210 	add.w	r2, r7, #16
 801e610:	4619      	mov	r1, r3
 801e612:	2005      	movs	r0, #5
 801e614:	ec4b ab11 	vmov	d1, sl, fp
 801e618:	ec49 8b10 	vmov	d0, r8, r9
 801e61c:	f7fb fe2c 	bl	801a278 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 801e620:	693a      	ldr	r2, [r7, #16]
 801e622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e624:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 801e626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e628:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 801e62a:	221f      	movs	r2, #31
 801e62c:	4619      	mov	r1, r3
 801e62e:	2005      	movs	r0, #5
 801e630:	f7fb fe6a 	bl	801a308 <_ZN6tflite20CalculateInputRadiusEiii>
 801e634:	4603      	mov	r3, r0
 801e636:	4618      	mov	r0, r3
 801e638:	f7e1 ff7e 	bl	8000538 <__aeabi_i2d>
 801e63c:	4602      	mov	r2, r0
 801e63e:	460b      	mov	r3, r1
 801e640:	4614      	mov	r4, r2
 801e642:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 801e646:	4620      	mov	r0, r4
 801e648:	4629      	mov	r1, r5
 801e64a:	f7e2 fa8f 	bl	8000b6c <__aeabi_d2iz>
 801e64e:	4602      	mov	r2, r0
 801e650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e652:	619a      	str	r2, [r3, #24]
    }
 801e654:	e043      	b.n	801e6de <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801e656:	68bb      	ldr	r3, [r7, #8]
 801e658:	781b      	ldrb	r3, [r3, #0]
 801e65a:	2b01      	cmp	r3, #1
 801e65c:	d018      	beq.n	801e690 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 801e65e:	68fb      	ldr	r3, [r7, #12]
 801e660:	695c      	ldr	r4, [r3, #20]
 801e662:	68bb      	ldr	r3, [r7, #8]
 801e664:	781b      	ldrb	r3, [r3, #0]
 801e666:	4618      	mov	r0, r3
 801e668:	f7fb fcb4 	bl	8019fd4 <TfLiteTypeGetName>
 801e66c:	4605      	mov	r5, r0
 801e66e:	2001      	movs	r0, #1
 801e670:	f7fb fcb0 	bl	8019fd4 <TfLiteTypeGetName>
 801e674:	4603      	mov	r3, r0
 801e676:	9303      	str	r3, [sp, #12]
 801e678:	9502      	str	r5, [sp, #8]
 801e67a:	4b1c      	ldr	r3, [pc, #112]	; (801e6ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801e67c:	9301      	str	r3, [sp, #4]
 801e67e:	4b1c      	ldr	r3, [pc, #112]	; (801e6f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 801e680:	9300      	str	r3, [sp, #0]
 801e682:	234e      	movs	r3, #78	; 0x4e
 801e684:	4a1b      	ldr	r2, [pc, #108]	; (801e6f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801e686:	491c      	ldr	r1, [pc, #112]	; (801e6f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801e688:	68f8      	ldr	r0, [r7, #12]
 801e68a:	47a0      	blx	r4
 801e68c:	2301      	movs	r3, #1
 801e68e:	e027      	b.n	801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	781b      	ldrb	r3, [r3, #0]
 801e694:	2b01      	cmp	r3, #1
 801e696:	d018      	beq.n	801e6ca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 801e698:	68fb      	ldr	r3, [r7, #12]
 801e69a:	695c      	ldr	r4, [r3, #20]
 801e69c:	687b      	ldr	r3, [r7, #4]
 801e69e:	781b      	ldrb	r3, [r3, #0]
 801e6a0:	4618      	mov	r0, r3
 801e6a2:	f7fb fc97 	bl	8019fd4 <TfLiteTypeGetName>
 801e6a6:	4605      	mov	r5, r0
 801e6a8:	2001      	movs	r0, #1
 801e6aa:	f7fb fc93 	bl	8019fd4 <TfLiteTypeGetName>
 801e6ae:	4603      	mov	r3, r0
 801e6b0:	9303      	str	r3, [sp, #12]
 801e6b2:	9502      	str	r5, [sp, #8]
 801e6b4:	4b0d      	ldr	r3, [pc, #52]	; (801e6ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801e6b6:	9301      	str	r3, [sp, #4]
 801e6b8:	4b10      	ldr	r3, [pc, #64]	; (801e6fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 801e6ba:	9300      	str	r3, [sp, #0]
 801e6bc:	234f      	movs	r3, #79	; 0x4f
 801e6be:	4a0d      	ldr	r2, [pc, #52]	; (801e6f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801e6c0:	490d      	ldr	r1, [pc, #52]	; (801e6f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801e6c2:	68f8      	ldr	r0, [r7, #12]
 801e6c4:	47a0      	blx	r4
 801e6c6:	2301      	movs	r3, #1
 801e6c8:	e00a      	b.n	801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 801e6ca:	683b      	ldr	r3, [r7, #0]
 801e6cc:	681b      	ldr	r3, [r3, #0]
 801e6ce:	4618      	mov	r0, r3
 801e6d0:	f7e1 ff44 	bl	800055c <__aeabi_f2d>
 801e6d4:	4602      	mov	r2, r0
 801e6d6:	460b      	mov	r3, r1
 801e6d8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801e6da:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 801e6de:	2300      	movs	r3, #0
}
 801e6e0:	4618      	mov	r0, r3
 801e6e2:	3728      	adds	r7, #40	; 0x28
 801e6e4:	46bd      	mov	sp, r7
 801e6e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e6ea:	bf00      	nop
 801e6ec:	080284f4 	.word	0x080284f4
 801e6f0:	08028480 	.word	0x08028480
 801e6f4:	08028344 	.word	0x08028344
 801e6f8:	08028458 	.word	0x08028458
 801e6fc:	080284a0 	.word	0x080284a0

0801e700 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 801e700:	b580      	push	{r7, lr}
 801e702:	b084      	sub	sp, #16
 801e704:	af00      	add	r7, sp, #0
 801e706:	60f8      	str	r0, [r7, #12]
 801e708:	60b9      	str	r1, [r7, #8]
 801e70a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801e70c:	68fb      	ldr	r3, [r7, #12]
 801e70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e710:	2b00      	cmp	r3, #0
 801e712:	d101      	bne.n	801e718 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 801e714:	f004 f83e 	bl	8022794 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 801e718:	68fb      	ldr	r3, [r7, #12]
 801e71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e71c:	2138      	movs	r1, #56	; 0x38
 801e71e:	68f8      	ldr	r0, [r7, #12]
 801e720:	4798      	blx	r3
 801e722:	4603      	mov	r3, r0
}
 801e724:	4618      	mov	r0, r3
 801e726:	3710      	adds	r7, #16
 801e728:	46bd      	mov	sp, r7
 801e72a:	bd80      	pop	{r7, pc}

0801e72c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801e72c:	b580      	push	{r7, lr}
 801e72e:	b082      	sub	sp, #8
 801e730:	af00      	add	r7, sp, #0
 801e732:	6078      	str	r0, [r7, #4]
 801e734:	ed87 0a00 	vstr	s0, [r7]
 801e738:	ed97 0a00 	vldr	s0, [r7]
 801e73c:	f7e2 ffff 	bl	800173e <_ZSt3expf>
 801e740:	eef0 7a40 	vmov.f32	s15, s0
 801e744:	eeb0 0a67 	vmov.f32	s0, s15
 801e748:	3708      	adds	r7, #8
 801e74a:	46bd      	mov	sp, r7
 801e74c:	bd80      	pop	{r7, pc}

0801e74e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 801e74e:	b580      	push	{r7, lr}
 801e750:	b082      	sub	sp, #8
 801e752:	af00      	add	r7, sp, #0
 801e754:	ed87 0a01 	vstr	s0, [r7, #4]
 801e758:	ed97 0a01 	vldr	s0, [r7, #4]
 801e75c:	2000      	movs	r0, #0
 801e75e:	f7ff ffe5 	bl	801e72c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 801e762:	eef0 7a40 	vmov.f32	s15, s0
 801e766:	eeb0 0a67 	vmov.f32	s0, s15
 801e76a:	3708      	adds	r7, #8
 801e76c:	46bd      	mov	sp, r7
 801e76e:	bd80      	pop	{r7, pc}

0801e770 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 801e770:	b480      	push	{r7}
 801e772:	b083      	sub	sp, #12
 801e774:	af00      	add	r7, sp, #0
 801e776:	6078      	str	r0, [r7, #4]
 801e778:	4b03      	ldr	r3, [pc, #12]	; (801e788 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 801e77a:	4618      	mov	r0, r3
 801e77c:	370c      	adds	r7, #12
 801e77e:	46bd      	mov	sp, r7
 801e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e784:	4770      	bx	lr
 801e786:	bf00      	nop
 801e788:	0801e74f 	.word	0x0801e74f

0801e78c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801e78c:	b480      	push	{r7}
 801e78e:	b083      	sub	sp, #12
 801e790:	af00      	add	r7, sp, #0
 801e792:	6078      	str	r0, [r7, #4]
 801e794:	ed87 0a00 	vstr	s0, [r7]
 801e798:	edd7 7a00 	vldr	s15, [r7]
 801e79c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e7a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e7a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e7a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e7ac:	eef0 7a66 	vmov.f32	s15, s13
 801e7b0:	eeb0 0a67 	vmov.f32	s0, s15
 801e7b4:	370c      	adds	r7, #12
 801e7b6:	46bd      	mov	sp, r7
 801e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7bc:	4770      	bx	lr

0801e7be <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 801e7be:	b580      	push	{r7, lr}
 801e7c0:	b082      	sub	sp, #8
 801e7c2:	af00      	add	r7, sp, #0
 801e7c4:	ed87 0a01 	vstr	s0, [r7, #4]
 801e7c8:	ed97 0a01 	vldr	s0, [r7, #4]
 801e7cc:	2000      	movs	r0, #0
 801e7ce:	f7ff ffdd 	bl	801e78c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 801e7d2:	eef0 7a40 	vmov.f32	s15, s0
 801e7d6:	eeb0 0a67 	vmov.f32	s0, s15
 801e7da:	3708      	adds	r7, #8
 801e7dc:	46bd      	mov	sp, r7
 801e7de:	bd80      	pop	{r7, pc}

0801e7e0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 801e7e0:	b480      	push	{r7}
 801e7e2:	b083      	sub	sp, #12
 801e7e4:	af00      	add	r7, sp, #0
 801e7e6:	6078      	str	r0, [r7, #4]
 801e7e8:	4b03      	ldr	r3, [pc, #12]	; (801e7f8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	370c      	adds	r7, #12
 801e7ee:	46bd      	mov	sp, r7
 801e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7f4:	4770      	bx	lr
 801e7f6:	bf00      	nop
 801e7f8:	0801e7bf 	.word	0x0801e7bf

0801e7fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801e7fc:	b590      	push	{r4, r7, lr}
 801e7fe:	b08f      	sub	sp, #60	; 0x3c
 801e800:	af04      	add	r7, sp, #16
 801e802:	6078      	str	r0, [r7, #4]
 801e804:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801e806:	6838      	ldr	r0, [r7, #0]
 801e808:	f7fd fa9b 	bl	801bd42 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801e80c:	4603      	mov	r3, r0
 801e80e:	2b01      	cmp	r3, #1
 801e810:	bf14      	ite	ne
 801e812:	2301      	movne	r3, #1
 801e814:	2300      	moveq	r3, #0
 801e816:	b2db      	uxtb	r3, r3
 801e818:	2b00      	cmp	r3, #0
 801e81a:	d013      	beq.n	801e844 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 801e81c:	687b      	ldr	r3, [r7, #4]
 801e81e:	695c      	ldr	r4, [r3, #20]
 801e820:	6838      	ldr	r0, [r7, #0]
 801e822:	f7fd fa8e 	bl	801bd42 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801e826:	4603      	mov	r3, r0
 801e828:	2201      	movs	r2, #1
 801e82a:	9203      	str	r2, [sp, #12]
 801e82c:	9302      	str	r3, [sp, #8]
 801e82e:	4b7c      	ldr	r3, [pc, #496]	; (801ea20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801e830:	9301      	str	r3, [sp, #4]
 801e832:	4b7c      	ldr	r3, [pc, #496]	; (801ea24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801e834:	9300      	str	r3, [sp, #0]
 801e836:	235d      	movs	r3, #93	; 0x5d
 801e838:	4a7b      	ldr	r2, [pc, #492]	; (801ea28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e83a:	497c      	ldr	r1, [pc, #496]	; (801ea2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801e83c:	6878      	ldr	r0, [r7, #4]
 801e83e:	47a0      	blx	r4
 801e840:	2301      	movs	r3, #1
 801e842:	e146      	b.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801e844:	6838      	ldr	r0, [r7, #0]
 801e846:	f7fd fa89 	bl	801bd5c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801e84a:	4603      	mov	r3, r0
 801e84c:	2b01      	cmp	r3, #1
 801e84e:	bf14      	ite	ne
 801e850:	2301      	movne	r3, #1
 801e852:	2300      	moveq	r3, #0
 801e854:	b2db      	uxtb	r3, r3
 801e856:	2b00      	cmp	r3, #0
 801e858:	d013      	beq.n	801e882 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	695c      	ldr	r4, [r3, #20]
 801e85e:	6838      	ldr	r0, [r7, #0]
 801e860:	f7fd fa7c 	bl	801bd5c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801e864:	4603      	mov	r3, r0
 801e866:	2201      	movs	r2, #1
 801e868:	9203      	str	r2, [sp, #12]
 801e86a:	9302      	str	r3, [sp, #8]
 801e86c:	4b6c      	ldr	r3, [pc, #432]	; (801ea20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801e86e:	9301      	str	r3, [sp, #4]
 801e870:	4b6f      	ldr	r3, [pc, #444]	; (801ea30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801e872:	9300      	str	r3, [sp, #0]
 801e874:	235e      	movs	r3, #94	; 0x5e
 801e876:	4a6c      	ldr	r2, [pc, #432]	; (801ea28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e878:	496c      	ldr	r1, [pc, #432]	; (801ea2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801e87a:	6878      	ldr	r0, [r7, #4]
 801e87c:	47a0      	blx	r4
 801e87e:	2301      	movs	r3, #1
 801e880:	e127      	b.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801e882:	2200      	movs	r2, #0
 801e884:	6839      	ldr	r1, [r7, #0]
 801e886:	6878      	ldr	r0, [r7, #4]
 801e888:	f7fb fe94 	bl	801a5b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801e88c:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 801e88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e890:	2b00      	cmp	r3, #0
 801e892:	d10a      	bne.n	801e8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	695c      	ldr	r4, [r3, #20]
 801e898:	4b66      	ldr	r3, [pc, #408]	; (801ea34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801e89a:	9300      	str	r3, [sp, #0]
 801e89c:	2360      	movs	r3, #96	; 0x60
 801e89e:	4a62      	ldr	r2, [pc, #392]	; (801ea28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e8a0:	4965      	ldr	r1, [pc, #404]	; (801ea38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e8a2:	6878      	ldr	r0, [r7, #4]
 801e8a4:	47a0      	blx	r4
 801e8a6:	2301      	movs	r3, #1
 801e8a8:	e113      	b.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801e8aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e8ac:	f7fb fe05 	bl	801a4ba <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 801e8b0:	4603      	mov	r3, r0
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	bfd4      	ite	le
 801e8b6:	2301      	movle	r3, #1
 801e8b8:	2300      	movgt	r3, #0
 801e8ba:	b2db      	uxtb	r3, r3
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	d00a      	beq.n	801e8d6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 801e8c0:	687b      	ldr	r3, [r7, #4]
 801e8c2:	695c      	ldr	r4, [r3, #20]
 801e8c4:	4b5d      	ldr	r3, [pc, #372]	; (801ea3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801e8c6:	9300      	str	r3, [sp, #0]
 801e8c8:	2361      	movs	r3, #97	; 0x61
 801e8ca:	4a57      	ldr	r2, [pc, #348]	; (801ea28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e8cc:	495a      	ldr	r1, [pc, #360]	; (801ea38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e8ce:	6878      	ldr	r0, [r7, #4]
 801e8d0:	47a0      	blx	r4
 801e8d2:	2301      	movs	r3, #1
 801e8d4:	e0fd      	b.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 801e8d6:	2200      	movs	r2, #0
 801e8d8:	6839      	ldr	r1, [r7, #0]
 801e8da:	6878      	ldr	r0, [r7, #4]
 801e8dc:	f7fb fe7a 	bl	801a5d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801e8e0:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801e8e2:	6a3b      	ldr	r3, [r7, #32]
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	d10a      	bne.n	801e8fe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	695c      	ldr	r4, [r3, #20]
 801e8ec:	4b54      	ldr	r3, [pc, #336]	; (801ea40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801e8ee:	9300      	str	r3, [sp, #0]
 801e8f0:	2363      	movs	r3, #99	; 0x63
 801e8f2:	4a4d      	ldr	r2, [pc, #308]	; (801ea28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e8f4:	4950      	ldr	r1, [pc, #320]	; (801ea38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e8f6:	6878      	ldr	r0, [r7, #4]
 801e8f8:	47a0      	blx	r4
 801e8fa:	2301      	movs	r3, #1
 801e8fc:	e0e9      	b.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 801e8fe:	683b      	ldr	r3, [r7, #0]
 801e900:	691b      	ldr	r3, [r3, #16]
 801e902:	2b00      	cmp	r3, #0
 801e904:	d10a      	bne.n	801e91c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801e906:	687b      	ldr	r3, [r7, #4]
 801e908:	695c      	ldr	r4, [r3, #20]
 801e90a:	4b4e      	ldr	r3, [pc, #312]	; (801ea44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801e90c:	9300      	str	r3, [sp, #0]
 801e90e:	2365      	movs	r3, #101	; 0x65
 801e910:	4a45      	ldr	r2, [pc, #276]	; (801ea28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e912:	4949      	ldr	r1, [pc, #292]	; (801ea38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e914:	6878      	ldr	r0, [r7, #4]
 801e916:	47a0      	blx	r4
 801e918:	2301      	movs	r3, #1
 801e91a:	e0da      	b.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 801e91c:	683b      	ldr	r3, [r7, #0]
 801e91e:	691b      	ldr	r3, [r3, #16]
 801e920:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 801e922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e924:	781b      	ldrb	r3, [r3, #0]
 801e926:	2b07      	cmp	r3, #7
 801e928:	d12f      	bne.n	801e98a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e92e:	f240 4102 	movw	r1, #1026	; 0x402
 801e932:	6878      	ldr	r0, [r7, #4]
 801e934:	4798      	blx	r3
 801e936:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 801e938:	69bb      	ldr	r3, [r7, #24]
 801e93a:	2b00      	cmp	r3, #0
 801e93c:	d10a      	bne.n	801e954 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 801e93e:	687b      	ldr	r3, [r7, #4]
 801e940:	695c      	ldr	r4, [r3, #20]
 801e942:	4b41      	ldr	r3, [pc, #260]	; (801ea48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801e944:	9300      	str	r3, [sp, #0]
 801e946:	236b      	movs	r3, #107	; 0x6b
 801e948:	4a37      	ldr	r2, [pc, #220]	; (801ea28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e94a:	493b      	ldr	r1, [pc, #236]	; (801ea38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e94c:	6878      	ldr	r0, [r7, #4]
 801e94e:	47a0      	blx	r4
 801e950:	2301      	movs	r3, #1
 801e952:	e0be      	b.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 801e954:	69fb      	ldr	r3, [r7, #28]
 801e956:	69ba      	ldr	r2, [r7, #24]
 801e958:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e95e:	f240 4102 	movw	r1, #1026	; 0x402
 801e962:	6878      	ldr	r0, [r7, #4]
 801e964:	4798      	blx	r3
 801e966:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 801e968:	697b      	ldr	r3, [r7, #20]
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	d10a      	bne.n	801e984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	695c      	ldr	r4, [r3, #20]
 801e972:	4b36      	ldr	r3, [pc, #216]	; (801ea4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801e974:	9300      	str	r3, [sp, #0]
 801e976:	236f      	movs	r3, #111	; 0x6f
 801e978:	4a2b      	ldr	r2, [pc, #172]	; (801ea28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e97a:	492f      	ldr	r1, [pc, #188]	; (801ea38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e97c:	6878      	ldr	r0, [r7, #4]
 801e97e:	47a0      	blx	r4
 801e980:	2301      	movs	r3, #1
 801e982:	e0a6      	b.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 801e984:	69fb      	ldr	r3, [r7, #28]
 801e986:	697a      	ldr	r2, [r7, #20]
 801e988:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 801e98a:	6a3b      	ldr	r3, [r7, #32]
 801e98c:	781b      	ldrb	r3, [r3, #0]
 801e98e:	2b07      	cmp	r3, #7
 801e990:	d112      	bne.n	801e9b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 801e992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e994:	781b      	ldrb	r3, [r3, #0]
 801e996:	2b09      	cmp	r3, #9
 801e998:	d028      	beq.n	801e9ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e99c:	781b      	ldrb	r3, [r3, #0]
 801e99e:	2b07      	cmp	r3, #7
 801e9a0:	d024      	beq.n	801e9ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801e9a2:	687b      	ldr	r3, [r7, #4]
 801e9a4:	695c      	ldr	r4, [r3, #20]
 801e9a6:	4b2a      	ldr	r3, [pc, #168]	; (801ea50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801e9a8:	9300      	str	r3, [sp, #0]
 801e9aa:	2375      	movs	r3, #117	; 0x75
 801e9ac:	4a1e      	ldr	r2, [pc, #120]	; (801ea28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e9ae:	4922      	ldr	r1, [pc, #136]	; (801ea38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e9b0:	6878      	ldr	r0, [r7, #4]
 801e9b2:	47a0      	blx	r4
 801e9b4:	2301      	movs	r3, #1
 801e9b6:	e08c      	b.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801e9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9ba:	781a      	ldrb	r2, [r3, #0]
 801e9bc:	6a3b      	ldr	r3, [r7, #32]
 801e9be:	781b      	ldrb	r3, [r3, #0]
 801e9c0:	429a      	cmp	r2, r3
 801e9c2:	d013      	beq.n	801e9ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	695c      	ldr	r4, [r3, #20]
 801e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9ca:	781b      	ldrb	r3, [r3, #0]
 801e9cc:	461a      	mov	r2, r3
 801e9ce:	6a3b      	ldr	r3, [r7, #32]
 801e9d0:	781b      	ldrb	r3, [r3, #0]
 801e9d2:	9303      	str	r3, [sp, #12]
 801e9d4:	9202      	str	r2, [sp, #8]
 801e9d6:	4b1f      	ldr	r3, [pc, #124]	; (801ea54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801e9d8:	9301      	str	r3, [sp, #4]
 801e9da:	4b1f      	ldr	r3, [pc, #124]	; (801ea58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801e9dc:	9300      	str	r3, [sp, #0]
 801e9de:	2378      	movs	r3, #120	; 0x78
 801e9e0:	4a11      	ldr	r2, [pc, #68]	; (801ea28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e9e2:	4912      	ldr	r1, [pc, #72]	; (801ea2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801e9e4:	6878      	ldr	r0, [r7, #4]
 801e9e6:	47a0      	blx	r4
 801e9e8:	2301      	movs	r3, #1
 801e9ea:	e072      	b.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 801e9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9ee:	781b      	ldrb	r3, [r3, #0]
 801e9f0:	2b07      	cmp	r3, #7
 801e9f2:	d161      	bne.n	801eab8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801e9f4:	6a3b      	ldr	r3, [r7, #32]
 801e9f6:	691b      	ldr	r3, [r3, #16]
 801e9f8:	2b00      	cmp	r3, #0
 801e9fa:	d035      	beq.n	801ea68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	695c      	ldr	r4, [r3, #20]
 801ea00:	6a3b      	ldr	r3, [r7, #32]
 801ea02:	691b      	ldr	r3, [r3, #16]
 801ea04:	2200      	movs	r2, #0
 801ea06:	9203      	str	r2, [sp, #12]
 801ea08:	9302      	str	r3, [sp, #8]
 801ea0a:	4b14      	ldr	r3, [pc, #80]	; (801ea5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801ea0c:	9301      	str	r3, [sp, #4]
 801ea0e:	4b14      	ldr	r3, [pc, #80]	; (801ea60 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801ea10:	9300      	str	r3, [sp, #0]
 801ea12:	237d      	movs	r3, #125	; 0x7d
 801ea14:	4a04      	ldr	r2, [pc, #16]	; (801ea28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801ea16:	4905      	ldr	r1, [pc, #20]	; (801ea2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801ea18:	6878      	ldr	r0, [r7, #4]
 801ea1a:	47a0      	blx	r4
 801ea1c:	2301      	movs	r3, #1
 801ea1e:	e058      	b.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 801ea20:	08028504 	.word	0x08028504
 801ea24:	08028508 	.word	0x08028508
 801ea28:	08028344 	.word	0x08028344
 801ea2c:	080283d8 	.word	0x080283d8
 801ea30:	08028518 	.word	0x08028518
 801ea34:	0802852c 	.word	0x0802852c
 801ea38:	080284b8 	.word	0x080284b8
 801ea3c:	08028540 	.word	0x08028540
 801ea40:	0802855c 	.word	0x0802855c
 801ea44:	08028570 	.word	0x08028570
 801ea48:	0802858c 	.word	0x0802858c
 801ea4c:	080285a4 	.word	0x080285a4
 801ea50:	080285c8 	.word	0x080285c8
 801ea54:	080284a0 	.word	0x080284a0
 801ea58:	08028480 	.word	0x08028480
 801ea5c:	080283f4 	.word	0x080283f4
 801ea60:	080283f8 	.word	0x080283f8
 801ea64:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801ea68:	f107 0308 	add.w	r3, r7, #8
 801ea6c:	4618      	mov	r0, r3
 801ea6e:	f7ff fe7f 	bl	801e770 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 801ea72:	69fb      	ldr	r3, [r7, #28]
 801ea74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea76:	f240 2201 	movw	r2, #513	; 0x201
 801ea7a:	4619      	mov	r1, r3
 801ea7c:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 801ea64 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801ea80:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 801ea84:	f7ff faf4 	bl	801e070 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801ea88:	f107 030c 	add.w	r3, r7, #12
 801ea8c:	4618      	mov	r0, r3
 801ea8e:	f7ff fea7 	bl	801e7e0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 801ea92:	69fb      	ldr	r3, [r7, #28]
 801ea94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea96:	f240 2201 	movw	r2, #513	; 0x201
 801ea9a:	4619      	mov	r1, r3
 801ea9c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801eaa0:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 801ea64 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801eaa4:	f7ff fae4 	bl	801e070 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 801eaa8:	6a3b      	ldr	r3, [r7, #32]
 801eaaa:	691a      	ldr	r2, [r3, #16]
 801eaac:	69fb      	ldr	r3, [r7, #28]
 801eaae:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 801eab0:	6a3b      	ldr	r3, [r7, #32]
 801eab2:	68da      	ldr	r2, [r3, #12]
 801eab4:	69fb      	ldr	r3, [r7, #28]
 801eab6:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 801eab8:	683b      	ldr	r3, [r7, #0]
 801eaba:	695b      	ldr	r3, [r3, #20]
 801eabc:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 801eabe:	69fb      	ldr	r3, [r7, #28]
 801eac0:	9300      	str	r3, [sp, #0]
 801eac2:	693b      	ldr	r3, [r7, #16]
 801eac4:	6a3a      	ldr	r2, [r7, #32]
 801eac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801eac8:	6878      	ldr	r0, [r7, #4]
 801eaca:	f7ff fbfd 	bl	801e2c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801eace:	4603      	mov	r3, r0
 801ead0:	bf00      	nop
}
 801ead2:	4618      	mov	r0, r3
 801ead4:	372c      	adds	r7, #44	; 0x2c
 801ead6:	46bd      	mov	sp, r7
 801ead8:	bd90      	pop	{r4, r7, pc}
 801eada:	bf00      	nop

0801eadc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 801eadc:	b580      	push	{r7, lr}
 801eade:	b084      	sub	sp, #16
 801eae0:	af00      	add	r7, sp, #0
 801eae2:	6078      	str	r0, [r7, #4]
 801eae4:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 801eae6:	4b21      	ldr	r3, [pc, #132]	; (801eb6c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801eae8:	681a      	ldr	r2, [r3, #0]
 801eaea:	683b      	ldr	r3, [r7, #0]
 801eaec:	425b      	negs	r3, r3
 801eaee:	441a      	add	r2, r3
 801eaf0:	4b1f      	ldr	r3, [pc, #124]	; (801eb70 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	429a      	cmp	r2, r3
 801eaf6:	d224      	bcs.n	801eb42 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 801eaf8:	4b1e      	ldr	r3, [pc, #120]	; (801eb74 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801eafa:	681b      	ldr	r3, [r3, #0]
 801eafc:	2b09      	cmp	r3, #9
 801eafe:	d906      	bls.n	801eb0e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 801eb00:	683b      	ldr	r3, [r7, #0]
 801eb02:	4619      	mov	r1, r3
 801eb04:	481c      	ldr	r0, [pc, #112]	; (801eb78 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 801eb06:	f7e7 f892 	bl	8005c2e <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 801eb0a:	2300      	movs	r3, #0
 801eb0c:	e029      	b.n	801eb62 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 801eb0e:	2101      	movs	r1, #1
 801eb10:	6838      	ldr	r0, [r7, #0]
 801eb12:	f7fb fa29 	bl	8019f68 <_Z9ei_callocjj>
 801eb16:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 801eb18:	68fb      	ldr	r3, [r7, #12]
 801eb1a:	2b00      	cmp	r3, #0
 801eb1c:	d106      	bne.n	801eb2c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 801eb1e:	683b      	ldr	r3, [r7, #0]
 801eb20:	4619      	mov	r1, r3
 801eb22:	4816      	ldr	r0, [pc, #88]	; (801eb7c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 801eb24:	f7e7 f883 	bl	8005c2e <_Z9ei_printfPKcz>
      return NULL;
 801eb28:	2300      	movs	r3, #0
 801eb2a:	e01a      	b.n	801eb62 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 801eb2c:	4b11      	ldr	r3, [pc, #68]	; (801eb74 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801eb2e:	681b      	ldr	r3, [r3, #0]
 801eb30:	1c5a      	adds	r2, r3, #1
 801eb32:	4910      	ldr	r1, [pc, #64]	; (801eb74 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801eb34:	600a      	str	r2, [r1, #0]
 801eb36:	4912      	ldr	r1, [pc, #72]	; (801eb80 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 801eb38:	68fa      	ldr	r2, [r7, #12]
 801eb3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 801eb3e:	68fb      	ldr	r3, [r7, #12]
 801eb40:	e00f      	b.n	801eb62 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 801eb42:	4b0a      	ldr	r3, [pc, #40]	; (801eb6c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801eb44:	681a      	ldr	r2, [r3, #0]
 801eb46:	683b      	ldr	r3, [r7, #0]
 801eb48:	425b      	negs	r3, r3
 801eb4a:	4413      	add	r3, r2
 801eb4c:	4a07      	ldr	r2, [pc, #28]	; (801eb6c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801eb4e:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 801eb50:	4b06      	ldr	r3, [pc, #24]	; (801eb6c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801eb52:	681b      	ldr	r3, [r3, #0]
 801eb54:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 801eb56:	683a      	ldr	r2, [r7, #0]
 801eb58:	2100      	movs	r1, #0
 801eb5a:	68f8      	ldr	r0, [r7, #12]
 801eb5c:	f003 fec4 	bl	80228e8 <memset>

  return ptr;
 801eb60:	68fb      	ldr	r3, [r7, #12]
}
 801eb62:	4618      	mov	r0, r3
 801eb64:	3710      	adds	r7, #16
 801eb66:	46bd      	mov	sp, r7
 801eb68:	bd80      	pop	{r7, pc}
 801eb6a:	bf00      	nop
 801eb6c:	2000059c 	.word	0x2000059c
 801eb70:	20000598 	.word	0x20000598
 801eb74:	20000b3c 	.word	0x20000b3c
 801eb78:	08028618 	.word	0x08028618
 801eb7c:	08028698 	.word	0x08028698
 801eb80:	20000b14 	.word	0x20000b14

0801eb84 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 801eb84:	b580      	push	{r7, lr}
 801eb86:	b086      	sub	sp, #24
 801eb88:	af00      	add	r7, sp, #0
 801eb8a:	60f8      	str	r0, [r7, #12]
 801eb8c:	60b9      	str	r1, [r7, #8]
 801eb8e:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 801eb90:	4b1b      	ldr	r3, [pc, #108]	; (801ec00 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801eb92:	681b      	ldr	r3, [r3, #0]
 801eb94:	2b03      	cmp	r3, #3
 801eb96:	d906      	bls.n	801eba6 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 801eb98:	68bb      	ldr	r3, [r7, #8]
 801eb9a:	4619      	mov	r1, r3
 801eb9c:	4819      	ldr	r0, [pc, #100]	; (801ec04 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 801eb9e:	f7e7 f846 	bl	8005c2e <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801eba2:	2301      	movs	r3, #1
 801eba4:	e028      	b.n	801ebf8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 801eba6:	68bb      	ldr	r3, [r7, #8]
 801eba8:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 801ebaa:	693b      	ldr	r3, [r7, #16]
 801ebac:	4619      	mov	r1, r3
 801ebae:	68f8      	ldr	r0, [r7, #12]
 801ebb0:	f7ff ff94 	bl	801eadc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 801ebb4:	4603      	mov	r3, r0
 801ebb6:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 801ebb8:	697b      	ldr	r3, [r7, #20]
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	d106      	bne.n	801ebcc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 801ebbe:	68bb      	ldr	r3, [r7, #8]
 801ebc0:	4619      	mov	r1, r3
 801ebc2:	4811      	ldr	r0, [pc, #68]	; (801ec08 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 801ebc4:	f7e7 f833 	bl	8005c2e <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801ebc8:	2301      	movs	r3, #1
 801ebca:	e015      	b.n	801ebf8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 801ebcc:	4b0c      	ldr	r3, [pc, #48]	; (801ec00 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ebce:	681b      	ldr	r3, [r3, #0]
 801ebd0:	4a0e      	ldr	r2, [pc, #56]	; (801ec0c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 801ebd2:	00db      	lsls	r3, r3, #3
 801ebd4:	4413      	add	r3, r2
 801ebd6:	f107 0210 	add.w	r2, r7, #16
 801ebda:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ebde:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 801ebe2:	4b07      	ldr	r3, [pc, #28]	; (801ec00 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ebe4:	681b      	ldr	r3, [r3, #0]
 801ebe6:	461a      	mov	r2, r3
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 801ebec:	4b04      	ldr	r3, [pc, #16]	; (801ec00 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ebee:	681b      	ldr	r3, [r3, #0]
 801ebf0:	3301      	adds	r3, #1
 801ebf2:	4a03      	ldr	r2, [pc, #12]	; (801ec00 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ebf4:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 801ebf6:	2300      	movs	r3, #0
}
 801ebf8:	4618      	mov	r0, r3
 801ebfa:	3718      	adds	r7, #24
 801ebfc:	46bd      	mov	sp, r7
 801ebfe:	bd80      	pop	{r7, pc}
 801ec00:	20000b60 	.word	0x20000b60
 801ec04:	080286d0 	.word	0x080286d0
 801ec08:	08028728 	.word	0x08028728
 801ec0c:	20000b40 	.word	0x20000b40

0801ec10 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 801ec10:	b480      	push	{r7}
 801ec12:	b083      	sub	sp, #12
 801ec14:	af00      	add	r7, sp, #0
 801ec16:	6078      	str	r0, [r7, #4]
 801ec18:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 801ec1a:	4b09      	ldr	r3, [pc, #36]	; (801ec40 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 801ec1c:	681b      	ldr	r3, [r3, #0]
 801ec1e:	461a      	mov	r2, r3
 801ec20:	683b      	ldr	r3, [r7, #0]
 801ec22:	4293      	cmp	r3, r2
 801ec24:	dd01      	ble.n	801ec2a <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 801ec26:	2300      	movs	r3, #0
 801ec28:	e004      	b.n	801ec34 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 801ec2a:	4a06      	ldr	r2, [pc, #24]	; (801ec44 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 801ec2c:	683b      	ldr	r3, [r7, #0]
 801ec2e:	00db      	lsls	r3, r3, #3
 801ec30:	4413      	add	r3, r2
 801ec32:	685b      	ldr	r3, [r3, #4]
}
 801ec34:	4618      	mov	r0, r3
 801ec36:	370c      	adds	r7, #12
 801ec38:	46bd      	mov	sp, r7
 801ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec3e:	4770      	bx	lr
 801ec40:	20000b60 	.word	0x20000b60
 801ec44:	20000b40 	.word	0x20000b40

0801ec48 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 801ec48:	b480      	push	{r7}
 801ec4a:	b083      	sub	sp, #12
 801ec4c:	af00      	add	r7, sp, #0
 801ec4e:	6078      	str	r0, [r7, #4]
 801ec50:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 801ec52:	683b      	ldr	r3, [r7, #0]
 801ec54:	019b      	lsls	r3, r3, #6
 801ec56:	4a04      	ldr	r2, [pc, #16]	; (801ec68 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 801ec58:	4413      	add	r3, r2
}
 801ec5a:	4618      	mov	r0, r3
 801ec5c:	370c      	adds	r7, #12
 801ec5e:	46bd      	mov	sp, r7
 801ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec64:	4770      	bx	lr
 801ec66:	bf00      	nop
 801ec68:	200005f8 	.word	0x200005f8

0801ec6c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 801ec6c:	b480      	push	{r7}
 801ec6e:	b083      	sub	sp, #12
 801ec70:	af00      	add	r7, sp, #0
 801ec72:	6078      	str	r0, [r7, #4]
 801ec74:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 801ec76:	683a      	ldr	r2, [r7, #0]
 801ec78:	4613      	mov	r3, r2
 801ec7a:	005b      	lsls	r3, r3, #1
 801ec7c:	4413      	add	r3, r2
 801ec7e:	009b      	lsls	r3, r3, #2
 801ec80:	4a03      	ldr	r2, [pc, #12]	; (801ec90 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 801ec82:	4413      	add	r3, r2
}
 801ec84:	4618      	mov	r0, r3
 801ec86:	370c      	adds	r7, #12
 801ec88:	46bd      	mov	sp, r7
 801ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec8e:	4770      	bx	lr
 801ec90:	20000978 	.word	0x20000978

0801ec94 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 801ec94:	b5b0      	push	{r4, r5, r7, lr}
 801ec96:	b092      	sub	sp, #72	; 0x48
 801ec98:	af00      	add	r7, sp, #0
 801ec9a:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 801ec9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec9e:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 801eca2:	2010      	movs	r0, #16
 801eca4:	4798      	blx	r3
 801eca6:	4603      	mov	r3, r0
 801eca8:	4aa3      	ldr	r2, [pc, #652]	; (801ef38 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ecaa:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 801ecac:	4ba2      	ldr	r3, [pc, #648]	; (801ef38 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ecae:	681b      	ldr	r3, [r3, #0]
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	d104      	bne.n	801ecbe <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 801ecb4:	48a1      	ldr	r0, [pc, #644]	; (801ef3c <_Z18trained_model_initPFPvjjE+0x2a8>)
 801ecb6:	f7e6 ffba 	bl	8005c2e <_Z9ei_printfPKcz>
    return kTfLiteError;
 801ecba:	2301      	movs	r3, #1
 801ecbc:	e21d      	b.n	801f0fa <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801ecbe:	4b9e      	ldr	r3, [pc, #632]	; (801ef38 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	4a9f      	ldr	r2, [pc, #636]	; (801ef40 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801ecc4:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801ecc6:	4b9c      	ldr	r3, [pc, #624]	; (801ef38 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ecc8:	681b      	ldr	r3, [r3, #0]
 801ecca:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 801ecce:	4a9d      	ldr	r2, [pc, #628]	; (801ef44 <_Z18trained_model_initPFPvjjE+0x2b0>)
 801ecd0:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 801ecd2:	4b9d      	ldr	r3, [pc, #628]	; (801ef48 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ecd4:	4a9d      	ldr	r2, [pc, #628]	; (801ef4c <_Z18trained_model_initPFPvjjE+0x2b8>)
 801ecd6:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 801ecd8:	4b9b      	ldr	r3, [pc, #620]	; (801ef48 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ecda:	4a9d      	ldr	r2, [pc, #628]	; (801ef50 <_Z18trained_model_initPFPvjjE+0x2bc>)
 801ecdc:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 801ecde:	4b9a      	ldr	r3, [pc, #616]	; (801ef48 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ece0:	4a9c      	ldr	r2, [pc, #624]	; (801ef54 <_Z18trained_model_initPFPvjjE+0x2c0>)
 801ece2:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 801ece4:	4b98      	ldr	r3, [pc, #608]	; (801ef48 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ece6:	4a9c      	ldr	r2, [pc, #624]	; (801ef58 <_Z18trained_model_initPFPvjjE+0x2c4>)
 801ece8:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 801ecea:	4b97      	ldr	r3, [pc, #604]	; (801ef48 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ecec:	4a9b      	ldr	r2, [pc, #620]	; (801ef5c <_Z18trained_model_initPFPvjjE+0x2c8>)
 801ecee:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 801ecf0:	4b95      	ldr	r3, [pc, #596]	; (801ef48 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ecf2:	4a9b      	ldr	r2, [pc, #620]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ecf4:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 14;
 801ecf6:	4b94      	ldr	r3, [pc, #592]	; (801ef48 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ecf8:	220e      	movs	r2, #14
 801ecfa:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 14; ++i) {
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	647b      	str	r3, [r7, #68]	; 0x44
 801ed00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ed02:	2b0d      	cmp	r3, #13
 801ed04:	f200 810c 	bhi.w	801ef20 <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 801ed08:	4996      	ldr	r1, [pc, #600]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ed0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed0c:	4613      	mov	r3, r2
 801ed0e:	005b      	lsls	r3, r3, #1
 801ed10:	4413      	add	r3, r2
 801ed12:	00db      	lsls	r3, r3, #3
 801ed14:	440b      	add	r3, r1
 801ed16:	3301      	adds	r3, #1
 801ed18:	7819      	ldrb	r1, [r3, #0]
 801ed1a:	4a91      	ldr	r2, [pc, #580]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ed1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ed1e:	019b      	lsls	r3, r3, #6
 801ed20:	4413      	add	r3, r2
 801ed22:	460a      	mov	r2, r1
 801ed24:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 801ed26:	498f      	ldr	r1, [pc, #572]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ed28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed2a:	4613      	mov	r3, r2
 801ed2c:	005b      	lsls	r3, r3, #1
 801ed2e:	4413      	add	r3, r2
 801ed30:	00db      	lsls	r3, r3, #3
 801ed32:	440b      	add	r3, r1
 801ed34:	3301      	adds	r3, #1
 801ed36:	7818      	ldrb	r0, [r3, #0]
 801ed38:	498b      	ldr	r1, [pc, #556]	; (801ef68 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ed3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed3c:	4613      	mov	r3, r2
 801ed3e:	005b      	lsls	r3, r3, #1
 801ed40:	4413      	add	r3, r2
 801ed42:	009b      	lsls	r3, r3, #2
 801ed44:	440b      	add	r3, r1
 801ed46:	3308      	adds	r3, #8
 801ed48:	4602      	mov	r2, r0
 801ed4a:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 801ed4c:	4a84      	ldr	r2, [pc, #528]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ed4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ed50:	019b      	lsls	r3, r3, #6
 801ed52:	4413      	add	r3, r2
 801ed54:	332d      	adds	r3, #45	; 0x2d
 801ed56:	2200      	movs	r2, #0
 801ed58:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 801ed5a:	4982      	ldr	r1, [pc, #520]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ed5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed5e:	4613      	mov	r3, r2
 801ed60:	005b      	lsls	r3, r3, #1
 801ed62:	4413      	add	r3, r2
 801ed64:	00db      	lsls	r3, r3, #3
 801ed66:	440b      	add	r3, r1
 801ed68:	7819      	ldrb	r1, [r3, #0]
 801ed6a:	4a7d      	ldr	r2, [pc, #500]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ed6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ed6e:	019b      	lsls	r3, r3, #6
 801ed70:	4413      	add	r3, r2
 801ed72:	3314      	adds	r3, #20
 801ed74:	460a      	mov	r2, r1
 801ed76:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 801ed78:	497a      	ldr	r1, [pc, #488]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ed7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed7c:	4613      	mov	r3, r2
 801ed7e:	005b      	lsls	r3, r3, #1
 801ed80:	4413      	add	r3, r2
 801ed82:	00db      	lsls	r3, r3, #3
 801ed84:	440b      	add	r3, r1
 801ed86:	330c      	adds	r3, #12
 801ed88:	681a      	ldr	r2, [r3, #0]
 801ed8a:	4975      	ldr	r1, [pc, #468]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ed8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ed8e:	019b      	lsls	r3, r3, #6
 801ed90:	440b      	add	r3, r1
 801ed92:	3318      	adds	r3, #24
 801ed94:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 801ed96:	4973      	ldr	r1, [pc, #460]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ed98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed9a:	4613      	mov	r3, r2
 801ed9c:	005b      	lsls	r3, r3, #1
 801ed9e:	4413      	add	r3, r2
 801eda0:	00db      	lsls	r3, r3, #3
 801eda2:	440b      	add	r3, r1
 801eda4:	3308      	adds	r3, #8
 801eda6:	681a      	ldr	r2, [r3, #0]
 801eda8:	496d      	ldr	r1, [pc, #436]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801edaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801edac:	019b      	lsls	r3, r3, #6
 801edae:	440b      	add	r3, r1
 801edb0:	3308      	adds	r3, #8
 801edb2:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 801edb4:	496b      	ldr	r1, [pc, #428]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801edb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801edb8:	4613      	mov	r3, r2
 801edba:	005b      	lsls	r3, r3, #1
 801edbc:	4413      	add	r3, r2
 801edbe:	00db      	lsls	r3, r3, #3
 801edc0:	440b      	add	r3, r1
 801edc2:	3308      	adds	r3, #8
 801edc4:	6819      	ldr	r1, [r3, #0]
 801edc6:	4868      	ldr	r0, [pc, #416]	; (801ef68 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801edc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801edca:	4613      	mov	r3, r2
 801edcc:	005b      	lsls	r3, r3, #1
 801edce:	4413      	add	r3, r2
 801edd0:	009b      	lsls	r3, r3, #2
 801edd2:	4403      	add	r3, r0
 801edd4:	3304      	adds	r3, #4
 801edd6:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 801edd8:	4a61      	ldr	r2, [pc, #388]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801edda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eddc:	019b      	lsls	r3, r3, #6
 801edde:	4413      	add	r3, r2
 801ede0:	3314      	adds	r3, #20
 801ede2:	781b      	ldrb	r3, [r3, #0]
 801ede4:	2b02      	cmp	r3, #2
 801ede6:	d11e      	bne.n	801ee26 <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801ede8:	495e      	ldr	r1, [pc, #376]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801edea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801edec:	4613      	mov	r3, r2
 801edee:	005b      	lsls	r3, r3, #1
 801edf0:	4413      	add	r3, r2
 801edf2:	00db      	lsls	r3, r3, #3
 801edf4:	440b      	add	r3, r1
 801edf6:	3304      	adds	r3, #4
 801edf8:	681b      	ldr	r3, [r3, #0]
 801edfa:	461a      	mov	r2, r3
 801edfc:	4b4e      	ldr	r3, [pc, #312]	; (801ef38 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801edfe:	681b      	ldr	r3, [r3, #0]
 801ee00:	4413      	add	r3, r2
 801ee02:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 801ee04:	4a56      	ldr	r2, [pc, #344]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ee06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee08:	019b      	lsls	r3, r3, #6
 801ee0a:	4413      	add	r3, r2
 801ee0c:	3304      	adds	r3, #4
 801ee0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ee10:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 801ee12:	4955      	ldr	r1, [pc, #340]	; (801ef68 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ee14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee16:	4613      	mov	r3, r2
 801ee18:	005b      	lsls	r3, r3, #1
 801ee1a:	4413      	add	r3, r2
 801ee1c:	009b      	lsls	r3, r3, #2
 801ee1e:	440b      	add	r3, r1
 801ee20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ee22:	601a      	str	r2, [r3, #0]
 801ee24:	e01f      	b.n	801ee66 <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 801ee26:	494f      	ldr	r1, [pc, #316]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ee28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee2a:	4613      	mov	r3, r2
 801ee2c:	005b      	lsls	r3, r3, #1
 801ee2e:	4413      	add	r3, r2
 801ee30:	00db      	lsls	r3, r3, #3
 801ee32:	440b      	add	r3, r1
 801ee34:	3304      	adds	r3, #4
 801ee36:	681a      	ldr	r2, [r3, #0]
 801ee38:	4949      	ldr	r1, [pc, #292]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ee3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee3c:	019b      	lsls	r3, r3, #6
 801ee3e:	440b      	add	r3, r1
 801ee40:	3304      	adds	r3, #4
 801ee42:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 801ee44:	4947      	ldr	r1, [pc, #284]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ee46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee48:	4613      	mov	r3, r2
 801ee4a:	005b      	lsls	r3, r3, #1
 801ee4c:	4413      	add	r3, r2
 801ee4e:	00db      	lsls	r3, r3, #3
 801ee50:	440b      	add	r3, r1
 801ee52:	3304      	adds	r3, #4
 801ee54:	6819      	ldr	r1, [r3, #0]
 801ee56:	4844      	ldr	r0, [pc, #272]	; (801ef68 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ee58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee5a:	4613      	mov	r3, r2
 801ee5c:	005b      	lsls	r3, r3, #1
 801ee5e:	4413      	add	r3, r2
 801ee60:	009b      	lsls	r3, r3, #2
 801ee62:	4403      	add	r3, r0
 801ee64:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 801ee66:	4a3e      	ldr	r2, [pc, #248]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ee68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee6a:	019b      	lsls	r3, r3, #6
 801ee6c:	4413      	add	r3, r2
 801ee6e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801ee72:	493c      	ldr	r1, [pc, #240]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ee74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee76:	4613      	mov	r3, r2
 801ee78:	005b      	lsls	r3, r3, #1
 801ee7a:	4413      	add	r3, r2
 801ee7c:	00db      	lsls	r3, r3, #3
 801ee7e:	440b      	add	r3, r1
 801ee80:	f103 0210 	add.w	r2, r3, #16
 801ee84:	4603      	mov	r3, r0
 801ee86:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ee8a:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 801ee8e:	4a34      	ldr	r2, [pc, #208]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ee90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee92:	019b      	lsls	r3, r3, #6
 801ee94:	4413      	add	r3, r2
 801ee96:	3330      	adds	r3, #48	; 0x30
 801ee98:	781b      	ldrb	r3, [r3, #0]
 801ee9a:	2b01      	cmp	r3, #1
 801ee9c:	d11b      	bne.n	801eed6 <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 801ee9e:	4931      	ldr	r1, [pc, #196]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801eea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eea2:	4613      	mov	r3, r2
 801eea4:	005b      	lsls	r3, r3, #1
 801eea6:	4413      	add	r3, r2
 801eea8:	00db      	lsls	r3, r3, #3
 801eeaa:	440b      	add	r3, r1
 801eeac:	3314      	adds	r3, #20
 801eeae:	681b      	ldr	r3, [r3, #0]
 801eeb0:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 801eeb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	685a      	ldr	r2, [r3, #4]
 801eeb8:	4929      	ldr	r1, [pc, #164]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801eeba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eebc:	019b      	lsls	r3, r3, #6
 801eebe:	440b      	add	r3, r1
 801eec0:	330c      	adds	r3, #12
 801eec2:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 801eec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eec6:	685b      	ldr	r3, [r3, #4]
 801eec8:	685a      	ldr	r2, [r3, #4]
 801eeca:	4925      	ldr	r1, [pc, #148]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801eecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eece:	019b      	lsls	r3, r3, #6
 801eed0:	440b      	add	r3, r1
 801eed2:	3310      	adds	r3, #16
 801eed4:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 801eed6:	4a22      	ldr	r2, [pc, #136]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801eed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eeda:	019b      	lsls	r3, r3, #6
 801eedc:	4413      	add	r3, r2
 801eede:	3314      	adds	r3, #20
 801eee0:	781b      	ldrb	r3, [r3, #0]
 801eee2:	2b02      	cmp	r3, #2
 801eee4:	d118      	bne.n	801ef18 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 801eee6:	4a1e      	ldr	r2, [pc, #120]	; (801ef60 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801eee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eeea:	019b      	lsls	r3, r3, #6
 801eeec:	4413      	add	r3, r2
 801eeee:	3304      	adds	r3, #4
 801eef0:	6819      	ldr	r1, [r3, #0]
 801eef2:	481c      	ldr	r0, [pc, #112]	; (801ef64 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801eef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eef6:	4613      	mov	r3, r2
 801eef8:	005b      	lsls	r3, r3, #1
 801eefa:	4413      	add	r3, r2
 801eefc:	00db      	lsls	r3, r3, #3
 801eefe:	4403      	add	r3, r0
 801ef00:	330c      	adds	r3, #12
 801ef02:	681b      	ldr	r3, [r3, #0]
 801ef04:	440b      	add	r3, r1
 801ef06:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 801ef08:	4b0d      	ldr	r3, [pc, #52]	; (801ef40 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ef0e:	429a      	cmp	r2, r3
 801ef10:	d902      	bls.n	801ef18 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 801ef12:	4a0b      	ldr	r2, [pc, #44]	; (801ef40 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801ef14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef16:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 14; ++i) {
 801ef18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ef1a:	3301      	adds	r3, #1
 801ef1c:	647b      	str	r3, [r7, #68]	; 0x44
 801ef1e:	e6ef      	b.n	801ed00 <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 801ef20:	4b07      	ldr	r3, [pc, #28]	; (801ef40 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801ef22:	681a      	ldr	r2, [r3, #0]
 801ef24:	4b07      	ldr	r3, [pc, #28]	; (801ef44 <_Z18trained_model_initPFPvjjE+0x2b0>)
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	429a      	cmp	r2, r3
 801ef2a:	d921      	bls.n	801ef70 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 801ef2c:	480f      	ldr	r0, [pc, #60]	; (801ef6c <_Z18trained_model_initPFPvjjE+0x2d8>)
 801ef2e:	f7e6 fe7e 	bl	8005c2e <_Z9ei_printfPKcz>
    return kTfLiteError;
 801ef32:	2301      	movs	r3, #1
 801ef34:	e0e1      	b.n	801f0fa <_Z18trained_model_initPFPvjjE+0x466>
 801ef36:	bf00      	nop
 801ef38:	20000594 	.word	0x20000594
 801ef3c:	0802875c 	.word	0x0802875c
 801ef40:	20000598 	.word	0x20000598
 801ef44:	2000059c 	.word	0x2000059c
 801ef48:	200005a0 	.word	0x200005a0
 801ef4c:	0801eadd 	.word	0x0801eadd
 801ef50:	0801eb85 	.word	0x0801eb85
 801ef54:	0801ec11 	.word	0x0801ec11
 801ef58:	0801ec49 	.word	0x0801ec49
 801ef5c:	0801ec6d 	.word	0x0801ec6d
 801ef60:	200005f8 	.word	0x200005f8
 801ef64:	20000104 	.word	0x20000104
 801ef68:	20000978 	.word	0x20000978
 801ef6c:	08028784 	.word	0x08028784
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 801ef70:	4c64      	ldr	r4, [pc, #400]	; (801f104 <_Z18trained_model_initPFPvjjE+0x470>)
 801ef72:	463b      	mov	r3, r7
 801ef74:	4618      	mov	r0, r3
 801ef76:	f7fd fe59 	bl	801cc2c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 801ef7a:	4625      	mov	r5, r4
 801ef7c:	463c      	mov	r4, r7
 801ef7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ef80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ef82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ef86:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 801ef8a:	4c5e      	ldr	r4, [pc, #376]	; (801f104 <_Z18trained_model_initPFPvjjE+0x470>)
 801ef8c:	463b      	mov	r3, r7
 801ef8e:	4618      	mov	r0, r3
 801ef90:	f7fe fc7c 	bl	801d88c <_ZN6tflite16Register_SOFTMAXEv>
 801ef94:	3420      	adds	r4, #32
 801ef96:	463d      	mov	r5, r7
 801ef98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ef9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ef9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801efa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 5; ++i) {
 801efa4:	2300      	movs	r3, #0
 801efa6:	643b      	str	r3, [r7, #64]	; 0x40
 801efa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801efaa:	2b04      	cmp	r3, #4
 801efac:	d86f      	bhi.n	801f08e <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 801efae:	4a56      	ldr	r2, [pc, #344]	; (801f108 <_Z18trained_model_initPFPvjjE+0x474>)
 801efb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801efb2:	011b      	lsls	r3, r3, #4
 801efb4:	4413      	add	r3, r2
 801efb6:	6819      	ldr	r1, [r3, #0]
 801efb8:	4854      	ldr	r0, [pc, #336]	; (801f10c <_Z18trained_model_initPFPvjjE+0x478>)
 801efba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801efbc:	4613      	mov	r3, r2
 801efbe:	00db      	lsls	r3, r3, #3
 801efc0:	4413      	add	r3, r2
 801efc2:	009b      	lsls	r3, r3, #2
 801efc4:	4403      	add	r3, r0
 801efc6:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 801efc8:	4a4f      	ldr	r2, [pc, #316]	; (801f108 <_Z18trained_model_initPFPvjjE+0x474>)
 801efca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801efcc:	011b      	lsls	r3, r3, #4
 801efce:	4413      	add	r3, r2
 801efd0:	3304      	adds	r3, #4
 801efd2:	6819      	ldr	r1, [r3, #0]
 801efd4:	484d      	ldr	r0, [pc, #308]	; (801f10c <_Z18trained_model_initPFPvjjE+0x478>)
 801efd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801efd8:	4613      	mov	r3, r2
 801efda:	00db      	lsls	r3, r3, #3
 801efdc:	4413      	add	r3, r2
 801efde:	009b      	lsls	r3, r3, #2
 801efe0:	4403      	add	r3, r0
 801efe2:	3304      	adds	r3, #4
 801efe4:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 801efe6:	4a48      	ldr	r2, [pc, #288]	; (801f108 <_Z18trained_model_initPFPvjjE+0x474>)
 801efe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801efea:	011b      	lsls	r3, r3, #4
 801efec:	4413      	add	r3, r2
 801efee:	3308      	adds	r3, #8
 801eff0:	6819      	ldr	r1, [r3, #0]
 801eff2:	4846      	ldr	r0, [pc, #280]	; (801f10c <_Z18trained_model_initPFPvjjE+0x478>)
 801eff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801eff6:	4613      	mov	r3, r2
 801eff8:	00db      	lsls	r3, r3, #3
 801effa:	4413      	add	r3, r2
 801effc:	009b      	lsls	r3, r3, #2
 801effe:	4403      	add	r3, r0
 801f000:	3314      	adds	r3, #20
 801f002:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 801f004:	4941      	ldr	r1, [pc, #260]	; (801f10c <_Z18trained_model_initPFPvjjE+0x478>)
 801f006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f008:	4613      	mov	r3, r2
 801f00a:	00db      	lsls	r3, r3, #3
 801f00c:	4413      	add	r3, r2
 801f00e:	009b      	lsls	r3, r3, #2
 801f010:	440b      	add	r3, r1
 801f012:	3318      	adds	r3, #24
 801f014:	2200      	movs	r2, #0
 801f016:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 801f018:	493c      	ldr	r1, [pc, #240]	; (801f10c <_Z18trained_model_initPFPvjjE+0x478>)
 801f01a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f01c:	4613      	mov	r3, r2
 801f01e:	00db      	lsls	r3, r3, #3
 801f020:	4413      	add	r3, r2
 801f022:	009b      	lsls	r3, r3, #2
 801f024:	440b      	add	r3, r1
 801f026:	331c      	adds	r3, #28
 801f028:	2200      	movs	r2, #0
 801f02a:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 801f02c:	4a36      	ldr	r2, [pc, #216]	; (801f108 <_Z18trained_model_initPFPvjjE+0x474>)
 801f02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f030:	011b      	lsls	r3, r3, #4
 801f032:	4413      	add	r3, r2
 801f034:	330c      	adds	r3, #12
 801f036:	781b      	ldrb	r3, [r3, #0]
 801f038:	4a32      	ldr	r2, [pc, #200]	; (801f104 <_Z18trained_model_initPFPvjjE+0x470>)
 801f03a:	015b      	lsls	r3, r3, #5
 801f03c:	4413      	add	r3, r2
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	2b00      	cmp	r3, #0
 801f042:	d020      	beq.n	801f086 <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 801f044:	4a30      	ldr	r2, [pc, #192]	; (801f108 <_Z18trained_model_initPFPvjjE+0x474>)
 801f046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f048:	011b      	lsls	r3, r3, #4
 801f04a:	4413      	add	r3, r2
 801f04c:	330c      	adds	r3, #12
 801f04e:	781b      	ldrb	r3, [r3, #0]
 801f050:	4a2c      	ldr	r2, [pc, #176]	; (801f104 <_Z18trained_model_initPFPvjjE+0x470>)
 801f052:	015b      	lsls	r3, r3, #5
 801f054:	4413      	add	r3, r2
 801f056:	681c      	ldr	r4, [r3, #0]
 801f058:	492c      	ldr	r1, [pc, #176]	; (801f10c <_Z18trained_model_initPFPvjjE+0x478>)
 801f05a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f05c:	4613      	mov	r3, r2
 801f05e:	00db      	lsls	r3, r3, #3
 801f060:	4413      	add	r3, r2
 801f062:	009b      	lsls	r3, r3, #2
 801f064:	440b      	add	r3, r1
 801f066:	3314      	adds	r3, #20
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	2200      	movs	r2, #0
 801f06c:	4619      	mov	r1, r3
 801f06e:	4828      	ldr	r0, [pc, #160]	; (801f110 <_Z18trained_model_initPFPvjjE+0x47c>)
 801f070:	47a0      	blx	r4
 801f072:	4601      	mov	r1, r0
 801f074:	4825      	ldr	r0, [pc, #148]	; (801f10c <_Z18trained_model_initPFPvjjE+0x478>)
 801f076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f078:	4613      	mov	r3, r2
 801f07a:	00db      	lsls	r3, r3, #3
 801f07c:	4413      	add	r3, r2
 801f07e:	009b      	lsls	r3, r3, #2
 801f080:	4403      	add	r3, r0
 801f082:	3310      	adds	r3, #16
 801f084:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 5; ++i) {
 801f086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f088:	3301      	adds	r3, #1
 801f08a:	643b      	str	r3, [r7, #64]	; 0x40
 801f08c:	e78c      	b.n	801efa8 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for (size_t i = 0; i < 5; ++i) {
 801f08e:	2300      	movs	r3, #0
 801f090:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f094:	2b04      	cmp	r3, #4
 801f096:	d82f      	bhi.n	801f0f8 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 801f098:	4a1b      	ldr	r2, [pc, #108]	; (801f108 <_Z18trained_model_initPFPvjjE+0x474>)
 801f09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f09c:	011b      	lsls	r3, r3, #4
 801f09e:	4413      	add	r3, r2
 801f0a0:	330c      	adds	r3, #12
 801f0a2:	781b      	ldrb	r3, [r3, #0]
 801f0a4:	4a17      	ldr	r2, [pc, #92]	; (801f104 <_Z18trained_model_initPFPvjjE+0x470>)
 801f0a6:	015b      	lsls	r3, r3, #5
 801f0a8:	4413      	add	r3, r2
 801f0aa:	3308      	adds	r3, #8
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	d01e      	beq.n	801f0f0 <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 801f0b2:	4a15      	ldr	r2, [pc, #84]	; (801f108 <_Z18trained_model_initPFPvjjE+0x474>)
 801f0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f0b6:	011b      	lsls	r3, r3, #4
 801f0b8:	4413      	add	r3, r2
 801f0ba:	330c      	adds	r3, #12
 801f0bc:	781b      	ldrb	r3, [r3, #0]
 801f0be:	4a11      	ldr	r2, [pc, #68]	; (801f104 <_Z18trained_model_initPFPvjjE+0x470>)
 801f0c0:	015b      	lsls	r3, r3, #5
 801f0c2:	4413      	add	r3, r2
 801f0c4:	3308      	adds	r3, #8
 801f0c6:	681c      	ldr	r4, [r3, #0]
 801f0c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f0ca:	4613      	mov	r3, r2
 801f0cc:	00db      	lsls	r3, r3, #3
 801f0ce:	4413      	add	r3, r2
 801f0d0:	009b      	lsls	r3, r3, #2
 801f0d2:	4a0e      	ldr	r2, [pc, #56]	; (801f10c <_Z18trained_model_initPFPvjjE+0x478>)
 801f0d4:	4413      	add	r3, r2
 801f0d6:	4619      	mov	r1, r3
 801f0d8:	480d      	ldr	r0, [pc, #52]	; (801f110 <_Z18trained_model_initPFPvjjE+0x47c>)
 801f0da:	47a0      	blx	r4
 801f0dc:	4603      	mov	r3, r0
 801f0de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 801f0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f0e6:	2b00      	cmp	r3, #0
 801f0e8:	d002      	beq.n	801f0f0 <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 801f0ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f0ee:	e004      	b.n	801f0fa <_Z18trained_model_initPFPvjjE+0x466>
  for (size_t i = 0; i < 5; ++i) {
 801f0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f0f2:	3301      	adds	r3, #1
 801f0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f0f6:	e7cc      	b.n	801f092 <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 801f0f8:	2300      	movs	r3, #0
}
 801f0fa:	4618      	mov	r0, r3
 801f0fc:	3748      	adds	r7, #72	; 0x48
 801f0fe:	46bd      	mov	sp, r7
 801f100:	bdb0      	pop	{r4, r5, r7, pc}
 801f102:	bf00      	nop
 801f104:	20000a20 	.word	0x20000a20
 801f108:	0804bbe0 	.word	0x0804bbe0
 801f10c:	20000a60 	.word	0x20000a60
 801f110:	200005a0 	.word	0x200005a0

0801f114 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 801f114:	b480      	push	{r7}
 801f116:	b083      	sub	sp, #12
 801f118:	af00      	add	r7, sp, #0
 801f11a:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 801f11c:	4b05      	ldr	r3, [pc, #20]	; (801f134 <_Z19trained_model_inputi+0x20>)
 801f11e:	689a      	ldr	r2, [r3, #8]
 801f120:	2300      	movs	r3, #0
 801f122:	019b      	lsls	r3, r3, #6
 801f124:	4413      	add	r3, r2
}
 801f126:	4618      	mov	r0, r3
 801f128:	370c      	adds	r7, #12
 801f12a:	46bd      	mov	sp, r7
 801f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f130:	4770      	bx	lr
 801f132:	bf00      	nop
 801f134:	200005a0 	.word	0x200005a0

0801f138 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  13, 
};
TfLiteTensor* trained_model_output(int index) {
 801f138:	b480      	push	{r7}
 801f13a:	b083      	sub	sp, #12
 801f13c:	af00      	add	r7, sp, #0
 801f13e:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 801f140:	4b05      	ldr	r3, [pc, #20]	; (801f158 <_Z20trained_model_outputi+0x20>)
 801f142:	689a      	ldr	r2, [r3, #8]
 801f144:	230d      	movs	r3, #13
 801f146:	019b      	lsls	r3, r3, #6
 801f148:	4413      	add	r3, r2
}
 801f14a:	4618      	mov	r0, r3
 801f14c:	370c      	adds	r7, #12
 801f14e:	46bd      	mov	sp, r7
 801f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f154:	4770      	bx	lr
 801f156:	bf00      	nop
 801f158:	200005a0 	.word	0x200005a0

0801f15c <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 801f15c:	b590      	push	{r4, r7, lr}
 801f15e:	b083      	sub	sp, #12
 801f160:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 5; ++i) {
 801f162:	2300      	movs	r3, #0
 801f164:	607b      	str	r3, [r7, #4]
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	2b04      	cmp	r3, #4
 801f16a:	d81f      	bhi.n	801f1ac <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 801f16c:	4a12      	ldr	r2, [pc, #72]	; (801f1b8 <_Z20trained_model_invokev+0x5c>)
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	011b      	lsls	r3, r3, #4
 801f172:	4413      	add	r3, r2
 801f174:	330c      	adds	r3, #12
 801f176:	781b      	ldrb	r3, [r3, #0]
 801f178:	4a10      	ldr	r2, [pc, #64]	; (801f1bc <_Z20trained_model_invokev+0x60>)
 801f17a:	015b      	lsls	r3, r3, #5
 801f17c:	4413      	add	r3, r2
 801f17e:	330c      	adds	r3, #12
 801f180:	681c      	ldr	r4, [r3, #0]
 801f182:	687a      	ldr	r2, [r7, #4]
 801f184:	4613      	mov	r3, r2
 801f186:	00db      	lsls	r3, r3, #3
 801f188:	4413      	add	r3, r2
 801f18a:	009b      	lsls	r3, r3, #2
 801f18c:	4a0c      	ldr	r2, [pc, #48]	; (801f1c0 <_Z20trained_model_invokev+0x64>)
 801f18e:	4413      	add	r3, r2
 801f190:	4619      	mov	r1, r3
 801f192:	480c      	ldr	r0, [pc, #48]	; (801f1c4 <_Z20trained_model_invokev+0x68>)
 801f194:	47a0      	blx	r4
 801f196:	4603      	mov	r3, r0
 801f198:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 801f19a:	78fb      	ldrb	r3, [r7, #3]
 801f19c:	2b00      	cmp	r3, #0
 801f19e:	d001      	beq.n	801f1a4 <_Z20trained_model_invokev+0x48>
      return status;
 801f1a0:	78fb      	ldrb	r3, [r7, #3]
 801f1a2:	e004      	b.n	801f1ae <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 5; ++i) {
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	3301      	adds	r3, #1
 801f1a8:	607b      	str	r3, [r7, #4]
 801f1aa:	e7dc      	b.n	801f166 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 801f1ac:	2300      	movs	r3, #0
}
 801f1ae:	4618      	mov	r0, r3
 801f1b0:	370c      	adds	r7, #12
 801f1b2:	46bd      	mov	sp, r7
 801f1b4:	bd90      	pop	{r4, r7, pc}
 801f1b6:	bf00      	nop
 801f1b8:	0804bbe0 	.word	0x0804bbe0
 801f1bc:	20000a20 	.word	0x20000a20
 801f1c0:	20000a60 	.word	0x20000a60
 801f1c4:	200005a0 	.word	0x200005a0

0801f1c8 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 801f1c8:	b580      	push	{r7, lr}
 801f1ca:	b084      	sub	sp, #16
 801f1cc:	af00      	add	r7, sp, #0
 801f1ce:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 801f1d0:	4b10      	ldr	r3, [pc, #64]	; (801f214 <_Z19trained_model_resetPFvPvE+0x4c>)
 801f1d2:	681a      	ldr	r2, [r3, #0]
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	4610      	mov	r0, r2
 801f1d8:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 801f1da:	4b0f      	ldr	r3, [pc, #60]	; (801f218 <_Z19trained_model_resetPFvPvE+0x50>)
 801f1dc:	2200      	movs	r2, #0
 801f1de:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 801f1e0:	2300      	movs	r3, #0
 801f1e2:	60fb      	str	r3, [r7, #12]
 801f1e4:	4b0d      	ldr	r3, [pc, #52]	; (801f21c <_Z19trained_model_resetPFvPvE+0x54>)
 801f1e6:	681b      	ldr	r3, [r3, #0]
 801f1e8:	68fa      	ldr	r2, [r7, #12]
 801f1ea:	429a      	cmp	r2, r3
 801f1ec:	d20a      	bcs.n	801f204 <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 801f1ee:	4a0c      	ldr	r2, [pc, #48]	; (801f220 <_Z19trained_model_resetPFvPvE+0x58>)
 801f1f0:	68fb      	ldr	r3, [r7, #12]
 801f1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f1f6:	4618      	mov	r0, r3
 801f1f8:	f7fa fec4 	bl	8019f84 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 801f1fc:	68fb      	ldr	r3, [r7, #12]
 801f1fe:	3301      	adds	r3, #1
 801f200:	60fb      	str	r3, [r7, #12]
 801f202:	e7ef      	b.n	801f1e4 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 801f204:	4b05      	ldr	r3, [pc, #20]	; (801f21c <_Z19trained_model_resetPFvPvE+0x54>)
 801f206:	2200      	movs	r2, #0
 801f208:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801f20a:	2300      	movs	r3, #0
}
 801f20c:	4618      	mov	r0, r3
 801f20e:	3710      	adds	r7, #16
 801f210:	46bd      	mov	sp, r7
 801f212:	bd80      	pop	{r7, pc}
 801f214:	20000594 	.word	0x20000594
 801f218:	20000b60 	.word	0x20000b60
 801f21c:	20000b3c 	.word	0x20000b3c
 801f220:	20000b14 	.word	0x20000b14

0801f224 <_Z41__static_initialization_and_destruction_0ii>:
 801f224:	b480      	push	{r7}
 801f226:	b083      	sub	sp, #12
 801f228:	af00      	add	r7, sp, #0
 801f22a:	6078      	str	r0, [r7, #4]
 801f22c:	6039      	str	r1, [r7, #0]
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	2b01      	cmp	r3, #1
 801f232:	d127      	bne.n	801f284 <_Z41__static_initialization_and_destruction_0ii+0x60>
 801f234:	683b      	ldr	r3, [r7, #0]
 801f236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f23a:	4293      	cmp	r3, r2
 801f23c:	d122      	bne.n	801f284 <_Z41__static_initialization_and_destruction_0ii+0x60>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension0, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 801f23e:	4b14      	ldr	r3, [pc, #80]	; (801f290 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	f503 7380 	add.w	r3, r3, #256	; 0x100
};const NodeInfo_t nodeData[] = {
 801f246:	4a13      	ldr	r2, [pc, #76]	; (801f294 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801f248:	6053      	str	r3, [r2, #4]
 801f24a:	4b11      	ldr	r3, [pc, #68]	; (801f290 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801f24c:	681b      	ldr	r3, [r3, #0]
 801f24e:	4a11      	ldr	r2, [pc, #68]	; (801f294 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801f250:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension10, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
 801f254:	4b0e      	ldr	r3, [pc, #56]	; (801f290 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	f503 7380 	add.w	r3, r3, #256	; 0x100
};const NodeInfo_t nodeData[] = {
 801f25c:	4a0d      	ldr	r2, [pc, #52]	; (801f294 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801f25e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801f262:	4b0b      	ldr	r3, [pc, #44]	; (801f290 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	4a0b      	ldr	r2, [pc, #44]	; (801f294 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801f268:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension12, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
 801f26c:	4b08      	ldr	r3, [pc, #32]	; (801f290 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	f503 7380 	add.w	r3, r3, #256	; 0x100
};const NodeInfo_t nodeData[] = {
 801f274:	4a07      	ldr	r2, [pc, #28]	; (801f294 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801f276:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 801f27a:	4b05      	ldr	r3, [pc, #20]	; (801f290 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801f27c:	681b      	ldr	r3, [r3, #0]
 801f27e:	4a05      	ldr	r2, [pc, #20]	; (801f294 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801f280:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
}
 801f284:	bf00      	nop
 801f286:	370c      	adds	r7, #12
 801f288:	46bd      	mov	sp, r7
 801f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f28e:	4770      	bx	lr
 801f290:	20000594 	.word	0x20000594
 801f294:	20000104 	.word	0x20000104

0801f298 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 801f298:	b580      	push	{r7, lr}
 801f29a:	af00      	add	r7, sp, #0
 801f29c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f2a0:	2001      	movs	r0, #1
 801f2a2:	f7ff ffbf 	bl	801f224 <_Z41__static_initialization_and_destruction_0ii>
 801f2a6:	bd80      	pop	{r7, pc}

0801f2a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f2a8:	b580      	push	{r7, lr}
 801f2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801f2ac:	2200      	movs	r2, #0
 801f2ae:	4912      	ldr	r1, [pc, #72]	; (801f2f8 <MX_USB_DEVICE_Init+0x50>)
 801f2b0:	4812      	ldr	r0, [pc, #72]	; (801f2fc <MX_USB_DEVICE_Init+0x54>)
 801f2b2:	f7ee fb39 	bl	800d928 <USBD_Init>
 801f2b6:	4603      	mov	r3, r0
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	d001      	beq.n	801f2c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801f2bc:	f7e6 fe96 	bl	8005fec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801f2c0:	490f      	ldr	r1, [pc, #60]	; (801f300 <MX_USB_DEVICE_Init+0x58>)
 801f2c2:	480e      	ldr	r0, [pc, #56]	; (801f2fc <MX_USB_DEVICE_Init+0x54>)
 801f2c4:	f7ee fb60 	bl	800d988 <USBD_RegisterClass>
 801f2c8:	4603      	mov	r3, r0
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	d001      	beq.n	801f2d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801f2ce:	f7e6 fe8d 	bl	8005fec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801f2d2:	490c      	ldr	r1, [pc, #48]	; (801f304 <MX_USB_DEVICE_Init+0x5c>)
 801f2d4:	4809      	ldr	r0, [pc, #36]	; (801f2fc <MX_USB_DEVICE_Init+0x54>)
 801f2d6:	f7ee fa51 	bl	800d77c <USBD_CDC_RegisterInterface>
 801f2da:	4603      	mov	r3, r0
 801f2dc:	2b00      	cmp	r3, #0
 801f2de:	d001      	beq.n	801f2e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801f2e0:	f7e6 fe84 	bl	8005fec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801f2e4:	4805      	ldr	r0, [pc, #20]	; (801f2fc <MX_USB_DEVICE_Init+0x54>)
 801f2e6:	f7ee fb85 	bl	800d9f4 <USBD_Start>
 801f2ea:	4603      	mov	r3, r0
 801f2ec:	2b00      	cmp	r3, #0
 801f2ee:	d001      	beq.n	801f2f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801f2f0:	f7e6 fe7c 	bl	8005fec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801f2f4:	bf00      	nop
 801f2f6:	bd80      	pop	{r7, pc}
 801f2f8:	20000268 	.word	0x20000268
 801f2fc:	20000b64 	.word	0x20000b64
 801f300:	20000078 	.word	0x20000078
 801f304:	20000254 	.word	0x20000254

0801f308 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801f308:	b580      	push	{r7, lr}
 801f30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801f30c:	2200      	movs	r2, #0
 801f30e:	4905      	ldr	r1, [pc, #20]	; (801f324 <CDC_Init_FS+0x1c>)
 801f310:	4805      	ldr	r0, [pc, #20]	; (801f328 <CDC_Init_FS+0x20>)
 801f312:	f7ee fa4d 	bl	800d7b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801f316:	4905      	ldr	r1, [pc, #20]	; (801f32c <CDC_Init_FS+0x24>)
 801f318:	4803      	ldr	r0, [pc, #12]	; (801f328 <CDC_Init_FS+0x20>)
 801f31a:	f7ee fa6b 	bl	800d7f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801f31e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801f320:	4618      	mov	r0, r3
 801f322:	bd80      	pop	{r7, pc}
 801f324:	20001640 	.word	0x20001640
 801f328:	20000b64 	.word	0x20000b64
 801f32c:	20000e40 	.word	0x20000e40

0801f330 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801f330:	b480      	push	{r7}
 801f332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801f334:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801f336:	4618      	mov	r0, r3
 801f338:	46bd      	mov	sp, r7
 801f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f33e:	4770      	bx	lr

0801f340 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801f340:	b480      	push	{r7}
 801f342:	b083      	sub	sp, #12
 801f344:	af00      	add	r7, sp, #0
 801f346:	4603      	mov	r3, r0
 801f348:	6039      	str	r1, [r7, #0]
 801f34a:	71fb      	strb	r3, [r7, #7]
 801f34c:	4613      	mov	r3, r2
 801f34e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801f350:	79fb      	ldrb	r3, [r7, #7]
 801f352:	2b23      	cmp	r3, #35	; 0x23
 801f354:	d84a      	bhi.n	801f3ec <CDC_Control_FS+0xac>
 801f356:	a201      	add	r2, pc, #4	; (adr r2, 801f35c <CDC_Control_FS+0x1c>)
 801f358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f35c:	0801f3ed 	.word	0x0801f3ed
 801f360:	0801f3ed 	.word	0x0801f3ed
 801f364:	0801f3ed 	.word	0x0801f3ed
 801f368:	0801f3ed 	.word	0x0801f3ed
 801f36c:	0801f3ed 	.word	0x0801f3ed
 801f370:	0801f3ed 	.word	0x0801f3ed
 801f374:	0801f3ed 	.word	0x0801f3ed
 801f378:	0801f3ed 	.word	0x0801f3ed
 801f37c:	0801f3ed 	.word	0x0801f3ed
 801f380:	0801f3ed 	.word	0x0801f3ed
 801f384:	0801f3ed 	.word	0x0801f3ed
 801f388:	0801f3ed 	.word	0x0801f3ed
 801f38c:	0801f3ed 	.word	0x0801f3ed
 801f390:	0801f3ed 	.word	0x0801f3ed
 801f394:	0801f3ed 	.word	0x0801f3ed
 801f398:	0801f3ed 	.word	0x0801f3ed
 801f39c:	0801f3ed 	.word	0x0801f3ed
 801f3a0:	0801f3ed 	.word	0x0801f3ed
 801f3a4:	0801f3ed 	.word	0x0801f3ed
 801f3a8:	0801f3ed 	.word	0x0801f3ed
 801f3ac:	0801f3ed 	.word	0x0801f3ed
 801f3b0:	0801f3ed 	.word	0x0801f3ed
 801f3b4:	0801f3ed 	.word	0x0801f3ed
 801f3b8:	0801f3ed 	.word	0x0801f3ed
 801f3bc:	0801f3ed 	.word	0x0801f3ed
 801f3c0:	0801f3ed 	.word	0x0801f3ed
 801f3c4:	0801f3ed 	.word	0x0801f3ed
 801f3c8:	0801f3ed 	.word	0x0801f3ed
 801f3cc:	0801f3ed 	.word	0x0801f3ed
 801f3d0:	0801f3ed 	.word	0x0801f3ed
 801f3d4:	0801f3ed 	.word	0x0801f3ed
 801f3d8:	0801f3ed 	.word	0x0801f3ed
 801f3dc:	0801f3ed 	.word	0x0801f3ed
 801f3e0:	0801f3ed 	.word	0x0801f3ed
 801f3e4:	0801f3ed 	.word	0x0801f3ed
 801f3e8:	0801f3ed 	.word	0x0801f3ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801f3ec:	bf00      	nop
  }

  return (USBD_OK);
 801f3ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801f3f0:	4618      	mov	r0, r3
 801f3f2:	370c      	adds	r7, #12
 801f3f4:	46bd      	mov	sp, r7
 801f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3fa:	4770      	bx	lr

0801f3fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801f3fc:	b580      	push	{r7, lr}
 801f3fe:	b082      	sub	sp, #8
 801f400:	af00      	add	r7, sp, #0
 801f402:	6078      	str	r0, [r7, #4]
 801f404:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801f406:	6879      	ldr	r1, [r7, #4]
 801f408:	4805      	ldr	r0, [pc, #20]	; (801f420 <CDC_Receive_FS+0x24>)
 801f40a:	f7ee f9f3 	bl	800d7f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f40e:	4804      	ldr	r0, [pc, #16]	; (801f420 <CDC_Receive_FS+0x24>)
 801f410:	f7ee fa54 	bl	800d8bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801f414:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801f416:	4618      	mov	r0, r3
 801f418:	3708      	adds	r7, #8
 801f41a:	46bd      	mov	sp, r7
 801f41c:	bd80      	pop	{r7, pc}
 801f41e:	bf00      	nop
 801f420:	20000b64 	.word	0x20000b64

0801f424 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801f424:	b580      	push	{r7, lr}
 801f426:	b084      	sub	sp, #16
 801f428:	af00      	add	r7, sp, #0
 801f42a:	6078      	str	r0, [r7, #4]
 801f42c:	460b      	mov	r3, r1
 801f42e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801f430:	2300      	movs	r3, #0
 801f432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801f434:	4b0d      	ldr	r3, [pc, #52]	; (801f46c <CDC_Transmit_FS+0x48>)
 801f436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f43a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801f43c:	68bb      	ldr	r3, [r7, #8]
 801f43e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801f442:	2b00      	cmp	r3, #0
 801f444:	d001      	beq.n	801f44a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801f446:	2301      	movs	r3, #1
 801f448:	e00b      	b.n	801f462 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801f44a:	887b      	ldrh	r3, [r7, #2]
 801f44c:	461a      	mov	r2, r3
 801f44e:	6879      	ldr	r1, [r7, #4]
 801f450:	4806      	ldr	r0, [pc, #24]	; (801f46c <CDC_Transmit_FS+0x48>)
 801f452:	f7ee f9ad 	bl	800d7b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801f456:	4805      	ldr	r0, [pc, #20]	; (801f46c <CDC_Transmit_FS+0x48>)
 801f458:	f7ee f9ea 	bl	800d830 <USBD_CDC_TransmitPacket>
 801f45c:	4603      	mov	r3, r0
 801f45e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801f460:	7bfb      	ldrb	r3, [r7, #15]
}
 801f462:	4618      	mov	r0, r3
 801f464:	3710      	adds	r7, #16
 801f466:	46bd      	mov	sp, r7
 801f468:	bd80      	pop	{r7, pc}
 801f46a:	bf00      	nop
 801f46c:	20000b64 	.word	0x20000b64

0801f470 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801f470:	b480      	push	{r7}
 801f472:	b087      	sub	sp, #28
 801f474:	af00      	add	r7, sp, #0
 801f476:	60f8      	str	r0, [r7, #12]
 801f478:	60b9      	str	r1, [r7, #8]
 801f47a:	4613      	mov	r3, r2
 801f47c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801f47e:	2300      	movs	r3, #0
 801f480:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801f482:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f486:	4618      	mov	r0, r3
 801f488:	371c      	adds	r7, #28
 801f48a:	46bd      	mov	sp, r7
 801f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f490:	4770      	bx	lr
	...

0801f494 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f494:	b480      	push	{r7}
 801f496:	b083      	sub	sp, #12
 801f498:	af00      	add	r7, sp, #0
 801f49a:	4603      	mov	r3, r0
 801f49c:	6039      	str	r1, [r7, #0]
 801f49e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801f4a0:	683b      	ldr	r3, [r7, #0]
 801f4a2:	2212      	movs	r2, #18
 801f4a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801f4a6:	4b03      	ldr	r3, [pc, #12]	; (801f4b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801f4a8:	4618      	mov	r0, r3
 801f4aa:	370c      	adds	r7, #12
 801f4ac:	46bd      	mov	sp, r7
 801f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4b2:	4770      	bx	lr
 801f4b4:	20000284 	.word	0x20000284

0801f4b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f4b8:	b480      	push	{r7}
 801f4ba:	b083      	sub	sp, #12
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	4603      	mov	r3, r0
 801f4c0:	6039      	str	r1, [r7, #0]
 801f4c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801f4c4:	683b      	ldr	r3, [r7, #0]
 801f4c6:	2204      	movs	r2, #4
 801f4c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801f4ca:	4b03      	ldr	r3, [pc, #12]	; (801f4d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801f4cc:	4618      	mov	r0, r3
 801f4ce:	370c      	adds	r7, #12
 801f4d0:	46bd      	mov	sp, r7
 801f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4d6:	4770      	bx	lr
 801f4d8:	20000298 	.word	0x20000298

0801f4dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f4dc:	b580      	push	{r7, lr}
 801f4de:	b082      	sub	sp, #8
 801f4e0:	af00      	add	r7, sp, #0
 801f4e2:	4603      	mov	r3, r0
 801f4e4:	6039      	str	r1, [r7, #0]
 801f4e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801f4e8:	79fb      	ldrb	r3, [r7, #7]
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	d105      	bne.n	801f4fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f4ee:	683a      	ldr	r2, [r7, #0]
 801f4f0:	4907      	ldr	r1, [pc, #28]	; (801f510 <USBD_FS_ProductStrDescriptor+0x34>)
 801f4f2:	4808      	ldr	r0, [pc, #32]	; (801f514 <USBD_FS_ProductStrDescriptor+0x38>)
 801f4f4:	f7ef fc2a 	bl	800ed4c <USBD_GetString>
 801f4f8:	e004      	b.n	801f504 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f4fa:	683a      	ldr	r2, [r7, #0]
 801f4fc:	4904      	ldr	r1, [pc, #16]	; (801f510 <USBD_FS_ProductStrDescriptor+0x34>)
 801f4fe:	4805      	ldr	r0, [pc, #20]	; (801f514 <USBD_FS_ProductStrDescriptor+0x38>)
 801f500:	f7ef fc24 	bl	800ed4c <USBD_GetString>
  }
  return USBD_StrDesc;
 801f504:	4b02      	ldr	r3, [pc, #8]	; (801f510 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801f506:	4618      	mov	r0, r3
 801f508:	3708      	adds	r7, #8
 801f50a:	46bd      	mov	sp, r7
 801f50c:	bd80      	pop	{r7, pc}
 801f50e:	bf00      	nop
 801f510:	20001e40 	.word	0x20001e40
 801f514:	080287d8 	.word	0x080287d8

0801f518 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f518:	b580      	push	{r7, lr}
 801f51a:	b082      	sub	sp, #8
 801f51c:	af00      	add	r7, sp, #0
 801f51e:	4603      	mov	r3, r0
 801f520:	6039      	str	r1, [r7, #0]
 801f522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801f524:	683a      	ldr	r2, [r7, #0]
 801f526:	4904      	ldr	r1, [pc, #16]	; (801f538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801f528:	4804      	ldr	r0, [pc, #16]	; (801f53c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801f52a:	f7ef fc0f 	bl	800ed4c <USBD_GetString>
  return USBD_StrDesc;
 801f52e:	4b02      	ldr	r3, [pc, #8]	; (801f538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801f530:	4618      	mov	r0, r3
 801f532:	3708      	adds	r7, #8
 801f534:	46bd      	mov	sp, r7
 801f536:	bd80      	pop	{r7, pc}
 801f538:	20001e40 	.word	0x20001e40
 801f53c:	080287f0 	.word	0x080287f0

0801f540 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f540:	b580      	push	{r7, lr}
 801f542:	b082      	sub	sp, #8
 801f544:	af00      	add	r7, sp, #0
 801f546:	4603      	mov	r3, r0
 801f548:	6039      	str	r1, [r7, #0]
 801f54a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801f54c:	683b      	ldr	r3, [r7, #0]
 801f54e:	221a      	movs	r2, #26
 801f550:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801f552:	f000 f843 	bl	801f5dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801f556:	4b02      	ldr	r3, [pc, #8]	; (801f560 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801f558:	4618      	mov	r0, r3
 801f55a:	3708      	adds	r7, #8
 801f55c:	46bd      	mov	sp, r7
 801f55e:	bd80      	pop	{r7, pc}
 801f560:	2000029c 	.word	0x2000029c

0801f564 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f564:	b580      	push	{r7, lr}
 801f566:	b082      	sub	sp, #8
 801f568:	af00      	add	r7, sp, #0
 801f56a:	4603      	mov	r3, r0
 801f56c:	6039      	str	r1, [r7, #0]
 801f56e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801f570:	79fb      	ldrb	r3, [r7, #7]
 801f572:	2b00      	cmp	r3, #0
 801f574:	d105      	bne.n	801f582 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f576:	683a      	ldr	r2, [r7, #0]
 801f578:	4907      	ldr	r1, [pc, #28]	; (801f598 <USBD_FS_ConfigStrDescriptor+0x34>)
 801f57a:	4808      	ldr	r0, [pc, #32]	; (801f59c <USBD_FS_ConfigStrDescriptor+0x38>)
 801f57c:	f7ef fbe6 	bl	800ed4c <USBD_GetString>
 801f580:	e004      	b.n	801f58c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f582:	683a      	ldr	r2, [r7, #0]
 801f584:	4904      	ldr	r1, [pc, #16]	; (801f598 <USBD_FS_ConfigStrDescriptor+0x34>)
 801f586:	4805      	ldr	r0, [pc, #20]	; (801f59c <USBD_FS_ConfigStrDescriptor+0x38>)
 801f588:	f7ef fbe0 	bl	800ed4c <USBD_GetString>
  }
  return USBD_StrDesc;
 801f58c:	4b02      	ldr	r3, [pc, #8]	; (801f598 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801f58e:	4618      	mov	r0, r3
 801f590:	3708      	adds	r7, #8
 801f592:	46bd      	mov	sp, r7
 801f594:	bd80      	pop	{r7, pc}
 801f596:	bf00      	nop
 801f598:	20001e40 	.word	0x20001e40
 801f59c:	08028804 	.word	0x08028804

0801f5a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f5a0:	b580      	push	{r7, lr}
 801f5a2:	b082      	sub	sp, #8
 801f5a4:	af00      	add	r7, sp, #0
 801f5a6:	4603      	mov	r3, r0
 801f5a8:	6039      	str	r1, [r7, #0]
 801f5aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801f5ac:	79fb      	ldrb	r3, [r7, #7]
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d105      	bne.n	801f5be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f5b2:	683a      	ldr	r2, [r7, #0]
 801f5b4:	4907      	ldr	r1, [pc, #28]	; (801f5d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801f5b6:	4808      	ldr	r0, [pc, #32]	; (801f5d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801f5b8:	f7ef fbc8 	bl	800ed4c <USBD_GetString>
 801f5bc:	e004      	b.n	801f5c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f5be:	683a      	ldr	r2, [r7, #0]
 801f5c0:	4904      	ldr	r1, [pc, #16]	; (801f5d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801f5c2:	4805      	ldr	r0, [pc, #20]	; (801f5d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801f5c4:	f7ef fbc2 	bl	800ed4c <USBD_GetString>
  }
  return USBD_StrDesc;
 801f5c8:	4b02      	ldr	r3, [pc, #8]	; (801f5d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801f5ca:	4618      	mov	r0, r3
 801f5cc:	3708      	adds	r7, #8
 801f5ce:	46bd      	mov	sp, r7
 801f5d0:	bd80      	pop	{r7, pc}
 801f5d2:	bf00      	nop
 801f5d4:	20001e40 	.word	0x20001e40
 801f5d8:	08028810 	.word	0x08028810

0801f5dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801f5dc:	b580      	push	{r7, lr}
 801f5de:	b084      	sub	sp, #16
 801f5e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801f5e2:	4b0f      	ldr	r3, [pc, #60]	; (801f620 <Get_SerialNum+0x44>)
 801f5e4:	681b      	ldr	r3, [r3, #0]
 801f5e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801f5e8:	4b0e      	ldr	r3, [pc, #56]	; (801f624 <Get_SerialNum+0x48>)
 801f5ea:	681b      	ldr	r3, [r3, #0]
 801f5ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801f5ee:	4b0e      	ldr	r3, [pc, #56]	; (801f628 <Get_SerialNum+0x4c>)
 801f5f0:	681b      	ldr	r3, [r3, #0]
 801f5f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801f5f4:	68fa      	ldr	r2, [r7, #12]
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	4413      	add	r3, r2
 801f5fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801f5fc:	68fb      	ldr	r3, [r7, #12]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d009      	beq.n	801f616 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801f602:	2208      	movs	r2, #8
 801f604:	4909      	ldr	r1, [pc, #36]	; (801f62c <Get_SerialNum+0x50>)
 801f606:	68f8      	ldr	r0, [r7, #12]
 801f608:	f000 f814 	bl	801f634 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801f60c:	2204      	movs	r2, #4
 801f60e:	4908      	ldr	r1, [pc, #32]	; (801f630 <Get_SerialNum+0x54>)
 801f610:	68b8      	ldr	r0, [r7, #8]
 801f612:	f000 f80f 	bl	801f634 <IntToUnicode>
  }
}
 801f616:	bf00      	nop
 801f618:	3710      	adds	r7, #16
 801f61a:	46bd      	mov	sp, r7
 801f61c:	bd80      	pop	{r7, pc}
 801f61e:	bf00      	nop
 801f620:	1fff7a10 	.word	0x1fff7a10
 801f624:	1fff7a14 	.word	0x1fff7a14
 801f628:	1fff7a18 	.word	0x1fff7a18
 801f62c:	2000029e 	.word	0x2000029e
 801f630:	200002ae 	.word	0x200002ae

0801f634 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801f634:	b480      	push	{r7}
 801f636:	b087      	sub	sp, #28
 801f638:	af00      	add	r7, sp, #0
 801f63a:	60f8      	str	r0, [r7, #12]
 801f63c:	60b9      	str	r1, [r7, #8]
 801f63e:	4613      	mov	r3, r2
 801f640:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801f642:	2300      	movs	r3, #0
 801f644:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801f646:	2300      	movs	r3, #0
 801f648:	75fb      	strb	r3, [r7, #23]
 801f64a:	e027      	b.n	801f69c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801f64c:	68fb      	ldr	r3, [r7, #12]
 801f64e:	0f1b      	lsrs	r3, r3, #28
 801f650:	2b09      	cmp	r3, #9
 801f652:	d80b      	bhi.n	801f66c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801f654:	68fb      	ldr	r3, [r7, #12]
 801f656:	0f1b      	lsrs	r3, r3, #28
 801f658:	b2da      	uxtb	r2, r3
 801f65a:	7dfb      	ldrb	r3, [r7, #23]
 801f65c:	005b      	lsls	r3, r3, #1
 801f65e:	4619      	mov	r1, r3
 801f660:	68bb      	ldr	r3, [r7, #8]
 801f662:	440b      	add	r3, r1
 801f664:	3230      	adds	r2, #48	; 0x30
 801f666:	b2d2      	uxtb	r2, r2
 801f668:	701a      	strb	r2, [r3, #0]
 801f66a:	e00a      	b.n	801f682 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801f66c:	68fb      	ldr	r3, [r7, #12]
 801f66e:	0f1b      	lsrs	r3, r3, #28
 801f670:	b2da      	uxtb	r2, r3
 801f672:	7dfb      	ldrb	r3, [r7, #23]
 801f674:	005b      	lsls	r3, r3, #1
 801f676:	4619      	mov	r1, r3
 801f678:	68bb      	ldr	r3, [r7, #8]
 801f67a:	440b      	add	r3, r1
 801f67c:	3237      	adds	r2, #55	; 0x37
 801f67e:	b2d2      	uxtb	r2, r2
 801f680:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801f682:	68fb      	ldr	r3, [r7, #12]
 801f684:	011b      	lsls	r3, r3, #4
 801f686:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801f688:	7dfb      	ldrb	r3, [r7, #23]
 801f68a:	005b      	lsls	r3, r3, #1
 801f68c:	3301      	adds	r3, #1
 801f68e:	68ba      	ldr	r2, [r7, #8]
 801f690:	4413      	add	r3, r2
 801f692:	2200      	movs	r2, #0
 801f694:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801f696:	7dfb      	ldrb	r3, [r7, #23]
 801f698:	3301      	adds	r3, #1
 801f69a:	75fb      	strb	r3, [r7, #23]
 801f69c:	7dfa      	ldrb	r2, [r7, #23]
 801f69e:	79fb      	ldrb	r3, [r7, #7]
 801f6a0:	429a      	cmp	r2, r3
 801f6a2:	d3d3      	bcc.n	801f64c <IntToUnicode+0x18>
  }
}
 801f6a4:	bf00      	nop
 801f6a6:	bf00      	nop
 801f6a8:	371c      	adds	r7, #28
 801f6aa:	46bd      	mov	sp, r7
 801f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6b0:	4770      	bx	lr
	...

0801f6b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801f6b4:	b580      	push	{r7, lr}
 801f6b6:	b08a      	sub	sp, #40	; 0x28
 801f6b8:	af00      	add	r7, sp, #0
 801f6ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f6bc:	f107 0314 	add.w	r3, r7, #20
 801f6c0:	2200      	movs	r2, #0
 801f6c2:	601a      	str	r2, [r3, #0]
 801f6c4:	605a      	str	r2, [r3, #4]
 801f6c6:	609a      	str	r2, [r3, #8]
 801f6c8:	60da      	str	r2, [r3, #12]
 801f6ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	681b      	ldr	r3, [r3, #0]
 801f6d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801f6d4:	d13a      	bne.n	801f74c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f6d6:	2300      	movs	r3, #0
 801f6d8:	613b      	str	r3, [r7, #16]
 801f6da:	4b1e      	ldr	r3, [pc, #120]	; (801f754 <HAL_PCD_MspInit+0xa0>)
 801f6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f6de:	4a1d      	ldr	r2, [pc, #116]	; (801f754 <HAL_PCD_MspInit+0xa0>)
 801f6e0:	f043 0301 	orr.w	r3, r3, #1
 801f6e4:	6313      	str	r3, [r2, #48]	; 0x30
 801f6e6:	4b1b      	ldr	r3, [pc, #108]	; (801f754 <HAL_PCD_MspInit+0xa0>)
 801f6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f6ea:	f003 0301 	and.w	r3, r3, #1
 801f6ee:	613b      	str	r3, [r7, #16]
 801f6f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801f6f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801f6f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f6f8:	2302      	movs	r3, #2
 801f6fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f6fc:	2300      	movs	r3, #0
 801f6fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f700:	2303      	movs	r3, #3
 801f702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f704:	230a      	movs	r3, #10
 801f706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f708:	f107 0314 	add.w	r3, r7, #20
 801f70c:	4619      	mov	r1, r3
 801f70e:	4812      	ldr	r0, [pc, #72]	; (801f758 <HAL_PCD_MspInit+0xa4>)
 801f710:	f7e9 fcb4 	bl	800907c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f714:	4b0f      	ldr	r3, [pc, #60]	; (801f754 <HAL_PCD_MspInit+0xa0>)
 801f716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f718:	4a0e      	ldr	r2, [pc, #56]	; (801f754 <HAL_PCD_MspInit+0xa0>)
 801f71a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f71e:	6353      	str	r3, [r2, #52]	; 0x34
 801f720:	2300      	movs	r3, #0
 801f722:	60fb      	str	r3, [r7, #12]
 801f724:	4b0b      	ldr	r3, [pc, #44]	; (801f754 <HAL_PCD_MspInit+0xa0>)
 801f726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f728:	4a0a      	ldr	r2, [pc, #40]	; (801f754 <HAL_PCD_MspInit+0xa0>)
 801f72a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801f72e:	6453      	str	r3, [r2, #68]	; 0x44
 801f730:	4b08      	ldr	r3, [pc, #32]	; (801f754 <HAL_PCD_MspInit+0xa0>)
 801f732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f738:	60fb      	str	r3, [r7, #12]
 801f73a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801f73c:	2200      	movs	r2, #0
 801f73e:	2100      	movs	r1, #0
 801f740:	2043      	movs	r0, #67	; 0x43
 801f742:	f7e9 fc48 	bl	8008fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801f746:	2043      	movs	r0, #67	; 0x43
 801f748:	f7e9 fc61 	bl	800900e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801f74c:	bf00      	nop
 801f74e:	3728      	adds	r7, #40	; 0x28
 801f750:	46bd      	mov	sp, r7
 801f752:	bd80      	pop	{r7, pc}
 801f754:	40023800 	.word	0x40023800
 801f758:	40020000 	.word	0x40020000

0801f75c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f75c:	b580      	push	{r7, lr}
 801f75e:	b082      	sub	sp, #8
 801f760:	af00      	add	r7, sp, #0
 801f762:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f764:	687b      	ldr	r3, [r7, #4]
 801f766:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801f76a:	687b      	ldr	r3, [r7, #4]
 801f76c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801f770:	4619      	mov	r1, r3
 801f772:	4610      	mov	r0, r2
 801f774:	f7ee f98b 	bl	800da8e <USBD_LL_SetupStage>
}
 801f778:	bf00      	nop
 801f77a:	3708      	adds	r7, #8
 801f77c:	46bd      	mov	sp, r7
 801f77e:	bd80      	pop	{r7, pc}

0801f780 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f780:	b580      	push	{r7, lr}
 801f782:	b082      	sub	sp, #8
 801f784:	af00      	add	r7, sp, #0
 801f786:	6078      	str	r0, [r7, #4]
 801f788:	460b      	mov	r3, r1
 801f78a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f78c:	687b      	ldr	r3, [r7, #4]
 801f78e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801f792:	78fa      	ldrb	r2, [r7, #3]
 801f794:	6879      	ldr	r1, [r7, #4]
 801f796:	4613      	mov	r3, r2
 801f798:	00db      	lsls	r3, r3, #3
 801f79a:	4413      	add	r3, r2
 801f79c:	009b      	lsls	r3, r3, #2
 801f79e:	440b      	add	r3, r1
 801f7a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801f7a4:	681a      	ldr	r2, [r3, #0]
 801f7a6:	78fb      	ldrb	r3, [r7, #3]
 801f7a8:	4619      	mov	r1, r3
 801f7aa:	f7ee f9c5 	bl	800db38 <USBD_LL_DataOutStage>
}
 801f7ae:	bf00      	nop
 801f7b0:	3708      	adds	r7, #8
 801f7b2:	46bd      	mov	sp, r7
 801f7b4:	bd80      	pop	{r7, pc}

0801f7b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f7b6:	b580      	push	{r7, lr}
 801f7b8:	b082      	sub	sp, #8
 801f7ba:	af00      	add	r7, sp, #0
 801f7bc:	6078      	str	r0, [r7, #4]
 801f7be:	460b      	mov	r3, r1
 801f7c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f7c2:	687b      	ldr	r3, [r7, #4]
 801f7c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801f7c8:	78fa      	ldrb	r2, [r7, #3]
 801f7ca:	6879      	ldr	r1, [r7, #4]
 801f7cc:	4613      	mov	r3, r2
 801f7ce:	00db      	lsls	r3, r3, #3
 801f7d0:	4413      	add	r3, r2
 801f7d2:	009b      	lsls	r3, r3, #2
 801f7d4:	440b      	add	r3, r1
 801f7d6:	334c      	adds	r3, #76	; 0x4c
 801f7d8:	681a      	ldr	r2, [r3, #0]
 801f7da:	78fb      	ldrb	r3, [r7, #3]
 801f7dc:	4619      	mov	r1, r3
 801f7de:	f7ee fa5e 	bl	800dc9e <USBD_LL_DataInStage>
}
 801f7e2:	bf00      	nop
 801f7e4:	3708      	adds	r7, #8
 801f7e6:	46bd      	mov	sp, r7
 801f7e8:	bd80      	pop	{r7, pc}

0801f7ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f7ea:	b580      	push	{r7, lr}
 801f7ec:	b082      	sub	sp, #8
 801f7ee:	af00      	add	r7, sp, #0
 801f7f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f7f8:	4618      	mov	r0, r3
 801f7fa:	f7ee fb92 	bl	800df22 <USBD_LL_SOF>
}
 801f7fe:	bf00      	nop
 801f800:	3708      	adds	r7, #8
 801f802:	46bd      	mov	sp, r7
 801f804:	bd80      	pop	{r7, pc}

0801f806 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f806:	b580      	push	{r7, lr}
 801f808:	b084      	sub	sp, #16
 801f80a:	af00      	add	r7, sp, #0
 801f80c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801f80e:	2301      	movs	r3, #1
 801f810:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	68db      	ldr	r3, [r3, #12]
 801f816:	2b00      	cmp	r3, #0
 801f818:	d102      	bne.n	801f820 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801f81a:	2300      	movs	r3, #0
 801f81c:	73fb      	strb	r3, [r7, #15]
 801f81e:	e008      	b.n	801f832 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801f820:	687b      	ldr	r3, [r7, #4]
 801f822:	68db      	ldr	r3, [r3, #12]
 801f824:	2b02      	cmp	r3, #2
 801f826:	d102      	bne.n	801f82e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801f828:	2301      	movs	r3, #1
 801f82a:	73fb      	strb	r3, [r7, #15]
 801f82c:	e001      	b.n	801f832 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801f82e:	f7e6 fbdd 	bl	8005fec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f832:	687b      	ldr	r3, [r7, #4]
 801f834:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f838:	7bfa      	ldrb	r2, [r7, #15]
 801f83a:	4611      	mov	r1, r2
 801f83c:	4618      	mov	r0, r3
 801f83e:	f7ee fb32 	bl	800dea6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f842:	687b      	ldr	r3, [r7, #4]
 801f844:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f848:	4618      	mov	r0, r3
 801f84a:	f7ee fada 	bl	800de02 <USBD_LL_Reset>
}
 801f84e:	bf00      	nop
 801f850:	3710      	adds	r7, #16
 801f852:	46bd      	mov	sp, r7
 801f854:	bd80      	pop	{r7, pc}
	...

0801f858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f858:	b580      	push	{r7, lr}
 801f85a:	b082      	sub	sp, #8
 801f85c:	af00      	add	r7, sp, #0
 801f85e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f866:	4618      	mov	r0, r3
 801f868:	f7ee fb2d 	bl	800dec6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f86c:	687b      	ldr	r3, [r7, #4]
 801f86e:	681b      	ldr	r3, [r3, #0]
 801f870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f874:	681b      	ldr	r3, [r3, #0]
 801f876:	687a      	ldr	r2, [r7, #4]
 801f878:	6812      	ldr	r2, [r2, #0]
 801f87a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f87e:	f043 0301 	orr.w	r3, r3, #1
 801f882:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	6a1b      	ldr	r3, [r3, #32]
 801f888:	2b00      	cmp	r3, #0
 801f88a:	d005      	beq.n	801f898 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f88c:	4b04      	ldr	r3, [pc, #16]	; (801f8a0 <HAL_PCD_SuspendCallback+0x48>)
 801f88e:	691b      	ldr	r3, [r3, #16]
 801f890:	4a03      	ldr	r2, [pc, #12]	; (801f8a0 <HAL_PCD_SuspendCallback+0x48>)
 801f892:	f043 0306 	orr.w	r3, r3, #6
 801f896:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801f898:	bf00      	nop
 801f89a:	3708      	adds	r7, #8
 801f89c:	46bd      	mov	sp, r7
 801f89e:	bd80      	pop	{r7, pc}
 801f8a0:	e000ed00 	.word	0xe000ed00

0801f8a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f8a4:	b580      	push	{r7, lr}
 801f8a6:	b082      	sub	sp, #8
 801f8a8:	af00      	add	r7, sp, #0
 801f8aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f8b2:	4618      	mov	r0, r3
 801f8b4:	f7ee fb1d 	bl	800def2 <USBD_LL_Resume>
}
 801f8b8:	bf00      	nop
 801f8ba:	3708      	adds	r7, #8
 801f8bc:	46bd      	mov	sp, r7
 801f8be:	bd80      	pop	{r7, pc}

0801f8c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f8c0:	b580      	push	{r7, lr}
 801f8c2:	b082      	sub	sp, #8
 801f8c4:	af00      	add	r7, sp, #0
 801f8c6:	6078      	str	r0, [r7, #4]
 801f8c8:	460b      	mov	r3, r1
 801f8ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f8cc:	687b      	ldr	r3, [r7, #4]
 801f8ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f8d2:	78fa      	ldrb	r2, [r7, #3]
 801f8d4:	4611      	mov	r1, r2
 801f8d6:	4618      	mov	r0, r3
 801f8d8:	f7ee fb75 	bl	800dfc6 <USBD_LL_IsoOUTIncomplete>
}
 801f8dc:	bf00      	nop
 801f8de:	3708      	adds	r7, #8
 801f8e0:	46bd      	mov	sp, r7
 801f8e2:	bd80      	pop	{r7, pc}

0801f8e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f8e4:	b580      	push	{r7, lr}
 801f8e6:	b082      	sub	sp, #8
 801f8e8:	af00      	add	r7, sp, #0
 801f8ea:	6078      	str	r0, [r7, #4]
 801f8ec:	460b      	mov	r3, r1
 801f8ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f8f6:	78fa      	ldrb	r2, [r7, #3]
 801f8f8:	4611      	mov	r1, r2
 801f8fa:	4618      	mov	r0, r3
 801f8fc:	f7ee fb31 	bl	800df62 <USBD_LL_IsoINIncomplete>
}
 801f900:	bf00      	nop
 801f902:	3708      	adds	r7, #8
 801f904:	46bd      	mov	sp, r7
 801f906:	bd80      	pop	{r7, pc}

0801f908 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f908:	b580      	push	{r7, lr}
 801f90a:	b082      	sub	sp, #8
 801f90c:	af00      	add	r7, sp, #0
 801f90e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801f910:	687b      	ldr	r3, [r7, #4]
 801f912:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f916:	4618      	mov	r0, r3
 801f918:	f7ee fb87 	bl	800e02a <USBD_LL_DevConnected>
}
 801f91c:	bf00      	nop
 801f91e:	3708      	adds	r7, #8
 801f920:	46bd      	mov	sp, r7
 801f922:	bd80      	pop	{r7, pc}

0801f924 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f924:	b580      	push	{r7, lr}
 801f926:	b082      	sub	sp, #8
 801f928:	af00      	add	r7, sp, #0
 801f92a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801f92c:	687b      	ldr	r3, [r7, #4]
 801f92e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f932:	4618      	mov	r0, r3
 801f934:	f7ee fb84 	bl	800e040 <USBD_LL_DevDisconnected>
}
 801f938:	bf00      	nop
 801f93a:	3708      	adds	r7, #8
 801f93c:	46bd      	mov	sp, r7
 801f93e:	bd80      	pop	{r7, pc}

0801f940 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801f940:	b580      	push	{r7, lr}
 801f942:	b082      	sub	sp, #8
 801f944:	af00      	add	r7, sp, #0
 801f946:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	781b      	ldrb	r3, [r3, #0]
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	d13c      	bne.n	801f9ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801f950:	4a20      	ldr	r2, [pc, #128]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f952:	687b      	ldr	r3, [r7, #4]
 801f954:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801f958:	687b      	ldr	r3, [r7, #4]
 801f95a:	4a1e      	ldr	r2, [pc, #120]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f95c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801f960:	4b1c      	ldr	r3, [pc, #112]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f962:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801f966:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801f968:	4b1a      	ldr	r3, [pc, #104]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f96a:	2204      	movs	r2, #4
 801f96c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801f96e:	4b19      	ldr	r3, [pc, #100]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f970:	2202      	movs	r2, #2
 801f972:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801f974:	4b17      	ldr	r3, [pc, #92]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f976:	2200      	movs	r2, #0
 801f978:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801f97a:	4b16      	ldr	r3, [pc, #88]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f97c:	2202      	movs	r2, #2
 801f97e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801f980:	4b14      	ldr	r3, [pc, #80]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f982:	2200      	movs	r2, #0
 801f984:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801f986:	4b13      	ldr	r3, [pc, #76]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f988:	2200      	movs	r2, #0
 801f98a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801f98c:	4b11      	ldr	r3, [pc, #68]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f98e:	2200      	movs	r2, #0
 801f990:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801f992:	4b10      	ldr	r3, [pc, #64]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f994:	2200      	movs	r2, #0
 801f996:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801f998:	4b0e      	ldr	r3, [pc, #56]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f99a:	2200      	movs	r2, #0
 801f99c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f99e:	480d      	ldr	r0, [pc, #52]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f9a0:	f7e9 fd21 	bl	80093e6 <HAL_PCD_Init>
 801f9a4:	4603      	mov	r3, r0
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d001      	beq.n	801f9ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801f9aa:	f7e6 fb1f 	bl	8005fec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801f9ae:	2180      	movs	r1, #128	; 0x80
 801f9b0:	4808      	ldr	r0, [pc, #32]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f9b2:	f7ea ff78 	bl	800a8a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801f9b6:	2240      	movs	r2, #64	; 0x40
 801f9b8:	2100      	movs	r1, #0
 801f9ba:	4806      	ldr	r0, [pc, #24]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f9bc:	f7ea ff2c 	bl	800a818 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801f9c0:	2280      	movs	r2, #128	; 0x80
 801f9c2:	2101      	movs	r1, #1
 801f9c4:	4803      	ldr	r0, [pc, #12]	; (801f9d4 <USBD_LL_Init+0x94>)
 801f9c6:	f7ea ff27 	bl	800a818 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801f9ca:	2300      	movs	r3, #0
}
 801f9cc:	4618      	mov	r0, r3
 801f9ce:	3708      	adds	r7, #8
 801f9d0:	46bd      	mov	sp, r7
 801f9d2:	bd80      	pop	{r7, pc}
 801f9d4:	20002040 	.word	0x20002040

0801f9d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801f9d8:	b580      	push	{r7, lr}
 801f9da:	b084      	sub	sp, #16
 801f9dc:	af00      	add	r7, sp, #0
 801f9de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f9e0:	2300      	movs	r3, #0
 801f9e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f9e4:	2300      	movs	r3, #0
 801f9e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801f9ee:	4618      	mov	r0, r3
 801f9f0:	f7e9 fe16 	bl	8009620 <HAL_PCD_Start>
 801f9f4:	4603      	mov	r3, r0
 801f9f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f9f8:	7bfb      	ldrb	r3, [r7, #15]
 801f9fa:	4618      	mov	r0, r3
 801f9fc:	f000 f942 	bl	801fc84 <USBD_Get_USB_Status>
 801fa00:	4603      	mov	r3, r0
 801fa02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fa04:	7bbb      	ldrb	r3, [r7, #14]
}
 801fa06:	4618      	mov	r0, r3
 801fa08:	3710      	adds	r7, #16
 801fa0a:	46bd      	mov	sp, r7
 801fa0c:	bd80      	pop	{r7, pc}

0801fa0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801fa0e:	b580      	push	{r7, lr}
 801fa10:	b084      	sub	sp, #16
 801fa12:	af00      	add	r7, sp, #0
 801fa14:	6078      	str	r0, [r7, #4]
 801fa16:	4608      	mov	r0, r1
 801fa18:	4611      	mov	r1, r2
 801fa1a:	461a      	mov	r2, r3
 801fa1c:	4603      	mov	r3, r0
 801fa1e:	70fb      	strb	r3, [r7, #3]
 801fa20:	460b      	mov	r3, r1
 801fa22:	70bb      	strb	r3, [r7, #2]
 801fa24:	4613      	mov	r3, r2
 801fa26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fa28:	2300      	movs	r3, #0
 801fa2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fa2c:	2300      	movs	r3, #0
 801fa2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801fa36:	78bb      	ldrb	r3, [r7, #2]
 801fa38:	883a      	ldrh	r2, [r7, #0]
 801fa3a:	78f9      	ldrb	r1, [r7, #3]
 801fa3c:	f7ea fae7 	bl	800a00e <HAL_PCD_EP_Open>
 801fa40:	4603      	mov	r3, r0
 801fa42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fa44:	7bfb      	ldrb	r3, [r7, #15]
 801fa46:	4618      	mov	r0, r3
 801fa48:	f000 f91c 	bl	801fc84 <USBD_Get_USB_Status>
 801fa4c:	4603      	mov	r3, r0
 801fa4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fa50:	7bbb      	ldrb	r3, [r7, #14]
}
 801fa52:	4618      	mov	r0, r3
 801fa54:	3710      	adds	r7, #16
 801fa56:	46bd      	mov	sp, r7
 801fa58:	bd80      	pop	{r7, pc}

0801fa5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fa5a:	b580      	push	{r7, lr}
 801fa5c:	b084      	sub	sp, #16
 801fa5e:	af00      	add	r7, sp, #0
 801fa60:	6078      	str	r0, [r7, #4]
 801fa62:	460b      	mov	r3, r1
 801fa64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fa66:	2300      	movs	r3, #0
 801fa68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fa6a:	2300      	movs	r3, #0
 801fa6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801fa6e:	687b      	ldr	r3, [r7, #4]
 801fa70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fa74:	78fa      	ldrb	r2, [r7, #3]
 801fa76:	4611      	mov	r1, r2
 801fa78:	4618      	mov	r0, r3
 801fa7a:	f7ea fb30 	bl	800a0de <HAL_PCD_EP_Close>
 801fa7e:	4603      	mov	r3, r0
 801fa80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fa82:	7bfb      	ldrb	r3, [r7, #15]
 801fa84:	4618      	mov	r0, r3
 801fa86:	f000 f8fd 	bl	801fc84 <USBD_Get_USB_Status>
 801fa8a:	4603      	mov	r3, r0
 801fa8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fa8e:	7bbb      	ldrb	r3, [r7, #14]
}
 801fa90:	4618      	mov	r0, r3
 801fa92:	3710      	adds	r7, #16
 801fa94:	46bd      	mov	sp, r7
 801fa96:	bd80      	pop	{r7, pc}

0801fa98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fa98:	b580      	push	{r7, lr}
 801fa9a:	b084      	sub	sp, #16
 801fa9c:	af00      	add	r7, sp, #0
 801fa9e:	6078      	str	r0, [r7, #4]
 801faa0:	460b      	mov	r3, r1
 801faa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801faa4:	2300      	movs	r3, #0
 801faa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801faa8:	2300      	movs	r3, #0
 801faaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801faac:	687b      	ldr	r3, [r7, #4]
 801faae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fab2:	78fa      	ldrb	r2, [r7, #3]
 801fab4:	4611      	mov	r1, r2
 801fab6:	4618      	mov	r0, r3
 801fab8:	f7ea fc08 	bl	800a2cc <HAL_PCD_EP_SetStall>
 801fabc:	4603      	mov	r3, r0
 801fabe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fac0:	7bfb      	ldrb	r3, [r7, #15]
 801fac2:	4618      	mov	r0, r3
 801fac4:	f000 f8de 	bl	801fc84 <USBD_Get_USB_Status>
 801fac8:	4603      	mov	r3, r0
 801faca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801facc:	7bbb      	ldrb	r3, [r7, #14]
}
 801face:	4618      	mov	r0, r3
 801fad0:	3710      	adds	r7, #16
 801fad2:	46bd      	mov	sp, r7
 801fad4:	bd80      	pop	{r7, pc}

0801fad6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fad6:	b580      	push	{r7, lr}
 801fad8:	b084      	sub	sp, #16
 801fada:	af00      	add	r7, sp, #0
 801fadc:	6078      	str	r0, [r7, #4]
 801fade:	460b      	mov	r3, r1
 801fae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fae2:	2300      	movs	r3, #0
 801fae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fae6:	2300      	movs	r3, #0
 801fae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801faea:	687b      	ldr	r3, [r7, #4]
 801faec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801faf0:	78fa      	ldrb	r2, [r7, #3]
 801faf2:	4611      	mov	r1, r2
 801faf4:	4618      	mov	r0, r3
 801faf6:	f7ea fc4d 	bl	800a394 <HAL_PCD_EP_ClrStall>
 801fafa:	4603      	mov	r3, r0
 801fafc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fafe:	7bfb      	ldrb	r3, [r7, #15]
 801fb00:	4618      	mov	r0, r3
 801fb02:	f000 f8bf 	bl	801fc84 <USBD_Get_USB_Status>
 801fb06:	4603      	mov	r3, r0
 801fb08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fb0a:	7bbb      	ldrb	r3, [r7, #14]
}
 801fb0c:	4618      	mov	r0, r3
 801fb0e:	3710      	adds	r7, #16
 801fb10:	46bd      	mov	sp, r7
 801fb12:	bd80      	pop	{r7, pc}

0801fb14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fb14:	b480      	push	{r7}
 801fb16:	b085      	sub	sp, #20
 801fb18:	af00      	add	r7, sp, #0
 801fb1a:	6078      	str	r0, [r7, #4]
 801fb1c:	460b      	mov	r3, r1
 801fb1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801fb20:	687b      	ldr	r3, [r7, #4]
 801fb22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fb26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801fb28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	da0b      	bge.n	801fb48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801fb30:	78fb      	ldrb	r3, [r7, #3]
 801fb32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801fb36:	68f9      	ldr	r1, [r7, #12]
 801fb38:	4613      	mov	r3, r2
 801fb3a:	00db      	lsls	r3, r3, #3
 801fb3c:	4413      	add	r3, r2
 801fb3e:	009b      	lsls	r3, r3, #2
 801fb40:	440b      	add	r3, r1
 801fb42:	333e      	adds	r3, #62	; 0x3e
 801fb44:	781b      	ldrb	r3, [r3, #0]
 801fb46:	e00b      	b.n	801fb60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801fb48:	78fb      	ldrb	r3, [r7, #3]
 801fb4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801fb4e:	68f9      	ldr	r1, [r7, #12]
 801fb50:	4613      	mov	r3, r2
 801fb52:	00db      	lsls	r3, r3, #3
 801fb54:	4413      	add	r3, r2
 801fb56:	009b      	lsls	r3, r3, #2
 801fb58:	440b      	add	r3, r1
 801fb5a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801fb5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801fb60:	4618      	mov	r0, r3
 801fb62:	3714      	adds	r7, #20
 801fb64:	46bd      	mov	sp, r7
 801fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb6a:	4770      	bx	lr

0801fb6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801fb6c:	b580      	push	{r7, lr}
 801fb6e:	b084      	sub	sp, #16
 801fb70:	af00      	add	r7, sp, #0
 801fb72:	6078      	str	r0, [r7, #4]
 801fb74:	460b      	mov	r3, r1
 801fb76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fb78:	2300      	movs	r3, #0
 801fb7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fb7c:	2300      	movs	r3, #0
 801fb7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fb86:	78fa      	ldrb	r2, [r7, #3]
 801fb88:	4611      	mov	r1, r2
 801fb8a:	4618      	mov	r0, r3
 801fb8c:	f7ea fa1a 	bl	8009fc4 <HAL_PCD_SetAddress>
 801fb90:	4603      	mov	r3, r0
 801fb92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fb94:	7bfb      	ldrb	r3, [r7, #15]
 801fb96:	4618      	mov	r0, r3
 801fb98:	f000 f874 	bl	801fc84 <USBD_Get_USB_Status>
 801fb9c:	4603      	mov	r3, r0
 801fb9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fba0:	7bbb      	ldrb	r3, [r7, #14]
}
 801fba2:	4618      	mov	r0, r3
 801fba4:	3710      	adds	r7, #16
 801fba6:	46bd      	mov	sp, r7
 801fba8:	bd80      	pop	{r7, pc}

0801fbaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801fbaa:	b580      	push	{r7, lr}
 801fbac:	b086      	sub	sp, #24
 801fbae:	af00      	add	r7, sp, #0
 801fbb0:	60f8      	str	r0, [r7, #12]
 801fbb2:	607a      	str	r2, [r7, #4]
 801fbb4:	603b      	str	r3, [r7, #0]
 801fbb6:	460b      	mov	r3, r1
 801fbb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fbba:	2300      	movs	r3, #0
 801fbbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fbbe:	2300      	movs	r3, #0
 801fbc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801fbc2:	68fb      	ldr	r3, [r7, #12]
 801fbc4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801fbc8:	7af9      	ldrb	r1, [r7, #11]
 801fbca:	683b      	ldr	r3, [r7, #0]
 801fbcc:	687a      	ldr	r2, [r7, #4]
 801fbce:	f7ea fb33 	bl	800a238 <HAL_PCD_EP_Transmit>
 801fbd2:	4603      	mov	r3, r0
 801fbd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fbd6:	7dfb      	ldrb	r3, [r7, #23]
 801fbd8:	4618      	mov	r0, r3
 801fbda:	f000 f853 	bl	801fc84 <USBD_Get_USB_Status>
 801fbde:	4603      	mov	r3, r0
 801fbe0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801fbe2:	7dbb      	ldrb	r3, [r7, #22]
}
 801fbe4:	4618      	mov	r0, r3
 801fbe6:	3718      	adds	r7, #24
 801fbe8:	46bd      	mov	sp, r7
 801fbea:	bd80      	pop	{r7, pc}

0801fbec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801fbec:	b580      	push	{r7, lr}
 801fbee:	b086      	sub	sp, #24
 801fbf0:	af00      	add	r7, sp, #0
 801fbf2:	60f8      	str	r0, [r7, #12]
 801fbf4:	607a      	str	r2, [r7, #4]
 801fbf6:	603b      	str	r3, [r7, #0]
 801fbf8:	460b      	mov	r3, r1
 801fbfa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fbfc:	2300      	movs	r3, #0
 801fbfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fc00:	2300      	movs	r3, #0
 801fc02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801fc04:	68fb      	ldr	r3, [r7, #12]
 801fc06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801fc0a:	7af9      	ldrb	r1, [r7, #11]
 801fc0c:	683b      	ldr	r3, [r7, #0]
 801fc0e:	687a      	ldr	r2, [r7, #4]
 801fc10:	f7ea faaf 	bl	800a172 <HAL_PCD_EP_Receive>
 801fc14:	4603      	mov	r3, r0
 801fc16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fc18:	7dfb      	ldrb	r3, [r7, #23]
 801fc1a:	4618      	mov	r0, r3
 801fc1c:	f000 f832 	bl	801fc84 <USBD_Get_USB_Status>
 801fc20:	4603      	mov	r3, r0
 801fc22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801fc24:	7dbb      	ldrb	r3, [r7, #22]
}
 801fc26:	4618      	mov	r0, r3
 801fc28:	3718      	adds	r7, #24
 801fc2a:	46bd      	mov	sp, r7
 801fc2c:	bd80      	pop	{r7, pc}

0801fc2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fc2e:	b580      	push	{r7, lr}
 801fc30:	b082      	sub	sp, #8
 801fc32:	af00      	add	r7, sp, #0
 801fc34:	6078      	str	r0, [r7, #4]
 801fc36:	460b      	mov	r3, r1
 801fc38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801fc3a:	687b      	ldr	r3, [r7, #4]
 801fc3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fc40:	78fa      	ldrb	r2, [r7, #3]
 801fc42:	4611      	mov	r1, r2
 801fc44:	4618      	mov	r0, r3
 801fc46:	f7ea fadf 	bl	800a208 <HAL_PCD_EP_GetRxCount>
 801fc4a:	4603      	mov	r3, r0
}
 801fc4c:	4618      	mov	r0, r3
 801fc4e:	3708      	adds	r7, #8
 801fc50:	46bd      	mov	sp, r7
 801fc52:	bd80      	pop	{r7, pc}

0801fc54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801fc54:	b480      	push	{r7}
 801fc56:	b083      	sub	sp, #12
 801fc58:	af00      	add	r7, sp, #0
 801fc5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801fc5c:	4b03      	ldr	r3, [pc, #12]	; (801fc6c <USBD_static_malloc+0x18>)
}
 801fc5e:	4618      	mov	r0, r3
 801fc60:	370c      	adds	r7, #12
 801fc62:	46bd      	mov	sp, r7
 801fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc68:	4770      	bx	lr
 801fc6a:	bf00      	nop
 801fc6c:	2000254c 	.word	0x2000254c

0801fc70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801fc70:	b480      	push	{r7}
 801fc72:	b083      	sub	sp, #12
 801fc74:	af00      	add	r7, sp, #0
 801fc76:	6078      	str	r0, [r7, #4]

}
 801fc78:	bf00      	nop
 801fc7a:	370c      	adds	r7, #12
 801fc7c:	46bd      	mov	sp, r7
 801fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc82:	4770      	bx	lr

0801fc84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801fc84:	b480      	push	{r7}
 801fc86:	b085      	sub	sp, #20
 801fc88:	af00      	add	r7, sp, #0
 801fc8a:	4603      	mov	r3, r0
 801fc8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fc8e:	2300      	movs	r3, #0
 801fc90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801fc92:	79fb      	ldrb	r3, [r7, #7]
 801fc94:	2b03      	cmp	r3, #3
 801fc96:	d817      	bhi.n	801fcc8 <USBD_Get_USB_Status+0x44>
 801fc98:	a201      	add	r2, pc, #4	; (adr r2, 801fca0 <USBD_Get_USB_Status+0x1c>)
 801fc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fc9e:	bf00      	nop
 801fca0:	0801fcb1 	.word	0x0801fcb1
 801fca4:	0801fcb7 	.word	0x0801fcb7
 801fca8:	0801fcbd 	.word	0x0801fcbd
 801fcac:	0801fcc3 	.word	0x0801fcc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801fcb0:	2300      	movs	r3, #0
 801fcb2:	73fb      	strb	r3, [r7, #15]
    break;
 801fcb4:	e00b      	b.n	801fcce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801fcb6:	2303      	movs	r3, #3
 801fcb8:	73fb      	strb	r3, [r7, #15]
    break;
 801fcba:	e008      	b.n	801fcce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801fcbc:	2301      	movs	r3, #1
 801fcbe:	73fb      	strb	r3, [r7, #15]
    break;
 801fcc0:	e005      	b.n	801fcce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801fcc2:	2303      	movs	r3, #3
 801fcc4:	73fb      	strb	r3, [r7, #15]
    break;
 801fcc6:	e002      	b.n	801fcce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801fcc8:	2303      	movs	r3, #3
 801fcca:	73fb      	strb	r3, [r7, #15]
    break;
 801fccc:	bf00      	nop
  }
  return usb_status;
 801fcce:	7bfb      	ldrb	r3, [r7, #15]
}
 801fcd0:	4618      	mov	r0, r3
 801fcd2:	3714      	adds	r7, #20
 801fcd4:	46bd      	mov	sp, r7
 801fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcda:	4770      	bx	lr

0801fcdc <_ZdaPv>:
 801fcdc:	f000 b816 	b.w	801fd0c <_ZdlPv>

0801fce0 <_Znwj>:
 801fce0:	2801      	cmp	r0, #1
 801fce2:	bf38      	it	cc
 801fce4:	2001      	movcc	r0, #1
 801fce6:	b510      	push	{r4, lr}
 801fce8:	4604      	mov	r4, r0
 801fcea:	4620      	mov	r0, r4
 801fcec:	f002 fdc4 	bl	8022878 <malloc>
 801fcf0:	b930      	cbnz	r0, 801fd00 <_Znwj+0x20>
 801fcf2:	f000 f80d 	bl	801fd10 <_ZSt15get_new_handlerv>
 801fcf6:	b908      	cbnz	r0, 801fcfc <_Znwj+0x1c>
 801fcf8:	f002 fd4c 	bl	8022794 <abort>
 801fcfc:	4780      	blx	r0
 801fcfe:	e7f4      	b.n	801fcea <_Znwj+0xa>
 801fd00:	bd10      	pop	{r4, pc}

0801fd02 <_Znaj>:
 801fd02:	f7ff bfed 	b.w	801fce0 <_Znwj>

0801fd06 <_ZSt20__throw_length_errorPKc>:
 801fd06:	b508      	push	{r3, lr}
 801fd08:	f002 fd44 	bl	8022794 <abort>

0801fd0c <_ZdlPv>:
 801fd0c:	f002 bdbc 	b.w	8022888 <free>

0801fd10 <_ZSt15get_new_handlerv>:
 801fd10:	4b02      	ldr	r3, [pc, #8]	; (801fd1c <_ZSt15get_new_handlerv+0xc>)
 801fd12:	6818      	ldr	r0, [r3, #0]
 801fd14:	f3bf 8f5b 	dmb	ish
 801fd18:	4770      	bx	lr
 801fd1a:	bf00      	nop
 801fd1c:	2000276c 	.word	0x2000276c

0801fd20 <cos>:
 801fd20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fd22:	ec53 2b10 	vmov	r2, r3, d0
 801fd26:	4826      	ldr	r0, [pc, #152]	; (801fdc0 <cos+0xa0>)
 801fd28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801fd2c:	4281      	cmp	r1, r0
 801fd2e:	dc06      	bgt.n	801fd3e <cos+0x1e>
 801fd30:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801fdb8 <cos+0x98>
 801fd34:	b005      	add	sp, #20
 801fd36:	f85d eb04 	ldr.w	lr, [sp], #4
 801fd3a:	f001 bd41 	b.w	80217c0 <__kernel_cos>
 801fd3e:	4821      	ldr	r0, [pc, #132]	; (801fdc4 <cos+0xa4>)
 801fd40:	4281      	cmp	r1, r0
 801fd42:	dd09      	ble.n	801fd58 <cos+0x38>
 801fd44:	ee10 0a10 	vmov	r0, s0
 801fd48:	4619      	mov	r1, r3
 801fd4a:	f7e0 faa7 	bl	800029c <__aeabi_dsub>
 801fd4e:	ec41 0b10 	vmov	d0, r0, r1
 801fd52:	b005      	add	sp, #20
 801fd54:	f85d fb04 	ldr.w	pc, [sp], #4
 801fd58:	4668      	mov	r0, sp
 801fd5a:	f001 f859 	bl	8020e10 <__ieee754_rem_pio2>
 801fd5e:	f000 0003 	and.w	r0, r0, #3
 801fd62:	2801      	cmp	r0, #1
 801fd64:	d00b      	beq.n	801fd7e <cos+0x5e>
 801fd66:	2802      	cmp	r0, #2
 801fd68:	d016      	beq.n	801fd98 <cos+0x78>
 801fd6a:	b9e0      	cbnz	r0, 801fda6 <cos+0x86>
 801fd6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fd70:	ed9d 0b00 	vldr	d0, [sp]
 801fd74:	f001 fd24 	bl	80217c0 <__kernel_cos>
 801fd78:	ec51 0b10 	vmov	r0, r1, d0
 801fd7c:	e7e7      	b.n	801fd4e <cos+0x2e>
 801fd7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fd82:	ed9d 0b00 	vldr	d0, [sp]
 801fd86:	f002 f933 	bl	8021ff0 <__kernel_sin>
 801fd8a:	ec53 2b10 	vmov	r2, r3, d0
 801fd8e:	ee10 0a10 	vmov	r0, s0
 801fd92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801fd96:	e7da      	b.n	801fd4e <cos+0x2e>
 801fd98:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fd9c:	ed9d 0b00 	vldr	d0, [sp]
 801fda0:	f001 fd0e 	bl	80217c0 <__kernel_cos>
 801fda4:	e7f1      	b.n	801fd8a <cos+0x6a>
 801fda6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fdaa:	ed9d 0b00 	vldr	d0, [sp]
 801fdae:	2001      	movs	r0, #1
 801fdb0:	f002 f91e 	bl	8021ff0 <__kernel_sin>
 801fdb4:	e7e0      	b.n	801fd78 <cos+0x58>
 801fdb6:	bf00      	nop
	...
 801fdc0:	3fe921fb 	.word	0x3fe921fb
 801fdc4:	7fefffff 	.word	0x7fefffff

0801fdc8 <floor>:
 801fdc8:	ec51 0b10 	vmov	r0, r1, d0
 801fdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdd0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801fdd4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801fdd8:	2e13      	cmp	r6, #19
 801fdda:	ee10 5a10 	vmov	r5, s0
 801fdde:	ee10 8a10 	vmov	r8, s0
 801fde2:	460c      	mov	r4, r1
 801fde4:	dc32      	bgt.n	801fe4c <floor+0x84>
 801fde6:	2e00      	cmp	r6, #0
 801fde8:	da14      	bge.n	801fe14 <floor+0x4c>
 801fdea:	a333      	add	r3, pc, #204	; (adr r3, 801feb8 <floor+0xf0>)
 801fdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdf0:	f7e0 fa56 	bl	80002a0 <__adddf3>
 801fdf4:	2200      	movs	r2, #0
 801fdf6:	2300      	movs	r3, #0
 801fdf8:	f7e0 fe98 	bl	8000b2c <__aeabi_dcmpgt>
 801fdfc:	b138      	cbz	r0, 801fe0e <floor+0x46>
 801fdfe:	2c00      	cmp	r4, #0
 801fe00:	da57      	bge.n	801feb2 <floor+0xea>
 801fe02:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801fe06:	431d      	orrs	r5, r3
 801fe08:	d001      	beq.n	801fe0e <floor+0x46>
 801fe0a:	4c2d      	ldr	r4, [pc, #180]	; (801fec0 <floor+0xf8>)
 801fe0c:	2500      	movs	r5, #0
 801fe0e:	4621      	mov	r1, r4
 801fe10:	4628      	mov	r0, r5
 801fe12:	e025      	b.n	801fe60 <floor+0x98>
 801fe14:	4f2b      	ldr	r7, [pc, #172]	; (801fec4 <floor+0xfc>)
 801fe16:	4137      	asrs	r7, r6
 801fe18:	ea01 0307 	and.w	r3, r1, r7
 801fe1c:	4303      	orrs	r3, r0
 801fe1e:	d01f      	beq.n	801fe60 <floor+0x98>
 801fe20:	a325      	add	r3, pc, #148	; (adr r3, 801feb8 <floor+0xf0>)
 801fe22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe26:	f7e0 fa3b 	bl	80002a0 <__adddf3>
 801fe2a:	2200      	movs	r2, #0
 801fe2c:	2300      	movs	r3, #0
 801fe2e:	f7e0 fe7d 	bl	8000b2c <__aeabi_dcmpgt>
 801fe32:	2800      	cmp	r0, #0
 801fe34:	d0eb      	beq.n	801fe0e <floor+0x46>
 801fe36:	2c00      	cmp	r4, #0
 801fe38:	bfbe      	ittt	lt
 801fe3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801fe3e:	fa43 f606 	asrlt.w	r6, r3, r6
 801fe42:	19a4      	addlt	r4, r4, r6
 801fe44:	ea24 0407 	bic.w	r4, r4, r7
 801fe48:	2500      	movs	r5, #0
 801fe4a:	e7e0      	b.n	801fe0e <floor+0x46>
 801fe4c:	2e33      	cmp	r6, #51	; 0x33
 801fe4e:	dd0b      	ble.n	801fe68 <floor+0xa0>
 801fe50:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801fe54:	d104      	bne.n	801fe60 <floor+0x98>
 801fe56:	ee10 2a10 	vmov	r2, s0
 801fe5a:	460b      	mov	r3, r1
 801fe5c:	f7e0 fa20 	bl	80002a0 <__adddf3>
 801fe60:	ec41 0b10 	vmov	d0, r0, r1
 801fe64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe68:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801fe6c:	f04f 33ff 	mov.w	r3, #4294967295
 801fe70:	fa23 f707 	lsr.w	r7, r3, r7
 801fe74:	4207      	tst	r7, r0
 801fe76:	d0f3      	beq.n	801fe60 <floor+0x98>
 801fe78:	a30f      	add	r3, pc, #60	; (adr r3, 801feb8 <floor+0xf0>)
 801fe7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe7e:	f7e0 fa0f 	bl	80002a0 <__adddf3>
 801fe82:	2200      	movs	r2, #0
 801fe84:	2300      	movs	r3, #0
 801fe86:	f7e0 fe51 	bl	8000b2c <__aeabi_dcmpgt>
 801fe8a:	2800      	cmp	r0, #0
 801fe8c:	d0bf      	beq.n	801fe0e <floor+0x46>
 801fe8e:	2c00      	cmp	r4, #0
 801fe90:	da02      	bge.n	801fe98 <floor+0xd0>
 801fe92:	2e14      	cmp	r6, #20
 801fe94:	d103      	bne.n	801fe9e <floor+0xd6>
 801fe96:	3401      	adds	r4, #1
 801fe98:	ea25 0507 	bic.w	r5, r5, r7
 801fe9c:	e7b7      	b.n	801fe0e <floor+0x46>
 801fe9e:	2301      	movs	r3, #1
 801fea0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801fea4:	fa03 f606 	lsl.w	r6, r3, r6
 801fea8:	4435      	add	r5, r6
 801feaa:	4545      	cmp	r5, r8
 801feac:	bf38      	it	cc
 801feae:	18e4      	addcc	r4, r4, r3
 801feb0:	e7f2      	b.n	801fe98 <floor+0xd0>
 801feb2:	2500      	movs	r5, #0
 801feb4:	462c      	mov	r4, r5
 801feb6:	e7aa      	b.n	801fe0e <floor+0x46>
 801feb8:	8800759c 	.word	0x8800759c
 801febc:	7e37e43c 	.word	0x7e37e43c
 801fec0:	bff00000 	.word	0xbff00000
 801fec4:	000fffff 	.word	0x000fffff

0801fec8 <frexp>:
 801fec8:	b570      	push	{r4, r5, r6, lr}
 801feca:	2100      	movs	r1, #0
 801fecc:	ec55 4b10 	vmov	r4, r5, d0
 801fed0:	6001      	str	r1, [r0, #0]
 801fed2:	4916      	ldr	r1, [pc, #88]	; (801ff2c <frexp+0x64>)
 801fed4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801fed8:	428a      	cmp	r2, r1
 801feda:	4606      	mov	r6, r0
 801fedc:	462b      	mov	r3, r5
 801fede:	dc22      	bgt.n	801ff26 <frexp+0x5e>
 801fee0:	ee10 1a10 	vmov	r1, s0
 801fee4:	4311      	orrs	r1, r2
 801fee6:	d01e      	beq.n	801ff26 <frexp+0x5e>
 801fee8:	4911      	ldr	r1, [pc, #68]	; (801ff30 <frexp+0x68>)
 801feea:	4029      	ands	r1, r5
 801feec:	b969      	cbnz	r1, 801ff0a <frexp+0x42>
 801feee:	4b11      	ldr	r3, [pc, #68]	; (801ff34 <frexp+0x6c>)
 801fef0:	2200      	movs	r2, #0
 801fef2:	ee10 0a10 	vmov	r0, s0
 801fef6:	4629      	mov	r1, r5
 801fef8:	f7e0 fb88 	bl	800060c <__aeabi_dmul>
 801fefc:	460b      	mov	r3, r1
 801fefe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801ff02:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801ff06:	4604      	mov	r4, r0
 801ff08:	6031      	str	r1, [r6, #0]
 801ff0a:	6831      	ldr	r1, [r6, #0]
 801ff0c:	1512      	asrs	r2, r2, #20
 801ff0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ff12:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 801ff16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ff1a:	440a      	add	r2, r1
 801ff1c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801ff20:	6032      	str	r2, [r6, #0]
 801ff22:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801ff26:	ec45 4b10 	vmov	d0, r4, r5
 801ff2a:	bd70      	pop	{r4, r5, r6, pc}
 801ff2c:	7fefffff 	.word	0x7fefffff
 801ff30:	7ff00000 	.word	0x7ff00000
 801ff34:	43500000 	.word	0x43500000

0801ff38 <round>:
 801ff38:	ec51 0b10 	vmov	r0, r1, d0
 801ff3c:	b570      	push	{r4, r5, r6, lr}
 801ff3e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801ff42:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801ff46:	2c13      	cmp	r4, #19
 801ff48:	ee10 2a10 	vmov	r2, s0
 801ff4c:	460b      	mov	r3, r1
 801ff4e:	dc19      	bgt.n	801ff84 <round+0x4c>
 801ff50:	2c00      	cmp	r4, #0
 801ff52:	da09      	bge.n	801ff68 <round+0x30>
 801ff54:	3401      	adds	r4, #1
 801ff56:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801ff5a:	d103      	bne.n	801ff64 <round+0x2c>
 801ff5c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801ff60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ff64:	2200      	movs	r2, #0
 801ff66:	e028      	b.n	801ffba <round+0x82>
 801ff68:	4d15      	ldr	r5, [pc, #84]	; (801ffc0 <round+0x88>)
 801ff6a:	4125      	asrs	r5, r4
 801ff6c:	ea01 0605 	and.w	r6, r1, r5
 801ff70:	4332      	orrs	r2, r6
 801ff72:	d00e      	beq.n	801ff92 <round+0x5a>
 801ff74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801ff78:	fa42 f404 	asr.w	r4, r2, r4
 801ff7c:	4423      	add	r3, r4
 801ff7e:	ea23 0305 	bic.w	r3, r3, r5
 801ff82:	e7ef      	b.n	801ff64 <round+0x2c>
 801ff84:	2c33      	cmp	r4, #51	; 0x33
 801ff86:	dd07      	ble.n	801ff98 <round+0x60>
 801ff88:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801ff8c:	d101      	bne.n	801ff92 <round+0x5a>
 801ff8e:	f7e0 f987 	bl	80002a0 <__adddf3>
 801ff92:	ec41 0b10 	vmov	d0, r0, r1
 801ff96:	bd70      	pop	{r4, r5, r6, pc}
 801ff98:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801ff9c:	f04f 35ff 	mov.w	r5, #4294967295
 801ffa0:	40f5      	lsrs	r5, r6
 801ffa2:	4228      	tst	r0, r5
 801ffa4:	d0f5      	beq.n	801ff92 <round+0x5a>
 801ffa6:	2101      	movs	r1, #1
 801ffa8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801ffac:	fa01 f404 	lsl.w	r4, r1, r4
 801ffb0:	1912      	adds	r2, r2, r4
 801ffb2:	bf28      	it	cs
 801ffb4:	185b      	addcs	r3, r3, r1
 801ffb6:	ea22 0205 	bic.w	r2, r2, r5
 801ffba:	4619      	mov	r1, r3
 801ffbc:	4610      	mov	r0, r2
 801ffbe:	e7e8      	b.n	801ff92 <round+0x5a>
 801ffc0:	000fffff 	.word	0x000fffff
 801ffc4:	00000000 	.word	0x00000000

0801ffc8 <sin>:
 801ffc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ffca:	ec53 2b10 	vmov	r2, r3, d0
 801ffce:	4828      	ldr	r0, [pc, #160]	; (8020070 <sin+0xa8>)
 801ffd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ffd4:	4281      	cmp	r1, r0
 801ffd6:	dc07      	bgt.n	801ffe8 <sin+0x20>
 801ffd8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8020068 <sin+0xa0>
 801ffdc:	2000      	movs	r0, #0
 801ffde:	b005      	add	sp, #20
 801ffe0:	f85d eb04 	ldr.w	lr, [sp], #4
 801ffe4:	f002 b804 	b.w	8021ff0 <__kernel_sin>
 801ffe8:	4822      	ldr	r0, [pc, #136]	; (8020074 <sin+0xac>)
 801ffea:	4281      	cmp	r1, r0
 801ffec:	dd09      	ble.n	8020002 <sin+0x3a>
 801ffee:	ee10 0a10 	vmov	r0, s0
 801fff2:	4619      	mov	r1, r3
 801fff4:	f7e0 f952 	bl	800029c <__aeabi_dsub>
 801fff8:	ec41 0b10 	vmov	d0, r0, r1
 801fffc:	b005      	add	sp, #20
 801fffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8020002:	4668      	mov	r0, sp
 8020004:	f000 ff04 	bl	8020e10 <__ieee754_rem_pio2>
 8020008:	f000 0003 	and.w	r0, r0, #3
 802000c:	2801      	cmp	r0, #1
 802000e:	d00c      	beq.n	802002a <sin+0x62>
 8020010:	2802      	cmp	r0, #2
 8020012:	d011      	beq.n	8020038 <sin+0x70>
 8020014:	b9f0      	cbnz	r0, 8020054 <sin+0x8c>
 8020016:	ed9d 1b02 	vldr	d1, [sp, #8]
 802001a:	ed9d 0b00 	vldr	d0, [sp]
 802001e:	2001      	movs	r0, #1
 8020020:	f001 ffe6 	bl	8021ff0 <__kernel_sin>
 8020024:	ec51 0b10 	vmov	r0, r1, d0
 8020028:	e7e6      	b.n	801fff8 <sin+0x30>
 802002a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802002e:	ed9d 0b00 	vldr	d0, [sp]
 8020032:	f001 fbc5 	bl	80217c0 <__kernel_cos>
 8020036:	e7f5      	b.n	8020024 <sin+0x5c>
 8020038:	ed9d 1b02 	vldr	d1, [sp, #8]
 802003c:	ed9d 0b00 	vldr	d0, [sp]
 8020040:	2001      	movs	r0, #1
 8020042:	f001 ffd5 	bl	8021ff0 <__kernel_sin>
 8020046:	ec53 2b10 	vmov	r2, r3, d0
 802004a:	ee10 0a10 	vmov	r0, s0
 802004e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020052:	e7d1      	b.n	801fff8 <sin+0x30>
 8020054:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020058:	ed9d 0b00 	vldr	d0, [sp]
 802005c:	f001 fbb0 	bl	80217c0 <__kernel_cos>
 8020060:	e7f1      	b.n	8020046 <sin+0x7e>
 8020062:	bf00      	nop
 8020064:	f3af 8000 	nop.w
	...
 8020070:	3fe921fb 	.word	0x3fe921fb
 8020074:	7fefffff 	.word	0x7fefffff

08020078 <tan>:
 8020078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802007a:	ec53 2b10 	vmov	r2, r3, d0
 802007e:	4816      	ldr	r0, [pc, #88]	; (80200d8 <tan+0x60>)
 8020080:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020084:	4281      	cmp	r1, r0
 8020086:	dc07      	bgt.n	8020098 <tan+0x20>
 8020088:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80200d0 <tan+0x58>
 802008c:	2001      	movs	r0, #1
 802008e:	b005      	add	sp, #20
 8020090:	f85d eb04 	ldr.w	lr, [sp], #4
 8020094:	f002 b86c 	b.w	8022170 <__kernel_tan>
 8020098:	4810      	ldr	r0, [pc, #64]	; (80200dc <tan+0x64>)
 802009a:	4281      	cmp	r1, r0
 802009c:	dd09      	ble.n	80200b2 <tan+0x3a>
 802009e:	ee10 0a10 	vmov	r0, s0
 80200a2:	4619      	mov	r1, r3
 80200a4:	f7e0 f8fa 	bl	800029c <__aeabi_dsub>
 80200a8:	ec41 0b10 	vmov	d0, r0, r1
 80200ac:	b005      	add	sp, #20
 80200ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80200b2:	4668      	mov	r0, sp
 80200b4:	f000 feac 	bl	8020e10 <__ieee754_rem_pio2>
 80200b8:	0040      	lsls	r0, r0, #1
 80200ba:	f000 0002 	and.w	r0, r0, #2
 80200be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80200c2:	ed9d 0b00 	vldr	d0, [sp]
 80200c6:	f1c0 0001 	rsb	r0, r0, #1
 80200ca:	f002 f851 	bl	8022170 <__kernel_tan>
 80200ce:	e7ed      	b.n	80200ac <tan+0x34>
	...
 80200d8:	3fe921fb 	.word	0x3fe921fb
 80200dc:	7fefffff 	.word	0x7fefffff

080200e0 <frexpf>:
 80200e0:	ee10 3a10 	vmov	r3, s0
 80200e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80200e8:	2100      	movs	r1, #0
 80200ea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80200ee:	6001      	str	r1, [r0, #0]
 80200f0:	da19      	bge.n	8020126 <frexpf+0x46>
 80200f2:	b1c2      	cbz	r2, 8020126 <frexpf+0x46>
 80200f4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80200f8:	d10a      	bne.n	8020110 <frexpf+0x30>
 80200fa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8020128 <frexpf+0x48>
 80200fe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020102:	f06f 0118 	mvn.w	r1, #24
 8020106:	ee17 3a90 	vmov	r3, s15
 802010a:	6001      	str	r1, [r0, #0]
 802010c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020110:	6801      	ldr	r1, [r0, #0]
 8020112:	15d2      	asrs	r2, r2, #23
 8020114:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020118:	3a7e      	subs	r2, #126	; 0x7e
 802011a:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 802011e:	440a      	add	r2, r1
 8020120:	ee00 3a10 	vmov	s0, r3
 8020124:	6002      	str	r2, [r0, #0]
 8020126:	4770      	bx	lr
 8020128:	4c000000 	.word	0x4c000000

0802012c <roundf>:
 802012c:	ee10 0a10 	vmov	r0, s0
 8020130:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8020134:	3a7f      	subs	r2, #127	; 0x7f
 8020136:	2a16      	cmp	r2, #22
 8020138:	dc15      	bgt.n	8020166 <roundf+0x3a>
 802013a:	2a00      	cmp	r2, #0
 802013c:	da08      	bge.n	8020150 <roundf+0x24>
 802013e:	3201      	adds	r2, #1
 8020140:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8020144:	d101      	bne.n	802014a <roundf+0x1e>
 8020146:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 802014a:	ee00 3a10 	vmov	s0, r3
 802014e:	4770      	bx	lr
 8020150:	4907      	ldr	r1, [pc, #28]	; (8020170 <roundf+0x44>)
 8020152:	4111      	asrs	r1, r2
 8020154:	4208      	tst	r0, r1
 8020156:	d0fa      	beq.n	802014e <roundf+0x22>
 8020158:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802015c:	4113      	asrs	r3, r2
 802015e:	4403      	add	r3, r0
 8020160:	ea23 0301 	bic.w	r3, r3, r1
 8020164:	e7f1      	b.n	802014a <roundf+0x1e>
 8020166:	2a80      	cmp	r2, #128	; 0x80
 8020168:	d1f1      	bne.n	802014e <roundf+0x22>
 802016a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802016e:	4770      	bx	lr
 8020170:	007fffff 	.word	0x007fffff

08020174 <pow>:
 8020174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020176:	ed2d 8b02 	vpush	{d8}
 802017a:	eeb0 8a40 	vmov.f32	s16, s0
 802017e:	eef0 8a60 	vmov.f32	s17, s1
 8020182:	ec55 4b11 	vmov	r4, r5, d1
 8020186:	f000 f913 	bl	80203b0 <__ieee754_pow>
 802018a:	4622      	mov	r2, r4
 802018c:	462b      	mov	r3, r5
 802018e:	4620      	mov	r0, r4
 8020190:	4629      	mov	r1, r5
 8020192:	ec57 6b10 	vmov	r6, r7, d0
 8020196:	f7e0 fcd3 	bl	8000b40 <__aeabi_dcmpun>
 802019a:	2800      	cmp	r0, #0
 802019c:	d13b      	bne.n	8020216 <pow+0xa2>
 802019e:	ec51 0b18 	vmov	r0, r1, d8
 80201a2:	2200      	movs	r2, #0
 80201a4:	2300      	movs	r3, #0
 80201a6:	f7e0 fc99 	bl	8000adc <__aeabi_dcmpeq>
 80201aa:	b1b8      	cbz	r0, 80201dc <pow+0x68>
 80201ac:	2200      	movs	r2, #0
 80201ae:	2300      	movs	r3, #0
 80201b0:	4620      	mov	r0, r4
 80201b2:	4629      	mov	r1, r5
 80201b4:	f7e0 fc92 	bl	8000adc <__aeabi_dcmpeq>
 80201b8:	2800      	cmp	r0, #0
 80201ba:	d146      	bne.n	802024a <pow+0xd6>
 80201bc:	ec45 4b10 	vmov	d0, r4, r5
 80201c0:	f002 fa3b 	bl	802263a <finite>
 80201c4:	b338      	cbz	r0, 8020216 <pow+0xa2>
 80201c6:	2200      	movs	r2, #0
 80201c8:	2300      	movs	r3, #0
 80201ca:	4620      	mov	r0, r4
 80201cc:	4629      	mov	r1, r5
 80201ce:	f7e0 fc8f 	bl	8000af0 <__aeabi_dcmplt>
 80201d2:	b300      	cbz	r0, 8020216 <pow+0xa2>
 80201d4:	f002 fb10 	bl	80227f8 <__errno>
 80201d8:	2322      	movs	r3, #34	; 0x22
 80201da:	e01b      	b.n	8020214 <pow+0xa0>
 80201dc:	ec47 6b10 	vmov	d0, r6, r7
 80201e0:	f002 fa2b 	bl	802263a <finite>
 80201e4:	b9e0      	cbnz	r0, 8020220 <pow+0xac>
 80201e6:	eeb0 0a48 	vmov.f32	s0, s16
 80201ea:	eef0 0a68 	vmov.f32	s1, s17
 80201ee:	f002 fa24 	bl	802263a <finite>
 80201f2:	b1a8      	cbz	r0, 8020220 <pow+0xac>
 80201f4:	ec45 4b10 	vmov	d0, r4, r5
 80201f8:	f002 fa1f 	bl	802263a <finite>
 80201fc:	b180      	cbz	r0, 8020220 <pow+0xac>
 80201fe:	4632      	mov	r2, r6
 8020200:	463b      	mov	r3, r7
 8020202:	4630      	mov	r0, r6
 8020204:	4639      	mov	r1, r7
 8020206:	f7e0 fc9b 	bl	8000b40 <__aeabi_dcmpun>
 802020a:	2800      	cmp	r0, #0
 802020c:	d0e2      	beq.n	80201d4 <pow+0x60>
 802020e:	f002 faf3 	bl	80227f8 <__errno>
 8020212:	2321      	movs	r3, #33	; 0x21
 8020214:	6003      	str	r3, [r0, #0]
 8020216:	ecbd 8b02 	vpop	{d8}
 802021a:	ec47 6b10 	vmov	d0, r6, r7
 802021e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020220:	2200      	movs	r2, #0
 8020222:	2300      	movs	r3, #0
 8020224:	4630      	mov	r0, r6
 8020226:	4639      	mov	r1, r7
 8020228:	f7e0 fc58 	bl	8000adc <__aeabi_dcmpeq>
 802022c:	2800      	cmp	r0, #0
 802022e:	d0f2      	beq.n	8020216 <pow+0xa2>
 8020230:	eeb0 0a48 	vmov.f32	s0, s16
 8020234:	eef0 0a68 	vmov.f32	s1, s17
 8020238:	f002 f9ff 	bl	802263a <finite>
 802023c:	2800      	cmp	r0, #0
 802023e:	d0ea      	beq.n	8020216 <pow+0xa2>
 8020240:	ec45 4b10 	vmov	d0, r4, r5
 8020244:	f002 f9f9 	bl	802263a <finite>
 8020248:	e7c3      	b.n	80201d2 <pow+0x5e>
 802024a:	4f01      	ldr	r7, [pc, #4]	; (8020250 <pow+0xdc>)
 802024c:	2600      	movs	r6, #0
 802024e:	e7e2      	b.n	8020216 <pow+0xa2>
 8020250:	3ff00000 	.word	0x3ff00000

08020254 <sqrt>:
 8020254:	b538      	push	{r3, r4, r5, lr}
 8020256:	ed2d 8b02 	vpush	{d8}
 802025a:	ec55 4b10 	vmov	r4, r5, d0
 802025e:	f000 ffe3 	bl	8021228 <__ieee754_sqrt>
 8020262:	4622      	mov	r2, r4
 8020264:	462b      	mov	r3, r5
 8020266:	4620      	mov	r0, r4
 8020268:	4629      	mov	r1, r5
 802026a:	eeb0 8a40 	vmov.f32	s16, s0
 802026e:	eef0 8a60 	vmov.f32	s17, s1
 8020272:	f7e0 fc65 	bl	8000b40 <__aeabi_dcmpun>
 8020276:	b990      	cbnz	r0, 802029e <sqrt+0x4a>
 8020278:	2200      	movs	r2, #0
 802027a:	2300      	movs	r3, #0
 802027c:	4620      	mov	r0, r4
 802027e:	4629      	mov	r1, r5
 8020280:	f7e0 fc36 	bl	8000af0 <__aeabi_dcmplt>
 8020284:	b158      	cbz	r0, 802029e <sqrt+0x4a>
 8020286:	f002 fab7 	bl	80227f8 <__errno>
 802028a:	2321      	movs	r3, #33	; 0x21
 802028c:	6003      	str	r3, [r0, #0]
 802028e:	2200      	movs	r2, #0
 8020290:	2300      	movs	r3, #0
 8020292:	4610      	mov	r0, r2
 8020294:	4619      	mov	r1, r3
 8020296:	f7e0 fae3 	bl	8000860 <__aeabi_ddiv>
 802029a:	ec41 0b18 	vmov	d8, r0, r1
 802029e:	eeb0 0a48 	vmov.f32	s0, s16
 80202a2:	eef0 0a68 	vmov.f32	s1, s17
 80202a6:	ecbd 8b02 	vpop	{d8}
 80202aa:	bd38      	pop	{r3, r4, r5, pc}

080202ac <expf>:
 80202ac:	b508      	push	{r3, lr}
 80202ae:	ed2d 8b02 	vpush	{d8}
 80202b2:	eef0 8a40 	vmov.f32	s17, s0
 80202b6:	f001 f869 	bl	802138c <__ieee754_expf>
 80202ba:	eeb0 8a40 	vmov.f32	s16, s0
 80202be:	eeb0 0a68 	vmov.f32	s0, s17
 80202c2:	f002 fa53 	bl	802276c <finitef>
 80202c6:	b160      	cbz	r0, 80202e2 <expf+0x36>
 80202c8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8020308 <expf+0x5c>
 80202cc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80202d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202d4:	dd0a      	ble.n	80202ec <expf+0x40>
 80202d6:	f002 fa8f 	bl	80227f8 <__errno>
 80202da:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 802030c <expf+0x60>
 80202de:	2322      	movs	r3, #34	; 0x22
 80202e0:	6003      	str	r3, [r0, #0]
 80202e2:	eeb0 0a48 	vmov.f32	s0, s16
 80202e6:	ecbd 8b02 	vpop	{d8}
 80202ea:	bd08      	pop	{r3, pc}
 80202ec:	eddf 7a08 	vldr	s15, [pc, #32]	; 8020310 <expf+0x64>
 80202f0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80202f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202f8:	d5f3      	bpl.n	80202e2 <expf+0x36>
 80202fa:	f002 fa7d 	bl	80227f8 <__errno>
 80202fe:	2322      	movs	r3, #34	; 0x22
 8020300:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8020314 <expf+0x68>
 8020304:	6003      	str	r3, [r0, #0]
 8020306:	e7ec      	b.n	80202e2 <expf+0x36>
 8020308:	42b17180 	.word	0x42b17180
 802030c:	7f800000 	.word	0x7f800000
 8020310:	c2cff1b5 	.word	0xc2cff1b5
 8020314:	00000000 	.word	0x00000000

08020318 <log10f>:
 8020318:	b508      	push	{r3, lr}
 802031a:	ed2d 8b02 	vpush	{d8}
 802031e:	eeb0 8a40 	vmov.f32	s16, s0
 8020322:	f001 f9f1 	bl	8021708 <__ieee754_log10f>
 8020326:	eeb4 8a48 	vcmp.f32	s16, s16
 802032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802032e:	d60f      	bvs.n	8020350 <log10f+0x38>
 8020330:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8020334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020338:	d80a      	bhi.n	8020350 <log10f+0x38>
 802033a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802033e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020342:	d108      	bne.n	8020356 <log10f+0x3e>
 8020344:	f002 fa58 	bl	80227f8 <__errno>
 8020348:	2322      	movs	r3, #34	; 0x22
 802034a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 802036c <log10f+0x54>
 802034e:	6003      	str	r3, [r0, #0]
 8020350:	ecbd 8b02 	vpop	{d8}
 8020354:	bd08      	pop	{r3, pc}
 8020356:	f002 fa4f 	bl	80227f8 <__errno>
 802035a:	ecbd 8b02 	vpop	{d8}
 802035e:	2321      	movs	r3, #33	; 0x21
 8020360:	6003      	str	r3, [r0, #0]
 8020362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8020366:	4802      	ldr	r0, [pc, #8]	; (8020370 <log10f+0x58>)
 8020368:	f002 ba0e 	b.w	8022788 <nanf>
 802036c:	ff800000 	.word	0xff800000
 8020370:	0804be8b 	.word	0x0804be8b

08020374 <sqrtf>:
 8020374:	b508      	push	{r3, lr}
 8020376:	ed2d 8b02 	vpush	{d8}
 802037a:	eeb0 8a40 	vmov.f32	s16, s0
 802037e:	f001 fa1b 	bl	80217b8 <__ieee754_sqrtf>
 8020382:	eeb4 8a48 	vcmp.f32	s16, s16
 8020386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802038a:	d60c      	bvs.n	80203a6 <sqrtf+0x32>
 802038c:	eddf 8a07 	vldr	s17, [pc, #28]	; 80203ac <sqrtf+0x38>
 8020390:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8020394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020398:	d505      	bpl.n	80203a6 <sqrtf+0x32>
 802039a:	f002 fa2d 	bl	80227f8 <__errno>
 802039e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80203a2:	2321      	movs	r3, #33	; 0x21
 80203a4:	6003      	str	r3, [r0, #0]
 80203a6:	ecbd 8b02 	vpop	{d8}
 80203aa:	bd08      	pop	{r3, pc}
 80203ac:	00000000 	.word	0x00000000

080203b0 <__ieee754_pow>:
 80203b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203b4:	ed2d 8b06 	vpush	{d8-d10}
 80203b8:	b089      	sub	sp, #36	; 0x24
 80203ba:	ed8d 1b00 	vstr	d1, [sp]
 80203be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80203c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80203c6:	ea58 0102 	orrs.w	r1, r8, r2
 80203ca:	ec57 6b10 	vmov	r6, r7, d0
 80203ce:	d115      	bne.n	80203fc <__ieee754_pow+0x4c>
 80203d0:	19b3      	adds	r3, r6, r6
 80203d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80203d6:	4152      	adcs	r2, r2
 80203d8:	4299      	cmp	r1, r3
 80203da:	4b89      	ldr	r3, [pc, #548]	; (8020600 <__ieee754_pow+0x250>)
 80203dc:	4193      	sbcs	r3, r2
 80203de:	f080 84d2 	bcs.w	8020d86 <__ieee754_pow+0x9d6>
 80203e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80203e6:	4630      	mov	r0, r6
 80203e8:	4639      	mov	r1, r7
 80203ea:	f7df ff59 	bl	80002a0 <__adddf3>
 80203ee:	ec41 0b10 	vmov	d0, r0, r1
 80203f2:	b009      	add	sp, #36	; 0x24
 80203f4:	ecbd 8b06 	vpop	{d8-d10}
 80203f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203fc:	4b81      	ldr	r3, [pc, #516]	; (8020604 <__ieee754_pow+0x254>)
 80203fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8020402:	429c      	cmp	r4, r3
 8020404:	ee10 aa10 	vmov	sl, s0
 8020408:	463d      	mov	r5, r7
 802040a:	dc06      	bgt.n	802041a <__ieee754_pow+0x6a>
 802040c:	d101      	bne.n	8020412 <__ieee754_pow+0x62>
 802040e:	2e00      	cmp	r6, #0
 8020410:	d1e7      	bne.n	80203e2 <__ieee754_pow+0x32>
 8020412:	4598      	cmp	r8, r3
 8020414:	dc01      	bgt.n	802041a <__ieee754_pow+0x6a>
 8020416:	d10f      	bne.n	8020438 <__ieee754_pow+0x88>
 8020418:	b172      	cbz	r2, 8020438 <__ieee754_pow+0x88>
 802041a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 802041e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8020422:	ea55 050a 	orrs.w	r5, r5, sl
 8020426:	d1dc      	bne.n	80203e2 <__ieee754_pow+0x32>
 8020428:	e9dd 3200 	ldrd	r3, r2, [sp]
 802042c:	18db      	adds	r3, r3, r3
 802042e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8020432:	4152      	adcs	r2, r2
 8020434:	429d      	cmp	r5, r3
 8020436:	e7d0      	b.n	80203da <__ieee754_pow+0x2a>
 8020438:	2d00      	cmp	r5, #0
 802043a:	da3b      	bge.n	80204b4 <__ieee754_pow+0x104>
 802043c:	4b72      	ldr	r3, [pc, #456]	; (8020608 <__ieee754_pow+0x258>)
 802043e:	4598      	cmp	r8, r3
 8020440:	dc51      	bgt.n	80204e6 <__ieee754_pow+0x136>
 8020442:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8020446:	4598      	cmp	r8, r3
 8020448:	f340 84ac 	ble.w	8020da4 <__ieee754_pow+0x9f4>
 802044c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8020450:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020454:	2b14      	cmp	r3, #20
 8020456:	dd0f      	ble.n	8020478 <__ieee754_pow+0xc8>
 8020458:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802045c:	fa22 f103 	lsr.w	r1, r2, r3
 8020460:	fa01 f303 	lsl.w	r3, r1, r3
 8020464:	4293      	cmp	r3, r2
 8020466:	f040 849d 	bne.w	8020da4 <__ieee754_pow+0x9f4>
 802046a:	f001 0101 	and.w	r1, r1, #1
 802046e:	f1c1 0302 	rsb	r3, r1, #2
 8020472:	9304      	str	r3, [sp, #16]
 8020474:	b182      	cbz	r2, 8020498 <__ieee754_pow+0xe8>
 8020476:	e05f      	b.n	8020538 <__ieee754_pow+0x188>
 8020478:	2a00      	cmp	r2, #0
 802047a:	d15b      	bne.n	8020534 <__ieee754_pow+0x184>
 802047c:	f1c3 0314 	rsb	r3, r3, #20
 8020480:	fa48 f103 	asr.w	r1, r8, r3
 8020484:	fa01 f303 	lsl.w	r3, r1, r3
 8020488:	4543      	cmp	r3, r8
 802048a:	f040 8488 	bne.w	8020d9e <__ieee754_pow+0x9ee>
 802048e:	f001 0101 	and.w	r1, r1, #1
 8020492:	f1c1 0302 	rsb	r3, r1, #2
 8020496:	9304      	str	r3, [sp, #16]
 8020498:	4b5c      	ldr	r3, [pc, #368]	; (802060c <__ieee754_pow+0x25c>)
 802049a:	4598      	cmp	r8, r3
 802049c:	d132      	bne.n	8020504 <__ieee754_pow+0x154>
 802049e:	f1b9 0f00 	cmp.w	r9, #0
 80204a2:	f280 8478 	bge.w	8020d96 <__ieee754_pow+0x9e6>
 80204a6:	4959      	ldr	r1, [pc, #356]	; (802060c <__ieee754_pow+0x25c>)
 80204a8:	4632      	mov	r2, r6
 80204aa:	463b      	mov	r3, r7
 80204ac:	2000      	movs	r0, #0
 80204ae:	f7e0 f9d7 	bl	8000860 <__aeabi_ddiv>
 80204b2:	e79c      	b.n	80203ee <__ieee754_pow+0x3e>
 80204b4:	2300      	movs	r3, #0
 80204b6:	9304      	str	r3, [sp, #16]
 80204b8:	2a00      	cmp	r2, #0
 80204ba:	d13d      	bne.n	8020538 <__ieee754_pow+0x188>
 80204bc:	4b51      	ldr	r3, [pc, #324]	; (8020604 <__ieee754_pow+0x254>)
 80204be:	4598      	cmp	r8, r3
 80204c0:	d1ea      	bne.n	8020498 <__ieee754_pow+0xe8>
 80204c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80204c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80204ca:	ea53 030a 	orrs.w	r3, r3, sl
 80204ce:	f000 845a 	beq.w	8020d86 <__ieee754_pow+0x9d6>
 80204d2:	4b4f      	ldr	r3, [pc, #316]	; (8020610 <__ieee754_pow+0x260>)
 80204d4:	429c      	cmp	r4, r3
 80204d6:	dd08      	ble.n	80204ea <__ieee754_pow+0x13a>
 80204d8:	f1b9 0f00 	cmp.w	r9, #0
 80204dc:	f2c0 8457 	blt.w	8020d8e <__ieee754_pow+0x9de>
 80204e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80204e4:	e783      	b.n	80203ee <__ieee754_pow+0x3e>
 80204e6:	2302      	movs	r3, #2
 80204e8:	e7e5      	b.n	80204b6 <__ieee754_pow+0x106>
 80204ea:	f1b9 0f00 	cmp.w	r9, #0
 80204ee:	f04f 0000 	mov.w	r0, #0
 80204f2:	f04f 0100 	mov.w	r1, #0
 80204f6:	f6bf af7a 	bge.w	80203ee <__ieee754_pow+0x3e>
 80204fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80204fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020502:	e774      	b.n	80203ee <__ieee754_pow+0x3e>
 8020504:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8020508:	d106      	bne.n	8020518 <__ieee754_pow+0x168>
 802050a:	4632      	mov	r2, r6
 802050c:	463b      	mov	r3, r7
 802050e:	4630      	mov	r0, r6
 8020510:	4639      	mov	r1, r7
 8020512:	f7e0 f87b 	bl	800060c <__aeabi_dmul>
 8020516:	e76a      	b.n	80203ee <__ieee754_pow+0x3e>
 8020518:	4b3e      	ldr	r3, [pc, #248]	; (8020614 <__ieee754_pow+0x264>)
 802051a:	4599      	cmp	r9, r3
 802051c:	d10c      	bne.n	8020538 <__ieee754_pow+0x188>
 802051e:	2d00      	cmp	r5, #0
 8020520:	db0a      	blt.n	8020538 <__ieee754_pow+0x188>
 8020522:	ec47 6b10 	vmov	d0, r6, r7
 8020526:	b009      	add	sp, #36	; 0x24
 8020528:	ecbd 8b06 	vpop	{d8-d10}
 802052c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020530:	f000 be7a 	b.w	8021228 <__ieee754_sqrt>
 8020534:	2300      	movs	r3, #0
 8020536:	9304      	str	r3, [sp, #16]
 8020538:	ec47 6b10 	vmov	d0, r6, r7
 802053c:	f002 f874 	bl	8022628 <fabs>
 8020540:	ec51 0b10 	vmov	r0, r1, d0
 8020544:	f1ba 0f00 	cmp.w	sl, #0
 8020548:	d129      	bne.n	802059e <__ieee754_pow+0x1ee>
 802054a:	b124      	cbz	r4, 8020556 <__ieee754_pow+0x1a6>
 802054c:	4b2f      	ldr	r3, [pc, #188]	; (802060c <__ieee754_pow+0x25c>)
 802054e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8020552:	429a      	cmp	r2, r3
 8020554:	d123      	bne.n	802059e <__ieee754_pow+0x1ee>
 8020556:	f1b9 0f00 	cmp.w	r9, #0
 802055a:	da05      	bge.n	8020568 <__ieee754_pow+0x1b8>
 802055c:	4602      	mov	r2, r0
 802055e:	460b      	mov	r3, r1
 8020560:	2000      	movs	r0, #0
 8020562:	492a      	ldr	r1, [pc, #168]	; (802060c <__ieee754_pow+0x25c>)
 8020564:	f7e0 f97c 	bl	8000860 <__aeabi_ddiv>
 8020568:	2d00      	cmp	r5, #0
 802056a:	f6bf af40 	bge.w	80203ee <__ieee754_pow+0x3e>
 802056e:	9b04      	ldr	r3, [sp, #16]
 8020570:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8020574:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8020578:	4323      	orrs	r3, r4
 802057a:	d108      	bne.n	802058e <__ieee754_pow+0x1de>
 802057c:	4602      	mov	r2, r0
 802057e:	460b      	mov	r3, r1
 8020580:	4610      	mov	r0, r2
 8020582:	4619      	mov	r1, r3
 8020584:	f7df fe8a 	bl	800029c <__aeabi_dsub>
 8020588:	4602      	mov	r2, r0
 802058a:	460b      	mov	r3, r1
 802058c:	e78f      	b.n	80204ae <__ieee754_pow+0xfe>
 802058e:	9b04      	ldr	r3, [sp, #16]
 8020590:	2b01      	cmp	r3, #1
 8020592:	f47f af2c 	bne.w	80203ee <__ieee754_pow+0x3e>
 8020596:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802059a:	4619      	mov	r1, r3
 802059c:	e727      	b.n	80203ee <__ieee754_pow+0x3e>
 802059e:	0feb      	lsrs	r3, r5, #31
 80205a0:	3b01      	subs	r3, #1
 80205a2:	9306      	str	r3, [sp, #24]
 80205a4:	9a06      	ldr	r2, [sp, #24]
 80205a6:	9b04      	ldr	r3, [sp, #16]
 80205a8:	4313      	orrs	r3, r2
 80205aa:	d102      	bne.n	80205b2 <__ieee754_pow+0x202>
 80205ac:	4632      	mov	r2, r6
 80205ae:	463b      	mov	r3, r7
 80205b0:	e7e6      	b.n	8020580 <__ieee754_pow+0x1d0>
 80205b2:	4b19      	ldr	r3, [pc, #100]	; (8020618 <__ieee754_pow+0x268>)
 80205b4:	4598      	cmp	r8, r3
 80205b6:	f340 80fb 	ble.w	80207b0 <__ieee754_pow+0x400>
 80205ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80205be:	4598      	cmp	r8, r3
 80205c0:	4b13      	ldr	r3, [pc, #76]	; (8020610 <__ieee754_pow+0x260>)
 80205c2:	dd0c      	ble.n	80205de <__ieee754_pow+0x22e>
 80205c4:	429c      	cmp	r4, r3
 80205c6:	dc0f      	bgt.n	80205e8 <__ieee754_pow+0x238>
 80205c8:	f1b9 0f00 	cmp.w	r9, #0
 80205cc:	da0f      	bge.n	80205ee <__ieee754_pow+0x23e>
 80205ce:	2000      	movs	r0, #0
 80205d0:	b009      	add	sp, #36	; 0x24
 80205d2:	ecbd 8b06 	vpop	{d8-d10}
 80205d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205da:	f001 bffa 	b.w	80225d2 <__math_oflow>
 80205de:	429c      	cmp	r4, r3
 80205e0:	dbf2      	blt.n	80205c8 <__ieee754_pow+0x218>
 80205e2:	4b0a      	ldr	r3, [pc, #40]	; (802060c <__ieee754_pow+0x25c>)
 80205e4:	429c      	cmp	r4, r3
 80205e6:	dd19      	ble.n	802061c <__ieee754_pow+0x26c>
 80205e8:	f1b9 0f00 	cmp.w	r9, #0
 80205ec:	dcef      	bgt.n	80205ce <__ieee754_pow+0x21e>
 80205ee:	2000      	movs	r0, #0
 80205f0:	b009      	add	sp, #36	; 0x24
 80205f2:	ecbd 8b06 	vpop	{d8-d10}
 80205f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205fa:	f001 bfe1 	b.w	80225c0 <__math_uflow>
 80205fe:	bf00      	nop
 8020600:	fff00000 	.word	0xfff00000
 8020604:	7ff00000 	.word	0x7ff00000
 8020608:	433fffff 	.word	0x433fffff
 802060c:	3ff00000 	.word	0x3ff00000
 8020610:	3fefffff 	.word	0x3fefffff
 8020614:	3fe00000 	.word	0x3fe00000
 8020618:	41e00000 	.word	0x41e00000
 802061c:	4b60      	ldr	r3, [pc, #384]	; (80207a0 <__ieee754_pow+0x3f0>)
 802061e:	2200      	movs	r2, #0
 8020620:	f7df fe3c 	bl	800029c <__aeabi_dsub>
 8020624:	a354      	add	r3, pc, #336	; (adr r3, 8020778 <__ieee754_pow+0x3c8>)
 8020626:	e9d3 2300 	ldrd	r2, r3, [r3]
 802062a:	4604      	mov	r4, r0
 802062c:	460d      	mov	r5, r1
 802062e:	f7df ffed 	bl	800060c <__aeabi_dmul>
 8020632:	a353      	add	r3, pc, #332	; (adr r3, 8020780 <__ieee754_pow+0x3d0>)
 8020634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020638:	4606      	mov	r6, r0
 802063a:	460f      	mov	r7, r1
 802063c:	4620      	mov	r0, r4
 802063e:	4629      	mov	r1, r5
 8020640:	f7df ffe4 	bl	800060c <__aeabi_dmul>
 8020644:	4b57      	ldr	r3, [pc, #348]	; (80207a4 <__ieee754_pow+0x3f4>)
 8020646:	4682      	mov	sl, r0
 8020648:	468b      	mov	fp, r1
 802064a:	2200      	movs	r2, #0
 802064c:	4620      	mov	r0, r4
 802064e:	4629      	mov	r1, r5
 8020650:	f7df ffdc 	bl	800060c <__aeabi_dmul>
 8020654:	4602      	mov	r2, r0
 8020656:	460b      	mov	r3, r1
 8020658:	a14b      	add	r1, pc, #300	; (adr r1, 8020788 <__ieee754_pow+0x3d8>)
 802065a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802065e:	f7df fe1d 	bl	800029c <__aeabi_dsub>
 8020662:	4622      	mov	r2, r4
 8020664:	462b      	mov	r3, r5
 8020666:	f7df ffd1 	bl	800060c <__aeabi_dmul>
 802066a:	4602      	mov	r2, r0
 802066c:	460b      	mov	r3, r1
 802066e:	2000      	movs	r0, #0
 8020670:	494d      	ldr	r1, [pc, #308]	; (80207a8 <__ieee754_pow+0x3f8>)
 8020672:	f7df fe13 	bl	800029c <__aeabi_dsub>
 8020676:	4622      	mov	r2, r4
 8020678:	4680      	mov	r8, r0
 802067a:	4689      	mov	r9, r1
 802067c:	462b      	mov	r3, r5
 802067e:	4620      	mov	r0, r4
 8020680:	4629      	mov	r1, r5
 8020682:	f7df ffc3 	bl	800060c <__aeabi_dmul>
 8020686:	4602      	mov	r2, r0
 8020688:	460b      	mov	r3, r1
 802068a:	4640      	mov	r0, r8
 802068c:	4649      	mov	r1, r9
 802068e:	f7df ffbd 	bl	800060c <__aeabi_dmul>
 8020692:	a33f      	add	r3, pc, #252	; (adr r3, 8020790 <__ieee754_pow+0x3e0>)
 8020694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020698:	f7df ffb8 	bl	800060c <__aeabi_dmul>
 802069c:	4602      	mov	r2, r0
 802069e:	460b      	mov	r3, r1
 80206a0:	4650      	mov	r0, sl
 80206a2:	4659      	mov	r1, fp
 80206a4:	f7df fdfa 	bl	800029c <__aeabi_dsub>
 80206a8:	4602      	mov	r2, r0
 80206aa:	460b      	mov	r3, r1
 80206ac:	4680      	mov	r8, r0
 80206ae:	4689      	mov	r9, r1
 80206b0:	4630      	mov	r0, r6
 80206b2:	4639      	mov	r1, r7
 80206b4:	f7df fdf4 	bl	80002a0 <__adddf3>
 80206b8:	2000      	movs	r0, #0
 80206ba:	4632      	mov	r2, r6
 80206bc:	463b      	mov	r3, r7
 80206be:	4604      	mov	r4, r0
 80206c0:	460d      	mov	r5, r1
 80206c2:	f7df fdeb 	bl	800029c <__aeabi_dsub>
 80206c6:	4602      	mov	r2, r0
 80206c8:	460b      	mov	r3, r1
 80206ca:	4640      	mov	r0, r8
 80206cc:	4649      	mov	r1, r9
 80206ce:	f7df fde5 	bl	800029c <__aeabi_dsub>
 80206d2:	9b04      	ldr	r3, [sp, #16]
 80206d4:	9a06      	ldr	r2, [sp, #24]
 80206d6:	3b01      	subs	r3, #1
 80206d8:	4313      	orrs	r3, r2
 80206da:	4682      	mov	sl, r0
 80206dc:	468b      	mov	fp, r1
 80206de:	f040 81e7 	bne.w	8020ab0 <__ieee754_pow+0x700>
 80206e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8020798 <__ieee754_pow+0x3e8>
 80206e6:	eeb0 8a47 	vmov.f32	s16, s14
 80206ea:	eef0 8a67 	vmov.f32	s17, s15
 80206ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80206f2:	2600      	movs	r6, #0
 80206f4:	4632      	mov	r2, r6
 80206f6:	463b      	mov	r3, r7
 80206f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80206fc:	f7df fdce 	bl	800029c <__aeabi_dsub>
 8020700:	4622      	mov	r2, r4
 8020702:	462b      	mov	r3, r5
 8020704:	f7df ff82 	bl	800060c <__aeabi_dmul>
 8020708:	e9dd 2300 	ldrd	r2, r3, [sp]
 802070c:	4680      	mov	r8, r0
 802070e:	4689      	mov	r9, r1
 8020710:	4650      	mov	r0, sl
 8020712:	4659      	mov	r1, fp
 8020714:	f7df ff7a 	bl	800060c <__aeabi_dmul>
 8020718:	4602      	mov	r2, r0
 802071a:	460b      	mov	r3, r1
 802071c:	4640      	mov	r0, r8
 802071e:	4649      	mov	r1, r9
 8020720:	f7df fdbe 	bl	80002a0 <__adddf3>
 8020724:	4632      	mov	r2, r6
 8020726:	463b      	mov	r3, r7
 8020728:	4680      	mov	r8, r0
 802072a:	4689      	mov	r9, r1
 802072c:	4620      	mov	r0, r4
 802072e:	4629      	mov	r1, r5
 8020730:	f7df ff6c 	bl	800060c <__aeabi_dmul>
 8020734:	460b      	mov	r3, r1
 8020736:	4604      	mov	r4, r0
 8020738:	460d      	mov	r5, r1
 802073a:	4602      	mov	r2, r0
 802073c:	4649      	mov	r1, r9
 802073e:	4640      	mov	r0, r8
 8020740:	f7df fdae 	bl	80002a0 <__adddf3>
 8020744:	4b19      	ldr	r3, [pc, #100]	; (80207ac <__ieee754_pow+0x3fc>)
 8020746:	4299      	cmp	r1, r3
 8020748:	ec45 4b19 	vmov	d9, r4, r5
 802074c:	4606      	mov	r6, r0
 802074e:	460f      	mov	r7, r1
 8020750:	468b      	mov	fp, r1
 8020752:	f340 82f1 	ble.w	8020d38 <__ieee754_pow+0x988>
 8020756:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802075a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802075e:	4303      	orrs	r3, r0
 8020760:	f000 81e4 	beq.w	8020b2c <__ieee754_pow+0x77c>
 8020764:	ec51 0b18 	vmov	r0, r1, d8
 8020768:	2200      	movs	r2, #0
 802076a:	2300      	movs	r3, #0
 802076c:	f7e0 f9c0 	bl	8000af0 <__aeabi_dcmplt>
 8020770:	3800      	subs	r0, #0
 8020772:	bf18      	it	ne
 8020774:	2001      	movne	r0, #1
 8020776:	e72b      	b.n	80205d0 <__ieee754_pow+0x220>
 8020778:	60000000 	.word	0x60000000
 802077c:	3ff71547 	.word	0x3ff71547
 8020780:	f85ddf44 	.word	0xf85ddf44
 8020784:	3e54ae0b 	.word	0x3e54ae0b
 8020788:	55555555 	.word	0x55555555
 802078c:	3fd55555 	.word	0x3fd55555
 8020790:	652b82fe 	.word	0x652b82fe
 8020794:	3ff71547 	.word	0x3ff71547
 8020798:	00000000 	.word	0x00000000
 802079c:	bff00000 	.word	0xbff00000
 80207a0:	3ff00000 	.word	0x3ff00000
 80207a4:	3fd00000 	.word	0x3fd00000
 80207a8:	3fe00000 	.word	0x3fe00000
 80207ac:	408fffff 	.word	0x408fffff
 80207b0:	4bd5      	ldr	r3, [pc, #852]	; (8020b08 <__ieee754_pow+0x758>)
 80207b2:	402b      	ands	r3, r5
 80207b4:	2200      	movs	r2, #0
 80207b6:	b92b      	cbnz	r3, 80207c4 <__ieee754_pow+0x414>
 80207b8:	4bd4      	ldr	r3, [pc, #848]	; (8020b0c <__ieee754_pow+0x75c>)
 80207ba:	f7df ff27 	bl	800060c <__aeabi_dmul>
 80207be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80207c2:	460c      	mov	r4, r1
 80207c4:	1523      	asrs	r3, r4, #20
 80207c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80207ca:	4413      	add	r3, r2
 80207cc:	9305      	str	r3, [sp, #20]
 80207ce:	4bd0      	ldr	r3, [pc, #832]	; (8020b10 <__ieee754_pow+0x760>)
 80207d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80207d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80207d8:	429c      	cmp	r4, r3
 80207da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80207de:	dd08      	ble.n	80207f2 <__ieee754_pow+0x442>
 80207e0:	4bcc      	ldr	r3, [pc, #816]	; (8020b14 <__ieee754_pow+0x764>)
 80207e2:	429c      	cmp	r4, r3
 80207e4:	f340 8162 	ble.w	8020aac <__ieee754_pow+0x6fc>
 80207e8:	9b05      	ldr	r3, [sp, #20]
 80207ea:	3301      	adds	r3, #1
 80207ec:	9305      	str	r3, [sp, #20]
 80207ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80207f2:	2400      	movs	r4, #0
 80207f4:	00e3      	lsls	r3, r4, #3
 80207f6:	9307      	str	r3, [sp, #28]
 80207f8:	4bc7      	ldr	r3, [pc, #796]	; (8020b18 <__ieee754_pow+0x768>)
 80207fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80207fe:	ed93 7b00 	vldr	d7, [r3]
 8020802:	4629      	mov	r1, r5
 8020804:	ec53 2b17 	vmov	r2, r3, d7
 8020808:	eeb0 9a47 	vmov.f32	s18, s14
 802080c:	eef0 9a67 	vmov.f32	s19, s15
 8020810:	4682      	mov	sl, r0
 8020812:	f7df fd43 	bl	800029c <__aeabi_dsub>
 8020816:	4652      	mov	r2, sl
 8020818:	4606      	mov	r6, r0
 802081a:	460f      	mov	r7, r1
 802081c:	462b      	mov	r3, r5
 802081e:	ec51 0b19 	vmov	r0, r1, d9
 8020822:	f7df fd3d 	bl	80002a0 <__adddf3>
 8020826:	4602      	mov	r2, r0
 8020828:	460b      	mov	r3, r1
 802082a:	2000      	movs	r0, #0
 802082c:	49bb      	ldr	r1, [pc, #748]	; (8020b1c <__ieee754_pow+0x76c>)
 802082e:	f7e0 f817 	bl	8000860 <__aeabi_ddiv>
 8020832:	ec41 0b1a 	vmov	d10, r0, r1
 8020836:	4602      	mov	r2, r0
 8020838:	460b      	mov	r3, r1
 802083a:	4630      	mov	r0, r6
 802083c:	4639      	mov	r1, r7
 802083e:	f7df fee5 	bl	800060c <__aeabi_dmul>
 8020842:	2300      	movs	r3, #0
 8020844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020848:	9302      	str	r3, [sp, #8]
 802084a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802084e:	46ab      	mov	fp, r5
 8020850:	106d      	asrs	r5, r5, #1
 8020852:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8020856:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 802085a:	ec41 0b18 	vmov	d8, r0, r1
 802085e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8020862:	2200      	movs	r2, #0
 8020864:	4640      	mov	r0, r8
 8020866:	4649      	mov	r1, r9
 8020868:	4614      	mov	r4, r2
 802086a:	461d      	mov	r5, r3
 802086c:	f7df fece 	bl	800060c <__aeabi_dmul>
 8020870:	4602      	mov	r2, r0
 8020872:	460b      	mov	r3, r1
 8020874:	4630      	mov	r0, r6
 8020876:	4639      	mov	r1, r7
 8020878:	f7df fd10 	bl	800029c <__aeabi_dsub>
 802087c:	ec53 2b19 	vmov	r2, r3, d9
 8020880:	4606      	mov	r6, r0
 8020882:	460f      	mov	r7, r1
 8020884:	4620      	mov	r0, r4
 8020886:	4629      	mov	r1, r5
 8020888:	f7df fd08 	bl	800029c <__aeabi_dsub>
 802088c:	4602      	mov	r2, r0
 802088e:	460b      	mov	r3, r1
 8020890:	4650      	mov	r0, sl
 8020892:	4659      	mov	r1, fp
 8020894:	f7df fd02 	bl	800029c <__aeabi_dsub>
 8020898:	4642      	mov	r2, r8
 802089a:	464b      	mov	r3, r9
 802089c:	f7df feb6 	bl	800060c <__aeabi_dmul>
 80208a0:	4602      	mov	r2, r0
 80208a2:	460b      	mov	r3, r1
 80208a4:	4630      	mov	r0, r6
 80208a6:	4639      	mov	r1, r7
 80208a8:	f7df fcf8 	bl	800029c <__aeabi_dsub>
 80208ac:	ec53 2b1a 	vmov	r2, r3, d10
 80208b0:	f7df feac 	bl	800060c <__aeabi_dmul>
 80208b4:	ec53 2b18 	vmov	r2, r3, d8
 80208b8:	ec41 0b19 	vmov	d9, r0, r1
 80208bc:	ec51 0b18 	vmov	r0, r1, d8
 80208c0:	f7df fea4 	bl	800060c <__aeabi_dmul>
 80208c4:	a37c      	add	r3, pc, #496	; (adr r3, 8020ab8 <__ieee754_pow+0x708>)
 80208c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208ca:	4604      	mov	r4, r0
 80208cc:	460d      	mov	r5, r1
 80208ce:	f7df fe9d 	bl	800060c <__aeabi_dmul>
 80208d2:	a37b      	add	r3, pc, #492	; (adr r3, 8020ac0 <__ieee754_pow+0x710>)
 80208d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208d8:	f7df fce2 	bl	80002a0 <__adddf3>
 80208dc:	4622      	mov	r2, r4
 80208de:	462b      	mov	r3, r5
 80208e0:	f7df fe94 	bl	800060c <__aeabi_dmul>
 80208e4:	a378      	add	r3, pc, #480	; (adr r3, 8020ac8 <__ieee754_pow+0x718>)
 80208e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208ea:	f7df fcd9 	bl	80002a0 <__adddf3>
 80208ee:	4622      	mov	r2, r4
 80208f0:	462b      	mov	r3, r5
 80208f2:	f7df fe8b 	bl	800060c <__aeabi_dmul>
 80208f6:	a376      	add	r3, pc, #472	; (adr r3, 8020ad0 <__ieee754_pow+0x720>)
 80208f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208fc:	f7df fcd0 	bl	80002a0 <__adddf3>
 8020900:	4622      	mov	r2, r4
 8020902:	462b      	mov	r3, r5
 8020904:	f7df fe82 	bl	800060c <__aeabi_dmul>
 8020908:	a373      	add	r3, pc, #460	; (adr r3, 8020ad8 <__ieee754_pow+0x728>)
 802090a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802090e:	f7df fcc7 	bl	80002a0 <__adddf3>
 8020912:	4622      	mov	r2, r4
 8020914:	462b      	mov	r3, r5
 8020916:	f7df fe79 	bl	800060c <__aeabi_dmul>
 802091a:	a371      	add	r3, pc, #452	; (adr r3, 8020ae0 <__ieee754_pow+0x730>)
 802091c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020920:	f7df fcbe 	bl	80002a0 <__adddf3>
 8020924:	4622      	mov	r2, r4
 8020926:	4606      	mov	r6, r0
 8020928:	460f      	mov	r7, r1
 802092a:	462b      	mov	r3, r5
 802092c:	4620      	mov	r0, r4
 802092e:	4629      	mov	r1, r5
 8020930:	f7df fe6c 	bl	800060c <__aeabi_dmul>
 8020934:	4602      	mov	r2, r0
 8020936:	460b      	mov	r3, r1
 8020938:	4630      	mov	r0, r6
 802093a:	4639      	mov	r1, r7
 802093c:	f7df fe66 	bl	800060c <__aeabi_dmul>
 8020940:	4642      	mov	r2, r8
 8020942:	4604      	mov	r4, r0
 8020944:	460d      	mov	r5, r1
 8020946:	464b      	mov	r3, r9
 8020948:	ec51 0b18 	vmov	r0, r1, d8
 802094c:	f7df fca8 	bl	80002a0 <__adddf3>
 8020950:	ec53 2b19 	vmov	r2, r3, d9
 8020954:	f7df fe5a 	bl	800060c <__aeabi_dmul>
 8020958:	4622      	mov	r2, r4
 802095a:	462b      	mov	r3, r5
 802095c:	f7df fca0 	bl	80002a0 <__adddf3>
 8020960:	4642      	mov	r2, r8
 8020962:	4682      	mov	sl, r0
 8020964:	468b      	mov	fp, r1
 8020966:	464b      	mov	r3, r9
 8020968:	4640      	mov	r0, r8
 802096a:	4649      	mov	r1, r9
 802096c:	f7df fe4e 	bl	800060c <__aeabi_dmul>
 8020970:	4b6b      	ldr	r3, [pc, #428]	; (8020b20 <__ieee754_pow+0x770>)
 8020972:	2200      	movs	r2, #0
 8020974:	4606      	mov	r6, r0
 8020976:	460f      	mov	r7, r1
 8020978:	f7df fc92 	bl	80002a0 <__adddf3>
 802097c:	4652      	mov	r2, sl
 802097e:	465b      	mov	r3, fp
 8020980:	f7df fc8e 	bl	80002a0 <__adddf3>
 8020984:	2000      	movs	r0, #0
 8020986:	4604      	mov	r4, r0
 8020988:	460d      	mov	r5, r1
 802098a:	4602      	mov	r2, r0
 802098c:	460b      	mov	r3, r1
 802098e:	4640      	mov	r0, r8
 8020990:	4649      	mov	r1, r9
 8020992:	f7df fe3b 	bl	800060c <__aeabi_dmul>
 8020996:	4b62      	ldr	r3, [pc, #392]	; (8020b20 <__ieee754_pow+0x770>)
 8020998:	4680      	mov	r8, r0
 802099a:	4689      	mov	r9, r1
 802099c:	2200      	movs	r2, #0
 802099e:	4620      	mov	r0, r4
 80209a0:	4629      	mov	r1, r5
 80209a2:	f7df fc7b 	bl	800029c <__aeabi_dsub>
 80209a6:	4632      	mov	r2, r6
 80209a8:	463b      	mov	r3, r7
 80209aa:	f7df fc77 	bl	800029c <__aeabi_dsub>
 80209ae:	4602      	mov	r2, r0
 80209b0:	460b      	mov	r3, r1
 80209b2:	4650      	mov	r0, sl
 80209b4:	4659      	mov	r1, fp
 80209b6:	f7df fc71 	bl	800029c <__aeabi_dsub>
 80209ba:	ec53 2b18 	vmov	r2, r3, d8
 80209be:	f7df fe25 	bl	800060c <__aeabi_dmul>
 80209c2:	4622      	mov	r2, r4
 80209c4:	4606      	mov	r6, r0
 80209c6:	460f      	mov	r7, r1
 80209c8:	462b      	mov	r3, r5
 80209ca:	ec51 0b19 	vmov	r0, r1, d9
 80209ce:	f7df fe1d 	bl	800060c <__aeabi_dmul>
 80209d2:	4602      	mov	r2, r0
 80209d4:	460b      	mov	r3, r1
 80209d6:	4630      	mov	r0, r6
 80209d8:	4639      	mov	r1, r7
 80209da:	f7df fc61 	bl	80002a0 <__adddf3>
 80209de:	4606      	mov	r6, r0
 80209e0:	460f      	mov	r7, r1
 80209e2:	4602      	mov	r2, r0
 80209e4:	460b      	mov	r3, r1
 80209e6:	4640      	mov	r0, r8
 80209e8:	4649      	mov	r1, r9
 80209ea:	f7df fc59 	bl	80002a0 <__adddf3>
 80209ee:	a33e      	add	r3, pc, #248	; (adr r3, 8020ae8 <__ieee754_pow+0x738>)
 80209f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209f4:	2000      	movs	r0, #0
 80209f6:	4604      	mov	r4, r0
 80209f8:	460d      	mov	r5, r1
 80209fa:	f7df fe07 	bl	800060c <__aeabi_dmul>
 80209fe:	4642      	mov	r2, r8
 8020a00:	ec41 0b18 	vmov	d8, r0, r1
 8020a04:	464b      	mov	r3, r9
 8020a06:	4620      	mov	r0, r4
 8020a08:	4629      	mov	r1, r5
 8020a0a:	f7df fc47 	bl	800029c <__aeabi_dsub>
 8020a0e:	4602      	mov	r2, r0
 8020a10:	460b      	mov	r3, r1
 8020a12:	4630      	mov	r0, r6
 8020a14:	4639      	mov	r1, r7
 8020a16:	f7df fc41 	bl	800029c <__aeabi_dsub>
 8020a1a:	a335      	add	r3, pc, #212	; (adr r3, 8020af0 <__ieee754_pow+0x740>)
 8020a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a20:	f7df fdf4 	bl	800060c <__aeabi_dmul>
 8020a24:	a334      	add	r3, pc, #208	; (adr r3, 8020af8 <__ieee754_pow+0x748>)
 8020a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a2a:	4606      	mov	r6, r0
 8020a2c:	460f      	mov	r7, r1
 8020a2e:	4620      	mov	r0, r4
 8020a30:	4629      	mov	r1, r5
 8020a32:	f7df fdeb 	bl	800060c <__aeabi_dmul>
 8020a36:	4602      	mov	r2, r0
 8020a38:	460b      	mov	r3, r1
 8020a3a:	4630      	mov	r0, r6
 8020a3c:	4639      	mov	r1, r7
 8020a3e:	f7df fc2f 	bl	80002a0 <__adddf3>
 8020a42:	9a07      	ldr	r2, [sp, #28]
 8020a44:	4b37      	ldr	r3, [pc, #220]	; (8020b24 <__ieee754_pow+0x774>)
 8020a46:	4413      	add	r3, r2
 8020a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a4c:	f7df fc28 	bl	80002a0 <__adddf3>
 8020a50:	4682      	mov	sl, r0
 8020a52:	9805      	ldr	r0, [sp, #20]
 8020a54:	468b      	mov	fp, r1
 8020a56:	f7df fd6f 	bl	8000538 <__aeabi_i2d>
 8020a5a:	9a07      	ldr	r2, [sp, #28]
 8020a5c:	4b32      	ldr	r3, [pc, #200]	; (8020b28 <__ieee754_pow+0x778>)
 8020a5e:	4413      	add	r3, r2
 8020a60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020a64:	4606      	mov	r6, r0
 8020a66:	460f      	mov	r7, r1
 8020a68:	4652      	mov	r2, sl
 8020a6a:	465b      	mov	r3, fp
 8020a6c:	ec51 0b18 	vmov	r0, r1, d8
 8020a70:	f7df fc16 	bl	80002a0 <__adddf3>
 8020a74:	4642      	mov	r2, r8
 8020a76:	464b      	mov	r3, r9
 8020a78:	f7df fc12 	bl	80002a0 <__adddf3>
 8020a7c:	4632      	mov	r2, r6
 8020a7e:	463b      	mov	r3, r7
 8020a80:	f7df fc0e 	bl	80002a0 <__adddf3>
 8020a84:	2000      	movs	r0, #0
 8020a86:	4632      	mov	r2, r6
 8020a88:	463b      	mov	r3, r7
 8020a8a:	4604      	mov	r4, r0
 8020a8c:	460d      	mov	r5, r1
 8020a8e:	f7df fc05 	bl	800029c <__aeabi_dsub>
 8020a92:	4642      	mov	r2, r8
 8020a94:	464b      	mov	r3, r9
 8020a96:	f7df fc01 	bl	800029c <__aeabi_dsub>
 8020a9a:	ec53 2b18 	vmov	r2, r3, d8
 8020a9e:	f7df fbfd 	bl	800029c <__aeabi_dsub>
 8020aa2:	4602      	mov	r2, r0
 8020aa4:	460b      	mov	r3, r1
 8020aa6:	4650      	mov	r0, sl
 8020aa8:	4659      	mov	r1, fp
 8020aaa:	e610      	b.n	80206ce <__ieee754_pow+0x31e>
 8020aac:	2401      	movs	r4, #1
 8020aae:	e6a1      	b.n	80207f4 <__ieee754_pow+0x444>
 8020ab0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8020b00 <__ieee754_pow+0x750>
 8020ab4:	e617      	b.n	80206e6 <__ieee754_pow+0x336>
 8020ab6:	bf00      	nop
 8020ab8:	4a454eef 	.word	0x4a454eef
 8020abc:	3fca7e28 	.word	0x3fca7e28
 8020ac0:	93c9db65 	.word	0x93c9db65
 8020ac4:	3fcd864a 	.word	0x3fcd864a
 8020ac8:	a91d4101 	.word	0xa91d4101
 8020acc:	3fd17460 	.word	0x3fd17460
 8020ad0:	518f264d 	.word	0x518f264d
 8020ad4:	3fd55555 	.word	0x3fd55555
 8020ad8:	db6fabff 	.word	0xdb6fabff
 8020adc:	3fdb6db6 	.word	0x3fdb6db6
 8020ae0:	33333303 	.word	0x33333303
 8020ae4:	3fe33333 	.word	0x3fe33333
 8020ae8:	e0000000 	.word	0xe0000000
 8020aec:	3feec709 	.word	0x3feec709
 8020af0:	dc3a03fd 	.word	0xdc3a03fd
 8020af4:	3feec709 	.word	0x3feec709
 8020af8:	145b01f5 	.word	0x145b01f5
 8020afc:	be3e2fe0 	.word	0xbe3e2fe0
 8020b00:	00000000 	.word	0x00000000
 8020b04:	3ff00000 	.word	0x3ff00000
 8020b08:	7ff00000 	.word	0x7ff00000
 8020b0c:	43400000 	.word	0x43400000
 8020b10:	0003988e 	.word	0x0003988e
 8020b14:	000bb679 	.word	0x000bb679
 8020b18:	0804bc30 	.word	0x0804bc30
 8020b1c:	3ff00000 	.word	0x3ff00000
 8020b20:	40080000 	.word	0x40080000
 8020b24:	0804bc50 	.word	0x0804bc50
 8020b28:	0804bc40 	.word	0x0804bc40
 8020b2c:	a3b5      	add	r3, pc, #724	; (adr r3, 8020e04 <__ieee754_pow+0xa54>)
 8020b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b32:	4640      	mov	r0, r8
 8020b34:	4649      	mov	r1, r9
 8020b36:	f7df fbb3 	bl	80002a0 <__adddf3>
 8020b3a:	4622      	mov	r2, r4
 8020b3c:	ec41 0b1a 	vmov	d10, r0, r1
 8020b40:	462b      	mov	r3, r5
 8020b42:	4630      	mov	r0, r6
 8020b44:	4639      	mov	r1, r7
 8020b46:	f7df fba9 	bl	800029c <__aeabi_dsub>
 8020b4a:	4602      	mov	r2, r0
 8020b4c:	460b      	mov	r3, r1
 8020b4e:	ec51 0b1a 	vmov	r0, r1, d10
 8020b52:	f7df ffeb 	bl	8000b2c <__aeabi_dcmpgt>
 8020b56:	2800      	cmp	r0, #0
 8020b58:	f47f ae04 	bne.w	8020764 <__ieee754_pow+0x3b4>
 8020b5c:	4aa4      	ldr	r2, [pc, #656]	; (8020df0 <__ieee754_pow+0xa40>)
 8020b5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020b62:	4293      	cmp	r3, r2
 8020b64:	f340 8108 	ble.w	8020d78 <__ieee754_pow+0x9c8>
 8020b68:	151b      	asrs	r3, r3, #20
 8020b6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8020b6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8020b72:	fa4a f303 	asr.w	r3, sl, r3
 8020b76:	445b      	add	r3, fp
 8020b78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8020b7c:	4e9d      	ldr	r6, [pc, #628]	; (8020df4 <__ieee754_pow+0xa44>)
 8020b7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8020b82:	4116      	asrs	r6, r2
 8020b84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8020b88:	2000      	movs	r0, #0
 8020b8a:	ea23 0106 	bic.w	r1, r3, r6
 8020b8e:	f1c2 0214 	rsb	r2, r2, #20
 8020b92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8020b96:	fa4a fa02 	asr.w	sl, sl, r2
 8020b9a:	f1bb 0f00 	cmp.w	fp, #0
 8020b9e:	4602      	mov	r2, r0
 8020ba0:	460b      	mov	r3, r1
 8020ba2:	4620      	mov	r0, r4
 8020ba4:	4629      	mov	r1, r5
 8020ba6:	bfb8      	it	lt
 8020ba8:	f1ca 0a00 	rsblt	sl, sl, #0
 8020bac:	f7df fb76 	bl	800029c <__aeabi_dsub>
 8020bb0:	ec41 0b19 	vmov	d9, r0, r1
 8020bb4:	4642      	mov	r2, r8
 8020bb6:	464b      	mov	r3, r9
 8020bb8:	ec51 0b19 	vmov	r0, r1, d9
 8020bbc:	f7df fb70 	bl	80002a0 <__adddf3>
 8020bc0:	a37b      	add	r3, pc, #492	; (adr r3, 8020db0 <__ieee754_pow+0xa00>)
 8020bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bc6:	2000      	movs	r0, #0
 8020bc8:	4604      	mov	r4, r0
 8020bca:	460d      	mov	r5, r1
 8020bcc:	f7df fd1e 	bl	800060c <__aeabi_dmul>
 8020bd0:	ec53 2b19 	vmov	r2, r3, d9
 8020bd4:	4606      	mov	r6, r0
 8020bd6:	460f      	mov	r7, r1
 8020bd8:	4620      	mov	r0, r4
 8020bda:	4629      	mov	r1, r5
 8020bdc:	f7df fb5e 	bl	800029c <__aeabi_dsub>
 8020be0:	4602      	mov	r2, r0
 8020be2:	460b      	mov	r3, r1
 8020be4:	4640      	mov	r0, r8
 8020be6:	4649      	mov	r1, r9
 8020be8:	f7df fb58 	bl	800029c <__aeabi_dsub>
 8020bec:	a372      	add	r3, pc, #456	; (adr r3, 8020db8 <__ieee754_pow+0xa08>)
 8020bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bf2:	f7df fd0b 	bl	800060c <__aeabi_dmul>
 8020bf6:	a372      	add	r3, pc, #456	; (adr r3, 8020dc0 <__ieee754_pow+0xa10>)
 8020bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bfc:	4680      	mov	r8, r0
 8020bfe:	4689      	mov	r9, r1
 8020c00:	4620      	mov	r0, r4
 8020c02:	4629      	mov	r1, r5
 8020c04:	f7df fd02 	bl	800060c <__aeabi_dmul>
 8020c08:	4602      	mov	r2, r0
 8020c0a:	460b      	mov	r3, r1
 8020c0c:	4640      	mov	r0, r8
 8020c0e:	4649      	mov	r1, r9
 8020c10:	f7df fb46 	bl	80002a0 <__adddf3>
 8020c14:	4604      	mov	r4, r0
 8020c16:	460d      	mov	r5, r1
 8020c18:	4602      	mov	r2, r0
 8020c1a:	460b      	mov	r3, r1
 8020c1c:	4630      	mov	r0, r6
 8020c1e:	4639      	mov	r1, r7
 8020c20:	f7df fb3e 	bl	80002a0 <__adddf3>
 8020c24:	4632      	mov	r2, r6
 8020c26:	463b      	mov	r3, r7
 8020c28:	4680      	mov	r8, r0
 8020c2a:	4689      	mov	r9, r1
 8020c2c:	f7df fb36 	bl	800029c <__aeabi_dsub>
 8020c30:	4602      	mov	r2, r0
 8020c32:	460b      	mov	r3, r1
 8020c34:	4620      	mov	r0, r4
 8020c36:	4629      	mov	r1, r5
 8020c38:	f7df fb30 	bl	800029c <__aeabi_dsub>
 8020c3c:	4642      	mov	r2, r8
 8020c3e:	4606      	mov	r6, r0
 8020c40:	460f      	mov	r7, r1
 8020c42:	464b      	mov	r3, r9
 8020c44:	4640      	mov	r0, r8
 8020c46:	4649      	mov	r1, r9
 8020c48:	f7df fce0 	bl	800060c <__aeabi_dmul>
 8020c4c:	a35e      	add	r3, pc, #376	; (adr r3, 8020dc8 <__ieee754_pow+0xa18>)
 8020c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c52:	4604      	mov	r4, r0
 8020c54:	460d      	mov	r5, r1
 8020c56:	f7df fcd9 	bl	800060c <__aeabi_dmul>
 8020c5a:	a35d      	add	r3, pc, #372	; (adr r3, 8020dd0 <__ieee754_pow+0xa20>)
 8020c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c60:	f7df fb1c 	bl	800029c <__aeabi_dsub>
 8020c64:	4622      	mov	r2, r4
 8020c66:	462b      	mov	r3, r5
 8020c68:	f7df fcd0 	bl	800060c <__aeabi_dmul>
 8020c6c:	a35a      	add	r3, pc, #360	; (adr r3, 8020dd8 <__ieee754_pow+0xa28>)
 8020c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c72:	f7df fb15 	bl	80002a0 <__adddf3>
 8020c76:	4622      	mov	r2, r4
 8020c78:	462b      	mov	r3, r5
 8020c7a:	f7df fcc7 	bl	800060c <__aeabi_dmul>
 8020c7e:	a358      	add	r3, pc, #352	; (adr r3, 8020de0 <__ieee754_pow+0xa30>)
 8020c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c84:	f7df fb0a 	bl	800029c <__aeabi_dsub>
 8020c88:	4622      	mov	r2, r4
 8020c8a:	462b      	mov	r3, r5
 8020c8c:	f7df fcbe 	bl	800060c <__aeabi_dmul>
 8020c90:	a355      	add	r3, pc, #340	; (adr r3, 8020de8 <__ieee754_pow+0xa38>)
 8020c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c96:	f7df fb03 	bl	80002a0 <__adddf3>
 8020c9a:	4622      	mov	r2, r4
 8020c9c:	462b      	mov	r3, r5
 8020c9e:	f7df fcb5 	bl	800060c <__aeabi_dmul>
 8020ca2:	4602      	mov	r2, r0
 8020ca4:	460b      	mov	r3, r1
 8020ca6:	4640      	mov	r0, r8
 8020ca8:	4649      	mov	r1, r9
 8020caa:	f7df faf7 	bl	800029c <__aeabi_dsub>
 8020cae:	4604      	mov	r4, r0
 8020cb0:	460d      	mov	r5, r1
 8020cb2:	4602      	mov	r2, r0
 8020cb4:	460b      	mov	r3, r1
 8020cb6:	4640      	mov	r0, r8
 8020cb8:	4649      	mov	r1, r9
 8020cba:	f7df fca7 	bl	800060c <__aeabi_dmul>
 8020cbe:	2200      	movs	r2, #0
 8020cc0:	ec41 0b19 	vmov	d9, r0, r1
 8020cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020cc8:	4620      	mov	r0, r4
 8020cca:	4629      	mov	r1, r5
 8020ccc:	f7df fae6 	bl	800029c <__aeabi_dsub>
 8020cd0:	4602      	mov	r2, r0
 8020cd2:	460b      	mov	r3, r1
 8020cd4:	ec51 0b19 	vmov	r0, r1, d9
 8020cd8:	f7df fdc2 	bl	8000860 <__aeabi_ddiv>
 8020cdc:	4632      	mov	r2, r6
 8020cde:	4604      	mov	r4, r0
 8020ce0:	460d      	mov	r5, r1
 8020ce2:	463b      	mov	r3, r7
 8020ce4:	4640      	mov	r0, r8
 8020ce6:	4649      	mov	r1, r9
 8020ce8:	f7df fc90 	bl	800060c <__aeabi_dmul>
 8020cec:	4632      	mov	r2, r6
 8020cee:	463b      	mov	r3, r7
 8020cf0:	f7df fad6 	bl	80002a0 <__adddf3>
 8020cf4:	4602      	mov	r2, r0
 8020cf6:	460b      	mov	r3, r1
 8020cf8:	4620      	mov	r0, r4
 8020cfa:	4629      	mov	r1, r5
 8020cfc:	f7df face 	bl	800029c <__aeabi_dsub>
 8020d00:	4642      	mov	r2, r8
 8020d02:	464b      	mov	r3, r9
 8020d04:	f7df faca 	bl	800029c <__aeabi_dsub>
 8020d08:	460b      	mov	r3, r1
 8020d0a:	4602      	mov	r2, r0
 8020d0c:	493a      	ldr	r1, [pc, #232]	; (8020df8 <__ieee754_pow+0xa48>)
 8020d0e:	2000      	movs	r0, #0
 8020d10:	f7df fac4 	bl	800029c <__aeabi_dsub>
 8020d14:	ec41 0b10 	vmov	d0, r0, r1
 8020d18:	ee10 3a90 	vmov	r3, s1
 8020d1c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8020d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020d24:	da2b      	bge.n	8020d7e <__ieee754_pow+0x9ce>
 8020d26:	4650      	mov	r0, sl
 8020d28:	f001 fc9a 	bl	8022660 <scalbn>
 8020d2c:	ec51 0b10 	vmov	r0, r1, d0
 8020d30:	ec53 2b18 	vmov	r2, r3, d8
 8020d34:	f7ff bbed 	b.w	8020512 <__ieee754_pow+0x162>
 8020d38:	4b30      	ldr	r3, [pc, #192]	; (8020dfc <__ieee754_pow+0xa4c>)
 8020d3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8020d3e:	429e      	cmp	r6, r3
 8020d40:	f77f af0c 	ble.w	8020b5c <__ieee754_pow+0x7ac>
 8020d44:	4b2e      	ldr	r3, [pc, #184]	; (8020e00 <__ieee754_pow+0xa50>)
 8020d46:	440b      	add	r3, r1
 8020d48:	4303      	orrs	r3, r0
 8020d4a:	d009      	beq.n	8020d60 <__ieee754_pow+0x9b0>
 8020d4c:	ec51 0b18 	vmov	r0, r1, d8
 8020d50:	2200      	movs	r2, #0
 8020d52:	2300      	movs	r3, #0
 8020d54:	f7df fecc 	bl	8000af0 <__aeabi_dcmplt>
 8020d58:	3800      	subs	r0, #0
 8020d5a:	bf18      	it	ne
 8020d5c:	2001      	movne	r0, #1
 8020d5e:	e447      	b.n	80205f0 <__ieee754_pow+0x240>
 8020d60:	4622      	mov	r2, r4
 8020d62:	462b      	mov	r3, r5
 8020d64:	f7df fa9a 	bl	800029c <__aeabi_dsub>
 8020d68:	4642      	mov	r2, r8
 8020d6a:	464b      	mov	r3, r9
 8020d6c:	f7df fed4 	bl	8000b18 <__aeabi_dcmpge>
 8020d70:	2800      	cmp	r0, #0
 8020d72:	f43f aef3 	beq.w	8020b5c <__ieee754_pow+0x7ac>
 8020d76:	e7e9      	b.n	8020d4c <__ieee754_pow+0x99c>
 8020d78:	f04f 0a00 	mov.w	sl, #0
 8020d7c:	e71a      	b.n	8020bb4 <__ieee754_pow+0x804>
 8020d7e:	ec51 0b10 	vmov	r0, r1, d0
 8020d82:	4619      	mov	r1, r3
 8020d84:	e7d4      	b.n	8020d30 <__ieee754_pow+0x980>
 8020d86:	491c      	ldr	r1, [pc, #112]	; (8020df8 <__ieee754_pow+0xa48>)
 8020d88:	2000      	movs	r0, #0
 8020d8a:	f7ff bb30 	b.w	80203ee <__ieee754_pow+0x3e>
 8020d8e:	2000      	movs	r0, #0
 8020d90:	2100      	movs	r1, #0
 8020d92:	f7ff bb2c 	b.w	80203ee <__ieee754_pow+0x3e>
 8020d96:	4630      	mov	r0, r6
 8020d98:	4639      	mov	r1, r7
 8020d9a:	f7ff bb28 	b.w	80203ee <__ieee754_pow+0x3e>
 8020d9e:	9204      	str	r2, [sp, #16]
 8020da0:	f7ff bb7a 	b.w	8020498 <__ieee754_pow+0xe8>
 8020da4:	2300      	movs	r3, #0
 8020da6:	f7ff bb64 	b.w	8020472 <__ieee754_pow+0xc2>
 8020daa:	bf00      	nop
 8020dac:	f3af 8000 	nop.w
 8020db0:	00000000 	.word	0x00000000
 8020db4:	3fe62e43 	.word	0x3fe62e43
 8020db8:	fefa39ef 	.word	0xfefa39ef
 8020dbc:	3fe62e42 	.word	0x3fe62e42
 8020dc0:	0ca86c39 	.word	0x0ca86c39
 8020dc4:	be205c61 	.word	0xbe205c61
 8020dc8:	72bea4d0 	.word	0x72bea4d0
 8020dcc:	3e663769 	.word	0x3e663769
 8020dd0:	c5d26bf1 	.word	0xc5d26bf1
 8020dd4:	3ebbbd41 	.word	0x3ebbbd41
 8020dd8:	af25de2c 	.word	0xaf25de2c
 8020ddc:	3f11566a 	.word	0x3f11566a
 8020de0:	16bebd93 	.word	0x16bebd93
 8020de4:	3f66c16c 	.word	0x3f66c16c
 8020de8:	5555553e 	.word	0x5555553e
 8020dec:	3fc55555 	.word	0x3fc55555
 8020df0:	3fe00000 	.word	0x3fe00000
 8020df4:	000fffff 	.word	0x000fffff
 8020df8:	3ff00000 	.word	0x3ff00000
 8020dfc:	4090cbff 	.word	0x4090cbff
 8020e00:	3f6f3400 	.word	0x3f6f3400
 8020e04:	652b82fe 	.word	0x652b82fe
 8020e08:	3c971547 	.word	0x3c971547
 8020e0c:	00000000 	.word	0x00000000

08020e10 <__ieee754_rem_pio2>:
 8020e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e14:	ed2d 8b02 	vpush	{d8}
 8020e18:	ec55 4b10 	vmov	r4, r5, d0
 8020e1c:	4bca      	ldr	r3, [pc, #808]	; (8021148 <__ieee754_rem_pio2+0x338>)
 8020e1e:	b08b      	sub	sp, #44	; 0x2c
 8020e20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8020e24:	4598      	cmp	r8, r3
 8020e26:	4682      	mov	sl, r0
 8020e28:	9502      	str	r5, [sp, #8]
 8020e2a:	dc08      	bgt.n	8020e3e <__ieee754_rem_pio2+0x2e>
 8020e2c:	2200      	movs	r2, #0
 8020e2e:	2300      	movs	r3, #0
 8020e30:	ed80 0b00 	vstr	d0, [r0]
 8020e34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8020e38:	f04f 0b00 	mov.w	fp, #0
 8020e3c:	e028      	b.n	8020e90 <__ieee754_rem_pio2+0x80>
 8020e3e:	4bc3      	ldr	r3, [pc, #780]	; (802114c <__ieee754_rem_pio2+0x33c>)
 8020e40:	4598      	cmp	r8, r3
 8020e42:	dc78      	bgt.n	8020f36 <__ieee754_rem_pio2+0x126>
 8020e44:	9b02      	ldr	r3, [sp, #8]
 8020e46:	4ec2      	ldr	r6, [pc, #776]	; (8021150 <__ieee754_rem_pio2+0x340>)
 8020e48:	2b00      	cmp	r3, #0
 8020e4a:	ee10 0a10 	vmov	r0, s0
 8020e4e:	a3b0      	add	r3, pc, #704	; (adr r3, 8021110 <__ieee754_rem_pio2+0x300>)
 8020e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e54:	4629      	mov	r1, r5
 8020e56:	dd39      	ble.n	8020ecc <__ieee754_rem_pio2+0xbc>
 8020e58:	f7df fa20 	bl	800029c <__aeabi_dsub>
 8020e5c:	45b0      	cmp	r8, r6
 8020e5e:	4604      	mov	r4, r0
 8020e60:	460d      	mov	r5, r1
 8020e62:	d01b      	beq.n	8020e9c <__ieee754_rem_pio2+0x8c>
 8020e64:	a3ac      	add	r3, pc, #688	; (adr r3, 8021118 <__ieee754_rem_pio2+0x308>)
 8020e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e6a:	f7df fa17 	bl	800029c <__aeabi_dsub>
 8020e6e:	4602      	mov	r2, r0
 8020e70:	460b      	mov	r3, r1
 8020e72:	e9ca 2300 	strd	r2, r3, [sl]
 8020e76:	4620      	mov	r0, r4
 8020e78:	4629      	mov	r1, r5
 8020e7a:	f7df fa0f 	bl	800029c <__aeabi_dsub>
 8020e7e:	a3a6      	add	r3, pc, #664	; (adr r3, 8021118 <__ieee754_rem_pio2+0x308>)
 8020e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e84:	f7df fa0a 	bl	800029c <__aeabi_dsub>
 8020e88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8020e8c:	f04f 0b01 	mov.w	fp, #1
 8020e90:	4658      	mov	r0, fp
 8020e92:	b00b      	add	sp, #44	; 0x2c
 8020e94:	ecbd 8b02 	vpop	{d8}
 8020e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e9c:	a3a0      	add	r3, pc, #640	; (adr r3, 8021120 <__ieee754_rem_pio2+0x310>)
 8020e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ea2:	f7df f9fb 	bl	800029c <__aeabi_dsub>
 8020ea6:	a3a0      	add	r3, pc, #640	; (adr r3, 8021128 <__ieee754_rem_pio2+0x318>)
 8020ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eac:	4604      	mov	r4, r0
 8020eae:	460d      	mov	r5, r1
 8020eb0:	f7df f9f4 	bl	800029c <__aeabi_dsub>
 8020eb4:	4602      	mov	r2, r0
 8020eb6:	460b      	mov	r3, r1
 8020eb8:	e9ca 2300 	strd	r2, r3, [sl]
 8020ebc:	4620      	mov	r0, r4
 8020ebe:	4629      	mov	r1, r5
 8020ec0:	f7df f9ec 	bl	800029c <__aeabi_dsub>
 8020ec4:	a398      	add	r3, pc, #608	; (adr r3, 8021128 <__ieee754_rem_pio2+0x318>)
 8020ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eca:	e7db      	b.n	8020e84 <__ieee754_rem_pio2+0x74>
 8020ecc:	f7df f9e8 	bl	80002a0 <__adddf3>
 8020ed0:	45b0      	cmp	r8, r6
 8020ed2:	4604      	mov	r4, r0
 8020ed4:	460d      	mov	r5, r1
 8020ed6:	d016      	beq.n	8020f06 <__ieee754_rem_pio2+0xf6>
 8020ed8:	a38f      	add	r3, pc, #572	; (adr r3, 8021118 <__ieee754_rem_pio2+0x308>)
 8020eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ede:	f7df f9df 	bl	80002a0 <__adddf3>
 8020ee2:	4602      	mov	r2, r0
 8020ee4:	460b      	mov	r3, r1
 8020ee6:	e9ca 2300 	strd	r2, r3, [sl]
 8020eea:	4620      	mov	r0, r4
 8020eec:	4629      	mov	r1, r5
 8020eee:	f7df f9d5 	bl	800029c <__aeabi_dsub>
 8020ef2:	a389      	add	r3, pc, #548	; (adr r3, 8021118 <__ieee754_rem_pio2+0x308>)
 8020ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ef8:	f7df f9d2 	bl	80002a0 <__adddf3>
 8020efc:	f04f 3bff 	mov.w	fp, #4294967295
 8020f00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8020f04:	e7c4      	b.n	8020e90 <__ieee754_rem_pio2+0x80>
 8020f06:	a386      	add	r3, pc, #536	; (adr r3, 8021120 <__ieee754_rem_pio2+0x310>)
 8020f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f0c:	f7df f9c8 	bl	80002a0 <__adddf3>
 8020f10:	a385      	add	r3, pc, #532	; (adr r3, 8021128 <__ieee754_rem_pio2+0x318>)
 8020f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f16:	4604      	mov	r4, r0
 8020f18:	460d      	mov	r5, r1
 8020f1a:	f7df f9c1 	bl	80002a0 <__adddf3>
 8020f1e:	4602      	mov	r2, r0
 8020f20:	460b      	mov	r3, r1
 8020f22:	e9ca 2300 	strd	r2, r3, [sl]
 8020f26:	4620      	mov	r0, r4
 8020f28:	4629      	mov	r1, r5
 8020f2a:	f7df f9b7 	bl	800029c <__aeabi_dsub>
 8020f2e:	a37e      	add	r3, pc, #504	; (adr r3, 8021128 <__ieee754_rem_pio2+0x318>)
 8020f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f34:	e7e0      	b.n	8020ef8 <__ieee754_rem_pio2+0xe8>
 8020f36:	4b87      	ldr	r3, [pc, #540]	; (8021154 <__ieee754_rem_pio2+0x344>)
 8020f38:	4598      	cmp	r8, r3
 8020f3a:	f300 80d9 	bgt.w	80210f0 <__ieee754_rem_pio2+0x2e0>
 8020f3e:	f001 fb73 	bl	8022628 <fabs>
 8020f42:	ec55 4b10 	vmov	r4, r5, d0
 8020f46:	ee10 0a10 	vmov	r0, s0
 8020f4a:	a379      	add	r3, pc, #484	; (adr r3, 8021130 <__ieee754_rem_pio2+0x320>)
 8020f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f50:	4629      	mov	r1, r5
 8020f52:	f7df fb5b 	bl	800060c <__aeabi_dmul>
 8020f56:	4b80      	ldr	r3, [pc, #512]	; (8021158 <__ieee754_rem_pio2+0x348>)
 8020f58:	2200      	movs	r2, #0
 8020f5a:	f7df f9a1 	bl	80002a0 <__adddf3>
 8020f5e:	f7df fe05 	bl	8000b6c <__aeabi_d2iz>
 8020f62:	4683      	mov	fp, r0
 8020f64:	f7df fae8 	bl	8000538 <__aeabi_i2d>
 8020f68:	4602      	mov	r2, r0
 8020f6a:	460b      	mov	r3, r1
 8020f6c:	ec43 2b18 	vmov	d8, r2, r3
 8020f70:	a367      	add	r3, pc, #412	; (adr r3, 8021110 <__ieee754_rem_pio2+0x300>)
 8020f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f76:	f7df fb49 	bl	800060c <__aeabi_dmul>
 8020f7a:	4602      	mov	r2, r0
 8020f7c:	460b      	mov	r3, r1
 8020f7e:	4620      	mov	r0, r4
 8020f80:	4629      	mov	r1, r5
 8020f82:	f7df f98b 	bl	800029c <__aeabi_dsub>
 8020f86:	a364      	add	r3, pc, #400	; (adr r3, 8021118 <__ieee754_rem_pio2+0x308>)
 8020f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f8c:	4606      	mov	r6, r0
 8020f8e:	460f      	mov	r7, r1
 8020f90:	ec51 0b18 	vmov	r0, r1, d8
 8020f94:	f7df fb3a 	bl	800060c <__aeabi_dmul>
 8020f98:	f1bb 0f1f 	cmp.w	fp, #31
 8020f9c:	4604      	mov	r4, r0
 8020f9e:	460d      	mov	r5, r1
 8020fa0:	dc0d      	bgt.n	8020fbe <__ieee754_rem_pio2+0x1ae>
 8020fa2:	4b6e      	ldr	r3, [pc, #440]	; (802115c <__ieee754_rem_pio2+0x34c>)
 8020fa4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8020fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020fac:	4543      	cmp	r3, r8
 8020fae:	d006      	beq.n	8020fbe <__ieee754_rem_pio2+0x1ae>
 8020fb0:	4622      	mov	r2, r4
 8020fb2:	462b      	mov	r3, r5
 8020fb4:	4630      	mov	r0, r6
 8020fb6:	4639      	mov	r1, r7
 8020fb8:	f7df f970 	bl	800029c <__aeabi_dsub>
 8020fbc:	e00f      	b.n	8020fde <__ieee754_rem_pio2+0x1ce>
 8020fbe:	462b      	mov	r3, r5
 8020fc0:	4622      	mov	r2, r4
 8020fc2:	4630      	mov	r0, r6
 8020fc4:	4639      	mov	r1, r7
 8020fc6:	f7df f969 	bl	800029c <__aeabi_dsub>
 8020fca:	ea4f 5328 	mov.w	r3, r8, asr #20
 8020fce:	9303      	str	r3, [sp, #12]
 8020fd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8020fd4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8020fd8:	f1b8 0f10 	cmp.w	r8, #16
 8020fdc:	dc02      	bgt.n	8020fe4 <__ieee754_rem_pio2+0x1d4>
 8020fde:	e9ca 0100 	strd	r0, r1, [sl]
 8020fe2:	e039      	b.n	8021058 <__ieee754_rem_pio2+0x248>
 8020fe4:	a34e      	add	r3, pc, #312	; (adr r3, 8021120 <__ieee754_rem_pio2+0x310>)
 8020fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fea:	ec51 0b18 	vmov	r0, r1, d8
 8020fee:	f7df fb0d 	bl	800060c <__aeabi_dmul>
 8020ff2:	4604      	mov	r4, r0
 8020ff4:	460d      	mov	r5, r1
 8020ff6:	4602      	mov	r2, r0
 8020ff8:	460b      	mov	r3, r1
 8020ffa:	4630      	mov	r0, r6
 8020ffc:	4639      	mov	r1, r7
 8020ffe:	f7df f94d 	bl	800029c <__aeabi_dsub>
 8021002:	4602      	mov	r2, r0
 8021004:	460b      	mov	r3, r1
 8021006:	4680      	mov	r8, r0
 8021008:	4689      	mov	r9, r1
 802100a:	4630      	mov	r0, r6
 802100c:	4639      	mov	r1, r7
 802100e:	f7df f945 	bl	800029c <__aeabi_dsub>
 8021012:	4622      	mov	r2, r4
 8021014:	462b      	mov	r3, r5
 8021016:	f7df f941 	bl	800029c <__aeabi_dsub>
 802101a:	a343      	add	r3, pc, #268	; (adr r3, 8021128 <__ieee754_rem_pio2+0x318>)
 802101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021020:	4604      	mov	r4, r0
 8021022:	460d      	mov	r5, r1
 8021024:	ec51 0b18 	vmov	r0, r1, d8
 8021028:	f7df faf0 	bl	800060c <__aeabi_dmul>
 802102c:	4622      	mov	r2, r4
 802102e:	462b      	mov	r3, r5
 8021030:	f7df f934 	bl	800029c <__aeabi_dsub>
 8021034:	4602      	mov	r2, r0
 8021036:	460b      	mov	r3, r1
 8021038:	4604      	mov	r4, r0
 802103a:	460d      	mov	r5, r1
 802103c:	4640      	mov	r0, r8
 802103e:	4649      	mov	r1, r9
 8021040:	f7df f92c 	bl	800029c <__aeabi_dsub>
 8021044:	9a03      	ldr	r2, [sp, #12]
 8021046:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802104a:	1ad3      	subs	r3, r2, r3
 802104c:	2b31      	cmp	r3, #49	; 0x31
 802104e:	dc24      	bgt.n	802109a <__ieee754_rem_pio2+0x28a>
 8021050:	e9ca 0100 	strd	r0, r1, [sl]
 8021054:	4646      	mov	r6, r8
 8021056:	464f      	mov	r7, r9
 8021058:	e9da 8900 	ldrd	r8, r9, [sl]
 802105c:	4630      	mov	r0, r6
 802105e:	4642      	mov	r2, r8
 8021060:	464b      	mov	r3, r9
 8021062:	4639      	mov	r1, r7
 8021064:	f7df f91a 	bl	800029c <__aeabi_dsub>
 8021068:	462b      	mov	r3, r5
 802106a:	4622      	mov	r2, r4
 802106c:	f7df f916 	bl	800029c <__aeabi_dsub>
 8021070:	9b02      	ldr	r3, [sp, #8]
 8021072:	2b00      	cmp	r3, #0
 8021074:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021078:	f6bf af0a 	bge.w	8020e90 <__ieee754_rem_pio2+0x80>
 802107c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8021080:	f8ca 3004 	str.w	r3, [sl, #4]
 8021084:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021088:	f8ca 8000 	str.w	r8, [sl]
 802108c:	f8ca 0008 	str.w	r0, [sl, #8]
 8021090:	f8ca 300c 	str.w	r3, [sl, #12]
 8021094:	f1cb 0b00 	rsb	fp, fp, #0
 8021098:	e6fa      	b.n	8020e90 <__ieee754_rem_pio2+0x80>
 802109a:	a327      	add	r3, pc, #156	; (adr r3, 8021138 <__ieee754_rem_pio2+0x328>)
 802109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210a0:	ec51 0b18 	vmov	r0, r1, d8
 80210a4:	f7df fab2 	bl	800060c <__aeabi_dmul>
 80210a8:	4604      	mov	r4, r0
 80210aa:	460d      	mov	r5, r1
 80210ac:	4602      	mov	r2, r0
 80210ae:	460b      	mov	r3, r1
 80210b0:	4640      	mov	r0, r8
 80210b2:	4649      	mov	r1, r9
 80210b4:	f7df f8f2 	bl	800029c <__aeabi_dsub>
 80210b8:	4602      	mov	r2, r0
 80210ba:	460b      	mov	r3, r1
 80210bc:	4606      	mov	r6, r0
 80210be:	460f      	mov	r7, r1
 80210c0:	4640      	mov	r0, r8
 80210c2:	4649      	mov	r1, r9
 80210c4:	f7df f8ea 	bl	800029c <__aeabi_dsub>
 80210c8:	4622      	mov	r2, r4
 80210ca:	462b      	mov	r3, r5
 80210cc:	f7df f8e6 	bl	800029c <__aeabi_dsub>
 80210d0:	a31b      	add	r3, pc, #108	; (adr r3, 8021140 <__ieee754_rem_pio2+0x330>)
 80210d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210d6:	4604      	mov	r4, r0
 80210d8:	460d      	mov	r5, r1
 80210da:	ec51 0b18 	vmov	r0, r1, d8
 80210de:	f7df fa95 	bl	800060c <__aeabi_dmul>
 80210e2:	4622      	mov	r2, r4
 80210e4:	462b      	mov	r3, r5
 80210e6:	f7df f8d9 	bl	800029c <__aeabi_dsub>
 80210ea:	4604      	mov	r4, r0
 80210ec:	460d      	mov	r5, r1
 80210ee:	e75f      	b.n	8020fb0 <__ieee754_rem_pio2+0x1a0>
 80210f0:	4b1b      	ldr	r3, [pc, #108]	; (8021160 <__ieee754_rem_pio2+0x350>)
 80210f2:	4598      	cmp	r8, r3
 80210f4:	dd36      	ble.n	8021164 <__ieee754_rem_pio2+0x354>
 80210f6:	ee10 2a10 	vmov	r2, s0
 80210fa:	462b      	mov	r3, r5
 80210fc:	4620      	mov	r0, r4
 80210fe:	4629      	mov	r1, r5
 8021100:	f7df f8cc 	bl	800029c <__aeabi_dsub>
 8021104:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021108:	e9ca 0100 	strd	r0, r1, [sl]
 802110c:	e694      	b.n	8020e38 <__ieee754_rem_pio2+0x28>
 802110e:	bf00      	nop
 8021110:	54400000 	.word	0x54400000
 8021114:	3ff921fb 	.word	0x3ff921fb
 8021118:	1a626331 	.word	0x1a626331
 802111c:	3dd0b461 	.word	0x3dd0b461
 8021120:	1a600000 	.word	0x1a600000
 8021124:	3dd0b461 	.word	0x3dd0b461
 8021128:	2e037073 	.word	0x2e037073
 802112c:	3ba3198a 	.word	0x3ba3198a
 8021130:	6dc9c883 	.word	0x6dc9c883
 8021134:	3fe45f30 	.word	0x3fe45f30
 8021138:	2e000000 	.word	0x2e000000
 802113c:	3ba3198a 	.word	0x3ba3198a
 8021140:	252049c1 	.word	0x252049c1
 8021144:	397b839a 	.word	0x397b839a
 8021148:	3fe921fb 	.word	0x3fe921fb
 802114c:	4002d97b 	.word	0x4002d97b
 8021150:	3ff921fb 	.word	0x3ff921fb
 8021154:	413921fb 	.word	0x413921fb
 8021158:	3fe00000 	.word	0x3fe00000
 802115c:	0804bc60 	.word	0x0804bc60
 8021160:	7fefffff 	.word	0x7fefffff
 8021164:	ea4f 5428 	mov.w	r4, r8, asr #20
 8021168:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 802116c:	ee10 0a10 	vmov	r0, s0
 8021170:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8021174:	ee10 6a10 	vmov	r6, s0
 8021178:	460f      	mov	r7, r1
 802117a:	f7df fcf7 	bl	8000b6c <__aeabi_d2iz>
 802117e:	f7df f9db 	bl	8000538 <__aeabi_i2d>
 8021182:	4602      	mov	r2, r0
 8021184:	460b      	mov	r3, r1
 8021186:	4630      	mov	r0, r6
 8021188:	4639      	mov	r1, r7
 802118a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802118e:	f7df f885 	bl	800029c <__aeabi_dsub>
 8021192:	4b23      	ldr	r3, [pc, #140]	; (8021220 <__ieee754_rem_pio2+0x410>)
 8021194:	2200      	movs	r2, #0
 8021196:	f7df fa39 	bl	800060c <__aeabi_dmul>
 802119a:	460f      	mov	r7, r1
 802119c:	4606      	mov	r6, r0
 802119e:	f7df fce5 	bl	8000b6c <__aeabi_d2iz>
 80211a2:	f7df f9c9 	bl	8000538 <__aeabi_i2d>
 80211a6:	4602      	mov	r2, r0
 80211a8:	460b      	mov	r3, r1
 80211aa:	4630      	mov	r0, r6
 80211ac:	4639      	mov	r1, r7
 80211ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80211b2:	f7df f873 	bl	800029c <__aeabi_dsub>
 80211b6:	4b1a      	ldr	r3, [pc, #104]	; (8021220 <__ieee754_rem_pio2+0x410>)
 80211b8:	2200      	movs	r2, #0
 80211ba:	f7df fa27 	bl	800060c <__aeabi_dmul>
 80211be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80211c2:	ad04      	add	r5, sp, #16
 80211c4:	f04f 0803 	mov.w	r8, #3
 80211c8:	46a9      	mov	r9, r5
 80211ca:	2600      	movs	r6, #0
 80211cc:	2700      	movs	r7, #0
 80211ce:	4632      	mov	r2, r6
 80211d0:	463b      	mov	r3, r7
 80211d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80211d6:	46c3      	mov	fp, r8
 80211d8:	3d08      	subs	r5, #8
 80211da:	f108 38ff 	add.w	r8, r8, #4294967295
 80211de:	f7df fc7d 	bl	8000adc <__aeabi_dcmpeq>
 80211e2:	2800      	cmp	r0, #0
 80211e4:	d1f3      	bne.n	80211ce <__ieee754_rem_pio2+0x3be>
 80211e6:	4b0f      	ldr	r3, [pc, #60]	; (8021224 <__ieee754_rem_pio2+0x414>)
 80211e8:	9301      	str	r3, [sp, #4]
 80211ea:	2302      	movs	r3, #2
 80211ec:	9300      	str	r3, [sp, #0]
 80211ee:	4622      	mov	r2, r4
 80211f0:	465b      	mov	r3, fp
 80211f2:	4651      	mov	r1, sl
 80211f4:	4648      	mov	r0, r9
 80211f6:	f000 fbab 	bl	8021950 <__kernel_rem_pio2>
 80211fa:	9b02      	ldr	r3, [sp, #8]
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	4683      	mov	fp, r0
 8021200:	f6bf ae46 	bge.w	8020e90 <__ieee754_rem_pio2+0x80>
 8021204:	e9da 2100 	ldrd	r2, r1, [sl]
 8021208:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802120c:	e9ca 2300 	strd	r2, r3, [sl]
 8021210:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8021214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021218:	e9ca 2302 	strd	r2, r3, [sl, #8]
 802121c:	e73a      	b.n	8021094 <__ieee754_rem_pio2+0x284>
 802121e:	bf00      	nop
 8021220:	41700000 	.word	0x41700000
 8021224:	0804bce0 	.word	0x0804bce0

08021228 <__ieee754_sqrt>:
 8021228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802122c:	ec55 4b10 	vmov	r4, r5, d0
 8021230:	4e55      	ldr	r6, [pc, #340]	; (8021388 <__ieee754_sqrt+0x160>)
 8021232:	43ae      	bics	r6, r5
 8021234:	ee10 0a10 	vmov	r0, s0
 8021238:	ee10 3a10 	vmov	r3, s0
 802123c:	462a      	mov	r2, r5
 802123e:	4629      	mov	r1, r5
 8021240:	d110      	bne.n	8021264 <__ieee754_sqrt+0x3c>
 8021242:	ee10 2a10 	vmov	r2, s0
 8021246:	462b      	mov	r3, r5
 8021248:	f7df f9e0 	bl	800060c <__aeabi_dmul>
 802124c:	4602      	mov	r2, r0
 802124e:	460b      	mov	r3, r1
 8021250:	4620      	mov	r0, r4
 8021252:	4629      	mov	r1, r5
 8021254:	f7df f824 	bl	80002a0 <__adddf3>
 8021258:	4604      	mov	r4, r0
 802125a:	460d      	mov	r5, r1
 802125c:	ec45 4b10 	vmov	d0, r4, r5
 8021260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021264:	2d00      	cmp	r5, #0
 8021266:	dc10      	bgt.n	802128a <__ieee754_sqrt+0x62>
 8021268:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802126c:	4330      	orrs	r0, r6
 802126e:	d0f5      	beq.n	802125c <__ieee754_sqrt+0x34>
 8021270:	b15d      	cbz	r5, 802128a <__ieee754_sqrt+0x62>
 8021272:	ee10 2a10 	vmov	r2, s0
 8021276:	462b      	mov	r3, r5
 8021278:	ee10 0a10 	vmov	r0, s0
 802127c:	f7df f80e 	bl	800029c <__aeabi_dsub>
 8021280:	4602      	mov	r2, r0
 8021282:	460b      	mov	r3, r1
 8021284:	f7df faec 	bl	8000860 <__aeabi_ddiv>
 8021288:	e7e6      	b.n	8021258 <__ieee754_sqrt+0x30>
 802128a:	1512      	asrs	r2, r2, #20
 802128c:	d074      	beq.n	8021378 <__ieee754_sqrt+0x150>
 802128e:	07d4      	lsls	r4, r2, #31
 8021290:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8021294:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8021298:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802129c:	bf5e      	ittt	pl
 802129e:	0fda      	lsrpl	r2, r3, #31
 80212a0:	005b      	lslpl	r3, r3, #1
 80212a2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80212a6:	2400      	movs	r4, #0
 80212a8:	0fda      	lsrs	r2, r3, #31
 80212aa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80212ae:	107f      	asrs	r7, r7, #1
 80212b0:	005b      	lsls	r3, r3, #1
 80212b2:	2516      	movs	r5, #22
 80212b4:	4620      	mov	r0, r4
 80212b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80212ba:	1886      	adds	r6, r0, r2
 80212bc:	428e      	cmp	r6, r1
 80212be:	bfde      	ittt	le
 80212c0:	1b89      	suble	r1, r1, r6
 80212c2:	18b0      	addle	r0, r6, r2
 80212c4:	18a4      	addle	r4, r4, r2
 80212c6:	0049      	lsls	r1, r1, #1
 80212c8:	3d01      	subs	r5, #1
 80212ca:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80212ce:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80212d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80212d6:	d1f0      	bne.n	80212ba <__ieee754_sqrt+0x92>
 80212d8:	462a      	mov	r2, r5
 80212da:	f04f 0e20 	mov.w	lr, #32
 80212de:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80212e2:	4281      	cmp	r1, r0
 80212e4:	eb06 0c05 	add.w	ip, r6, r5
 80212e8:	dc02      	bgt.n	80212f0 <__ieee754_sqrt+0xc8>
 80212ea:	d113      	bne.n	8021314 <__ieee754_sqrt+0xec>
 80212ec:	459c      	cmp	ip, r3
 80212ee:	d811      	bhi.n	8021314 <__ieee754_sqrt+0xec>
 80212f0:	f1bc 0f00 	cmp.w	ip, #0
 80212f4:	eb0c 0506 	add.w	r5, ip, r6
 80212f8:	da43      	bge.n	8021382 <__ieee754_sqrt+0x15a>
 80212fa:	2d00      	cmp	r5, #0
 80212fc:	db41      	blt.n	8021382 <__ieee754_sqrt+0x15a>
 80212fe:	f100 0801 	add.w	r8, r0, #1
 8021302:	1a09      	subs	r1, r1, r0
 8021304:	459c      	cmp	ip, r3
 8021306:	bf88      	it	hi
 8021308:	f101 31ff 	addhi.w	r1, r1, #4294967295
 802130c:	eba3 030c 	sub.w	r3, r3, ip
 8021310:	4432      	add	r2, r6
 8021312:	4640      	mov	r0, r8
 8021314:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8021318:	f1be 0e01 	subs.w	lr, lr, #1
 802131c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8021320:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021324:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8021328:	d1db      	bne.n	80212e2 <__ieee754_sqrt+0xba>
 802132a:	430b      	orrs	r3, r1
 802132c:	d006      	beq.n	802133c <__ieee754_sqrt+0x114>
 802132e:	1c50      	adds	r0, r2, #1
 8021330:	bf13      	iteet	ne
 8021332:	3201      	addne	r2, #1
 8021334:	3401      	addeq	r4, #1
 8021336:	4672      	moveq	r2, lr
 8021338:	f022 0201 	bicne.w	r2, r2, #1
 802133c:	1063      	asrs	r3, r4, #1
 802133e:	0852      	lsrs	r2, r2, #1
 8021340:	07e1      	lsls	r1, r4, #31
 8021342:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8021346:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802134a:	bf48      	it	mi
 802134c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8021350:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8021354:	4614      	mov	r4, r2
 8021356:	e781      	b.n	802125c <__ieee754_sqrt+0x34>
 8021358:	0ad9      	lsrs	r1, r3, #11
 802135a:	3815      	subs	r0, #21
 802135c:	055b      	lsls	r3, r3, #21
 802135e:	2900      	cmp	r1, #0
 8021360:	d0fa      	beq.n	8021358 <__ieee754_sqrt+0x130>
 8021362:	02cd      	lsls	r5, r1, #11
 8021364:	d50a      	bpl.n	802137c <__ieee754_sqrt+0x154>
 8021366:	f1c2 0420 	rsb	r4, r2, #32
 802136a:	fa23 f404 	lsr.w	r4, r3, r4
 802136e:	1e55      	subs	r5, r2, #1
 8021370:	4093      	lsls	r3, r2
 8021372:	4321      	orrs	r1, r4
 8021374:	1b42      	subs	r2, r0, r5
 8021376:	e78a      	b.n	802128e <__ieee754_sqrt+0x66>
 8021378:	4610      	mov	r0, r2
 802137a:	e7f0      	b.n	802135e <__ieee754_sqrt+0x136>
 802137c:	0049      	lsls	r1, r1, #1
 802137e:	3201      	adds	r2, #1
 8021380:	e7ef      	b.n	8021362 <__ieee754_sqrt+0x13a>
 8021382:	4680      	mov	r8, r0
 8021384:	e7bd      	b.n	8021302 <__ieee754_sqrt+0xda>
 8021386:	bf00      	nop
 8021388:	7ff00000 	.word	0x7ff00000

0802138c <__ieee754_expf>:
 802138c:	ee10 2a10 	vmov	r2, s0
 8021390:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8021394:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8021398:	d902      	bls.n	80213a0 <__ieee754_expf+0x14>
 802139a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802139e:	4770      	bx	lr
 80213a0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80213a4:	d106      	bne.n	80213b4 <__ieee754_expf+0x28>
 80213a6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80214e0 <__ieee754_expf+0x154>
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	bf18      	it	ne
 80213ae:	eeb0 0a67 	vmovne.f32	s0, s15
 80213b2:	4770      	bx	lr
 80213b4:	484b      	ldr	r0, [pc, #300]	; (80214e4 <__ieee754_expf+0x158>)
 80213b6:	4282      	cmp	r2, r0
 80213b8:	dd02      	ble.n	80213c0 <__ieee754_expf+0x34>
 80213ba:	2000      	movs	r0, #0
 80213bc:	f001 b92e 	b.w	802261c <__math_oflowf>
 80213c0:	2a00      	cmp	r2, #0
 80213c2:	da05      	bge.n	80213d0 <__ieee754_expf+0x44>
 80213c4:	4a48      	ldr	r2, [pc, #288]	; (80214e8 <__ieee754_expf+0x15c>)
 80213c6:	4291      	cmp	r1, r2
 80213c8:	d902      	bls.n	80213d0 <__ieee754_expf+0x44>
 80213ca:	2000      	movs	r0, #0
 80213cc:	f001 b920 	b.w	8022610 <__math_uflowf>
 80213d0:	4a46      	ldr	r2, [pc, #280]	; (80214ec <__ieee754_expf+0x160>)
 80213d2:	4291      	cmp	r1, r2
 80213d4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80213d8:	d952      	bls.n	8021480 <__ieee754_expf+0xf4>
 80213da:	4a45      	ldr	r2, [pc, #276]	; (80214f0 <__ieee754_expf+0x164>)
 80213dc:	4291      	cmp	r1, r2
 80213de:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80213e2:	d834      	bhi.n	802144e <__ieee754_expf+0xc2>
 80213e4:	4943      	ldr	r1, [pc, #268]	; (80214f4 <__ieee754_expf+0x168>)
 80213e6:	4411      	add	r1, r2
 80213e8:	ed91 7a00 	vldr	s14, [r1]
 80213ec:	4942      	ldr	r1, [pc, #264]	; (80214f8 <__ieee754_expf+0x16c>)
 80213ee:	440a      	add	r2, r1
 80213f0:	edd2 7a00 	vldr	s15, [r2]
 80213f4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80213f8:	f1c3 0201 	rsb	r2, r3, #1
 80213fc:	1ad2      	subs	r2, r2, r3
 80213fe:	ee37 0a67 	vsub.f32	s0, s14, s15
 8021402:	ee20 6a00 	vmul.f32	s12, s0, s0
 8021406:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80214fc <__ieee754_expf+0x170>
 802140a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8021500 <__ieee754_expf+0x174>
 802140e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8021412:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8021504 <__ieee754_expf+0x178>
 8021416:	eea6 5a86 	vfma.f32	s10, s13, s12
 802141a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8021508 <__ieee754_expf+0x17c>
 802141e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8021422:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 802150c <__ieee754_expf+0x180>
 8021426:	eea6 5a86 	vfma.f32	s10, s13, s12
 802142a:	eef0 6a40 	vmov.f32	s13, s0
 802142e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8021432:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8021436:	ee20 5a26 	vmul.f32	s10, s0, s13
 802143a:	bb92      	cbnz	r2, 80214a2 <__ieee754_expf+0x116>
 802143c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8021440:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8021444:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8021448:	ee35 0ac0 	vsub.f32	s0, s11, s0
 802144c:	4770      	bx	lr
 802144e:	4b30      	ldr	r3, [pc, #192]	; (8021510 <__ieee754_expf+0x184>)
 8021450:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8021514 <__ieee754_expf+0x188>
 8021454:	eddf 6a30 	vldr	s13, [pc, #192]	; 8021518 <__ieee754_expf+0x18c>
 8021458:	4413      	add	r3, r2
 802145a:	edd3 7a00 	vldr	s15, [r3]
 802145e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8021462:	eeb0 7a40 	vmov.f32	s14, s0
 8021466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802146a:	ee17 2a90 	vmov	r2, s15
 802146e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021472:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8021476:	eddf 6a29 	vldr	s13, [pc, #164]	; 802151c <__ieee754_expf+0x190>
 802147a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802147e:	e7be      	b.n	80213fe <__ieee754_expf+0x72>
 8021480:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8021484:	d20b      	bcs.n	802149e <__ieee754_expf+0x112>
 8021486:	eddf 6a26 	vldr	s13, [pc, #152]	; 8021520 <__ieee754_expf+0x194>
 802148a:	ee70 6a26 	vadd.f32	s13, s0, s13
 802148e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8021492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021496:	dd02      	ble.n	802149e <__ieee754_expf+0x112>
 8021498:	ee30 0a25 	vadd.f32	s0, s0, s11
 802149c:	4770      	bx	lr
 802149e:	2200      	movs	r2, #0
 80214a0:	e7af      	b.n	8021402 <__ieee754_expf+0x76>
 80214a2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80214a6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80214aa:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80214ae:	bfb8      	it	lt
 80214b0:	3264      	addlt	r2, #100	; 0x64
 80214b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80214b6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80214ba:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80214be:	ee17 3a90 	vmov	r3, s15
 80214c2:	bfab      	itete	ge
 80214c4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80214c8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80214cc:	ee00 3a10 	vmovge	s0, r3
 80214d0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8021524 <__ieee754_expf+0x198>
 80214d4:	bfbc      	itt	lt
 80214d6:	ee00 3a10 	vmovlt	s0, r3
 80214da:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80214de:	4770      	bx	lr
 80214e0:	00000000 	.word	0x00000000
 80214e4:	42b17217 	.word	0x42b17217
 80214e8:	42cff1b5 	.word	0x42cff1b5
 80214ec:	3eb17218 	.word	0x3eb17218
 80214f0:	3f851591 	.word	0x3f851591
 80214f4:	0804bdf0 	.word	0x0804bdf0
 80214f8:	0804bdf8 	.word	0x0804bdf8
 80214fc:	3331bb4c 	.word	0x3331bb4c
 8021500:	b5ddea0e 	.word	0xb5ddea0e
 8021504:	388ab355 	.word	0x388ab355
 8021508:	bb360b61 	.word	0xbb360b61
 802150c:	3e2aaaab 	.word	0x3e2aaaab
 8021510:	0804bde8 	.word	0x0804bde8
 8021514:	3fb8aa3b 	.word	0x3fb8aa3b
 8021518:	3f317180 	.word	0x3f317180
 802151c:	3717f7d1 	.word	0x3717f7d1
 8021520:	7149f2ca 	.word	0x7149f2ca
 8021524:	0d800000 	.word	0x0d800000

08021528 <__ieee754_logf>:
 8021528:	ee10 3a10 	vmov	r3, s0
 802152c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8021530:	d106      	bne.n	8021540 <__ieee754_logf+0x18>
 8021532:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80216c8 <__ieee754_logf+0x1a0>
 8021536:	eddf 7a65 	vldr	s15, [pc, #404]	; 80216cc <__ieee754_logf+0x1a4>
 802153a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 802153e:	4770      	bx	lr
 8021540:	2b00      	cmp	r3, #0
 8021542:	da02      	bge.n	802154a <__ieee754_logf+0x22>
 8021544:	ee30 7a40 	vsub.f32	s14, s0, s0
 8021548:	e7f5      	b.n	8021536 <__ieee754_logf+0xe>
 802154a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802154e:	db02      	blt.n	8021556 <__ieee754_logf+0x2e>
 8021550:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021554:	4770      	bx	lr
 8021556:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802155a:	bfb8      	it	lt
 802155c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80216d0 <__ieee754_logf+0x1a8>
 8021560:	485c      	ldr	r0, [pc, #368]	; (80216d4 <__ieee754_logf+0x1ac>)
 8021562:	bfbe      	ittt	lt
 8021564:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8021568:	f06f 0118 	mvnlt.w	r1, #24
 802156c:	ee17 3a90 	vmovlt	r3, s15
 8021570:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8021574:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8021578:	4418      	add	r0, r3
 802157a:	bfa8      	it	ge
 802157c:	2100      	movge	r1, #0
 802157e:	3a7f      	subs	r2, #127	; 0x7f
 8021580:	440a      	add	r2, r1
 8021582:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8021586:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 802158a:	4319      	orrs	r1, r3
 802158c:	ee00 1a10 	vmov	s0, r1
 8021590:	4951      	ldr	r1, [pc, #324]	; (80216d8 <__ieee754_logf+0x1b0>)
 8021592:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8021596:	f103 000f 	add.w	r0, r3, #15
 802159a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802159e:	4001      	ands	r1, r0
 80215a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80215a4:	bb89      	cbnz	r1, 802160a <__ieee754_logf+0xe2>
 80215a6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80215aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215ae:	d10f      	bne.n	80215d0 <__ieee754_logf+0xa8>
 80215b0:	2a00      	cmp	r2, #0
 80215b2:	f000 8085 	beq.w	80216c0 <__ieee754_logf+0x198>
 80215b6:	ee07 2a90 	vmov	s15, r2
 80215ba:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80216dc <__ieee754_logf+0x1b4>
 80215be:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80216e0 <__ieee754_logf+0x1b8>
 80215c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80215c6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80215ca:	eea7 0a87 	vfma.f32	s0, s15, s14
 80215ce:	4770      	bx	lr
 80215d0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80216e4 <__ieee754_logf+0x1bc>
 80215d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80215d8:	eee0 7a66 	vfms.f32	s15, s0, s13
 80215dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80215e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80215e4:	b912      	cbnz	r2, 80215ec <__ieee754_logf+0xc4>
 80215e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80215ea:	4770      	bx	lr
 80215ec:	ee07 2a90 	vmov	s15, r2
 80215f0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80216dc <__ieee754_logf+0x1b4>
 80215f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80215f8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80215fc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8021600:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80216e0 <__ieee754_logf+0x1b8>
 8021604:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8021608:	4770      	bx	lr
 802160a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802160e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8021612:	eddf 5a35 	vldr	s11, [pc, #212]	; 80216e8 <__ieee754_logf+0x1c0>
 8021616:	eddf 4a35 	vldr	s9, [pc, #212]	; 80216ec <__ieee754_logf+0x1c4>
 802161a:	4935      	ldr	r1, [pc, #212]	; (80216f0 <__ieee754_logf+0x1c8>)
 802161c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8021620:	4419      	add	r1, r3
 8021622:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8021626:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802162a:	430b      	orrs	r3, r1
 802162c:	2b00      	cmp	r3, #0
 802162e:	ee07 2a90 	vmov	s15, r2
 8021632:	ee26 5a06 	vmul.f32	s10, s12, s12
 8021636:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802163a:	ee25 7a05 	vmul.f32	s14, s10, s10
 802163e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80216f4 <__ieee754_logf+0x1cc>
 8021642:	eee7 7a25 	vfma.f32	s15, s14, s11
 8021646:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80216f8 <__ieee754_logf+0x1d0>
 802164a:	eee7 5a87 	vfma.f32	s11, s15, s14
 802164e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80216fc <__ieee754_logf+0x1d4>
 8021652:	eee7 7a24 	vfma.f32	s15, s14, s9
 8021656:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8021700 <__ieee754_logf+0x1d8>
 802165a:	eee7 4a87 	vfma.f32	s9, s15, s14
 802165e:	eddf 7a29 	vldr	s15, [pc, #164]	; 8021704 <__ieee754_logf+0x1dc>
 8021662:	eee4 7a87 	vfma.f32	s15, s9, s14
 8021666:	ee67 7a85 	vmul.f32	s15, s15, s10
 802166a:	eee5 7a87 	vfma.f32	s15, s11, s14
 802166e:	dd1c      	ble.n	80216aa <__ieee754_logf+0x182>
 8021670:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021674:	ee20 7a07 	vmul.f32	s14, s0, s14
 8021678:	ee27 7a00 	vmul.f32	s14, s14, s0
 802167c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021680:	ee67 7a86 	vmul.f32	s15, s15, s12
 8021684:	b922      	cbnz	r2, 8021690 <__ieee754_logf+0x168>
 8021686:	ee77 7a67 	vsub.f32	s15, s14, s15
 802168a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802168e:	4770      	bx	lr
 8021690:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80216dc <__ieee754_logf+0x1b4>
 8021694:	eee6 7a86 	vfma.f32	s15, s13, s12
 8021698:	ee77 7a67 	vsub.f32	s15, s14, s15
 802169c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80216a0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80216e0 <__ieee754_logf+0x1b8>
 80216a4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80216a8:	4770      	bx	lr
 80216aa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80216ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80216b2:	2a00      	cmp	r2, #0
 80216b4:	d0e9      	beq.n	802168a <__ieee754_logf+0x162>
 80216b6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80216dc <__ieee754_logf+0x1b4>
 80216ba:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80216be:	e7ed      	b.n	802169c <__ieee754_logf+0x174>
 80216c0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80216cc <__ieee754_logf+0x1a4>
 80216c4:	4770      	bx	lr
 80216c6:	bf00      	nop
 80216c8:	cc000000 	.word	0xcc000000
 80216cc:	00000000 	.word	0x00000000
 80216d0:	4c000000 	.word	0x4c000000
 80216d4:	004afb20 	.word	0x004afb20
 80216d8:	007ffff0 	.word	0x007ffff0
 80216dc:	3717f7d1 	.word	0x3717f7d1
 80216e0:	3f317180 	.word	0x3f317180
 80216e4:	3eaaaaab 	.word	0x3eaaaaab
 80216e8:	3e1cd04f 	.word	0x3e1cd04f
 80216ec:	3e178897 	.word	0x3e178897
 80216f0:	ffcf5c30 	.word	0xffcf5c30
 80216f4:	3e638e29 	.word	0x3e638e29
 80216f8:	3ecccccd 	.word	0x3ecccccd
 80216fc:	3e3a3325 	.word	0x3e3a3325
 8021700:	3e924925 	.word	0x3e924925
 8021704:	3f2aaaab 	.word	0x3f2aaaab

08021708 <__ieee754_log10f>:
 8021708:	b508      	push	{r3, lr}
 802170a:	ee10 2a10 	vmov	r2, s0
 802170e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8021712:	ed2d 8b02 	vpush	{d8}
 8021716:	d108      	bne.n	802172a <__ieee754_log10f+0x22>
 8021718:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80217a0 <__ieee754_log10f+0x98>
 802171c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80217a4 <__ieee754_log10f+0x9c>
 8021720:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8021724:	ecbd 8b02 	vpop	{d8}
 8021728:	bd08      	pop	{r3, pc}
 802172a:	2a00      	cmp	r2, #0
 802172c:	da02      	bge.n	8021734 <__ieee754_log10f+0x2c>
 802172e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8021732:	e7f3      	b.n	802171c <__ieee754_log10f+0x14>
 8021734:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8021738:	db02      	blt.n	8021740 <__ieee754_log10f+0x38>
 802173a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802173e:	e7f1      	b.n	8021724 <__ieee754_log10f+0x1c>
 8021740:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8021744:	bfbf      	itttt	lt
 8021746:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80217a8 <__ieee754_log10f+0xa0>
 802174a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 802174e:	f06f 0118 	mvnlt.w	r1, #24
 8021752:	ee17 2a90 	vmovlt	r2, s15
 8021756:	ea4f 53e2 	mov.w	r3, r2, asr #23
 802175a:	bfa8      	it	ge
 802175c:	2100      	movge	r1, #0
 802175e:	3b7f      	subs	r3, #127	; 0x7f
 8021760:	440b      	add	r3, r1
 8021762:	0fd9      	lsrs	r1, r3, #31
 8021764:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8021768:	ee07 3a90 	vmov	s15, r3
 802176c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8021770:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8021774:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8021778:	ee00 3a10 	vmov	s0, r3
 802177c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8021780:	f7ff fed2 	bl	8021528 <__ieee754_logf>
 8021784:	eddf 7a09 	vldr	s15, [pc, #36]	; 80217ac <__ieee754_log10f+0xa4>
 8021788:	ee20 0a27 	vmul.f32	s0, s0, s15
 802178c:	eddf 7a08 	vldr	s15, [pc, #32]	; 80217b0 <__ieee754_log10f+0xa8>
 8021790:	eea8 0a27 	vfma.f32	s0, s16, s15
 8021794:	eddf 7a07 	vldr	s15, [pc, #28]	; 80217b4 <__ieee754_log10f+0xac>
 8021798:	eea8 0a27 	vfma.f32	s0, s16, s15
 802179c:	e7c2      	b.n	8021724 <__ieee754_log10f+0x1c>
 802179e:	bf00      	nop
 80217a0:	cc000000 	.word	0xcc000000
 80217a4:	00000000 	.word	0x00000000
 80217a8:	4c000000 	.word	0x4c000000
 80217ac:	3ede5bd9 	.word	0x3ede5bd9
 80217b0:	355427db 	.word	0x355427db
 80217b4:	3e9a2080 	.word	0x3e9a2080

080217b8 <__ieee754_sqrtf>:
 80217b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80217bc:	4770      	bx	lr
	...

080217c0 <__kernel_cos>:
 80217c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217c4:	ec57 6b10 	vmov	r6, r7, d0
 80217c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80217cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80217d0:	ed8d 1b00 	vstr	d1, [sp]
 80217d4:	da07      	bge.n	80217e6 <__kernel_cos+0x26>
 80217d6:	ee10 0a10 	vmov	r0, s0
 80217da:	4639      	mov	r1, r7
 80217dc:	f7df f9c6 	bl	8000b6c <__aeabi_d2iz>
 80217e0:	2800      	cmp	r0, #0
 80217e2:	f000 8088 	beq.w	80218f6 <__kernel_cos+0x136>
 80217e6:	4632      	mov	r2, r6
 80217e8:	463b      	mov	r3, r7
 80217ea:	4630      	mov	r0, r6
 80217ec:	4639      	mov	r1, r7
 80217ee:	f7de ff0d 	bl	800060c <__aeabi_dmul>
 80217f2:	4b51      	ldr	r3, [pc, #324]	; (8021938 <__kernel_cos+0x178>)
 80217f4:	2200      	movs	r2, #0
 80217f6:	4604      	mov	r4, r0
 80217f8:	460d      	mov	r5, r1
 80217fa:	f7de ff07 	bl	800060c <__aeabi_dmul>
 80217fe:	a340      	add	r3, pc, #256	; (adr r3, 8021900 <__kernel_cos+0x140>)
 8021800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021804:	4682      	mov	sl, r0
 8021806:	468b      	mov	fp, r1
 8021808:	4620      	mov	r0, r4
 802180a:	4629      	mov	r1, r5
 802180c:	f7de fefe 	bl	800060c <__aeabi_dmul>
 8021810:	a33d      	add	r3, pc, #244	; (adr r3, 8021908 <__kernel_cos+0x148>)
 8021812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021816:	f7de fd43 	bl	80002a0 <__adddf3>
 802181a:	4622      	mov	r2, r4
 802181c:	462b      	mov	r3, r5
 802181e:	f7de fef5 	bl	800060c <__aeabi_dmul>
 8021822:	a33b      	add	r3, pc, #236	; (adr r3, 8021910 <__kernel_cos+0x150>)
 8021824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021828:	f7de fd38 	bl	800029c <__aeabi_dsub>
 802182c:	4622      	mov	r2, r4
 802182e:	462b      	mov	r3, r5
 8021830:	f7de feec 	bl	800060c <__aeabi_dmul>
 8021834:	a338      	add	r3, pc, #224	; (adr r3, 8021918 <__kernel_cos+0x158>)
 8021836:	e9d3 2300 	ldrd	r2, r3, [r3]
 802183a:	f7de fd31 	bl	80002a0 <__adddf3>
 802183e:	4622      	mov	r2, r4
 8021840:	462b      	mov	r3, r5
 8021842:	f7de fee3 	bl	800060c <__aeabi_dmul>
 8021846:	a336      	add	r3, pc, #216	; (adr r3, 8021920 <__kernel_cos+0x160>)
 8021848:	e9d3 2300 	ldrd	r2, r3, [r3]
 802184c:	f7de fd26 	bl	800029c <__aeabi_dsub>
 8021850:	4622      	mov	r2, r4
 8021852:	462b      	mov	r3, r5
 8021854:	f7de feda 	bl	800060c <__aeabi_dmul>
 8021858:	a333      	add	r3, pc, #204	; (adr r3, 8021928 <__kernel_cos+0x168>)
 802185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802185e:	f7de fd1f 	bl	80002a0 <__adddf3>
 8021862:	4622      	mov	r2, r4
 8021864:	462b      	mov	r3, r5
 8021866:	f7de fed1 	bl	800060c <__aeabi_dmul>
 802186a:	4622      	mov	r2, r4
 802186c:	462b      	mov	r3, r5
 802186e:	f7de fecd 	bl	800060c <__aeabi_dmul>
 8021872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021876:	4604      	mov	r4, r0
 8021878:	460d      	mov	r5, r1
 802187a:	4630      	mov	r0, r6
 802187c:	4639      	mov	r1, r7
 802187e:	f7de fec5 	bl	800060c <__aeabi_dmul>
 8021882:	460b      	mov	r3, r1
 8021884:	4602      	mov	r2, r0
 8021886:	4629      	mov	r1, r5
 8021888:	4620      	mov	r0, r4
 802188a:	f7de fd07 	bl	800029c <__aeabi_dsub>
 802188e:	4b2b      	ldr	r3, [pc, #172]	; (802193c <__kernel_cos+0x17c>)
 8021890:	4598      	cmp	r8, r3
 8021892:	4606      	mov	r6, r0
 8021894:	460f      	mov	r7, r1
 8021896:	dc10      	bgt.n	80218ba <__kernel_cos+0xfa>
 8021898:	4602      	mov	r2, r0
 802189a:	460b      	mov	r3, r1
 802189c:	4650      	mov	r0, sl
 802189e:	4659      	mov	r1, fp
 80218a0:	f7de fcfc 	bl	800029c <__aeabi_dsub>
 80218a4:	460b      	mov	r3, r1
 80218a6:	4926      	ldr	r1, [pc, #152]	; (8021940 <__kernel_cos+0x180>)
 80218a8:	4602      	mov	r2, r0
 80218aa:	2000      	movs	r0, #0
 80218ac:	f7de fcf6 	bl	800029c <__aeabi_dsub>
 80218b0:	ec41 0b10 	vmov	d0, r0, r1
 80218b4:	b003      	add	sp, #12
 80218b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218ba:	4b22      	ldr	r3, [pc, #136]	; (8021944 <__kernel_cos+0x184>)
 80218bc:	4920      	ldr	r1, [pc, #128]	; (8021940 <__kernel_cos+0x180>)
 80218be:	4598      	cmp	r8, r3
 80218c0:	bfcc      	ite	gt
 80218c2:	4d21      	ldrgt	r5, [pc, #132]	; (8021948 <__kernel_cos+0x188>)
 80218c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80218c8:	2400      	movs	r4, #0
 80218ca:	4622      	mov	r2, r4
 80218cc:	462b      	mov	r3, r5
 80218ce:	2000      	movs	r0, #0
 80218d0:	f7de fce4 	bl	800029c <__aeabi_dsub>
 80218d4:	4622      	mov	r2, r4
 80218d6:	4680      	mov	r8, r0
 80218d8:	4689      	mov	r9, r1
 80218da:	462b      	mov	r3, r5
 80218dc:	4650      	mov	r0, sl
 80218de:	4659      	mov	r1, fp
 80218e0:	f7de fcdc 	bl	800029c <__aeabi_dsub>
 80218e4:	4632      	mov	r2, r6
 80218e6:	463b      	mov	r3, r7
 80218e8:	f7de fcd8 	bl	800029c <__aeabi_dsub>
 80218ec:	4602      	mov	r2, r0
 80218ee:	460b      	mov	r3, r1
 80218f0:	4640      	mov	r0, r8
 80218f2:	4649      	mov	r1, r9
 80218f4:	e7da      	b.n	80218ac <__kernel_cos+0xec>
 80218f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8021930 <__kernel_cos+0x170>
 80218fa:	e7db      	b.n	80218b4 <__kernel_cos+0xf4>
 80218fc:	f3af 8000 	nop.w
 8021900:	be8838d4 	.word	0xbe8838d4
 8021904:	bda8fae9 	.word	0xbda8fae9
 8021908:	bdb4b1c4 	.word	0xbdb4b1c4
 802190c:	3e21ee9e 	.word	0x3e21ee9e
 8021910:	809c52ad 	.word	0x809c52ad
 8021914:	3e927e4f 	.word	0x3e927e4f
 8021918:	19cb1590 	.word	0x19cb1590
 802191c:	3efa01a0 	.word	0x3efa01a0
 8021920:	16c15177 	.word	0x16c15177
 8021924:	3f56c16c 	.word	0x3f56c16c
 8021928:	5555554c 	.word	0x5555554c
 802192c:	3fa55555 	.word	0x3fa55555
 8021930:	00000000 	.word	0x00000000
 8021934:	3ff00000 	.word	0x3ff00000
 8021938:	3fe00000 	.word	0x3fe00000
 802193c:	3fd33332 	.word	0x3fd33332
 8021940:	3ff00000 	.word	0x3ff00000
 8021944:	3fe90000 	.word	0x3fe90000
 8021948:	3fd20000 	.word	0x3fd20000
 802194c:	00000000 	.word	0x00000000

08021950 <__kernel_rem_pio2>:
 8021950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021954:	ed2d 8b02 	vpush	{d8}
 8021958:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 802195c:	f112 0f14 	cmn.w	r2, #20
 8021960:	9308      	str	r3, [sp, #32]
 8021962:	9101      	str	r1, [sp, #4]
 8021964:	4bc4      	ldr	r3, [pc, #784]	; (8021c78 <__kernel_rem_pio2+0x328>)
 8021966:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8021968:	900b      	str	r0, [sp, #44]	; 0x2c
 802196a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802196e:	9302      	str	r3, [sp, #8]
 8021970:	9b08      	ldr	r3, [sp, #32]
 8021972:	f103 33ff 	add.w	r3, r3, #4294967295
 8021976:	bfa8      	it	ge
 8021978:	1ed4      	subge	r4, r2, #3
 802197a:	9306      	str	r3, [sp, #24]
 802197c:	bfb2      	itee	lt
 802197e:	2400      	movlt	r4, #0
 8021980:	2318      	movge	r3, #24
 8021982:	fb94 f4f3 	sdivge	r4, r4, r3
 8021986:	f06f 0317 	mvn.w	r3, #23
 802198a:	fb04 3303 	mla	r3, r4, r3, r3
 802198e:	eb03 0a02 	add.w	sl, r3, r2
 8021992:	9b02      	ldr	r3, [sp, #8]
 8021994:	9a06      	ldr	r2, [sp, #24]
 8021996:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8021c68 <__kernel_rem_pio2+0x318>
 802199a:	eb03 0802 	add.w	r8, r3, r2
 802199e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80219a0:	1aa7      	subs	r7, r4, r2
 80219a2:	ae22      	add	r6, sp, #136	; 0x88
 80219a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80219a8:	2500      	movs	r5, #0
 80219aa:	4545      	cmp	r5, r8
 80219ac:	dd13      	ble.n	80219d6 <__kernel_rem_pio2+0x86>
 80219ae:	9b08      	ldr	r3, [sp, #32]
 80219b0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8021c68 <__kernel_rem_pio2+0x318>
 80219b4:	aa22      	add	r2, sp, #136	; 0x88
 80219b6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80219ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80219be:	f04f 0800 	mov.w	r8, #0
 80219c2:	9b02      	ldr	r3, [sp, #8]
 80219c4:	4598      	cmp	r8, r3
 80219c6:	dc2f      	bgt.n	8021a28 <__kernel_rem_pio2+0xd8>
 80219c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80219cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80219d0:	462f      	mov	r7, r5
 80219d2:	2600      	movs	r6, #0
 80219d4:	e01b      	b.n	8021a0e <__kernel_rem_pio2+0xbe>
 80219d6:	42ef      	cmn	r7, r5
 80219d8:	d407      	bmi.n	80219ea <__kernel_rem_pio2+0x9a>
 80219da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80219de:	f7de fdab 	bl	8000538 <__aeabi_i2d>
 80219e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80219e6:	3501      	adds	r5, #1
 80219e8:	e7df      	b.n	80219aa <__kernel_rem_pio2+0x5a>
 80219ea:	ec51 0b18 	vmov	r0, r1, d8
 80219ee:	e7f8      	b.n	80219e2 <__kernel_rem_pio2+0x92>
 80219f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80219f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80219f8:	f7de fe08 	bl	800060c <__aeabi_dmul>
 80219fc:	4602      	mov	r2, r0
 80219fe:	460b      	mov	r3, r1
 8021a00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8021a04:	f7de fc4c 	bl	80002a0 <__adddf3>
 8021a08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8021a0c:	3601      	adds	r6, #1
 8021a0e:	9b06      	ldr	r3, [sp, #24]
 8021a10:	429e      	cmp	r6, r3
 8021a12:	f1a7 0708 	sub.w	r7, r7, #8
 8021a16:	ddeb      	ble.n	80219f0 <__kernel_rem_pio2+0xa0>
 8021a18:	ed9d 7b04 	vldr	d7, [sp, #16]
 8021a1c:	f108 0801 	add.w	r8, r8, #1
 8021a20:	ecab 7b02 	vstmia	fp!, {d7}
 8021a24:	3508      	adds	r5, #8
 8021a26:	e7cc      	b.n	80219c2 <__kernel_rem_pio2+0x72>
 8021a28:	9b02      	ldr	r3, [sp, #8]
 8021a2a:	aa0e      	add	r2, sp, #56	; 0x38
 8021a2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021a30:	930d      	str	r3, [sp, #52]	; 0x34
 8021a32:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8021a34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8021a38:	9c02      	ldr	r4, [sp, #8]
 8021a3a:	930c      	str	r3, [sp, #48]	; 0x30
 8021a3c:	00e3      	lsls	r3, r4, #3
 8021a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8021a40:	ab9a      	add	r3, sp, #616	; 0x268
 8021a42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021a46:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8021a4a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8021a4e:	ab72      	add	r3, sp, #456	; 0x1c8
 8021a50:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8021a54:	46c3      	mov	fp, r8
 8021a56:	46a1      	mov	r9, r4
 8021a58:	f1b9 0f00 	cmp.w	r9, #0
 8021a5c:	f1a5 0508 	sub.w	r5, r5, #8
 8021a60:	dc77      	bgt.n	8021b52 <__kernel_rem_pio2+0x202>
 8021a62:	ec47 6b10 	vmov	d0, r6, r7
 8021a66:	4650      	mov	r0, sl
 8021a68:	f000 fdfa 	bl	8022660 <scalbn>
 8021a6c:	ec57 6b10 	vmov	r6, r7, d0
 8021a70:	2200      	movs	r2, #0
 8021a72:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8021a76:	ee10 0a10 	vmov	r0, s0
 8021a7a:	4639      	mov	r1, r7
 8021a7c:	f7de fdc6 	bl	800060c <__aeabi_dmul>
 8021a80:	ec41 0b10 	vmov	d0, r0, r1
 8021a84:	f7fe f9a0 	bl	801fdc8 <floor>
 8021a88:	4b7c      	ldr	r3, [pc, #496]	; (8021c7c <__kernel_rem_pio2+0x32c>)
 8021a8a:	ec51 0b10 	vmov	r0, r1, d0
 8021a8e:	2200      	movs	r2, #0
 8021a90:	f7de fdbc 	bl	800060c <__aeabi_dmul>
 8021a94:	4602      	mov	r2, r0
 8021a96:	460b      	mov	r3, r1
 8021a98:	4630      	mov	r0, r6
 8021a9a:	4639      	mov	r1, r7
 8021a9c:	f7de fbfe 	bl	800029c <__aeabi_dsub>
 8021aa0:	460f      	mov	r7, r1
 8021aa2:	4606      	mov	r6, r0
 8021aa4:	f7df f862 	bl	8000b6c <__aeabi_d2iz>
 8021aa8:	9004      	str	r0, [sp, #16]
 8021aaa:	f7de fd45 	bl	8000538 <__aeabi_i2d>
 8021aae:	4602      	mov	r2, r0
 8021ab0:	460b      	mov	r3, r1
 8021ab2:	4630      	mov	r0, r6
 8021ab4:	4639      	mov	r1, r7
 8021ab6:	f7de fbf1 	bl	800029c <__aeabi_dsub>
 8021aba:	f1ba 0f00 	cmp.w	sl, #0
 8021abe:	4606      	mov	r6, r0
 8021ac0:	460f      	mov	r7, r1
 8021ac2:	dd6d      	ble.n	8021ba0 <__kernel_rem_pio2+0x250>
 8021ac4:	1e62      	subs	r2, r4, #1
 8021ac6:	ab0e      	add	r3, sp, #56	; 0x38
 8021ac8:	9d04      	ldr	r5, [sp, #16]
 8021aca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021ace:	f1ca 0118 	rsb	r1, sl, #24
 8021ad2:	fa40 f301 	asr.w	r3, r0, r1
 8021ad6:	441d      	add	r5, r3
 8021ad8:	408b      	lsls	r3, r1
 8021ada:	1ac0      	subs	r0, r0, r3
 8021adc:	ab0e      	add	r3, sp, #56	; 0x38
 8021ade:	9504      	str	r5, [sp, #16]
 8021ae0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8021ae4:	f1ca 0317 	rsb	r3, sl, #23
 8021ae8:	fa40 fb03 	asr.w	fp, r0, r3
 8021aec:	f1bb 0f00 	cmp.w	fp, #0
 8021af0:	dd65      	ble.n	8021bbe <__kernel_rem_pio2+0x26e>
 8021af2:	9b04      	ldr	r3, [sp, #16]
 8021af4:	2200      	movs	r2, #0
 8021af6:	3301      	adds	r3, #1
 8021af8:	9304      	str	r3, [sp, #16]
 8021afa:	4615      	mov	r5, r2
 8021afc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8021b00:	4294      	cmp	r4, r2
 8021b02:	f300 809c 	bgt.w	8021c3e <__kernel_rem_pio2+0x2ee>
 8021b06:	f1ba 0f00 	cmp.w	sl, #0
 8021b0a:	dd07      	ble.n	8021b1c <__kernel_rem_pio2+0x1cc>
 8021b0c:	f1ba 0f01 	cmp.w	sl, #1
 8021b10:	f000 80c0 	beq.w	8021c94 <__kernel_rem_pio2+0x344>
 8021b14:	f1ba 0f02 	cmp.w	sl, #2
 8021b18:	f000 80c6 	beq.w	8021ca8 <__kernel_rem_pio2+0x358>
 8021b1c:	f1bb 0f02 	cmp.w	fp, #2
 8021b20:	d14d      	bne.n	8021bbe <__kernel_rem_pio2+0x26e>
 8021b22:	4632      	mov	r2, r6
 8021b24:	463b      	mov	r3, r7
 8021b26:	4956      	ldr	r1, [pc, #344]	; (8021c80 <__kernel_rem_pio2+0x330>)
 8021b28:	2000      	movs	r0, #0
 8021b2a:	f7de fbb7 	bl	800029c <__aeabi_dsub>
 8021b2e:	4606      	mov	r6, r0
 8021b30:	460f      	mov	r7, r1
 8021b32:	2d00      	cmp	r5, #0
 8021b34:	d043      	beq.n	8021bbe <__kernel_rem_pio2+0x26e>
 8021b36:	4650      	mov	r0, sl
 8021b38:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8021c70 <__kernel_rem_pio2+0x320>
 8021b3c:	f000 fd90 	bl	8022660 <scalbn>
 8021b40:	4630      	mov	r0, r6
 8021b42:	4639      	mov	r1, r7
 8021b44:	ec53 2b10 	vmov	r2, r3, d0
 8021b48:	f7de fba8 	bl	800029c <__aeabi_dsub>
 8021b4c:	4606      	mov	r6, r0
 8021b4e:	460f      	mov	r7, r1
 8021b50:	e035      	b.n	8021bbe <__kernel_rem_pio2+0x26e>
 8021b52:	4b4c      	ldr	r3, [pc, #304]	; (8021c84 <__kernel_rem_pio2+0x334>)
 8021b54:	2200      	movs	r2, #0
 8021b56:	4630      	mov	r0, r6
 8021b58:	4639      	mov	r1, r7
 8021b5a:	f7de fd57 	bl	800060c <__aeabi_dmul>
 8021b5e:	f7df f805 	bl	8000b6c <__aeabi_d2iz>
 8021b62:	f7de fce9 	bl	8000538 <__aeabi_i2d>
 8021b66:	4602      	mov	r2, r0
 8021b68:	460b      	mov	r3, r1
 8021b6a:	ec43 2b18 	vmov	d8, r2, r3
 8021b6e:	4b46      	ldr	r3, [pc, #280]	; (8021c88 <__kernel_rem_pio2+0x338>)
 8021b70:	2200      	movs	r2, #0
 8021b72:	f7de fd4b 	bl	800060c <__aeabi_dmul>
 8021b76:	4602      	mov	r2, r0
 8021b78:	460b      	mov	r3, r1
 8021b7a:	4630      	mov	r0, r6
 8021b7c:	4639      	mov	r1, r7
 8021b7e:	f7de fb8d 	bl	800029c <__aeabi_dsub>
 8021b82:	f7de fff3 	bl	8000b6c <__aeabi_d2iz>
 8021b86:	e9d5 2300 	ldrd	r2, r3, [r5]
 8021b8a:	f84b 0b04 	str.w	r0, [fp], #4
 8021b8e:	ec51 0b18 	vmov	r0, r1, d8
 8021b92:	f7de fb85 	bl	80002a0 <__adddf3>
 8021b96:	f109 39ff 	add.w	r9, r9, #4294967295
 8021b9a:	4606      	mov	r6, r0
 8021b9c:	460f      	mov	r7, r1
 8021b9e:	e75b      	b.n	8021a58 <__kernel_rem_pio2+0x108>
 8021ba0:	d106      	bne.n	8021bb0 <__kernel_rem_pio2+0x260>
 8021ba2:	1e63      	subs	r3, r4, #1
 8021ba4:	aa0e      	add	r2, sp, #56	; 0x38
 8021ba6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021baa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8021bae:	e79d      	b.n	8021aec <__kernel_rem_pio2+0x19c>
 8021bb0:	4b36      	ldr	r3, [pc, #216]	; (8021c8c <__kernel_rem_pio2+0x33c>)
 8021bb2:	2200      	movs	r2, #0
 8021bb4:	f7de ffb0 	bl	8000b18 <__aeabi_dcmpge>
 8021bb8:	2800      	cmp	r0, #0
 8021bba:	d13d      	bne.n	8021c38 <__kernel_rem_pio2+0x2e8>
 8021bbc:	4683      	mov	fp, r0
 8021bbe:	2200      	movs	r2, #0
 8021bc0:	2300      	movs	r3, #0
 8021bc2:	4630      	mov	r0, r6
 8021bc4:	4639      	mov	r1, r7
 8021bc6:	f7de ff89 	bl	8000adc <__aeabi_dcmpeq>
 8021bca:	2800      	cmp	r0, #0
 8021bcc:	f000 80c0 	beq.w	8021d50 <__kernel_rem_pio2+0x400>
 8021bd0:	1e65      	subs	r5, r4, #1
 8021bd2:	462b      	mov	r3, r5
 8021bd4:	2200      	movs	r2, #0
 8021bd6:	9902      	ldr	r1, [sp, #8]
 8021bd8:	428b      	cmp	r3, r1
 8021bda:	da6c      	bge.n	8021cb6 <__kernel_rem_pio2+0x366>
 8021bdc:	2a00      	cmp	r2, #0
 8021bde:	f000 8089 	beq.w	8021cf4 <__kernel_rem_pio2+0x3a4>
 8021be2:	ab0e      	add	r3, sp, #56	; 0x38
 8021be4:	f1aa 0a18 	sub.w	sl, sl, #24
 8021be8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8021bec:	2b00      	cmp	r3, #0
 8021bee:	f000 80ad 	beq.w	8021d4c <__kernel_rem_pio2+0x3fc>
 8021bf2:	4650      	mov	r0, sl
 8021bf4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8021c70 <__kernel_rem_pio2+0x320>
 8021bf8:	f000 fd32 	bl	8022660 <scalbn>
 8021bfc:	ab9a      	add	r3, sp, #616	; 0x268
 8021bfe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021c02:	ec57 6b10 	vmov	r6, r7, d0
 8021c06:	00ec      	lsls	r4, r5, #3
 8021c08:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8021c0c:	46aa      	mov	sl, r5
 8021c0e:	f1ba 0f00 	cmp.w	sl, #0
 8021c12:	f280 80d6 	bge.w	8021dc2 <__kernel_rem_pio2+0x472>
 8021c16:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8021c68 <__kernel_rem_pio2+0x318>
 8021c1a:	462e      	mov	r6, r5
 8021c1c:	2e00      	cmp	r6, #0
 8021c1e:	f2c0 8104 	blt.w	8021e2a <__kernel_rem_pio2+0x4da>
 8021c22:	ab72      	add	r3, sp, #456	; 0x1c8
 8021c24:	ed8d 8b06 	vstr	d8, [sp, #24]
 8021c28:	f8df a064 	ldr.w	sl, [pc, #100]	; 8021c90 <__kernel_rem_pio2+0x340>
 8021c2c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8021c30:	f04f 0800 	mov.w	r8, #0
 8021c34:	1baf      	subs	r7, r5, r6
 8021c36:	e0ea      	b.n	8021e0e <__kernel_rem_pio2+0x4be>
 8021c38:	f04f 0b02 	mov.w	fp, #2
 8021c3c:	e759      	b.n	8021af2 <__kernel_rem_pio2+0x1a2>
 8021c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8021c42:	b955      	cbnz	r5, 8021c5a <__kernel_rem_pio2+0x30a>
 8021c44:	b123      	cbz	r3, 8021c50 <__kernel_rem_pio2+0x300>
 8021c46:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8021c4a:	f8c8 3000 	str.w	r3, [r8]
 8021c4e:	2301      	movs	r3, #1
 8021c50:	3201      	adds	r2, #1
 8021c52:	f108 0804 	add.w	r8, r8, #4
 8021c56:	461d      	mov	r5, r3
 8021c58:	e752      	b.n	8021b00 <__kernel_rem_pio2+0x1b0>
 8021c5a:	1acb      	subs	r3, r1, r3
 8021c5c:	f8c8 3000 	str.w	r3, [r8]
 8021c60:	462b      	mov	r3, r5
 8021c62:	e7f5      	b.n	8021c50 <__kernel_rem_pio2+0x300>
 8021c64:	f3af 8000 	nop.w
	...
 8021c74:	3ff00000 	.word	0x3ff00000
 8021c78:	0804be40 	.word	0x0804be40
 8021c7c:	40200000 	.word	0x40200000
 8021c80:	3ff00000 	.word	0x3ff00000
 8021c84:	3e700000 	.word	0x3e700000
 8021c88:	41700000 	.word	0x41700000
 8021c8c:	3fe00000 	.word	0x3fe00000
 8021c90:	0804be00 	.word	0x0804be00
 8021c94:	1e62      	subs	r2, r4, #1
 8021c96:	ab0e      	add	r3, sp, #56	; 0x38
 8021c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021c9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8021ca0:	a90e      	add	r1, sp, #56	; 0x38
 8021ca2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8021ca6:	e739      	b.n	8021b1c <__kernel_rem_pio2+0x1cc>
 8021ca8:	1e62      	subs	r2, r4, #1
 8021caa:	ab0e      	add	r3, sp, #56	; 0x38
 8021cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021cb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8021cb4:	e7f4      	b.n	8021ca0 <__kernel_rem_pio2+0x350>
 8021cb6:	a90e      	add	r1, sp, #56	; 0x38
 8021cb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8021cbc:	3b01      	subs	r3, #1
 8021cbe:	430a      	orrs	r2, r1
 8021cc0:	e789      	b.n	8021bd6 <__kernel_rem_pio2+0x286>
 8021cc2:	3301      	adds	r3, #1
 8021cc4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8021cc8:	2900      	cmp	r1, #0
 8021cca:	d0fa      	beq.n	8021cc2 <__kernel_rem_pio2+0x372>
 8021ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021cce:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8021cd2:	446a      	add	r2, sp
 8021cd4:	3a98      	subs	r2, #152	; 0x98
 8021cd6:	920a      	str	r2, [sp, #40]	; 0x28
 8021cd8:	9a08      	ldr	r2, [sp, #32]
 8021cda:	18e3      	adds	r3, r4, r3
 8021cdc:	18a5      	adds	r5, r4, r2
 8021cde:	aa22      	add	r2, sp, #136	; 0x88
 8021ce0:	f104 0801 	add.w	r8, r4, #1
 8021ce4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8021ce8:	9304      	str	r3, [sp, #16]
 8021cea:	9b04      	ldr	r3, [sp, #16]
 8021cec:	4543      	cmp	r3, r8
 8021cee:	da04      	bge.n	8021cfa <__kernel_rem_pio2+0x3aa>
 8021cf0:	461c      	mov	r4, r3
 8021cf2:	e6a3      	b.n	8021a3c <__kernel_rem_pio2+0xec>
 8021cf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021cf6:	2301      	movs	r3, #1
 8021cf8:	e7e4      	b.n	8021cc4 <__kernel_rem_pio2+0x374>
 8021cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021cfc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8021d00:	f7de fc1a 	bl	8000538 <__aeabi_i2d>
 8021d04:	e8e5 0102 	strd	r0, r1, [r5], #8
 8021d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021d0a:	46ab      	mov	fp, r5
 8021d0c:	461c      	mov	r4, r3
 8021d0e:	f04f 0900 	mov.w	r9, #0
 8021d12:	2600      	movs	r6, #0
 8021d14:	2700      	movs	r7, #0
 8021d16:	9b06      	ldr	r3, [sp, #24]
 8021d18:	4599      	cmp	r9, r3
 8021d1a:	dd06      	ble.n	8021d2a <__kernel_rem_pio2+0x3da>
 8021d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d1e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8021d22:	f108 0801 	add.w	r8, r8, #1
 8021d26:	930a      	str	r3, [sp, #40]	; 0x28
 8021d28:	e7df      	b.n	8021cea <__kernel_rem_pio2+0x39a>
 8021d2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8021d2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8021d32:	f7de fc6b 	bl	800060c <__aeabi_dmul>
 8021d36:	4602      	mov	r2, r0
 8021d38:	460b      	mov	r3, r1
 8021d3a:	4630      	mov	r0, r6
 8021d3c:	4639      	mov	r1, r7
 8021d3e:	f7de faaf 	bl	80002a0 <__adddf3>
 8021d42:	f109 0901 	add.w	r9, r9, #1
 8021d46:	4606      	mov	r6, r0
 8021d48:	460f      	mov	r7, r1
 8021d4a:	e7e4      	b.n	8021d16 <__kernel_rem_pio2+0x3c6>
 8021d4c:	3d01      	subs	r5, #1
 8021d4e:	e748      	b.n	8021be2 <__kernel_rem_pio2+0x292>
 8021d50:	ec47 6b10 	vmov	d0, r6, r7
 8021d54:	f1ca 0000 	rsb	r0, sl, #0
 8021d58:	f000 fc82 	bl	8022660 <scalbn>
 8021d5c:	ec57 6b10 	vmov	r6, r7, d0
 8021d60:	4ba0      	ldr	r3, [pc, #640]	; (8021fe4 <__kernel_rem_pio2+0x694>)
 8021d62:	ee10 0a10 	vmov	r0, s0
 8021d66:	2200      	movs	r2, #0
 8021d68:	4639      	mov	r1, r7
 8021d6a:	f7de fed5 	bl	8000b18 <__aeabi_dcmpge>
 8021d6e:	b1f8      	cbz	r0, 8021db0 <__kernel_rem_pio2+0x460>
 8021d70:	4b9d      	ldr	r3, [pc, #628]	; (8021fe8 <__kernel_rem_pio2+0x698>)
 8021d72:	2200      	movs	r2, #0
 8021d74:	4630      	mov	r0, r6
 8021d76:	4639      	mov	r1, r7
 8021d78:	f7de fc48 	bl	800060c <__aeabi_dmul>
 8021d7c:	f7de fef6 	bl	8000b6c <__aeabi_d2iz>
 8021d80:	4680      	mov	r8, r0
 8021d82:	f7de fbd9 	bl	8000538 <__aeabi_i2d>
 8021d86:	4b97      	ldr	r3, [pc, #604]	; (8021fe4 <__kernel_rem_pio2+0x694>)
 8021d88:	2200      	movs	r2, #0
 8021d8a:	f7de fc3f 	bl	800060c <__aeabi_dmul>
 8021d8e:	460b      	mov	r3, r1
 8021d90:	4602      	mov	r2, r0
 8021d92:	4639      	mov	r1, r7
 8021d94:	4630      	mov	r0, r6
 8021d96:	f7de fa81 	bl	800029c <__aeabi_dsub>
 8021d9a:	f7de fee7 	bl	8000b6c <__aeabi_d2iz>
 8021d9e:	1c65      	adds	r5, r4, #1
 8021da0:	ab0e      	add	r3, sp, #56	; 0x38
 8021da2:	f10a 0a18 	add.w	sl, sl, #24
 8021da6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8021daa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8021dae:	e720      	b.n	8021bf2 <__kernel_rem_pio2+0x2a2>
 8021db0:	4630      	mov	r0, r6
 8021db2:	4639      	mov	r1, r7
 8021db4:	f7de feda 	bl	8000b6c <__aeabi_d2iz>
 8021db8:	ab0e      	add	r3, sp, #56	; 0x38
 8021dba:	4625      	mov	r5, r4
 8021dbc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8021dc0:	e717      	b.n	8021bf2 <__kernel_rem_pio2+0x2a2>
 8021dc2:	ab0e      	add	r3, sp, #56	; 0x38
 8021dc4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8021dc8:	f7de fbb6 	bl	8000538 <__aeabi_i2d>
 8021dcc:	4632      	mov	r2, r6
 8021dce:	463b      	mov	r3, r7
 8021dd0:	f7de fc1c 	bl	800060c <__aeabi_dmul>
 8021dd4:	4b84      	ldr	r3, [pc, #528]	; (8021fe8 <__kernel_rem_pio2+0x698>)
 8021dd6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8021dda:	2200      	movs	r2, #0
 8021ddc:	4630      	mov	r0, r6
 8021dde:	4639      	mov	r1, r7
 8021de0:	f7de fc14 	bl	800060c <__aeabi_dmul>
 8021de4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021de8:	4606      	mov	r6, r0
 8021dea:	460f      	mov	r7, r1
 8021dec:	e70f      	b.n	8021c0e <__kernel_rem_pio2+0x2be>
 8021dee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8021df2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8021df6:	f7de fc09 	bl	800060c <__aeabi_dmul>
 8021dfa:	4602      	mov	r2, r0
 8021dfc:	460b      	mov	r3, r1
 8021dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021e02:	f7de fa4d 	bl	80002a0 <__adddf3>
 8021e06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021e0a:	f108 0801 	add.w	r8, r8, #1
 8021e0e:	9b02      	ldr	r3, [sp, #8]
 8021e10:	4598      	cmp	r8, r3
 8021e12:	dc01      	bgt.n	8021e18 <__kernel_rem_pio2+0x4c8>
 8021e14:	45b8      	cmp	r8, r7
 8021e16:	ddea      	ble.n	8021dee <__kernel_rem_pio2+0x49e>
 8021e18:	ed9d 7b06 	vldr	d7, [sp, #24]
 8021e1c:	ab4a      	add	r3, sp, #296	; 0x128
 8021e1e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8021e22:	ed87 7b00 	vstr	d7, [r7]
 8021e26:	3e01      	subs	r6, #1
 8021e28:	e6f8      	b.n	8021c1c <__kernel_rem_pio2+0x2cc>
 8021e2a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8021e2c:	2b02      	cmp	r3, #2
 8021e2e:	dc0b      	bgt.n	8021e48 <__kernel_rem_pio2+0x4f8>
 8021e30:	2b00      	cmp	r3, #0
 8021e32:	dc35      	bgt.n	8021ea0 <__kernel_rem_pio2+0x550>
 8021e34:	d059      	beq.n	8021eea <__kernel_rem_pio2+0x59a>
 8021e36:	9b04      	ldr	r3, [sp, #16]
 8021e38:	f003 0007 	and.w	r0, r3, #7
 8021e3c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8021e40:	ecbd 8b02 	vpop	{d8}
 8021e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e48:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8021e4a:	2b03      	cmp	r3, #3
 8021e4c:	d1f3      	bne.n	8021e36 <__kernel_rem_pio2+0x4e6>
 8021e4e:	ab4a      	add	r3, sp, #296	; 0x128
 8021e50:	4423      	add	r3, r4
 8021e52:	9306      	str	r3, [sp, #24]
 8021e54:	461c      	mov	r4, r3
 8021e56:	469a      	mov	sl, r3
 8021e58:	9502      	str	r5, [sp, #8]
 8021e5a:	9b02      	ldr	r3, [sp, #8]
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	f1aa 0a08 	sub.w	sl, sl, #8
 8021e62:	dc6b      	bgt.n	8021f3c <__kernel_rem_pio2+0x5ec>
 8021e64:	46aa      	mov	sl, r5
 8021e66:	f1ba 0f01 	cmp.w	sl, #1
 8021e6a:	f1a4 0408 	sub.w	r4, r4, #8
 8021e6e:	f300 8085 	bgt.w	8021f7c <__kernel_rem_pio2+0x62c>
 8021e72:	9c06      	ldr	r4, [sp, #24]
 8021e74:	2000      	movs	r0, #0
 8021e76:	3408      	adds	r4, #8
 8021e78:	2100      	movs	r1, #0
 8021e7a:	2d01      	cmp	r5, #1
 8021e7c:	f300 809d 	bgt.w	8021fba <__kernel_rem_pio2+0x66a>
 8021e80:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8021e84:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8021e88:	f1bb 0f00 	cmp.w	fp, #0
 8021e8c:	f040 809b 	bne.w	8021fc6 <__kernel_rem_pio2+0x676>
 8021e90:	9b01      	ldr	r3, [sp, #4]
 8021e92:	e9c3 5600 	strd	r5, r6, [r3]
 8021e96:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8021e9a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8021e9e:	e7ca      	b.n	8021e36 <__kernel_rem_pio2+0x4e6>
 8021ea0:	3408      	adds	r4, #8
 8021ea2:	ab4a      	add	r3, sp, #296	; 0x128
 8021ea4:	441c      	add	r4, r3
 8021ea6:	462e      	mov	r6, r5
 8021ea8:	2000      	movs	r0, #0
 8021eaa:	2100      	movs	r1, #0
 8021eac:	2e00      	cmp	r6, #0
 8021eae:	da36      	bge.n	8021f1e <__kernel_rem_pio2+0x5ce>
 8021eb0:	f1bb 0f00 	cmp.w	fp, #0
 8021eb4:	d039      	beq.n	8021f2a <__kernel_rem_pio2+0x5da>
 8021eb6:	4602      	mov	r2, r0
 8021eb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021ebc:	9c01      	ldr	r4, [sp, #4]
 8021ebe:	e9c4 2300 	strd	r2, r3, [r4]
 8021ec2:	4602      	mov	r2, r0
 8021ec4:	460b      	mov	r3, r1
 8021ec6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8021eca:	f7de f9e7 	bl	800029c <__aeabi_dsub>
 8021ece:	ae4c      	add	r6, sp, #304	; 0x130
 8021ed0:	2401      	movs	r4, #1
 8021ed2:	42a5      	cmp	r5, r4
 8021ed4:	da2c      	bge.n	8021f30 <__kernel_rem_pio2+0x5e0>
 8021ed6:	f1bb 0f00 	cmp.w	fp, #0
 8021eda:	d002      	beq.n	8021ee2 <__kernel_rem_pio2+0x592>
 8021edc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021ee0:	4619      	mov	r1, r3
 8021ee2:	9b01      	ldr	r3, [sp, #4]
 8021ee4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8021ee8:	e7a5      	b.n	8021e36 <__kernel_rem_pio2+0x4e6>
 8021eea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8021eee:	eb0d 0403 	add.w	r4, sp, r3
 8021ef2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8021ef6:	2000      	movs	r0, #0
 8021ef8:	2100      	movs	r1, #0
 8021efa:	2d00      	cmp	r5, #0
 8021efc:	da09      	bge.n	8021f12 <__kernel_rem_pio2+0x5c2>
 8021efe:	f1bb 0f00 	cmp.w	fp, #0
 8021f02:	d002      	beq.n	8021f0a <__kernel_rem_pio2+0x5ba>
 8021f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021f08:	4619      	mov	r1, r3
 8021f0a:	9b01      	ldr	r3, [sp, #4]
 8021f0c:	e9c3 0100 	strd	r0, r1, [r3]
 8021f10:	e791      	b.n	8021e36 <__kernel_rem_pio2+0x4e6>
 8021f12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8021f16:	f7de f9c3 	bl	80002a0 <__adddf3>
 8021f1a:	3d01      	subs	r5, #1
 8021f1c:	e7ed      	b.n	8021efa <__kernel_rem_pio2+0x5aa>
 8021f1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8021f22:	f7de f9bd 	bl	80002a0 <__adddf3>
 8021f26:	3e01      	subs	r6, #1
 8021f28:	e7c0      	b.n	8021eac <__kernel_rem_pio2+0x55c>
 8021f2a:	4602      	mov	r2, r0
 8021f2c:	460b      	mov	r3, r1
 8021f2e:	e7c5      	b.n	8021ebc <__kernel_rem_pio2+0x56c>
 8021f30:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8021f34:	f7de f9b4 	bl	80002a0 <__adddf3>
 8021f38:	3401      	adds	r4, #1
 8021f3a:	e7ca      	b.n	8021ed2 <__kernel_rem_pio2+0x582>
 8021f3c:	e9da 8900 	ldrd	r8, r9, [sl]
 8021f40:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8021f44:	9b02      	ldr	r3, [sp, #8]
 8021f46:	3b01      	subs	r3, #1
 8021f48:	9302      	str	r3, [sp, #8]
 8021f4a:	4632      	mov	r2, r6
 8021f4c:	463b      	mov	r3, r7
 8021f4e:	4640      	mov	r0, r8
 8021f50:	4649      	mov	r1, r9
 8021f52:	f7de f9a5 	bl	80002a0 <__adddf3>
 8021f56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8021f5a:	4602      	mov	r2, r0
 8021f5c:	460b      	mov	r3, r1
 8021f5e:	4640      	mov	r0, r8
 8021f60:	4649      	mov	r1, r9
 8021f62:	f7de f99b 	bl	800029c <__aeabi_dsub>
 8021f66:	4632      	mov	r2, r6
 8021f68:	463b      	mov	r3, r7
 8021f6a:	f7de f999 	bl	80002a0 <__adddf3>
 8021f6e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8021f72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021f76:	ed8a 7b00 	vstr	d7, [sl]
 8021f7a:	e76e      	b.n	8021e5a <__kernel_rem_pio2+0x50a>
 8021f7c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8021f80:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8021f84:	4640      	mov	r0, r8
 8021f86:	4632      	mov	r2, r6
 8021f88:	463b      	mov	r3, r7
 8021f8a:	4649      	mov	r1, r9
 8021f8c:	f7de f988 	bl	80002a0 <__adddf3>
 8021f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021f94:	4602      	mov	r2, r0
 8021f96:	460b      	mov	r3, r1
 8021f98:	4640      	mov	r0, r8
 8021f9a:	4649      	mov	r1, r9
 8021f9c:	f7de f97e 	bl	800029c <__aeabi_dsub>
 8021fa0:	4632      	mov	r2, r6
 8021fa2:	463b      	mov	r3, r7
 8021fa4:	f7de f97c 	bl	80002a0 <__adddf3>
 8021fa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021fac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8021fb0:	ed84 7b00 	vstr	d7, [r4]
 8021fb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021fb8:	e755      	b.n	8021e66 <__kernel_rem_pio2+0x516>
 8021fba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8021fbe:	f7de f96f 	bl	80002a0 <__adddf3>
 8021fc2:	3d01      	subs	r5, #1
 8021fc4:	e759      	b.n	8021e7a <__kernel_rem_pio2+0x52a>
 8021fc6:	9b01      	ldr	r3, [sp, #4]
 8021fc8:	9a01      	ldr	r2, [sp, #4]
 8021fca:	601d      	str	r5, [r3, #0]
 8021fcc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8021fd0:	605c      	str	r4, [r3, #4]
 8021fd2:	609f      	str	r7, [r3, #8]
 8021fd4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8021fd8:	60d3      	str	r3, [r2, #12]
 8021fda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021fde:	6110      	str	r0, [r2, #16]
 8021fe0:	6153      	str	r3, [r2, #20]
 8021fe2:	e728      	b.n	8021e36 <__kernel_rem_pio2+0x4e6>
 8021fe4:	41700000 	.word	0x41700000
 8021fe8:	3e700000 	.word	0x3e700000
 8021fec:	00000000 	.word	0x00000000

08021ff0 <__kernel_sin>:
 8021ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ff4:	ed2d 8b04 	vpush	{d8-d9}
 8021ff8:	eeb0 8a41 	vmov.f32	s16, s2
 8021ffc:	eef0 8a61 	vmov.f32	s17, s3
 8022000:	ec55 4b10 	vmov	r4, r5, d0
 8022004:	b083      	sub	sp, #12
 8022006:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802200a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802200e:	9001      	str	r0, [sp, #4]
 8022010:	da06      	bge.n	8022020 <__kernel_sin+0x30>
 8022012:	ee10 0a10 	vmov	r0, s0
 8022016:	4629      	mov	r1, r5
 8022018:	f7de fda8 	bl	8000b6c <__aeabi_d2iz>
 802201c:	2800      	cmp	r0, #0
 802201e:	d051      	beq.n	80220c4 <__kernel_sin+0xd4>
 8022020:	4622      	mov	r2, r4
 8022022:	462b      	mov	r3, r5
 8022024:	4620      	mov	r0, r4
 8022026:	4629      	mov	r1, r5
 8022028:	f7de faf0 	bl	800060c <__aeabi_dmul>
 802202c:	4682      	mov	sl, r0
 802202e:	468b      	mov	fp, r1
 8022030:	4602      	mov	r2, r0
 8022032:	460b      	mov	r3, r1
 8022034:	4620      	mov	r0, r4
 8022036:	4629      	mov	r1, r5
 8022038:	f7de fae8 	bl	800060c <__aeabi_dmul>
 802203c:	a341      	add	r3, pc, #260	; (adr r3, 8022144 <__kernel_sin+0x154>)
 802203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022042:	4680      	mov	r8, r0
 8022044:	4689      	mov	r9, r1
 8022046:	4650      	mov	r0, sl
 8022048:	4659      	mov	r1, fp
 802204a:	f7de fadf 	bl	800060c <__aeabi_dmul>
 802204e:	a33f      	add	r3, pc, #252	; (adr r3, 802214c <__kernel_sin+0x15c>)
 8022050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022054:	f7de f922 	bl	800029c <__aeabi_dsub>
 8022058:	4652      	mov	r2, sl
 802205a:	465b      	mov	r3, fp
 802205c:	f7de fad6 	bl	800060c <__aeabi_dmul>
 8022060:	a33c      	add	r3, pc, #240	; (adr r3, 8022154 <__kernel_sin+0x164>)
 8022062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022066:	f7de f91b 	bl	80002a0 <__adddf3>
 802206a:	4652      	mov	r2, sl
 802206c:	465b      	mov	r3, fp
 802206e:	f7de facd 	bl	800060c <__aeabi_dmul>
 8022072:	a33a      	add	r3, pc, #232	; (adr r3, 802215c <__kernel_sin+0x16c>)
 8022074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022078:	f7de f910 	bl	800029c <__aeabi_dsub>
 802207c:	4652      	mov	r2, sl
 802207e:	465b      	mov	r3, fp
 8022080:	f7de fac4 	bl	800060c <__aeabi_dmul>
 8022084:	a337      	add	r3, pc, #220	; (adr r3, 8022164 <__kernel_sin+0x174>)
 8022086:	e9d3 2300 	ldrd	r2, r3, [r3]
 802208a:	f7de f909 	bl	80002a0 <__adddf3>
 802208e:	9b01      	ldr	r3, [sp, #4]
 8022090:	4606      	mov	r6, r0
 8022092:	460f      	mov	r7, r1
 8022094:	b9eb      	cbnz	r3, 80220d2 <__kernel_sin+0xe2>
 8022096:	4602      	mov	r2, r0
 8022098:	460b      	mov	r3, r1
 802209a:	4650      	mov	r0, sl
 802209c:	4659      	mov	r1, fp
 802209e:	f7de fab5 	bl	800060c <__aeabi_dmul>
 80220a2:	a325      	add	r3, pc, #148	; (adr r3, 8022138 <__kernel_sin+0x148>)
 80220a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220a8:	f7de f8f8 	bl	800029c <__aeabi_dsub>
 80220ac:	4642      	mov	r2, r8
 80220ae:	464b      	mov	r3, r9
 80220b0:	f7de faac 	bl	800060c <__aeabi_dmul>
 80220b4:	4602      	mov	r2, r0
 80220b6:	460b      	mov	r3, r1
 80220b8:	4620      	mov	r0, r4
 80220ba:	4629      	mov	r1, r5
 80220bc:	f7de f8f0 	bl	80002a0 <__adddf3>
 80220c0:	4604      	mov	r4, r0
 80220c2:	460d      	mov	r5, r1
 80220c4:	ec45 4b10 	vmov	d0, r4, r5
 80220c8:	b003      	add	sp, #12
 80220ca:	ecbd 8b04 	vpop	{d8-d9}
 80220ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220d2:	4b1b      	ldr	r3, [pc, #108]	; (8022140 <__kernel_sin+0x150>)
 80220d4:	ec51 0b18 	vmov	r0, r1, d8
 80220d8:	2200      	movs	r2, #0
 80220da:	f7de fa97 	bl	800060c <__aeabi_dmul>
 80220de:	4632      	mov	r2, r6
 80220e0:	ec41 0b19 	vmov	d9, r0, r1
 80220e4:	463b      	mov	r3, r7
 80220e6:	4640      	mov	r0, r8
 80220e8:	4649      	mov	r1, r9
 80220ea:	f7de fa8f 	bl	800060c <__aeabi_dmul>
 80220ee:	4602      	mov	r2, r0
 80220f0:	460b      	mov	r3, r1
 80220f2:	ec51 0b19 	vmov	r0, r1, d9
 80220f6:	f7de f8d1 	bl	800029c <__aeabi_dsub>
 80220fa:	4652      	mov	r2, sl
 80220fc:	465b      	mov	r3, fp
 80220fe:	f7de fa85 	bl	800060c <__aeabi_dmul>
 8022102:	ec53 2b18 	vmov	r2, r3, d8
 8022106:	f7de f8c9 	bl	800029c <__aeabi_dsub>
 802210a:	a30b      	add	r3, pc, #44	; (adr r3, 8022138 <__kernel_sin+0x148>)
 802210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022110:	4606      	mov	r6, r0
 8022112:	460f      	mov	r7, r1
 8022114:	4640      	mov	r0, r8
 8022116:	4649      	mov	r1, r9
 8022118:	f7de fa78 	bl	800060c <__aeabi_dmul>
 802211c:	4602      	mov	r2, r0
 802211e:	460b      	mov	r3, r1
 8022120:	4630      	mov	r0, r6
 8022122:	4639      	mov	r1, r7
 8022124:	f7de f8bc 	bl	80002a0 <__adddf3>
 8022128:	4602      	mov	r2, r0
 802212a:	460b      	mov	r3, r1
 802212c:	4620      	mov	r0, r4
 802212e:	4629      	mov	r1, r5
 8022130:	f7de f8b4 	bl	800029c <__aeabi_dsub>
 8022134:	e7c4      	b.n	80220c0 <__kernel_sin+0xd0>
 8022136:	bf00      	nop
 8022138:	55555549 	.word	0x55555549
 802213c:	3fc55555 	.word	0x3fc55555
 8022140:	3fe00000 	.word	0x3fe00000
 8022144:	5acfd57c 	.word	0x5acfd57c
 8022148:	3de5d93a 	.word	0x3de5d93a
 802214c:	8a2b9ceb 	.word	0x8a2b9ceb
 8022150:	3e5ae5e6 	.word	0x3e5ae5e6
 8022154:	57b1fe7d 	.word	0x57b1fe7d
 8022158:	3ec71de3 	.word	0x3ec71de3
 802215c:	19c161d5 	.word	0x19c161d5
 8022160:	3f2a01a0 	.word	0x3f2a01a0
 8022164:	1110f8a6 	.word	0x1110f8a6
 8022168:	3f811111 	.word	0x3f811111
 802216c:	00000000 	.word	0x00000000

08022170 <__kernel_tan>:
 8022170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022174:	ed2d 8b06 	vpush	{d8-d10}
 8022178:	ec5b ab10 	vmov	sl, fp, d0
 802217c:	4be0      	ldr	r3, [pc, #896]	; (8022500 <__kernel_tan+0x390>)
 802217e:	b083      	sub	sp, #12
 8022180:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8022184:	429f      	cmp	r7, r3
 8022186:	ec59 8b11 	vmov	r8, r9, d1
 802218a:	4606      	mov	r6, r0
 802218c:	f8cd b000 	str.w	fp, [sp]
 8022190:	dc61      	bgt.n	8022256 <__kernel_tan+0xe6>
 8022192:	ee10 0a10 	vmov	r0, s0
 8022196:	4659      	mov	r1, fp
 8022198:	f7de fce8 	bl	8000b6c <__aeabi_d2iz>
 802219c:	4605      	mov	r5, r0
 802219e:	2800      	cmp	r0, #0
 80221a0:	f040 8083 	bne.w	80222aa <__kernel_tan+0x13a>
 80221a4:	1c73      	adds	r3, r6, #1
 80221a6:	4652      	mov	r2, sl
 80221a8:	4313      	orrs	r3, r2
 80221aa:	433b      	orrs	r3, r7
 80221ac:	d112      	bne.n	80221d4 <__kernel_tan+0x64>
 80221ae:	ec4b ab10 	vmov	d0, sl, fp
 80221b2:	f000 fa39 	bl	8022628 <fabs>
 80221b6:	49d3      	ldr	r1, [pc, #844]	; (8022504 <__kernel_tan+0x394>)
 80221b8:	ec53 2b10 	vmov	r2, r3, d0
 80221bc:	2000      	movs	r0, #0
 80221be:	f7de fb4f 	bl	8000860 <__aeabi_ddiv>
 80221c2:	4682      	mov	sl, r0
 80221c4:	468b      	mov	fp, r1
 80221c6:	ec4b ab10 	vmov	d0, sl, fp
 80221ca:	b003      	add	sp, #12
 80221cc:	ecbd 8b06 	vpop	{d8-d10}
 80221d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221d4:	2e01      	cmp	r6, #1
 80221d6:	d0f6      	beq.n	80221c6 <__kernel_tan+0x56>
 80221d8:	4642      	mov	r2, r8
 80221da:	464b      	mov	r3, r9
 80221dc:	4650      	mov	r0, sl
 80221de:	4659      	mov	r1, fp
 80221e0:	f7de f85e 	bl	80002a0 <__adddf3>
 80221e4:	4602      	mov	r2, r0
 80221e6:	460b      	mov	r3, r1
 80221e8:	460f      	mov	r7, r1
 80221ea:	2000      	movs	r0, #0
 80221ec:	49c6      	ldr	r1, [pc, #792]	; (8022508 <__kernel_tan+0x398>)
 80221ee:	f7de fb37 	bl	8000860 <__aeabi_ddiv>
 80221f2:	e9cd 0100 	strd	r0, r1, [sp]
 80221f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80221fa:	462e      	mov	r6, r5
 80221fc:	4652      	mov	r2, sl
 80221fe:	462c      	mov	r4, r5
 8022200:	4630      	mov	r0, r6
 8022202:	461d      	mov	r5, r3
 8022204:	4639      	mov	r1, r7
 8022206:	465b      	mov	r3, fp
 8022208:	f7de f848 	bl	800029c <__aeabi_dsub>
 802220c:	4602      	mov	r2, r0
 802220e:	460b      	mov	r3, r1
 8022210:	4640      	mov	r0, r8
 8022212:	4649      	mov	r1, r9
 8022214:	f7de f842 	bl	800029c <__aeabi_dsub>
 8022218:	4632      	mov	r2, r6
 802221a:	462b      	mov	r3, r5
 802221c:	f7de f9f6 	bl	800060c <__aeabi_dmul>
 8022220:	4632      	mov	r2, r6
 8022222:	4680      	mov	r8, r0
 8022224:	4689      	mov	r9, r1
 8022226:	462b      	mov	r3, r5
 8022228:	4630      	mov	r0, r6
 802222a:	4639      	mov	r1, r7
 802222c:	f7de f9ee 	bl	800060c <__aeabi_dmul>
 8022230:	4bb4      	ldr	r3, [pc, #720]	; (8022504 <__kernel_tan+0x394>)
 8022232:	2200      	movs	r2, #0
 8022234:	f7de f834 	bl	80002a0 <__adddf3>
 8022238:	4602      	mov	r2, r0
 802223a:	460b      	mov	r3, r1
 802223c:	4640      	mov	r0, r8
 802223e:	4649      	mov	r1, r9
 8022240:	f7de f82e 	bl	80002a0 <__adddf3>
 8022244:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022248:	f7de f9e0 	bl	800060c <__aeabi_dmul>
 802224c:	4622      	mov	r2, r4
 802224e:	462b      	mov	r3, r5
 8022250:	f7de f826 	bl	80002a0 <__adddf3>
 8022254:	e7b5      	b.n	80221c2 <__kernel_tan+0x52>
 8022256:	4bad      	ldr	r3, [pc, #692]	; (802250c <__kernel_tan+0x39c>)
 8022258:	429f      	cmp	r7, r3
 802225a:	dd26      	ble.n	80222aa <__kernel_tan+0x13a>
 802225c:	9b00      	ldr	r3, [sp, #0]
 802225e:	2b00      	cmp	r3, #0
 8022260:	da09      	bge.n	8022276 <__kernel_tan+0x106>
 8022262:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8022266:	469b      	mov	fp, r3
 8022268:	ee10 aa10 	vmov	sl, s0
 802226c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8022270:	ee11 8a10 	vmov	r8, s2
 8022274:	4699      	mov	r9, r3
 8022276:	4652      	mov	r2, sl
 8022278:	465b      	mov	r3, fp
 802227a:	a183      	add	r1, pc, #524	; (adr r1, 8022488 <__kernel_tan+0x318>)
 802227c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022280:	f7de f80c 	bl	800029c <__aeabi_dsub>
 8022284:	4642      	mov	r2, r8
 8022286:	464b      	mov	r3, r9
 8022288:	4604      	mov	r4, r0
 802228a:	460d      	mov	r5, r1
 802228c:	a180      	add	r1, pc, #512	; (adr r1, 8022490 <__kernel_tan+0x320>)
 802228e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022292:	f7de f803 	bl	800029c <__aeabi_dsub>
 8022296:	4622      	mov	r2, r4
 8022298:	462b      	mov	r3, r5
 802229a:	f7de f801 	bl	80002a0 <__adddf3>
 802229e:	f04f 0800 	mov.w	r8, #0
 80222a2:	4682      	mov	sl, r0
 80222a4:	468b      	mov	fp, r1
 80222a6:	f04f 0900 	mov.w	r9, #0
 80222aa:	4652      	mov	r2, sl
 80222ac:	465b      	mov	r3, fp
 80222ae:	4650      	mov	r0, sl
 80222b0:	4659      	mov	r1, fp
 80222b2:	f7de f9ab 	bl	800060c <__aeabi_dmul>
 80222b6:	4602      	mov	r2, r0
 80222b8:	460b      	mov	r3, r1
 80222ba:	ec43 2b18 	vmov	d8, r2, r3
 80222be:	f7de f9a5 	bl	800060c <__aeabi_dmul>
 80222c2:	ec53 2b18 	vmov	r2, r3, d8
 80222c6:	4604      	mov	r4, r0
 80222c8:	460d      	mov	r5, r1
 80222ca:	4650      	mov	r0, sl
 80222cc:	4659      	mov	r1, fp
 80222ce:	f7de f99d 	bl	800060c <__aeabi_dmul>
 80222d2:	a371      	add	r3, pc, #452	; (adr r3, 8022498 <__kernel_tan+0x328>)
 80222d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222d8:	ec41 0b19 	vmov	d9, r0, r1
 80222dc:	4620      	mov	r0, r4
 80222de:	4629      	mov	r1, r5
 80222e0:	f7de f994 	bl	800060c <__aeabi_dmul>
 80222e4:	a36e      	add	r3, pc, #440	; (adr r3, 80224a0 <__kernel_tan+0x330>)
 80222e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222ea:	f7dd ffd9 	bl	80002a0 <__adddf3>
 80222ee:	4622      	mov	r2, r4
 80222f0:	462b      	mov	r3, r5
 80222f2:	f7de f98b 	bl	800060c <__aeabi_dmul>
 80222f6:	a36c      	add	r3, pc, #432	; (adr r3, 80224a8 <__kernel_tan+0x338>)
 80222f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222fc:	f7dd ffd0 	bl	80002a0 <__adddf3>
 8022300:	4622      	mov	r2, r4
 8022302:	462b      	mov	r3, r5
 8022304:	f7de f982 	bl	800060c <__aeabi_dmul>
 8022308:	a369      	add	r3, pc, #420	; (adr r3, 80224b0 <__kernel_tan+0x340>)
 802230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802230e:	f7dd ffc7 	bl	80002a0 <__adddf3>
 8022312:	4622      	mov	r2, r4
 8022314:	462b      	mov	r3, r5
 8022316:	f7de f979 	bl	800060c <__aeabi_dmul>
 802231a:	a367      	add	r3, pc, #412	; (adr r3, 80224b8 <__kernel_tan+0x348>)
 802231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022320:	f7dd ffbe 	bl	80002a0 <__adddf3>
 8022324:	4622      	mov	r2, r4
 8022326:	462b      	mov	r3, r5
 8022328:	f7de f970 	bl	800060c <__aeabi_dmul>
 802232c:	a364      	add	r3, pc, #400	; (adr r3, 80224c0 <__kernel_tan+0x350>)
 802232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022332:	f7dd ffb5 	bl	80002a0 <__adddf3>
 8022336:	ec53 2b18 	vmov	r2, r3, d8
 802233a:	f7de f967 	bl	800060c <__aeabi_dmul>
 802233e:	a362      	add	r3, pc, #392	; (adr r3, 80224c8 <__kernel_tan+0x358>)
 8022340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022344:	ec41 0b1a 	vmov	d10, r0, r1
 8022348:	4620      	mov	r0, r4
 802234a:	4629      	mov	r1, r5
 802234c:	f7de f95e 	bl	800060c <__aeabi_dmul>
 8022350:	a35f      	add	r3, pc, #380	; (adr r3, 80224d0 <__kernel_tan+0x360>)
 8022352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022356:	f7dd ffa3 	bl	80002a0 <__adddf3>
 802235a:	4622      	mov	r2, r4
 802235c:	462b      	mov	r3, r5
 802235e:	f7de f955 	bl	800060c <__aeabi_dmul>
 8022362:	a35d      	add	r3, pc, #372	; (adr r3, 80224d8 <__kernel_tan+0x368>)
 8022364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022368:	f7dd ff9a 	bl	80002a0 <__adddf3>
 802236c:	4622      	mov	r2, r4
 802236e:	462b      	mov	r3, r5
 8022370:	f7de f94c 	bl	800060c <__aeabi_dmul>
 8022374:	a35a      	add	r3, pc, #360	; (adr r3, 80224e0 <__kernel_tan+0x370>)
 8022376:	e9d3 2300 	ldrd	r2, r3, [r3]
 802237a:	f7dd ff91 	bl	80002a0 <__adddf3>
 802237e:	4622      	mov	r2, r4
 8022380:	462b      	mov	r3, r5
 8022382:	f7de f943 	bl	800060c <__aeabi_dmul>
 8022386:	a358      	add	r3, pc, #352	; (adr r3, 80224e8 <__kernel_tan+0x378>)
 8022388:	e9d3 2300 	ldrd	r2, r3, [r3]
 802238c:	f7dd ff88 	bl	80002a0 <__adddf3>
 8022390:	4622      	mov	r2, r4
 8022392:	462b      	mov	r3, r5
 8022394:	f7de f93a 	bl	800060c <__aeabi_dmul>
 8022398:	a355      	add	r3, pc, #340	; (adr r3, 80224f0 <__kernel_tan+0x380>)
 802239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802239e:	f7dd ff7f 	bl	80002a0 <__adddf3>
 80223a2:	4602      	mov	r2, r0
 80223a4:	460b      	mov	r3, r1
 80223a6:	ec51 0b1a 	vmov	r0, r1, d10
 80223aa:	f7dd ff79 	bl	80002a0 <__adddf3>
 80223ae:	ec53 2b19 	vmov	r2, r3, d9
 80223b2:	f7de f92b 	bl	800060c <__aeabi_dmul>
 80223b6:	4642      	mov	r2, r8
 80223b8:	464b      	mov	r3, r9
 80223ba:	f7dd ff71 	bl	80002a0 <__adddf3>
 80223be:	ec53 2b18 	vmov	r2, r3, d8
 80223c2:	f7de f923 	bl	800060c <__aeabi_dmul>
 80223c6:	4642      	mov	r2, r8
 80223c8:	464b      	mov	r3, r9
 80223ca:	f7dd ff69 	bl	80002a0 <__adddf3>
 80223ce:	a34a      	add	r3, pc, #296	; (adr r3, 80224f8 <__kernel_tan+0x388>)
 80223d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223d4:	4604      	mov	r4, r0
 80223d6:	460d      	mov	r5, r1
 80223d8:	ec51 0b19 	vmov	r0, r1, d9
 80223dc:	f7de f916 	bl	800060c <__aeabi_dmul>
 80223e0:	4622      	mov	r2, r4
 80223e2:	462b      	mov	r3, r5
 80223e4:	f7dd ff5c 	bl	80002a0 <__adddf3>
 80223e8:	460b      	mov	r3, r1
 80223ea:	ec41 0b18 	vmov	d8, r0, r1
 80223ee:	4602      	mov	r2, r0
 80223f0:	4659      	mov	r1, fp
 80223f2:	4650      	mov	r0, sl
 80223f4:	f7dd ff54 	bl	80002a0 <__adddf3>
 80223f8:	4b44      	ldr	r3, [pc, #272]	; (802250c <__kernel_tan+0x39c>)
 80223fa:	429f      	cmp	r7, r3
 80223fc:	4604      	mov	r4, r0
 80223fe:	460d      	mov	r5, r1
 8022400:	f340 8086 	ble.w	8022510 <__kernel_tan+0x3a0>
 8022404:	4630      	mov	r0, r6
 8022406:	f7de f897 	bl	8000538 <__aeabi_i2d>
 802240a:	4622      	mov	r2, r4
 802240c:	4680      	mov	r8, r0
 802240e:	4689      	mov	r9, r1
 8022410:	462b      	mov	r3, r5
 8022412:	4620      	mov	r0, r4
 8022414:	4629      	mov	r1, r5
 8022416:	f7de f8f9 	bl	800060c <__aeabi_dmul>
 802241a:	4642      	mov	r2, r8
 802241c:	4606      	mov	r6, r0
 802241e:	460f      	mov	r7, r1
 8022420:	464b      	mov	r3, r9
 8022422:	4620      	mov	r0, r4
 8022424:	4629      	mov	r1, r5
 8022426:	f7dd ff3b 	bl	80002a0 <__adddf3>
 802242a:	4602      	mov	r2, r0
 802242c:	460b      	mov	r3, r1
 802242e:	4630      	mov	r0, r6
 8022430:	4639      	mov	r1, r7
 8022432:	f7de fa15 	bl	8000860 <__aeabi_ddiv>
 8022436:	ec53 2b18 	vmov	r2, r3, d8
 802243a:	f7dd ff2f 	bl	800029c <__aeabi_dsub>
 802243e:	4602      	mov	r2, r0
 8022440:	460b      	mov	r3, r1
 8022442:	4650      	mov	r0, sl
 8022444:	4659      	mov	r1, fp
 8022446:	f7dd ff29 	bl	800029c <__aeabi_dsub>
 802244a:	4602      	mov	r2, r0
 802244c:	460b      	mov	r3, r1
 802244e:	f7dd ff27 	bl	80002a0 <__adddf3>
 8022452:	4602      	mov	r2, r0
 8022454:	460b      	mov	r3, r1
 8022456:	4640      	mov	r0, r8
 8022458:	4649      	mov	r1, r9
 802245a:	f7dd ff1f 	bl	800029c <__aeabi_dsub>
 802245e:	9b00      	ldr	r3, [sp, #0]
 8022460:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8022464:	f00a 0a02 	and.w	sl, sl, #2
 8022468:	4604      	mov	r4, r0
 802246a:	f1ca 0001 	rsb	r0, sl, #1
 802246e:	460d      	mov	r5, r1
 8022470:	f7de f862 	bl	8000538 <__aeabi_i2d>
 8022474:	4602      	mov	r2, r0
 8022476:	460b      	mov	r3, r1
 8022478:	4620      	mov	r0, r4
 802247a:	4629      	mov	r1, r5
 802247c:	f7de f8c6 	bl	800060c <__aeabi_dmul>
 8022480:	e69f      	b.n	80221c2 <__kernel_tan+0x52>
 8022482:	bf00      	nop
 8022484:	f3af 8000 	nop.w
 8022488:	54442d18 	.word	0x54442d18
 802248c:	3fe921fb 	.word	0x3fe921fb
 8022490:	33145c07 	.word	0x33145c07
 8022494:	3c81a626 	.word	0x3c81a626
 8022498:	74bf7ad4 	.word	0x74bf7ad4
 802249c:	3efb2a70 	.word	0x3efb2a70
 80224a0:	32f0a7e9 	.word	0x32f0a7e9
 80224a4:	3f12b80f 	.word	0x3f12b80f
 80224a8:	1a8d1068 	.word	0x1a8d1068
 80224ac:	3f3026f7 	.word	0x3f3026f7
 80224b0:	fee08315 	.word	0xfee08315
 80224b4:	3f57dbc8 	.word	0x3f57dbc8
 80224b8:	e96e8493 	.word	0xe96e8493
 80224bc:	3f8226e3 	.word	0x3f8226e3
 80224c0:	1bb341fe 	.word	0x1bb341fe
 80224c4:	3faba1ba 	.word	0x3faba1ba
 80224c8:	db605373 	.word	0xdb605373
 80224cc:	bef375cb 	.word	0xbef375cb
 80224d0:	a03792a6 	.word	0xa03792a6
 80224d4:	3f147e88 	.word	0x3f147e88
 80224d8:	f2f26501 	.word	0xf2f26501
 80224dc:	3f4344d8 	.word	0x3f4344d8
 80224e0:	c9560328 	.word	0xc9560328
 80224e4:	3f6d6d22 	.word	0x3f6d6d22
 80224e8:	8406d637 	.word	0x8406d637
 80224ec:	3f9664f4 	.word	0x3f9664f4
 80224f0:	1110fe7a 	.word	0x1110fe7a
 80224f4:	3fc11111 	.word	0x3fc11111
 80224f8:	55555563 	.word	0x55555563
 80224fc:	3fd55555 	.word	0x3fd55555
 8022500:	3e2fffff 	.word	0x3e2fffff
 8022504:	3ff00000 	.word	0x3ff00000
 8022508:	bff00000 	.word	0xbff00000
 802250c:	3fe59427 	.word	0x3fe59427
 8022510:	2e01      	cmp	r6, #1
 8022512:	d02f      	beq.n	8022574 <__kernel_tan+0x404>
 8022514:	460f      	mov	r7, r1
 8022516:	4602      	mov	r2, r0
 8022518:	460b      	mov	r3, r1
 802251a:	4689      	mov	r9, r1
 802251c:	2000      	movs	r0, #0
 802251e:	4917      	ldr	r1, [pc, #92]	; (802257c <__kernel_tan+0x40c>)
 8022520:	f7de f99e 	bl	8000860 <__aeabi_ddiv>
 8022524:	2600      	movs	r6, #0
 8022526:	e9cd 0100 	strd	r0, r1, [sp]
 802252a:	4652      	mov	r2, sl
 802252c:	465b      	mov	r3, fp
 802252e:	4630      	mov	r0, r6
 8022530:	4639      	mov	r1, r7
 8022532:	f7dd feb3 	bl	800029c <__aeabi_dsub>
 8022536:	e9dd 4500 	ldrd	r4, r5, [sp]
 802253a:	4602      	mov	r2, r0
 802253c:	460b      	mov	r3, r1
 802253e:	ec51 0b18 	vmov	r0, r1, d8
 8022542:	f7dd feab 	bl	800029c <__aeabi_dsub>
 8022546:	4632      	mov	r2, r6
 8022548:	462b      	mov	r3, r5
 802254a:	f7de f85f 	bl	800060c <__aeabi_dmul>
 802254e:	46b0      	mov	r8, r6
 8022550:	460f      	mov	r7, r1
 8022552:	4642      	mov	r2, r8
 8022554:	462b      	mov	r3, r5
 8022556:	4634      	mov	r4, r6
 8022558:	4649      	mov	r1, r9
 802255a:	4606      	mov	r6, r0
 802255c:	4640      	mov	r0, r8
 802255e:	f7de f855 	bl	800060c <__aeabi_dmul>
 8022562:	4b07      	ldr	r3, [pc, #28]	; (8022580 <__kernel_tan+0x410>)
 8022564:	2200      	movs	r2, #0
 8022566:	f7dd fe9b 	bl	80002a0 <__adddf3>
 802256a:	4602      	mov	r2, r0
 802256c:	460b      	mov	r3, r1
 802256e:	4630      	mov	r0, r6
 8022570:	4639      	mov	r1, r7
 8022572:	e665      	b.n	8022240 <__kernel_tan+0xd0>
 8022574:	4682      	mov	sl, r0
 8022576:	468b      	mov	fp, r1
 8022578:	e625      	b.n	80221c6 <__kernel_tan+0x56>
 802257a:	bf00      	nop
 802257c:	bff00000 	.word	0xbff00000
 8022580:	3ff00000 	.word	0x3ff00000

08022584 <with_errno>:
 8022584:	b570      	push	{r4, r5, r6, lr}
 8022586:	4604      	mov	r4, r0
 8022588:	460d      	mov	r5, r1
 802258a:	4616      	mov	r6, r2
 802258c:	f000 f934 	bl	80227f8 <__errno>
 8022590:	4629      	mov	r1, r5
 8022592:	6006      	str	r6, [r0, #0]
 8022594:	4620      	mov	r0, r4
 8022596:	bd70      	pop	{r4, r5, r6, pc}

08022598 <xflow>:
 8022598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802259a:	4614      	mov	r4, r2
 802259c:	461d      	mov	r5, r3
 802259e:	b108      	cbz	r0, 80225a4 <xflow+0xc>
 80225a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80225a4:	e9cd 2300 	strd	r2, r3, [sp]
 80225a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80225ac:	4620      	mov	r0, r4
 80225ae:	4629      	mov	r1, r5
 80225b0:	f7de f82c 	bl	800060c <__aeabi_dmul>
 80225b4:	2222      	movs	r2, #34	; 0x22
 80225b6:	b003      	add	sp, #12
 80225b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80225bc:	f7ff bfe2 	b.w	8022584 <with_errno>

080225c0 <__math_uflow>:
 80225c0:	b508      	push	{r3, lr}
 80225c2:	2200      	movs	r2, #0
 80225c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80225c8:	f7ff ffe6 	bl	8022598 <xflow>
 80225cc:	ec41 0b10 	vmov	d0, r0, r1
 80225d0:	bd08      	pop	{r3, pc}

080225d2 <__math_oflow>:
 80225d2:	b508      	push	{r3, lr}
 80225d4:	2200      	movs	r2, #0
 80225d6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80225da:	f7ff ffdd 	bl	8022598 <xflow>
 80225de:	ec41 0b10 	vmov	d0, r0, r1
 80225e2:	bd08      	pop	{r3, pc}

080225e4 <with_errnof>:
 80225e4:	b513      	push	{r0, r1, r4, lr}
 80225e6:	4604      	mov	r4, r0
 80225e8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80225ec:	f000 f904 	bl	80227f8 <__errno>
 80225f0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80225f4:	6004      	str	r4, [r0, #0]
 80225f6:	b002      	add	sp, #8
 80225f8:	bd10      	pop	{r4, pc}

080225fa <xflowf>:
 80225fa:	b130      	cbz	r0, 802260a <xflowf+0x10>
 80225fc:	eef1 7a40 	vneg.f32	s15, s0
 8022600:	ee27 0a80 	vmul.f32	s0, s15, s0
 8022604:	2022      	movs	r0, #34	; 0x22
 8022606:	f7ff bfed 	b.w	80225e4 <with_errnof>
 802260a:	eef0 7a40 	vmov.f32	s15, s0
 802260e:	e7f7      	b.n	8022600 <xflowf+0x6>

08022610 <__math_uflowf>:
 8022610:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8022618 <__math_uflowf+0x8>
 8022614:	f7ff bff1 	b.w	80225fa <xflowf>
 8022618:	10000000 	.word	0x10000000

0802261c <__math_oflowf>:
 802261c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8022624 <__math_oflowf+0x8>
 8022620:	f7ff bfeb 	b.w	80225fa <xflowf>
 8022624:	70000000 	.word	0x70000000

08022628 <fabs>:
 8022628:	ec51 0b10 	vmov	r0, r1, d0
 802262c:	ee10 2a10 	vmov	r2, s0
 8022630:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8022634:	ec43 2b10 	vmov	d0, r2, r3
 8022638:	4770      	bx	lr

0802263a <finite>:
 802263a:	b082      	sub	sp, #8
 802263c:	ed8d 0b00 	vstr	d0, [sp]
 8022640:	9801      	ldr	r0, [sp, #4]
 8022642:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8022646:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802264a:	0fc0      	lsrs	r0, r0, #31
 802264c:	b002      	add	sp, #8
 802264e:	4770      	bx	lr

08022650 <nan>:
 8022650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022658 <nan+0x8>
 8022654:	4770      	bx	lr
 8022656:	bf00      	nop
 8022658:	00000000 	.word	0x00000000
 802265c:	7ff80000 	.word	0x7ff80000

08022660 <scalbn>:
 8022660:	b570      	push	{r4, r5, r6, lr}
 8022662:	ec55 4b10 	vmov	r4, r5, d0
 8022666:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802266a:	4606      	mov	r6, r0
 802266c:	462b      	mov	r3, r5
 802266e:	b99a      	cbnz	r2, 8022698 <scalbn+0x38>
 8022670:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022674:	4323      	orrs	r3, r4
 8022676:	d036      	beq.n	80226e6 <scalbn+0x86>
 8022678:	4b39      	ldr	r3, [pc, #228]	; (8022760 <scalbn+0x100>)
 802267a:	4629      	mov	r1, r5
 802267c:	ee10 0a10 	vmov	r0, s0
 8022680:	2200      	movs	r2, #0
 8022682:	f7dd ffc3 	bl	800060c <__aeabi_dmul>
 8022686:	4b37      	ldr	r3, [pc, #220]	; (8022764 <scalbn+0x104>)
 8022688:	429e      	cmp	r6, r3
 802268a:	4604      	mov	r4, r0
 802268c:	460d      	mov	r5, r1
 802268e:	da10      	bge.n	80226b2 <scalbn+0x52>
 8022690:	a32b      	add	r3, pc, #172	; (adr r3, 8022740 <scalbn+0xe0>)
 8022692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022696:	e03a      	b.n	802270e <scalbn+0xae>
 8022698:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802269c:	428a      	cmp	r2, r1
 802269e:	d10c      	bne.n	80226ba <scalbn+0x5a>
 80226a0:	ee10 2a10 	vmov	r2, s0
 80226a4:	4620      	mov	r0, r4
 80226a6:	4629      	mov	r1, r5
 80226a8:	f7dd fdfa 	bl	80002a0 <__adddf3>
 80226ac:	4604      	mov	r4, r0
 80226ae:	460d      	mov	r5, r1
 80226b0:	e019      	b.n	80226e6 <scalbn+0x86>
 80226b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80226b6:	460b      	mov	r3, r1
 80226b8:	3a36      	subs	r2, #54	; 0x36
 80226ba:	4432      	add	r2, r6
 80226bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80226c0:	428a      	cmp	r2, r1
 80226c2:	dd08      	ble.n	80226d6 <scalbn+0x76>
 80226c4:	2d00      	cmp	r5, #0
 80226c6:	a120      	add	r1, pc, #128	; (adr r1, 8022748 <scalbn+0xe8>)
 80226c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80226cc:	da1c      	bge.n	8022708 <scalbn+0xa8>
 80226ce:	a120      	add	r1, pc, #128	; (adr r1, 8022750 <scalbn+0xf0>)
 80226d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80226d4:	e018      	b.n	8022708 <scalbn+0xa8>
 80226d6:	2a00      	cmp	r2, #0
 80226d8:	dd08      	ble.n	80226ec <scalbn+0x8c>
 80226da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80226de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80226e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80226e6:	ec45 4b10 	vmov	d0, r4, r5
 80226ea:	bd70      	pop	{r4, r5, r6, pc}
 80226ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80226f0:	da19      	bge.n	8022726 <scalbn+0xc6>
 80226f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80226f6:	429e      	cmp	r6, r3
 80226f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80226fc:	dd0a      	ble.n	8022714 <scalbn+0xb4>
 80226fe:	a112      	add	r1, pc, #72	; (adr r1, 8022748 <scalbn+0xe8>)
 8022700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022704:	2b00      	cmp	r3, #0
 8022706:	d1e2      	bne.n	80226ce <scalbn+0x6e>
 8022708:	a30f      	add	r3, pc, #60	; (adr r3, 8022748 <scalbn+0xe8>)
 802270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802270e:	f7dd ff7d 	bl	800060c <__aeabi_dmul>
 8022712:	e7cb      	b.n	80226ac <scalbn+0x4c>
 8022714:	a10a      	add	r1, pc, #40	; (adr r1, 8022740 <scalbn+0xe0>)
 8022716:	e9d1 0100 	ldrd	r0, r1, [r1]
 802271a:	2b00      	cmp	r3, #0
 802271c:	d0b8      	beq.n	8022690 <scalbn+0x30>
 802271e:	a10e      	add	r1, pc, #56	; (adr r1, 8022758 <scalbn+0xf8>)
 8022720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022724:	e7b4      	b.n	8022690 <scalbn+0x30>
 8022726:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802272a:	3236      	adds	r2, #54	; 0x36
 802272c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022730:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8022734:	4620      	mov	r0, r4
 8022736:	4b0c      	ldr	r3, [pc, #48]	; (8022768 <scalbn+0x108>)
 8022738:	2200      	movs	r2, #0
 802273a:	e7e8      	b.n	802270e <scalbn+0xae>
 802273c:	f3af 8000 	nop.w
 8022740:	c2f8f359 	.word	0xc2f8f359
 8022744:	01a56e1f 	.word	0x01a56e1f
 8022748:	8800759c 	.word	0x8800759c
 802274c:	7e37e43c 	.word	0x7e37e43c
 8022750:	8800759c 	.word	0x8800759c
 8022754:	fe37e43c 	.word	0xfe37e43c
 8022758:	c2f8f359 	.word	0xc2f8f359
 802275c:	81a56e1f 	.word	0x81a56e1f
 8022760:	43500000 	.word	0x43500000
 8022764:	ffff3cb0 	.word	0xffff3cb0
 8022768:	3c900000 	.word	0x3c900000

0802276c <finitef>:
 802276c:	b082      	sub	sp, #8
 802276e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8022772:	9801      	ldr	r0, [sp, #4]
 8022774:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022778:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 802277c:	bfac      	ite	ge
 802277e:	2000      	movge	r0, #0
 8022780:	2001      	movlt	r0, #1
 8022782:	b002      	add	sp, #8
 8022784:	4770      	bx	lr
	...

08022788 <nanf>:
 8022788:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8022790 <nanf+0x8>
 802278c:	4770      	bx	lr
 802278e:	bf00      	nop
 8022790:	7fc00000 	.word	0x7fc00000

08022794 <abort>:
 8022794:	b508      	push	{r3, lr}
 8022796:	2006      	movs	r0, #6
 8022798:	f000 ffa0 	bl	80236dc <raise>
 802279c:	2001      	movs	r0, #1
 802279e:	f7e6 f9bf 	bl	8008b20 <_exit>
	...

080227a4 <__assert_func>:
 80227a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80227a6:	4614      	mov	r4, r2
 80227a8:	461a      	mov	r2, r3
 80227aa:	4b09      	ldr	r3, [pc, #36]	; (80227d0 <__assert_func+0x2c>)
 80227ac:	681b      	ldr	r3, [r3, #0]
 80227ae:	4605      	mov	r5, r0
 80227b0:	68d8      	ldr	r0, [r3, #12]
 80227b2:	b14c      	cbz	r4, 80227c8 <__assert_func+0x24>
 80227b4:	4b07      	ldr	r3, [pc, #28]	; (80227d4 <__assert_func+0x30>)
 80227b6:	9100      	str	r1, [sp, #0]
 80227b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80227bc:	4906      	ldr	r1, [pc, #24]	; (80227d8 <__assert_func+0x34>)
 80227be:	462b      	mov	r3, r5
 80227c0:	f000 f820 	bl	8022804 <fiprintf>
 80227c4:	f7ff ffe6 	bl	8022794 <abort>
 80227c8:	4b04      	ldr	r3, [pc, #16]	; (80227dc <__assert_func+0x38>)
 80227ca:	461c      	mov	r4, r3
 80227cc:	e7f3      	b.n	80227b6 <__assert_func+0x12>
 80227ce:	bf00      	nop
 80227d0:	200002b8 	.word	0x200002b8
 80227d4:	0804be50 	.word	0x0804be50
 80227d8:	0804be5d 	.word	0x0804be5d
 80227dc:	0804be8b 	.word	0x0804be8b

080227e0 <atof>:
 80227e0:	2100      	movs	r1, #0
 80227e2:	f001 bdcf 	b.w	8024384 <strtod>
	...

080227e8 <calloc>:
 80227e8:	4b02      	ldr	r3, [pc, #8]	; (80227f4 <calloc+0xc>)
 80227ea:	460a      	mov	r2, r1
 80227ec:	4601      	mov	r1, r0
 80227ee:	6818      	ldr	r0, [r3, #0]
 80227f0:	f000 b882 	b.w	80228f8 <_calloc_r>
 80227f4:	200002b8 	.word	0x200002b8

080227f8 <__errno>:
 80227f8:	4b01      	ldr	r3, [pc, #4]	; (8022800 <__errno+0x8>)
 80227fa:	6818      	ldr	r0, [r3, #0]
 80227fc:	4770      	bx	lr
 80227fe:	bf00      	nop
 8022800:	200002b8 	.word	0x200002b8

08022804 <fiprintf>:
 8022804:	b40e      	push	{r1, r2, r3}
 8022806:	b503      	push	{r0, r1, lr}
 8022808:	4601      	mov	r1, r0
 802280a:	ab03      	add	r3, sp, #12
 802280c:	4805      	ldr	r0, [pc, #20]	; (8022824 <fiprintf+0x20>)
 802280e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022812:	6800      	ldr	r0, [r0, #0]
 8022814:	9301      	str	r3, [sp, #4]
 8022816:	f000 f98f 	bl	8022b38 <_vfiprintf_r>
 802281a:	b002      	add	sp, #8
 802281c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022820:	b003      	add	sp, #12
 8022822:	4770      	bx	lr
 8022824:	200002b8 	.word	0x200002b8

08022828 <__libc_init_array>:
 8022828:	b570      	push	{r4, r5, r6, lr}
 802282a:	4d0d      	ldr	r5, [pc, #52]	; (8022860 <__libc_init_array+0x38>)
 802282c:	4c0d      	ldr	r4, [pc, #52]	; (8022864 <__libc_init_array+0x3c>)
 802282e:	1b64      	subs	r4, r4, r5
 8022830:	10a4      	asrs	r4, r4, #2
 8022832:	2600      	movs	r6, #0
 8022834:	42a6      	cmp	r6, r4
 8022836:	d109      	bne.n	802284c <__libc_init_array+0x24>
 8022838:	4d0b      	ldr	r5, [pc, #44]	; (8022868 <__libc_init_array+0x40>)
 802283a:	4c0c      	ldr	r4, [pc, #48]	; (802286c <__libc_init_array+0x44>)
 802283c:	f004 f9c4 	bl	8026bc8 <_init>
 8022840:	1b64      	subs	r4, r4, r5
 8022842:	10a4      	asrs	r4, r4, #2
 8022844:	2600      	movs	r6, #0
 8022846:	42a6      	cmp	r6, r4
 8022848:	d105      	bne.n	8022856 <__libc_init_array+0x2e>
 802284a:	bd70      	pop	{r4, r5, r6, pc}
 802284c:	f855 3b04 	ldr.w	r3, [r5], #4
 8022850:	4798      	blx	r3
 8022852:	3601      	adds	r6, #1
 8022854:	e7ee      	b.n	8022834 <__libc_init_array+0xc>
 8022856:	f855 3b04 	ldr.w	r3, [r5], #4
 802285a:	4798      	blx	r3
 802285c:	3601      	adds	r6, #1
 802285e:	e7f2      	b.n	8022846 <__libc_init_array+0x1e>
 8022860:	0804c2fc 	.word	0x0804c2fc
 8022864:	0804c2fc 	.word	0x0804c2fc
 8022868:	0804c2fc 	.word	0x0804c2fc
 802286c:	0804c304 	.word	0x0804c304

08022870 <__retarget_lock_init_recursive>:
 8022870:	4770      	bx	lr

08022872 <__retarget_lock_acquire_recursive>:
 8022872:	4770      	bx	lr

08022874 <__retarget_lock_release_recursive>:
 8022874:	4770      	bx	lr
	...

08022878 <malloc>:
 8022878:	4b02      	ldr	r3, [pc, #8]	; (8022884 <malloc+0xc>)
 802287a:	4601      	mov	r1, r0
 802287c:	6818      	ldr	r0, [r3, #0]
 802287e:	f000 b8bd 	b.w	80229fc <_malloc_r>
 8022882:	bf00      	nop
 8022884:	200002b8 	.word	0x200002b8

08022888 <free>:
 8022888:	4b02      	ldr	r3, [pc, #8]	; (8022894 <free+0xc>)
 802288a:	4601      	mov	r1, r0
 802288c:	6818      	ldr	r0, [r3, #0]
 802288e:	f000 b849 	b.w	8022924 <_free_r>
 8022892:	bf00      	nop
 8022894:	200002b8 	.word	0x200002b8

08022898 <memcpy>:
 8022898:	440a      	add	r2, r1
 802289a:	4291      	cmp	r1, r2
 802289c:	f100 33ff 	add.w	r3, r0, #4294967295
 80228a0:	d100      	bne.n	80228a4 <memcpy+0xc>
 80228a2:	4770      	bx	lr
 80228a4:	b510      	push	{r4, lr}
 80228a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80228aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80228ae:	4291      	cmp	r1, r2
 80228b0:	d1f9      	bne.n	80228a6 <memcpy+0xe>
 80228b2:	bd10      	pop	{r4, pc}

080228b4 <memmove>:
 80228b4:	4288      	cmp	r0, r1
 80228b6:	b510      	push	{r4, lr}
 80228b8:	eb01 0402 	add.w	r4, r1, r2
 80228bc:	d902      	bls.n	80228c4 <memmove+0x10>
 80228be:	4284      	cmp	r4, r0
 80228c0:	4623      	mov	r3, r4
 80228c2:	d807      	bhi.n	80228d4 <memmove+0x20>
 80228c4:	1e43      	subs	r3, r0, #1
 80228c6:	42a1      	cmp	r1, r4
 80228c8:	d008      	beq.n	80228dc <memmove+0x28>
 80228ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80228ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80228d2:	e7f8      	b.n	80228c6 <memmove+0x12>
 80228d4:	4402      	add	r2, r0
 80228d6:	4601      	mov	r1, r0
 80228d8:	428a      	cmp	r2, r1
 80228da:	d100      	bne.n	80228de <memmove+0x2a>
 80228dc:	bd10      	pop	{r4, pc}
 80228de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80228e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80228e6:	e7f7      	b.n	80228d8 <memmove+0x24>

080228e8 <memset>:
 80228e8:	4402      	add	r2, r0
 80228ea:	4603      	mov	r3, r0
 80228ec:	4293      	cmp	r3, r2
 80228ee:	d100      	bne.n	80228f2 <memset+0xa>
 80228f0:	4770      	bx	lr
 80228f2:	f803 1b01 	strb.w	r1, [r3], #1
 80228f6:	e7f9      	b.n	80228ec <memset+0x4>

080228f8 <_calloc_r>:
 80228f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80228fa:	fba1 2402 	umull	r2, r4, r1, r2
 80228fe:	b94c      	cbnz	r4, 8022914 <_calloc_r+0x1c>
 8022900:	4611      	mov	r1, r2
 8022902:	9201      	str	r2, [sp, #4]
 8022904:	f000 f87a 	bl	80229fc <_malloc_r>
 8022908:	9a01      	ldr	r2, [sp, #4]
 802290a:	4605      	mov	r5, r0
 802290c:	b930      	cbnz	r0, 802291c <_calloc_r+0x24>
 802290e:	4628      	mov	r0, r5
 8022910:	b003      	add	sp, #12
 8022912:	bd30      	pop	{r4, r5, pc}
 8022914:	220c      	movs	r2, #12
 8022916:	6002      	str	r2, [r0, #0]
 8022918:	2500      	movs	r5, #0
 802291a:	e7f8      	b.n	802290e <_calloc_r+0x16>
 802291c:	4621      	mov	r1, r4
 802291e:	f7ff ffe3 	bl	80228e8 <memset>
 8022922:	e7f4      	b.n	802290e <_calloc_r+0x16>

08022924 <_free_r>:
 8022924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022926:	2900      	cmp	r1, #0
 8022928:	d044      	beq.n	80229b4 <_free_r+0x90>
 802292a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802292e:	9001      	str	r0, [sp, #4]
 8022930:	2b00      	cmp	r3, #0
 8022932:	f1a1 0404 	sub.w	r4, r1, #4
 8022936:	bfb8      	it	lt
 8022938:	18e4      	addlt	r4, r4, r3
 802293a:	f003 fa2d 	bl	8025d98 <__malloc_lock>
 802293e:	4a1e      	ldr	r2, [pc, #120]	; (80229b8 <_free_r+0x94>)
 8022940:	9801      	ldr	r0, [sp, #4]
 8022942:	6813      	ldr	r3, [r2, #0]
 8022944:	b933      	cbnz	r3, 8022954 <_free_r+0x30>
 8022946:	6063      	str	r3, [r4, #4]
 8022948:	6014      	str	r4, [r2, #0]
 802294a:	b003      	add	sp, #12
 802294c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022950:	f003 ba28 	b.w	8025da4 <__malloc_unlock>
 8022954:	42a3      	cmp	r3, r4
 8022956:	d908      	bls.n	802296a <_free_r+0x46>
 8022958:	6825      	ldr	r5, [r4, #0]
 802295a:	1961      	adds	r1, r4, r5
 802295c:	428b      	cmp	r3, r1
 802295e:	bf01      	itttt	eq
 8022960:	6819      	ldreq	r1, [r3, #0]
 8022962:	685b      	ldreq	r3, [r3, #4]
 8022964:	1949      	addeq	r1, r1, r5
 8022966:	6021      	streq	r1, [r4, #0]
 8022968:	e7ed      	b.n	8022946 <_free_r+0x22>
 802296a:	461a      	mov	r2, r3
 802296c:	685b      	ldr	r3, [r3, #4]
 802296e:	b10b      	cbz	r3, 8022974 <_free_r+0x50>
 8022970:	42a3      	cmp	r3, r4
 8022972:	d9fa      	bls.n	802296a <_free_r+0x46>
 8022974:	6811      	ldr	r1, [r2, #0]
 8022976:	1855      	adds	r5, r2, r1
 8022978:	42a5      	cmp	r5, r4
 802297a:	d10b      	bne.n	8022994 <_free_r+0x70>
 802297c:	6824      	ldr	r4, [r4, #0]
 802297e:	4421      	add	r1, r4
 8022980:	1854      	adds	r4, r2, r1
 8022982:	42a3      	cmp	r3, r4
 8022984:	6011      	str	r1, [r2, #0]
 8022986:	d1e0      	bne.n	802294a <_free_r+0x26>
 8022988:	681c      	ldr	r4, [r3, #0]
 802298a:	685b      	ldr	r3, [r3, #4]
 802298c:	6053      	str	r3, [r2, #4]
 802298e:	4421      	add	r1, r4
 8022990:	6011      	str	r1, [r2, #0]
 8022992:	e7da      	b.n	802294a <_free_r+0x26>
 8022994:	d902      	bls.n	802299c <_free_r+0x78>
 8022996:	230c      	movs	r3, #12
 8022998:	6003      	str	r3, [r0, #0]
 802299a:	e7d6      	b.n	802294a <_free_r+0x26>
 802299c:	6825      	ldr	r5, [r4, #0]
 802299e:	1961      	adds	r1, r4, r5
 80229a0:	428b      	cmp	r3, r1
 80229a2:	bf04      	itt	eq
 80229a4:	6819      	ldreq	r1, [r3, #0]
 80229a6:	685b      	ldreq	r3, [r3, #4]
 80229a8:	6063      	str	r3, [r4, #4]
 80229aa:	bf04      	itt	eq
 80229ac:	1949      	addeq	r1, r1, r5
 80229ae:	6021      	streq	r1, [r4, #0]
 80229b0:	6054      	str	r4, [r2, #4]
 80229b2:	e7ca      	b.n	802294a <_free_r+0x26>
 80229b4:	b003      	add	sp, #12
 80229b6:	bd30      	pop	{r4, r5, pc}
 80229b8:	20002774 	.word	0x20002774

080229bc <sbrk_aligned>:
 80229bc:	b570      	push	{r4, r5, r6, lr}
 80229be:	4e0e      	ldr	r6, [pc, #56]	; (80229f8 <sbrk_aligned+0x3c>)
 80229c0:	460c      	mov	r4, r1
 80229c2:	6831      	ldr	r1, [r6, #0]
 80229c4:	4605      	mov	r5, r0
 80229c6:	b911      	cbnz	r1, 80229ce <sbrk_aligned+0x12>
 80229c8:	f000 fe50 	bl	802366c <_sbrk_r>
 80229cc:	6030      	str	r0, [r6, #0]
 80229ce:	4621      	mov	r1, r4
 80229d0:	4628      	mov	r0, r5
 80229d2:	f000 fe4b 	bl	802366c <_sbrk_r>
 80229d6:	1c43      	adds	r3, r0, #1
 80229d8:	d00a      	beq.n	80229f0 <sbrk_aligned+0x34>
 80229da:	1cc4      	adds	r4, r0, #3
 80229dc:	f024 0403 	bic.w	r4, r4, #3
 80229e0:	42a0      	cmp	r0, r4
 80229e2:	d007      	beq.n	80229f4 <sbrk_aligned+0x38>
 80229e4:	1a21      	subs	r1, r4, r0
 80229e6:	4628      	mov	r0, r5
 80229e8:	f000 fe40 	bl	802366c <_sbrk_r>
 80229ec:	3001      	adds	r0, #1
 80229ee:	d101      	bne.n	80229f4 <sbrk_aligned+0x38>
 80229f0:	f04f 34ff 	mov.w	r4, #4294967295
 80229f4:	4620      	mov	r0, r4
 80229f6:	bd70      	pop	{r4, r5, r6, pc}
 80229f8:	20002778 	.word	0x20002778

080229fc <_malloc_r>:
 80229fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a00:	1ccd      	adds	r5, r1, #3
 8022a02:	f025 0503 	bic.w	r5, r5, #3
 8022a06:	3508      	adds	r5, #8
 8022a08:	2d0c      	cmp	r5, #12
 8022a0a:	bf38      	it	cc
 8022a0c:	250c      	movcc	r5, #12
 8022a0e:	2d00      	cmp	r5, #0
 8022a10:	4607      	mov	r7, r0
 8022a12:	db01      	blt.n	8022a18 <_malloc_r+0x1c>
 8022a14:	42a9      	cmp	r1, r5
 8022a16:	d905      	bls.n	8022a24 <_malloc_r+0x28>
 8022a18:	230c      	movs	r3, #12
 8022a1a:	603b      	str	r3, [r7, #0]
 8022a1c:	2600      	movs	r6, #0
 8022a1e:	4630      	mov	r0, r6
 8022a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a24:	4e2e      	ldr	r6, [pc, #184]	; (8022ae0 <_malloc_r+0xe4>)
 8022a26:	f003 f9b7 	bl	8025d98 <__malloc_lock>
 8022a2a:	6833      	ldr	r3, [r6, #0]
 8022a2c:	461c      	mov	r4, r3
 8022a2e:	bb34      	cbnz	r4, 8022a7e <_malloc_r+0x82>
 8022a30:	4629      	mov	r1, r5
 8022a32:	4638      	mov	r0, r7
 8022a34:	f7ff ffc2 	bl	80229bc <sbrk_aligned>
 8022a38:	1c43      	adds	r3, r0, #1
 8022a3a:	4604      	mov	r4, r0
 8022a3c:	d14d      	bne.n	8022ada <_malloc_r+0xde>
 8022a3e:	6834      	ldr	r4, [r6, #0]
 8022a40:	4626      	mov	r6, r4
 8022a42:	2e00      	cmp	r6, #0
 8022a44:	d140      	bne.n	8022ac8 <_malloc_r+0xcc>
 8022a46:	6823      	ldr	r3, [r4, #0]
 8022a48:	4631      	mov	r1, r6
 8022a4a:	4638      	mov	r0, r7
 8022a4c:	eb04 0803 	add.w	r8, r4, r3
 8022a50:	f000 fe0c 	bl	802366c <_sbrk_r>
 8022a54:	4580      	cmp	r8, r0
 8022a56:	d13a      	bne.n	8022ace <_malloc_r+0xd2>
 8022a58:	6821      	ldr	r1, [r4, #0]
 8022a5a:	3503      	adds	r5, #3
 8022a5c:	1a6d      	subs	r5, r5, r1
 8022a5e:	f025 0503 	bic.w	r5, r5, #3
 8022a62:	3508      	adds	r5, #8
 8022a64:	2d0c      	cmp	r5, #12
 8022a66:	bf38      	it	cc
 8022a68:	250c      	movcc	r5, #12
 8022a6a:	4629      	mov	r1, r5
 8022a6c:	4638      	mov	r0, r7
 8022a6e:	f7ff ffa5 	bl	80229bc <sbrk_aligned>
 8022a72:	3001      	adds	r0, #1
 8022a74:	d02b      	beq.n	8022ace <_malloc_r+0xd2>
 8022a76:	6823      	ldr	r3, [r4, #0]
 8022a78:	442b      	add	r3, r5
 8022a7a:	6023      	str	r3, [r4, #0]
 8022a7c:	e00e      	b.n	8022a9c <_malloc_r+0xa0>
 8022a7e:	6822      	ldr	r2, [r4, #0]
 8022a80:	1b52      	subs	r2, r2, r5
 8022a82:	d41e      	bmi.n	8022ac2 <_malloc_r+0xc6>
 8022a84:	2a0b      	cmp	r2, #11
 8022a86:	d916      	bls.n	8022ab6 <_malloc_r+0xba>
 8022a88:	1961      	adds	r1, r4, r5
 8022a8a:	42a3      	cmp	r3, r4
 8022a8c:	6025      	str	r5, [r4, #0]
 8022a8e:	bf18      	it	ne
 8022a90:	6059      	strne	r1, [r3, #4]
 8022a92:	6863      	ldr	r3, [r4, #4]
 8022a94:	bf08      	it	eq
 8022a96:	6031      	streq	r1, [r6, #0]
 8022a98:	5162      	str	r2, [r4, r5]
 8022a9a:	604b      	str	r3, [r1, #4]
 8022a9c:	4638      	mov	r0, r7
 8022a9e:	f104 060b 	add.w	r6, r4, #11
 8022aa2:	f003 f97f 	bl	8025da4 <__malloc_unlock>
 8022aa6:	f026 0607 	bic.w	r6, r6, #7
 8022aaa:	1d23      	adds	r3, r4, #4
 8022aac:	1af2      	subs	r2, r6, r3
 8022aae:	d0b6      	beq.n	8022a1e <_malloc_r+0x22>
 8022ab0:	1b9b      	subs	r3, r3, r6
 8022ab2:	50a3      	str	r3, [r4, r2]
 8022ab4:	e7b3      	b.n	8022a1e <_malloc_r+0x22>
 8022ab6:	6862      	ldr	r2, [r4, #4]
 8022ab8:	42a3      	cmp	r3, r4
 8022aba:	bf0c      	ite	eq
 8022abc:	6032      	streq	r2, [r6, #0]
 8022abe:	605a      	strne	r2, [r3, #4]
 8022ac0:	e7ec      	b.n	8022a9c <_malloc_r+0xa0>
 8022ac2:	4623      	mov	r3, r4
 8022ac4:	6864      	ldr	r4, [r4, #4]
 8022ac6:	e7b2      	b.n	8022a2e <_malloc_r+0x32>
 8022ac8:	4634      	mov	r4, r6
 8022aca:	6876      	ldr	r6, [r6, #4]
 8022acc:	e7b9      	b.n	8022a42 <_malloc_r+0x46>
 8022ace:	230c      	movs	r3, #12
 8022ad0:	603b      	str	r3, [r7, #0]
 8022ad2:	4638      	mov	r0, r7
 8022ad4:	f003 f966 	bl	8025da4 <__malloc_unlock>
 8022ad8:	e7a1      	b.n	8022a1e <_malloc_r+0x22>
 8022ada:	6025      	str	r5, [r4, #0]
 8022adc:	e7de      	b.n	8022a9c <_malloc_r+0xa0>
 8022ade:	bf00      	nop
 8022ae0:	20002774 	.word	0x20002774

08022ae4 <__sfputc_r>:
 8022ae4:	6893      	ldr	r3, [r2, #8]
 8022ae6:	3b01      	subs	r3, #1
 8022ae8:	2b00      	cmp	r3, #0
 8022aea:	b410      	push	{r4}
 8022aec:	6093      	str	r3, [r2, #8]
 8022aee:	da08      	bge.n	8022b02 <__sfputc_r+0x1e>
 8022af0:	6994      	ldr	r4, [r2, #24]
 8022af2:	42a3      	cmp	r3, r4
 8022af4:	db01      	blt.n	8022afa <__sfputc_r+0x16>
 8022af6:	290a      	cmp	r1, #10
 8022af8:	d103      	bne.n	8022b02 <__sfputc_r+0x1e>
 8022afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022afe:	f001 bc6d 	b.w	80243dc <__swbuf_r>
 8022b02:	6813      	ldr	r3, [r2, #0]
 8022b04:	1c58      	adds	r0, r3, #1
 8022b06:	6010      	str	r0, [r2, #0]
 8022b08:	7019      	strb	r1, [r3, #0]
 8022b0a:	4608      	mov	r0, r1
 8022b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b10:	4770      	bx	lr

08022b12 <__sfputs_r>:
 8022b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b14:	4606      	mov	r6, r0
 8022b16:	460f      	mov	r7, r1
 8022b18:	4614      	mov	r4, r2
 8022b1a:	18d5      	adds	r5, r2, r3
 8022b1c:	42ac      	cmp	r4, r5
 8022b1e:	d101      	bne.n	8022b24 <__sfputs_r+0x12>
 8022b20:	2000      	movs	r0, #0
 8022b22:	e007      	b.n	8022b34 <__sfputs_r+0x22>
 8022b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b28:	463a      	mov	r2, r7
 8022b2a:	4630      	mov	r0, r6
 8022b2c:	f7ff ffda 	bl	8022ae4 <__sfputc_r>
 8022b30:	1c43      	adds	r3, r0, #1
 8022b32:	d1f3      	bne.n	8022b1c <__sfputs_r+0xa>
 8022b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022b38 <_vfiprintf_r>:
 8022b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b3c:	460d      	mov	r5, r1
 8022b3e:	b09d      	sub	sp, #116	; 0x74
 8022b40:	4614      	mov	r4, r2
 8022b42:	4698      	mov	r8, r3
 8022b44:	4606      	mov	r6, r0
 8022b46:	b118      	cbz	r0, 8022b50 <_vfiprintf_r+0x18>
 8022b48:	6983      	ldr	r3, [r0, #24]
 8022b4a:	b90b      	cbnz	r3, 8022b50 <_vfiprintf_r+0x18>
 8022b4c:	f002 fc9c 	bl	8025488 <__sinit>
 8022b50:	4b89      	ldr	r3, [pc, #548]	; (8022d78 <_vfiprintf_r+0x240>)
 8022b52:	429d      	cmp	r5, r3
 8022b54:	d11b      	bne.n	8022b8e <_vfiprintf_r+0x56>
 8022b56:	6875      	ldr	r5, [r6, #4]
 8022b58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022b5a:	07d9      	lsls	r1, r3, #31
 8022b5c:	d405      	bmi.n	8022b6a <_vfiprintf_r+0x32>
 8022b5e:	89ab      	ldrh	r3, [r5, #12]
 8022b60:	059a      	lsls	r2, r3, #22
 8022b62:	d402      	bmi.n	8022b6a <_vfiprintf_r+0x32>
 8022b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022b66:	f7ff fe84 	bl	8022872 <__retarget_lock_acquire_recursive>
 8022b6a:	89ab      	ldrh	r3, [r5, #12]
 8022b6c:	071b      	lsls	r3, r3, #28
 8022b6e:	d501      	bpl.n	8022b74 <_vfiprintf_r+0x3c>
 8022b70:	692b      	ldr	r3, [r5, #16]
 8022b72:	b9eb      	cbnz	r3, 8022bb0 <_vfiprintf_r+0x78>
 8022b74:	4629      	mov	r1, r5
 8022b76:	4630      	mov	r0, r6
 8022b78:	f001 fc82 	bl	8024480 <__swsetup_r>
 8022b7c:	b1c0      	cbz	r0, 8022bb0 <_vfiprintf_r+0x78>
 8022b7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022b80:	07dc      	lsls	r4, r3, #31
 8022b82:	d50e      	bpl.n	8022ba2 <_vfiprintf_r+0x6a>
 8022b84:	f04f 30ff 	mov.w	r0, #4294967295
 8022b88:	b01d      	add	sp, #116	; 0x74
 8022b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b8e:	4b7b      	ldr	r3, [pc, #492]	; (8022d7c <_vfiprintf_r+0x244>)
 8022b90:	429d      	cmp	r5, r3
 8022b92:	d101      	bne.n	8022b98 <_vfiprintf_r+0x60>
 8022b94:	68b5      	ldr	r5, [r6, #8]
 8022b96:	e7df      	b.n	8022b58 <_vfiprintf_r+0x20>
 8022b98:	4b79      	ldr	r3, [pc, #484]	; (8022d80 <_vfiprintf_r+0x248>)
 8022b9a:	429d      	cmp	r5, r3
 8022b9c:	bf08      	it	eq
 8022b9e:	68f5      	ldreq	r5, [r6, #12]
 8022ba0:	e7da      	b.n	8022b58 <_vfiprintf_r+0x20>
 8022ba2:	89ab      	ldrh	r3, [r5, #12]
 8022ba4:	0598      	lsls	r0, r3, #22
 8022ba6:	d4ed      	bmi.n	8022b84 <_vfiprintf_r+0x4c>
 8022ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022baa:	f7ff fe63 	bl	8022874 <__retarget_lock_release_recursive>
 8022bae:	e7e9      	b.n	8022b84 <_vfiprintf_r+0x4c>
 8022bb0:	2300      	movs	r3, #0
 8022bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8022bb4:	2320      	movs	r3, #32
 8022bb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022bba:	f8cd 800c 	str.w	r8, [sp, #12]
 8022bbe:	2330      	movs	r3, #48	; 0x30
 8022bc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022d84 <_vfiprintf_r+0x24c>
 8022bc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022bc8:	f04f 0901 	mov.w	r9, #1
 8022bcc:	4623      	mov	r3, r4
 8022bce:	469a      	mov	sl, r3
 8022bd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022bd4:	b10a      	cbz	r2, 8022bda <_vfiprintf_r+0xa2>
 8022bd6:	2a25      	cmp	r2, #37	; 0x25
 8022bd8:	d1f9      	bne.n	8022bce <_vfiprintf_r+0x96>
 8022bda:	ebba 0b04 	subs.w	fp, sl, r4
 8022bde:	d00b      	beq.n	8022bf8 <_vfiprintf_r+0xc0>
 8022be0:	465b      	mov	r3, fp
 8022be2:	4622      	mov	r2, r4
 8022be4:	4629      	mov	r1, r5
 8022be6:	4630      	mov	r0, r6
 8022be8:	f7ff ff93 	bl	8022b12 <__sfputs_r>
 8022bec:	3001      	adds	r0, #1
 8022bee:	f000 80aa 	beq.w	8022d46 <_vfiprintf_r+0x20e>
 8022bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022bf4:	445a      	add	r2, fp
 8022bf6:	9209      	str	r2, [sp, #36]	; 0x24
 8022bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8022bfc:	2b00      	cmp	r3, #0
 8022bfe:	f000 80a2 	beq.w	8022d46 <_vfiprintf_r+0x20e>
 8022c02:	2300      	movs	r3, #0
 8022c04:	f04f 32ff 	mov.w	r2, #4294967295
 8022c08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022c0c:	f10a 0a01 	add.w	sl, sl, #1
 8022c10:	9304      	str	r3, [sp, #16]
 8022c12:	9307      	str	r3, [sp, #28]
 8022c14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022c18:	931a      	str	r3, [sp, #104]	; 0x68
 8022c1a:	4654      	mov	r4, sl
 8022c1c:	2205      	movs	r2, #5
 8022c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c22:	4858      	ldr	r0, [pc, #352]	; (8022d84 <_vfiprintf_r+0x24c>)
 8022c24:	f7dd fad4 	bl	80001d0 <memchr>
 8022c28:	9a04      	ldr	r2, [sp, #16]
 8022c2a:	b9d8      	cbnz	r0, 8022c64 <_vfiprintf_r+0x12c>
 8022c2c:	06d1      	lsls	r1, r2, #27
 8022c2e:	bf44      	itt	mi
 8022c30:	2320      	movmi	r3, #32
 8022c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022c36:	0713      	lsls	r3, r2, #28
 8022c38:	bf44      	itt	mi
 8022c3a:	232b      	movmi	r3, #43	; 0x2b
 8022c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022c40:	f89a 3000 	ldrb.w	r3, [sl]
 8022c44:	2b2a      	cmp	r3, #42	; 0x2a
 8022c46:	d015      	beq.n	8022c74 <_vfiprintf_r+0x13c>
 8022c48:	9a07      	ldr	r2, [sp, #28]
 8022c4a:	4654      	mov	r4, sl
 8022c4c:	2000      	movs	r0, #0
 8022c4e:	f04f 0c0a 	mov.w	ip, #10
 8022c52:	4621      	mov	r1, r4
 8022c54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022c58:	3b30      	subs	r3, #48	; 0x30
 8022c5a:	2b09      	cmp	r3, #9
 8022c5c:	d94e      	bls.n	8022cfc <_vfiprintf_r+0x1c4>
 8022c5e:	b1b0      	cbz	r0, 8022c8e <_vfiprintf_r+0x156>
 8022c60:	9207      	str	r2, [sp, #28]
 8022c62:	e014      	b.n	8022c8e <_vfiprintf_r+0x156>
 8022c64:	eba0 0308 	sub.w	r3, r0, r8
 8022c68:	fa09 f303 	lsl.w	r3, r9, r3
 8022c6c:	4313      	orrs	r3, r2
 8022c6e:	9304      	str	r3, [sp, #16]
 8022c70:	46a2      	mov	sl, r4
 8022c72:	e7d2      	b.n	8022c1a <_vfiprintf_r+0xe2>
 8022c74:	9b03      	ldr	r3, [sp, #12]
 8022c76:	1d19      	adds	r1, r3, #4
 8022c78:	681b      	ldr	r3, [r3, #0]
 8022c7a:	9103      	str	r1, [sp, #12]
 8022c7c:	2b00      	cmp	r3, #0
 8022c7e:	bfbb      	ittet	lt
 8022c80:	425b      	neglt	r3, r3
 8022c82:	f042 0202 	orrlt.w	r2, r2, #2
 8022c86:	9307      	strge	r3, [sp, #28]
 8022c88:	9307      	strlt	r3, [sp, #28]
 8022c8a:	bfb8      	it	lt
 8022c8c:	9204      	strlt	r2, [sp, #16]
 8022c8e:	7823      	ldrb	r3, [r4, #0]
 8022c90:	2b2e      	cmp	r3, #46	; 0x2e
 8022c92:	d10c      	bne.n	8022cae <_vfiprintf_r+0x176>
 8022c94:	7863      	ldrb	r3, [r4, #1]
 8022c96:	2b2a      	cmp	r3, #42	; 0x2a
 8022c98:	d135      	bne.n	8022d06 <_vfiprintf_r+0x1ce>
 8022c9a:	9b03      	ldr	r3, [sp, #12]
 8022c9c:	1d1a      	adds	r2, r3, #4
 8022c9e:	681b      	ldr	r3, [r3, #0]
 8022ca0:	9203      	str	r2, [sp, #12]
 8022ca2:	2b00      	cmp	r3, #0
 8022ca4:	bfb8      	it	lt
 8022ca6:	f04f 33ff 	movlt.w	r3, #4294967295
 8022caa:	3402      	adds	r4, #2
 8022cac:	9305      	str	r3, [sp, #20]
 8022cae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022d94 <_vfiprintf_r+0x25c>
 8022cb2:	7821      	ldrb	r1, [r4, #0]
 8022cb4:	2203      	movs	r2, #3
 8022cb6:	4650      	mov	r0, sl
 8022cb8:	f7dd fa8a 	bl	80001d0 <memchr>
 8022cbc:	b140      	cbz	r0, 8022cd0 <_vfiprintf_r+0x198>
 8022cbe:	2340      	movs	r3, #64	; 0x40
 8022cc0:	eba0 000a 	sub.w	r0, r0, sl
 8022cc4:	fa03 f000 	lsl.w	r0, r3, r0
 8022cc8:	9b04      	ldr	r3, [sp, #16]
 8022cca:	4303      	orrs	r3, r0
 8022ccc:	3401      	adds	r4, #1
 8022cce:	9304      	str	r3, [sp, #16]
 8022cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022cd4:	482c      	ldr	r0, [pc, #176]	; (8022d88 <_vfiprintf_r+0x250>)
 8022cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022cda:	2206      	movs	r2, #6
 8022cdc:	f7dd fa78 	bl	80001d0 <memchr>
 8022ce0:	2800      	cmp	r0, #0
 8022ce2:	d03f      	beq.n	8022d64 <_vfiprintf_r+0x22c>
 8022ce4:	4b29      	ldr	r3, [pc, #164]	; (8022d8c <_vfiprintf_r+0x254>)
 8022ce6:	bb1b      	cbnz	r3, 8022d30 <_vfiprintf_r+0x1f8>
 8022ce8:	9b03      	ldr	r3, [sp, #12]
 8022cea:	3307      	adds	r3, #7
 8022cec:	f023 0307 	bic.w	r3, r3, #7
 8022cf0:	3308      	adds	r3, #8
 8022cf2:	9303      	str	r3, [sp, #12]
 8022cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022cf6:	443b      	add	r3, r7
 8022cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8022cfa:	e767      	b.n	8022bcc <_vfiprintf_r+0x94>
 8022cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8022d00:	460c      	mov	r4, r1
 8022d02:	2001      	movs	r0, #1
 8022d04:	e7a5      	b.n	8022c52 <_vfiprintf_r+0x11a>
 8022d06:	2300      	movs	r3, #0
 8022d08:	3401      	adds	r4, #1
 8022d0a:	9305      	str	r3, [sp, #20]
 8022d0c:	4619      	mov	r1, r3
 8022d0e:	f04f 0c0a 	mov.w	ip, #10
 8022d12:	4620      	mov	r0, r4
 8022d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022d18:	3a30      	subs	r2, #48	; 0x30
 8022d1a:	2a09      	cmp	r2, #9
 8022d1c:	d903      	bls.n	8022d26 <_vfiprintf_r+0x1ee>
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	d0c5      	beq.n	8022cae <_vfiprintf_r+0x176>
 8022d22:	9105      	str	r1, [sp, #20]
 8022d24:	e7c3      	b.n	8022cae <_vfiprintf_r+0x176>
 8022d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8022d2a:	4604      	mov	r4, r0
 8022d2c:	2301      	movs	r3, #1
 8022d2e:	e7f0      	b.n	8022d12 <_vfiprintf_r+0x1da>
 8022d30:	ab03      	add	r3, sp, #12
 8022d32:	9300      	str	r3, [sp, #0]
 8022d34:	462a      	mov	r2, r5
 8022d36:	4b16      	ldr	r3, [pc, #88]	; (8022d90 <_vfiprintf_r+0x258>)
 8022d38:	a904      	add	r1, sp, #16
 8022d3a:	4630      	mov	r0, r6
 8022d3c:	f000 f8cc 	bl	8022ed8 <_printf_float>
 8022d40:	4607      	mov	r7, r0
 8022d42:	1c78      	adds	r0, r7, #1
 8022d44:	d1d6      	bne.n	8022cf4 <_vfiprintf_r+0x1bc>
 8022d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022d48:	07d9      	lsls	r1, r3, #31
 8022d4a:	d405      	bmi.n	8022d58 <_vfiprintf_r+0x220>
 8022d4c:	89ab      	ldrh	r3, [r5, #12]
 8022d4e:	059a      	lsls	r2, r3, #22
 8022d50:	d402      	bmi.n	8022d58 <_vfiprintf_r+0x220>
 8022d52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022d54:	f7ff fd8e 	bl	8022874 <__retarget_lock_release_recursive>
 8022d58:	89ab      	ldrh	r3, [r5, #12]
 8022d5a:	065b      	lsls	r3, r3, #25
 8022d5c:	f53f af12 	bmi.w	8022b84 <_vfiprintf_r+0x4c>
 8022d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022d62:	e711      	b.n	8022b88 <_vfiprintf_r+0x50>
 8022d64:	ab03      	add	r3, sp, #12
 8022d66:	9300      	str	r3, [sp, #0]
 8022d68:	462a      	mov	r2, r5
 8022d6a:	4b09      	ldr	r3, [pc, #36]	; (8022d90 <_vfiprintf_r+0x258>)
 8022d6c:	a904      	add	r1, sp, #16
 8022d6e:	4630      	mov	r0, r6
 8022d70:	f000 fb56 	bl	8023420 <_printf_i>
 8022d74:	e7e4      	b.n	8022d40 <_vfiprintf_r+0x208>
 8022d76:	bf00      	nop
 8022d78:	0804c0dc 	.word	0x0804c0dc
 8022d7c:	0804c0fc 	.word	0x0804c0fc
 8022d80:	0804c0bc 	.word	0x0804c0bc
 8022d84:	0804be90 	.word	0x0804be90
 8022d88:	0804be9a 	.word	0x0804be9a
 8022d8c:	08022ed9 	.word	0x08022ed9
 8022d90:	08022b13 	.word	0x08022b13
 8022d94:	0804be96 	.word	0x0804be96

08022d98 <__cvt>:
 8022d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022d9c:	ec55 4b10 	vmov	r4, r5, d0
 8022da0:	2d00      	cmp	r5, #0
 8022da2:	460e      	mov	r6, r1
 8022da4:	4619      	mov	r1, r3
 8022da6:	462b      	mov	r3, r5
 8022da8:	bfbb      	ittet	lt
 8022daa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8022dae:	461d      	movlt	r5, r3
 8022db0:	2300      	movge	r3, #0
 8022db2:	232d      	movlt	r3, #45	; 0x2d
 8022db4:	700b      	strb	r3, [r1, #0]
 8022db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022db8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022dbc:	4691      	mov	r9, r2
 8022dbe:	f023 0820 	bic.w	r8, r3, #32
 8022dc2:	bfbc      	itt	lt
 8022dc4:	4622      	movlt	r2, r4
 8022dc6:	4614      	movlt	r4, r2
 8022dc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022dcc:	d005      	beq.n	8022dda <__cvt+0x42>
 8022dce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8022dd2:	d100      	bne.n	8022dd6 <__cvt+0x3e>
 8022dd4:	3601      	adds	r6, #1
 8022dd6:	2102      	movs	r1, #2
 8022dd8:	e000      	b.n	8022ddc <__cvt+0x44>
 8022dda:	2103      	movs	r1, #3
 8022ddc:	ab03      	add	r3, sp, #12
 8022dde:	9301      	str	r3, [sp, #4]
 8022de0:	ab02      	add	r3, sp, #8
 8022de2:	9300      	str	r3, [sp, #0]
 8022de4:	ec45 4b10 	vmov	d0, r4, r5
 8022de8:	4653      	mov	r3, sl
 8022dea:	4632      	mov	r2, r6
 8022dec:	f001 fc44 	bl	8024678 <_dtoa_r>
 8022df0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8022df4:	4607      	mov	r7, r0
 8022df6:	d102      	bne.n	8022dfe <__cvt+0x66>
 8022df8:	f019 0f01 	tst.w	r9, #1
 8022dfc:	d022      	beq.n	8022e44 <__cvt+0xac>
 8022dfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022e02:	eb07 0906 	add.w	r9, r7, r6
 8022e06:	d110      	bne.n	8022e2a <__cvt+0x92>
 8022e08:	783b      	ldrb	r3, [r7, #0]
 8022e0a:	2b30      	cmp	r3, #48	; 0x30
 8022e0c:	d10a      	bne.n	8022e24 <__cvt+0x8c>
 8022e0e:	2200      	movs	r2, #0
 8022e10:	2300      	movs	r3, #0
 8022e12:	4620      	mov	r0, r4
 8022e14:	4629      	mov	r1, r5
 8022e16:	f7dd fe61 	bl	8000adc <__aeabi_dcmpeq>
 8022e1a:	b918      	cbnz	r0, 8022e24 <__cvt+0x8c>
 8022e1c:	f1c6 0601 	rsb	r6, r6, #1
 8022e20:	f8ca 6000 	str.w	r6, [sl]
 8022e24:	f8da 3000 	ldr.w	r3, [sl]
 8022e28:	4499      	add	r9, r3
 8022e2a:	2200      	movs	r2, #0
 8022e2c:	2300      	movs	r3, #0
 8022e2e:	4620      	mov	r0, r4
 8022e30:	4629      	mov	r1, r5
 8022e32:	f7dd fe53 	bl	8000adc <__aeabi_dcmpeq>
 8022e36:	b108      	cbz	r0, 8022e3c <__cvt+0xa4>
 8022e38:	f8cd 900c 	str.w	r9, [sp, #12]
 8022e3c:	2230      	movs	r2, #48	; 0x30
 8022e3e:	9b03      	ldr	r3, [sp, #12]
 8022e40:	454b      	cmp	r3, r9
 8022e42:	d307      	bcc.n	8022e54 <__cvt+0xbc>
 8022e44:	9b03      	ldr	r3, [sp, #12]
 8022e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022e48:	1bdb      	subs	r3, r3, r7
 8022e4a:	4638      	mov	r0, r7
 8022e4c:	6013      	str	r3, [r2, #0]
 8022e4e:	b004      	add	sp, #16
 8022e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e54:	1c59      	adds	r1, r3, #1
 8022e56:	9103      	str	r1, [sp, #12]
 8022e58:	701a      	strb	r2, [r3, #0]
 8022e5a:	e7f0      	b.n	8022e3e <__cvt+0xa6>

08022e5c <__exponent>:
 8022e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022e5e:	4603      	mov	r3, r0
 8022e60:	2900      	cmp	r1, #0
 8022e62:	bfb8      	it	lt
 8022e64:	4249      	neglt	r1, r1
 8022e66:	f803 2b02 	strb.w	r2, [r3], #2
 8022e6a:	bfb4      	ite	lt
 8022e6c:	222d      	movlt	r2, #45	; 0x2d
 8022e6e:	222b      	movge	r2, #43	; 0x2b
 8022e70:	2909      	cmp	r1, #9
 8022e72:	7042      	strb	r2, [r0, #1]
 8022e74:	dd2a      	ble.n	8022ecc <__exponent+0x70>
 8022e76:	f10d 0407 	add.w	r4, sp, #7
 8022e7a:	46a4      	mov	ip, r4
 8022e7c:	270a      	movs	r7, #10
 8022e7e:	46a6      	mov	lr, r4
 8022e80:	460a      	mov	r2, r1
 8022e82:	fb91 f6f7 	sdiv	r6, r1, r7
 8022e86:	fb07 1516 	mls	r5, r7, r6, r1
 8022e8a:	3530      	adds	r5, #48	; 0x30
 8022e8c:	2a63      	cmp	r2, #99	; 0x63
 8022e8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8022e92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022e96:	4631      	mov	r1, r6
 8022e98:	dcf1      	bgt.n	8022e7e <__exponent+0x22>
 8022e9a:	3130      	adds	r1, #48	; 0x30
 8022e9c:	f1ae 0502 	sub.w	r5, lr, #2
 8022ea0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8022ea4:	1c44      	adds	r4, r0, #1
 8022ea6:	4629      	mov	r1, r5
 8022ea8:	4561      	cmp	r1, ip
 8022eaa:	d30a      	bcc.n	8022ec2 <__exponent+0x66>
 8022eac:	f10d 0209 	add.w	r2, sp, #9
 8022eb0:	eba2 020e 	sub.w	r2, r2, lr
 8022eb4:	4565      	cmp	r5, ip
 8022eb6:	bf88      	it	hi
 8022eb8:	2200      	movhi	r2, #0
 8022eba:	4413      	add	r3, r2
 8022ebc:	1a18      	subs	r0, r3, r0
 8022ebe:	b003      	add	sp, #12
 8022ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022ec6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8022eca:	e7ed      	b.n	8022ea8 <__exponent+0x4c>
 8022ecc:	2330      	movs	r3, #48	; 0x30
 8022ece:	3130      	adds	r1, #48	; 0x30
 8022ed0:	7083      	strb	r3, [r0, #2]
 8022ed2:	70c1      	strb	r1, [r0, #3]
 8022ed4:	1d03      	adds	r3, r0, #4
 8022ed6:	e7f1      	b.n	8022ebc <__exponent+0x60>

08022ed8 <_printf_float>:
 8022ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022edc:	ed2d 8b02 	vpush	{d8}
 8022ee0:	b08d      	sub	sp, #52	; 0x34
 8022ee2:	460c      	mov	r4, r1
 8022ee4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8022ee8:	4616      	mov	r6, r2
 8022eea:	461f      	mov	r7, r3
 8022eec:	4605      	mov	r5, r0
 8022eee:	f002 fed7 	bl	8025ca0 <_localeconv_r>
 8022ef2:	f8d0 a000 	ldr.w	sl, [r0]
 8022ef6:	4650      	mov	r0, sl
 8022ef8:	f7dd f9c4 	bl	8000284 <strlen>
 8022efc:	2300      	movs	r3, #0
 8022efe:	930a      	str	r3, [sp, #40]	; 0x28
 8022f00:	6823      	ldr	r3, [r4, #0]
 8022f02:	9305      	str	r3, [sp, #20]
 8022f04:	f8d8 3000 	ldr.w	r3, [r8]
 8022f08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8022f0c:	3307      	adds	r3, #7
 8022f0e:	f023 0307 	bic.w	r3, r3, #7
 8022f12:	f103 0208 	add.w	r2, r3, #8
 8022f16:	f8c8 2000 	str.w	r2, [r8]
 8022f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8022f22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8022f26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022f2a:	9307      	str	r3, [sp, #28]
 8022f2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8022f30:	ee08 0a10 	vmov	s16, r0
 8022f34:	4b9f      	ldr	r3, [pc, #636]	; (80231b4 <_printf_float+0x2dc>)
 8022f36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8022f3e:	f7dd fdff 	bl	8000b40 <__aeabi_dcmpun>
 8022f42:	bb88      	cbnz	r0, 8022fa8 <_printf_float+0xd0>
 8022f44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f48:	4b9a      	ldr	r3, [pc, #616]	; (80231b4 <_printf_float+0x2dc>)
 8022f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8022f4e:	f7dd fdd9 	bl	8000b04 <__aeabi_dcmple>
 8022f52:	bb48      	cbnz	r0, 8022fa8 <_printf_float+0xd0>
 8022f54:	2200      	movs	r2, #0
 8022f56:	2300      	movs	r3, #0
 8022f58:	4640      	mov	r0, r8
 8022f5a:	4649      	mov	r1, r9
 8022f5c:	f7dd fdc8 	bl	8000af0 <__aeabi_dcmplt>
 8022f60:	b110      	cbz	r0, 8022f68 <_printf_float+0x90>
 8022f62:	232d      	movs	r3, #45	; 0x2d
 8022f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022f68:	4b93      	ldr	r3, [pc, #588]	; (80231b8 <_printf_float+0x2e0>)
 8022f6a:	4894      	ldr	r0, [pc, #592]	; (80231bc <_printf_float+0x2e4>)
 8022f6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8022f70:	bf94      	ite	ls
 8022f72:	4698      	movls	r8, r3
 8022f74:	4680      	movhi	r8, r0
 8022f76:	2303      	movs	r3, #3
 8022f78:	6123      	str	r3, [r4, #16]
 8022f7a:	9b05      	ldr	r3, [sp, #20]
 8022f7c:	f023 0204 	bic.w	r2, r3, #4
 8022f80:	6022      	str	r2, [r4, #0]
 8022f82:	f04f 0900 	mov.w	r9, #0
 8022f86:	9700      	str	r7, [sp, #0]
 8022f88:	4633      	mov	r3, r6
 8022f8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8022f8c:	4621      	mov	r1, r4
 8022f8e:	4628      	mov	r0, r5
 8022f90:	f000 f9d8 	bl	8023344 <_printf_common>
 8022f94:	3001      	adds	r0, #1
 8022f96:	f040 8090 	bne.w	80230ba <_printf_float+0x1e2>
 8022f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8022f9e:	b00d      	add	sp, #52	; 0x34
 8022fa0:	ecbd 8b02 	vpop	{d8}
 8022fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fa8:	4642      	mov	r2, r8
 8022faa:	464b      	mov	r3, r9
 8022fac:	4640      	mov	r0, r8
 8022fae:	4649      	mov	r1, r9
 8022fb0:	f7dd fdc6 	bl	8000b40 <__aeabi_dcmpun>
 8022fb4:	b140      	cbz	r0, 8022fc8 <_printf_float+0xf0>
 8022fb6:	464b      	mov	r3, r9
 8022fb8:	2b00      	cmp	r3, #0
 8022fba:	bfbc      	itt	lt
 8022fbc:	232d      	movlt	r3, #45	; 0x2d
 8022fbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8022fc2:	487f      	ldr	r0, [pc, #508]	; (80231c0 <_printf_float+0x2e8>)
 8022fc4:	4b7f      	ldr	r3, [pc, #508]	; (80231c4 <_printf_float+0x2ec>)
 8022fc6:	e7d1      	b.n	8022f6c <_printf_float+0x94>
 8022fc8:	6863      	ldr	r3, [r4, #4]
 8022fca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8022fce:	9206      	str	r2, [sp, #24]
 8022fd0:	1c5a      	adds	r2, r3, #1
 8022fd2:	d13f      	bne.n	8023054 <_printf_float+0x17c>
 8022fd4:	2306      	movs	r3, #6
 8022fd6:	6063      	str	r3, [r4, #4]
 8022fd8:	9b05      	ldr	r3, [sp, #20]
 8022fda:	6861      	ldr	r1, [r4, #4]
 8022fdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8022fe0:	2300      	movs	r3, #0
 8022fe2:	9303      	str	r3, [sp, #12]
 8022fe4:	ab0a      	add	r3, sp, #40	; 0x28
 8022fe6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8022fea:	ab09      	add	r3, sp, #36	; 0x24
 8022fec:	ec49 8b10 	vmov	d0, r8, r9
 8022ff0:	9300      	str	r3, [sp, #0]
 8022ff2:	6022      	str	r2, [r4, #0]
 8022ff4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8022ff8:	4628      	mov	r0, r5
 8022ffa:	f7ff fecd 	bl	8022d98 <__cvt>
 8022ffe:	9b06      	ldr	r3, [sp, #24]
 8023000:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023002:	2b47      	cmp	r3, #71	; 0x47
 8023004:	4680      	mov	r8, r0
 8023006:	d108      	bne.n	802301a <_printf_float+0x142>
 8023008:	1cc8      	adds	r0, r1, #3
 802300a:	db02      	blt.n	8023012 <_printf_float+0x13a>
 802300c:	6863      	ldr	r3, [r4, #4]
 802300e:	4299      	cmp	r1, r3
 8023010:	dd41      	ble.n	8023096 <_printf_float+0x1be>
 8023012:	f1ab 0b02 	sub.w	fp, fp, #2
 8023016:	fa5f fb8b 	uxtb.w	fp, fp
 802301a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802301e:	d820      	bhi.n	8023062 <_printf_float+0x18a>
 8023020:	3901      	subs	r1, #1
 8023022:	465a      	mov	r2, fp
 8023024:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8023028:	9109      	str	r1, [sp, #36]	; 0x24
 802302a:	f7ff ff17 	bl	8022e5c <__exponent>
 802302e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023030:	1813      	adds	r3, r2, r0
 8023032:	2a01      	cmp	r2, #1
 8023034:	4681      	mov	r9, r0
 8023036:	6123      	str	r3, [r4, #16]
 8023038:	dc02      	bgt.n	8023040 <_printf_float+0x168>
 802303a:	6822      	ldr	r2, [r4, #0]
 802303c:	07d2      	lsls	r2, r2, #31
 802303e:	d501      	bpl.n	8023044 <_printf_float+0x16c>
 8023040:	3301      	adds	r3, #1
 8023042:	6123      	str	r3, [r4, #16]
 8023044:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8023048:	2b00      	cmp	r3, #0
 802304a:	d09c      	beq.n	8022f86 <_printf_float+0xae>
 802304c:	232d      	movs	r3, #45	; 0x2d
 802304e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023052:	e798      	b.n	8022f86 <_printf_float+0xae>
 8023054:	9a06      	ldr	r2, [sp, #24]
 8023056:	2a47      	cmp	r2, #71	; 0x47
 8023058:	d1be      	bne.n	8022fd8 <_printf_float+0x100>
 802305a:	2b00      	cmp	r3, #0
 802305c:	d1bc      	bne.n	8022fd8 <_printf_float+0x100>
 802305e:	2301      	movs	r3, #1
 8023060:	e7b9      	b.n	8022fd6 <_printf_float+0xfe>
 8023062:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8023066:	d118      	bne.n	802309a <_printf_float+0x1c2>
 8023068:	2900      	cmp	r1, #0
 802306a:	6863      	ldr	r3, [r4, #4]
 802306c:	dd0b      	ble.n	8023086 <_printf_float+0x1ae>
 802306e:	6121      	str	r1, [r4, #16]
 8023070:	b913      	cbnz	r3, 8023078 <_printf_float+0x1a0>
 8023072:	6822      	ldr	r2, [r4, #0]
 8023074:	07d0      	lsls	r0, r2, #31
 8023076:	d502      	bpl.n	802307e <_printf_float+0x1a6>
 8023078:	3301      	adds	r3, #1
 802307a:	440b      	add	r3, r1
 802307c:	6123      	str	r3, [r4, #16]
 802307e:	65a1      	str	r1, [r4, #88]	; 0x58
 8023080:	f04f 0900 	mov.w	r9, #0
 8023084:	e7de      	b.n	8023044 <_printf_float+0x16c>
 8023086:	b913      	cbnz	r3, 802308e <_printf_float+0x1b6>
 8023088:	6822      	ldr	r2, [r4, #0]
 802308a:	07d2      	lsls	r2, r2, #31
 802308c:	d501      	bpl.n	8023092 <_printf_float+0x1ba>
 802308e:	3302      	adds	r3, #2
 8023090:	e7f4      	b.n	802307c <_printf_float+0x1a4>
 8023092:	2301      	movs	r3, #1
 8023094:	e7f2      	b.n	802307c <_printf_float+0x1a4>
 8023096:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802309a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802309c:	4299      	cmp	r1, r3
 802309e:	db05      	blt.n	80230ac <_printf_float+0x1d4>
 80230a0:	6823      	ldr	r3, [r4, #0]
 80230a2:	6121      	str	r1, [r4, #16]
 80230a4:	07d8      	lsls	r0, r3, #31
 80230a6:	d5ea      	bpl.n	802307e <_printf_float+0x1a6>
 80230a8:	1c4b      	adds	r3, r1, #1
 80230aa:	e7e7      	b.n	802307c <_printf_float+0x1a4>
 80230ac:	2900      	cmp	r1, #0
 80230ae:	bfd4      	ite	le
 80230b0:	f1c1 0202 	rsble	r2, r1, #2
 80230b4:	2201      	movgt	r2, #1
 80230b6:	4413      	add	r3, r2
 80230b8:	e7e0      	b.n	802307c <_printf_float+0x1a4>
 80230ba:	6823      	ldr	r3, [r4, #0]
 80230bc:	055a      	lsls	r2, r3, #21
 80230be:	d407      	bmi.n	80230d0 <_printf_float+0x1f8>
 80230c0:	6923      	ldr	r3, [r4, #16]
 80230c2:	4642      	mov	r2, r8
 80230c4:	4631      	mov	r1, r6
 80230c6:	4628      	mov	r0, r5
 80230c8:	47b8      	blx	r7
 80230ca:	3001      	adds	r0, #1
 80230cc:	d12c      	bne.n	8023128 <_printf_float+0x250>
 80230ce:	e764      	b.n	8022f9a <_printf_float+0xc2>
 80230d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80230d4:	f240 80e0 	bls.w	8023298 <_printf_float+0x3c0>
 80230d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80230dc:	2200      	movs	r2, #0
 80230de:	2300      	movs	r3, #0
 80230e0:	f7dd fcfc 	bl	8000adc <__aeabi_dcmpeq>
 80230e4:	2800      	cmp	r0, #0
 80230e6:	d034      	beq.n	8023152 <_printf_float+0x27a>
 80230e8:	4a37      	ldr	r2, [pc, #220]	; (80231c8 <_printf_float+0x2f0>)
 80230ea:	2301      	movs	r3, #1
 80230ec:	4631      	mov	r1, r6
 80230ee:	4628      	mov	r0, r5
 80230f0:	47b8      	blx	r7
 80230f2:	3001      	adds	r0, #1
 80230f4:	f43f af51 	beq.w	8022f9a <_printf_float+0xc2>
 80230f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80230fc:	429a      	cmp	r2, r3
 80230fe:	db02      	blt.n	8023106 <_printf_float+0x22e>
 8023100:	6823      	ldr	r3, [r4, #0]
 8023102:	07d8      	lsls	r0, r3, #31
 8023104:	d510      	bpl.n	8023128 <_printf_float+0x250>
 8023106:	ee18 3a10 	vmov	r3, s16
 802310a:	4652      	mov	r2, sl
 802310c:	4631      	mov	r1, r6
 802310e:	4628      	mov	r0, r5
 8023110:	47b8      	blx	r7
 8023112:	3001      	adds	r0, #1
 8023114:	f43f af41 	beq.w	8022f9a <_printf_float+0xc2>
 8023118:	f04f 0800 	mov.w	r8, #0
 802311c:	f104 091a 	add.w	r9, r4, #26
 8023120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023122:	3b01      	subs	r3, #1
 8023124:	4543      	cmp	r3, r8
 8023126:	dc09      	bgt.n	802313c <_printf_float+0x264>
 8023128:	6823      	ldr	r3, [r4, #0]
 802312a:	079b      	lsls	r3, r3, #30
 802312c:	f100 8105 	bmi.w	802333a <_printf_float+0x462>
 8023130:	68e0      	ldr	r0, [r4, #12]
 8023132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023134:	4298      	cmp	r0, r3
 8023136:	bfb8      	it	lt
 8023138:	4618      	movlt	r0, r3
 802313a:	e730      	b.n	8022f9e <_printf_float+0xc6>
 802313c:	2301      	movs	r3, #1
 802313e:	464a      	mov	r2, r9
 8023140:	4631      	mov	r1, r6
 8023142:	4628      	mov	r0, r5
 8023144:	47b8      	blx	r7
 8023146:	3001      	adds	r0, #1
 8023148:	f43f af27 	beq.w	8022f9a <_printf_float+0xc2>
 802314c:	f108 0801 	add.w	r8, r8, #1
 8023150:	e7e6      	b.n	8023120 <_printf_float+0x248>
 8023152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023154:	2b00      	cmp	r3, #0
 8023156:	dc39      	bgt.n	80231cc <_printf_float+0x2f4>
 8023158:	4a1b      	ldr	r2, [pc, #108]	; (80231c8 <_printf_float+0x2f0>)
 802315a:	2301      	movs	r3, #1
 802315c:	4631      	mov	r1, r6
 802315e:	4628      	mov	r0, r5
 8023160:	47b8      	blx	r7
 8023162:	3001      	adds	r0, #1
 8023164:	f43f af19 	beq.w	8022f9a <_printf_float+0xc2>
 8023168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802316c:	4313      	orrs	r3, r2
 802316e:	d102      	bne.n	8023176 <_printf_float+0x29e>
 8023170:	6823      	ldr	r3, [r4, #0]
 8023172:	07d9      	lsls	r1, r3, #31
 8023174:	d5d8      	bpl.n	8023128 <_printf_float+0x250>
 8023176:	ee18 3a10 	vmov	r3, s16
 802317a:	4652      	mov	r2, sl
 802317c:	4631      	mov	r1, r6
 802317e:	4628      	mov	r0, r5
 8023180:	47b8      	blx	r7
 8023182:	3001      	adds	r0, #1
 8023184:	f43f af09 	beq.w	8022f9a <_printf_float+0xc2>
 8023188:	f04f 0900 	mov.w	r9, #0
 802318c:	f104 0a1a 	add.w	sl, r4, #26
 8023190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023192:	425b      	negs	r3, r3
 8023194:	454b      	cmp	r3, r9
 8023196:	dc01      	bgt.n	802319c <_printf_float+0x2c4>
 8023198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802319a:	e792      	b.n	80230c2 <_printf_float+0x1ea>
 802319c:	2301      	movs	r3, #1
 802319e:	4652      	mov	r2, sl
 80231a0:	4631      	mov	r1, r6
 80231a2:	4628      	mov	r0, r5
 80231a4:	47b8      	blx	r7
 80231a6:	3001      	adds	r0, #1
 80231a8:	f43f aef7 	beq.w	8022f9a <_printf_float+0xc2>
 80231ac:	f109 0901 	add.w	r9, r9, #1
 80231b0:	e7ee      	b.n	8023190 <_printf_float+0x2b8>
 80231b2:	bf00      	nop
 80231b4:	7fefffff 	.word	0x7fefffff
 80231b8:	0804bea1 	.word	0x0804bea1
 80231bc:	0804bea5 	.word	0x0804bea5
 80231c0:	0804bead 	.word	0x0804bead
 80231c4:	0804bea9 	.word	0x0804bea9
 80231c8:	0804beb1 	.word	0x0804beb1
 80231cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80231ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80231d0:	429a      	cmp	r2, r3
 80231d2:	bfa8      	it	ge
 80231d4:	461a      	movge	r2, r3
 80231d6:	2a00      	cmp	r2, #0
 80231d8:	4691      	mov	r9, r2
 80231da:	dc37      	bgt.n	802324c <_printf_float+0x374>
 80231dc:	f04f 0b00 	mov.w	fp, #0
 80231e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80231e4:	f104 021a 	add.w	r2, r4, #26
 80231e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80231ea:	9305      	str	r3, [sp, #20]
 80231ec:	eba3 0309 	sub.w	r3, r3, r9
 80231f0:	455b      	cmp	r3, fp
 80231f2:	dc33      	bgt.n	802325c <_printf_float+0x384>
 80231f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80231f8:	429a      	cmp	r2, r3
 80231fa:	db3b      	blt.n	8023274 <_printf_float+0x39c>
 80231fc:	6823      	ldr	r3, [r4, #0]
 80231fe:	07da      	lsls	r2, r3, #31
 8023200:	d438      	bmi.n	8023274 <_printf_float+0x39c>
 8023202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023204:	9a05      	ldr	r2, [sp, #20]
 8023206:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023208:	1a9a      	subs	r2, r3, r2
 802320a:	eba3 0901 	sub.w	r9, r3, r1
 802320e:	4591      	cmp	r9, r2
 8023210:	bfa8      	it	ge
 8023212:	4691      	movge	r9, r2
 8023214:	f1b9 0f00 	cmp.w	r9, #0
 8023218:	dc35      	bgt.n	8023286 <_printf_float+0x3ae>
 802321a:	f04f 0800 	mov.w	r8, #0
 802321e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023222:	f104 0a1a 	add.w	sl, r4, #26
 8023226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802322a:	1a9b      	subs	r3, r3, r2
 802322c:	eba3 0309 	sub.w	r3, r3, r9
 8023230:	4543      	cmp	r3, r8
 8023232:	f77f af79 	ble.w	8023128 <_printf_float+0x250>
 8023236:	2301      	movs	r3, #1
 8023238:	4652      	mov	r2, sl
 802323a:	4631      	mov	r1, r6
 802323c:	4628      	mov	r0, r5
 802323e:	47b8      	blx	r7
 8023240:	3001      	adds	r0, #1
 8023242:	f43f aeaa 	beq.w	8022f9a <_printf_float+0xc2>
 8023246:	f108 0801 	add.w	r8, r8, #1
 802324a:	e7ec      	b.n	8023226 <_printf_float+0x34e>
 802324c:	4613      	mov	r3, r2
 802324e:	4631      	mov	r1, r6
 8023250:	4642      	mov	r2, r8
 8023252:	4628      	mov	r0, r5
 8023254:	47b8      	blx	r7
 8023256:	3001      	adds	r0, #1
 8023258:	d1c0      	bne.n	80231dc <_printf_float+0x304>
 802325a:	e69e      	b.n	8022f9a <_printf_float+0xc2>
 802325c:	2301      	movs	r3, #1
 802325e:	4631      	mov	r1, r6
 8023260:	4628      	mov	r0, r5
 8023262:	9205      	str	r2, [sp, #20]
 8023264:	47b8      	blx	r7
 8023266:	3001      	adds	r0, #1
 8023268:	f43f ae97 	beq.w	8022f9a <_printf_float+0xc2>
 802326c:	9a05      	ldr	r2, [sp, #20]
 802326e:	f10b 0b01 	add.w	fp, fp, #1
 8023272:	e7b9      	b.n	80231e8 <_printf_float+0x310>
 8023274:	ee18 3a10 	vmov	r3, s16
 8023278:	4652      	mov	r2, sl
 802327a:	4631      	mov	r1, r6
 802327c:	4628      	mov	r0, r5
 802327e:	47b8      	blx	r7
 8023280:	3001      	adds	r0, #1
 8023282:	d1be      	bne.n	8023202 <_printf_float+0x32a>
 8023284:	e689      	b.n	8022f9a <_printf_float+0xc2>
 8023286:	9a05      	ldr	r2, [sp, #20]
 8023288:	464b      	mov	r3, r9
 802328a:	4442      	add	r2, r8
 802328c:	4631      	mov	r1, r6
 802328e:	4628      	mov	r0, r5
 8023290:	47b8      	blx	r7
 8023292:	3001      	adds	r0, #1
 8023294:	d1c1      	bne.n	802321a <_printf_float+0x342>
 8023296:	e680      	b.n	8022f9a <_printf_float+0xc2>
 8023298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802329a:	2a01      	cmp	r2, #1
 802329c:	dc01      	bgt.n	80232a2 <_printf_float+0x3ca>
 802329e:	07db      	lsls	r3, r3, #31
 80232a0:	d538      	bpl.n	8023314 <_printf_float+0x43c>
 80232a2:	2301      	movs	r3, #1
 80232a4:	4642      	mov	r2, r8
 80232a6:	4631      	mov	r1, r6
 80232a8:	4628      	mov	r0, r5
 80232aa:	47b8      	blx	r7
 80232ac:	3001      	adds	r0, #1
 80232ae:	f43f ae74 	beq.w	8022f9a <_printf_float+0xc2>
 80232b2:	ee18 3a10 	vmov	r3, s16
 80232b6:	4652      	mov	r2, sl
 80232b8:	4631      	mov	r1, r6
 80232ba:	4628      	mov	r0, r5
 80232bc:	47b8      	blx	r7
 80232be:	3001      	adds	r0, #1
 80232c0:	f43f ae6b 	beq.w	8022f9a <_printf_float+0xc2>
 80232c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80232c8:	2200      	movs	r2, #0
 80232ca:	2300      	movs	r3, #0
 80232cc:	f7dd fc06 	bl	8000adc <__aeabi_dcmpeq>
 80232d0:	b9d8      	cbnz	r0, 802330a <_printf_float+0x432>
 80232d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80232d4:	f108 0201 	add.w	r2, r8, #1
 80232d8:	3b01      	subs	r3, #1
 80232da:	4631      	mov	r1, r6
 80232dc:	4628      	mov	r0, r5
 80232de:	47b8      	blx	r7
 80232e0:	3001      	adds	r0, #1
 80232e2:	d10e      	bne.n	8023302 <_printf_float+0x42a>
 80232e4:	e659      	b.n	8022f9a <_printf_float+0xc2>
 80232e6:	2301      	movs	r3, #1
 80232e8:	4652      	mov	r2, sl
 80232ea:	4631      	mov	r1, r6
 80232ec:	4628      	mov	r0, r5
 80232ee:	47b8      	blx	r7
 80232f0:	3001      	adds	r0, #1
 80232f2:	f43f ae52 	beq.w	8022f9a <_printf_float+0xc2>
 80232f6:	f108 0801 	add.w	r8, r8, #1
 80232fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80232fc:	3b01      	subs	r3, #1
 80232fe:	4543      	cmp	r3, r8
 8023300:	dcf1      	bgt.n	80232e6 <_printf_float+0x40e>
 8023302:	464b      	mov	r3, r9
 8023304:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8023308:	e6dc      	b.n	80230c4 <_printf_float+0x1ec>
 802330a:	f04f 0800 	mov.w	r8, #0
 802330e:	f104 0a1a 	add.w	sl, r4, #26
 8023312:	e7f2      	b.n	80232fa <_printf_float+0x422>
 8023314:	2301      	movs	r3, #1
 8023316:	4642      	mov	r2, r8
 8023318:	e7df      	b.n	80232da <_printf_float+0x402>
 802331a:	2301      	movs	r3, #1
 802331c:	464a      	mov	r2, r9
 802331e:	4631      	mov	r1, r6
 8023320:	4628      	mov	r0, r5
 8023322:	47b8      	blx	r7
 8023324:	3001      	adds	r0, #1
 8023326:	f43f ae38 	beq.w	8022f9a <_printf_float+0xc2>
 802332a:	f108 0801 	add.w	r8, r8, #1
 802332e:	68e3      	ldr	r3, [r4, #12]
 8023330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023332:	1a5b      	subs	r3, r3, r1
 8023334:	4543      	cmp	r3, r8
 8023336:	dcf0      	bgt.n	802331a <_printf_float+0x442>
 8023338:	e6fa      	b.n	8023130 <_printf_float+0x258>
 802333a:	f04f 0800 	mov.w	r8, #0
 802333e:	f104 0919 	add.w	r9, r4, #25
 8023342:	e7f4      	b.n	802332e <_printf_float+0x456>

08023344 <_printf_common>:
 8023344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023348:	4616      	mov	r6, r2
 802334a:	4699      	mov	r9, r3
 802334c:	688a      	ldr	r2, [r1, #8]
 802334e:	690b      	ldr	r3, [r1, #16]
 8023350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023354:	4293      	cmp	r3, r2
 8023356:	bfb8      	it	lt
 8023358:	4613      	movlt	r3, r2
 802335a:	6033      	str	r3, [r6, #0]
 802335c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023360:	4607      	mov	r7, r0
 8023362:	460c      	mov	r4, r1
 8023364:	b10a      	cbz	r2, 802336a <_printf_common+0x26>
 8023366:	3301      	adds	r3, #1
 8023368:	6033      	str	r3, [r6, #0]
 802336a:	6823      	ldr	r3, [r4, #0]
 802336c:	0699      	lsls	r1, r3, #26
 802336e:	bf42      	ittt	mi
 8023370:	6833      	ldrmi	r3, [r6, #0]
 8023372:	3302      	addmi	r3, #2
 8023374:	6033      	strmi	r3, [r6, #0]
 8023376:	6825      	ldr	r5, [r4, #0]
 8023378:	f015 0506 	ands.w	r5, r5, #6
 802337c:	d106      	bne.n	802338c <_printf_common+0x48>
 802337e:	f104 0a19 	add.w	sl, r4, #25
 8023382:	68e3      	ldr	r3, [r4, #12]
 8023384:	6832      	ldr	r2, [r6, #0]
 8023386:	1a9b      	subs	r3, r3, r2
 8023388:	42ab      	cmp	r3, r5
 802338a:	dc26      	bgt.n	80233da <_printf_common+0x96>
 802338c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023390:	1e13      	subs	r3, r2, #0
 8023392:	6822      	ldr	r2, [r4, #0]
 8023394:	bf18      	it	ne
 8023396:	2301      	movne	r3, #1
 8023398:	0692      	lsls	r2, r2, #26
 802339a:	d42b      	bmi.n	80233f4 <_printf_common+0xb0>
 802339c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80233a0:	4649      	mov	r1, r9
 80233a2:	4638      	mov	r0, r7
 80233a4:	47c0      	blx	r8
 80233a6:	3001      	adds	r0, #1
 80233a8:	d01e      	beq.n	80233e8 <_printf_common+0xa4>
 80233aa:	6823      	ldr	r3, [r4, #0]
 80233ac:	68e5      	ldr	r5, [r4, #12]
 80233ae:	6832      	ldr	r2, [r6, #0]
 80233b0:	f003 0306 	and.w	r3, r3, #6
 80233b4:	2b04      	cmp	r3, #4
 80233b6:	bf08      	it	eq
 80233b8:	1aad      	subeq	r5, r5, r2
 80233ba:	68a3      	ldr	r3, [r4, #8]
 80233bc:	6922      	ldr	r2, [r4, #16]
 80233be:	bf0c      	ite	eq
 80233c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80233c4:	2500      	movne	r5, #0
 80233c6:	4293      	cmp	r3, r2
 80233c8:	bfc4      	itt	gt
 80233ca:	1a9b      	subgt	r3, r3, r2
 80233cc:	18ed      	addgt	r5, r5, r3
 80233ce:	2600      	movs	r6, #0
 80233d0:	341a      	adds	r4, #26
 80233d2:	42b5      	cmp	r5, r6
 80233d4:	d11a      	bne.n	802340c <_printf_common+0xc8>
 80233d6:	2000      	movs	r0, #0
 80233d8:	e008      	b.n	80233ec <_printf_common+0xa8>
 80233da:	2301      	movs	r3, #1
 80233dc:	4652      	mov	r2, sl
 80233de:	4649      	mov	r1, r9
 80233e0:	4638      	mov	r0, r7
 80233e2:	47c0      	blx	r8
 80233e4:	3001      	adds	r0, #1
 80233e6:	d103      	bne.n	80233f0 <_printf_common+0xac>
 80233e8:	f04f 30ff 	mov.w	r0, #4294967295
 80233ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80233f0:	3501      	adds	r5, #1
 80233f2:	e7c6      	b.n	8023382 <_printf_common+0x3e>
 80233f4:	18e1      	adds	r1, r4, r3
 80233f6:	1c5a      	adds	r2, r3, #1
 80233f8:	2030      	movs	r0, #48	; 0x30
 80233fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80233fe:	4422      	add	r2, r4
 8023400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023408:	3302      	adds	r3, #2
 802340a:	e7c7      	b.n	802339c <_printf_common+0x58>
 802340c:	2301      	movs	r3, #1
 802340e:	4622      	mov	r2, r4
 8023410:	4649      	mov	r1, r9
 8023412:	4638      	mov	r0, r7
 8023414:	47c0      	blx	r8
 8023416:	3001      	adds	r0, #1
 8023418:	d0e6      	beq.n	80233e8 <_printf_common+0xa4>
 802341a:	3601      	adds	r6, #1
 802341c:	e7d9      	b.n	80233d2 <_printf_common+0x8e>
	...

08023420 <_printf_i>:
 8023420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023424:	7e0f      	ldrb	r7, [r1, #24]
 8023426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023428:	2f78      	cmp	r7, #120	; 0x78
 802342a:	4691      	mov	r9, r2
 802342c:	4680      	mov	r8, r0
 802342e:	460c      	mov	r4, r1
 8023430:	469a      	mov	sl, r3
 8023432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023436:	d807      	bhi.n	8023448 <_printf_i+0x28>
 8023438:	2f62      	cmp	r7, #98	; 0x62
 802343a:	d80a      	bhi.n	8023452 <_printf_i+0x32>
 802343c:	2f00      	cmp	r7, #0
 802343e:	f000 80d8 	beq.w	80235f2 <_printf_i+0x1d2>
 8023442:	2f58      	cmp	r7, #88	; 0x58
 8023444:	f000 80a3 	beq.w	802358e <_printf_i+0x16e>
 8023448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802344c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023450:	e03a      	b.n	80234c8 <_printf_i+0xa8>
 8023452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023456:	2b15      	cmp	r3, #21
 8023458:	d8f6      	bhi.n	8023448 <_printf_i+0x28>
 802345a:	a101      	add	r1, pc, #4	; (adr r1, 8023460 <_printf_i+0x40>)
 802345c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023460:	080234b9 	.word	0x080234b9
 8023464:	080234cd 	.word	0x080234cd
 8023468:	08023449 	.word	0x08023449
 802346c:	08023449 	.word	0x08023449
 8023470:	08023449 	.word	0x08023449
 8023474:	08023449 	.word	0x08023449
 8023478:	080234cd 	.word	0x080234cd
 802347c:	08023449 	.word	0x08023449
 8023480:	08023449 	.word	0x08023449
 8023484:	08023449 	.word	0x08023449
 8023488:	08023449 	.word	0x08023449
 802348c:	080235d9 	.word	0x080235d9
 8023490:	080234fd 	.word	0x080234fd
 8023494:	080235bb 	.word	0x080235bb
 8023498:	08023449 	.word	0x08023449
 802349c:	08023449 	.word	0x08023449
 80234a0:	080235fb 	.word	0x080235fb
 80234a4:	08023449 	.word	0x08023449
 80234a8:	080234fd 	.word	0x080234fd
 80234ac:	08023449 	.word	0x08023449
 80234b0:	08023449 	.word	0x08023449
 80234b4:	080235c3 	.word	0x080235c3
 80234b8:	682b      	ldr	r3, [r5, #0]
 80234ba:	1d1a      	adds	r2, r3, #4
 80234bc:	681b      	ldr	r3, [r3, #0]
 80234be:	602a      	str	r2, [r5, #0]
 80234c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80234c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80234c8:	2301      	movs	r3, #1
 80234ca:	e0a3      	b.n	8023614 <_printf_i+0x1f4>
 80234cc:	6820      	ldr	r0, [r4, #0]
 80234ce:	6829      	ldr	r1, [r5, #0]
 80234d0:	0606      	lsls	r6, r0, #24
 80234d2:	f101 0304 	add.w	r3, r1, #4
 80234d6:	d50a      	bpl.n	80234ee <_printf_i+0xce>
 80234d8:	680e      	ldr	r6, [r1, #0]
 80234da:	602b      	str	r3, [r5, #0]
 80234dc:	2e00      	cmp	r6, #0
 80234de:	da03      	bge.n	80234e8 <_printf_i+0xc8>
 80234e0:	232d      	movs	r3, #45	; 0x2d
 80234e2:	4276      	negs	r6, r6
 80234e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80234e8:	485e      	ldr	r0, [pc, #376]	; (8023664 <_printf_i+0x244>)
 80234ea:	230a      	movs	r3, #10
 80234ec:	e019      	b.n	8023522 <_printf_i+0x102>
 80234ee:	680e      	ldr	r6, [r1, #0]
 80234f0:	602b      	str	r3, [r5, #0]
 80234f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80234f6:	bf18      	it	ne
 80234f8:	b236      	sxthne	r6, r6
 80234fa:	e7ef      	b.n	80234dc <_printf_i+0xbc>
 80234fc:	682b      	ldr	r3, [r5, #0]
 80234fe:	6820      	ldr	r0, [r4, #0]
 8023500:	1d19      	adds	r1, r3, #4
 8023502:	6029      	str	r1, [r5, #0]
 8023504:	0601      	lsls	r1, r0, #24
 8023506:	d501      	bpl.n	802350c <_printf_i+0xec>
 8023508:	681e      	ldr	r6, [r3, #0]
 802350a:	e002      	b.n	8023512 <_printf_i+0xf2>
 802350c:	0646      	lsls	r6, r0, #25
 802350e:	d5fb      	bpl.n	8023508 <_printf_i+0xe8>
 8023510:	881e      	ldrh	r6, [r3, #0]
 8023512:	4854      	ldr	r0, [pc, #336]	; (8023664 <_printf_i+0x244>)
 8023514:	2f6f      	cmp	r7, #111	; 0x6f
 8023516:	bf0c      	ite	eq
 8023518:	2308      	moveq	r3, #8
 802351a:	230a      	movne	r3, #10
 802351c:	2100      	movs	r1, #0
 802351e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023522:	6865      	ldr	r5, [r4, #4]
 8023524:	60a5      	str	r5, [r4, #8]
 8023526:	2d00      	cmp	r5, #0
 8023528:	bfa2      	ittt	ge
 802352a:	6821      	ldrge	r1, [r4, #0]
 802352c:	f021 0104 	bicge.w	r1, r1, #4
 8023530:	6021      	strge	r1, [r4, #0]
 8023532:	b90e      	cbnz	r6, 8023538 <_printf_i+0x118>
 8023534:	2d00      	cmp	r5, #0
 8023536:	d04d      	beq.n	80235d4 <_printf_i+0x1b4>
 8023538:	4615      	mov	r5, r2
 802353a:	fbb6 f1f3 	udiv	r1, r6, r3
 802353e:	fb03 6711 	mls	r7, r3, r1, r6
 8023542:	5dc7      	ldrb	r7, [r0, r7]
 8023544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023548:	4637      	mov	r7, r6
 802354a:	42bb      	cmp	r3, r7
 802354c:	460e      	mov	r6, r1
 802354e:	d9f4      	bls.n	802353a <_printf_i+0x11a>
 8023550:	2b08      	cmp	r3, #8
 8023552:	d10b      	bne.n	802356c <_printf_i+0x14c>
 8023554:	6823      	ldr	r3, [r4, #0]
 8023556:	07de      	lsls	r6, r3, #31
 8023558:	d508      	bpl.n	802356c <_printf_i+0x14c>
 802355a:	6923      	ldr	r3, [r4, #16]
 802355c:	6861      	ldr	r1, [r4, #4]
 802355e:	4299      	cmp	r1, r3
 8023560:	bfde      	ittt	le
 8023562:	2330      	movle	r3, #48	; 0x30
 8023564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023568:	f105 35ff 	addle.w	r5, r5, #4294967295
 802356c:	1b52      	subs	r2, r2, r5
 802356e:	6122      	str	r2, [r4, #16]
 8023570:	f8cd a000 	str.w	sl, [sp]
 8023574:	464b      	mov	r3, r9
 8023576:	aa03      	add	r2, sp, #12
 8023578:	4621      	mov	r1, r4
 802357a:	4640      	mov	r0, r8
 802357c:	f7ff fee2 	bl	8023344 <_printf_common>
 8023580:	3001      	adds	r0, #1
 8023582:	d14c      	bne.n	802361e <_printf_i+0x1fe>
 8023584:	f04f 30ff 	mov.w	r0, #4294967295
 8023588:	b004      	add	sp, #16
 802358a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802358e:	4835      	ldr	r0, [pc, #212]	; (8023664 <_printf_i+0x244>)
 8023590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023594:	6829      	ldr	r1, [r5, #0]
 8023596:	6823      	ldr	r3, [r4, #0]
 8023598:	f851 6b04 	ldr.w	r6, [r1], #4
 802359c:	6029      	str	r1, [r5, #0]
 802359e:	061d      	lsls	r5, r3, #24
 80235a0:	d514      	bpl.n	80235cc <_printf_i+0x1ac>
 80235a2:	07df      	lsls	r7, r3, #31
 80235a4:	bf44      	itt	mi
 80235a6:	f043 0320 	orrmi.w	r3, r3, #32
 80235aa:	6023      	strmi	r3, [r4, #0]
 80235ac:	b91e      	cbnz	r6, 80235b6 <_printf_i+0x196>
 80235ae:	6823      	ldr	r3, [r4, #0]
 80235b0:	f023 0320 	bic.w	r3, r3, #32
 80235b4:	6023      	str	r3, [r4, #0]
 80235b6:	2310      	movs	r3, #16
 80235b8:	e7b0      	b.n	802351c <_printf_i+0xfc>
 80235ba:	6823      	ldr	r3, [r4, #0]
 80235bc:	f043 0320 	orr.w	r3, r3, #32
 80235c0:	6023      	str	r3, [r4, #0]
 80235c2:	2378      	movs	r3, #120	; 0x78
 80235c4:	4828      	ldr	r0, [pc, #160]	; (8023668 <_printf_i+0x248>)
 80235c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80235ca:	e7e3      	b.n	8023594 <_printf_i+0x174>
 80235cc:	0659      	lsls	r1, r3, #25
 80235ce:	bf48      	it	mi
 80235d0:	b2b6      	uxthmi	r6, r6
 80235d2:	e7e6      	b.n	80235a2 <_printf_i+0x182>
 80235d4:	4615      	mov	r5, r2
 80235d6:	e7bb      	b.n	8023550 <_printf_i+0x130>
 80235d8:	682b      	ldr	r3, [r5, #0]
 80235da:	6826      	ldr	r6, [r4, #0]
 80235dc:	6961      	ldr	r1, [r4, #20]
 80235de:	1d18      	adds	r0, r3, #4
 80235e0:	6028      	str	r0, [r5, #0]
 80235e2:	0635      	lsls	r5, r6, #24
 80235e4:	681b      	ldr	r3, [r3, #0]
 80235e6:	d501      	bpl.n	80235ec <_printf_i+0x1cc>
 80235e8:	6019      	str	r1, [r3, #0]
 80235ea:	e002      	b.n	80235f2 <_printf_i+0x1d2>
 80235ec:	0670      	lsls	r0, r6, #25
 80235ee:	d5fb      	bpl.n	80235e8 <_printf_i+0x1c8>
 80235f0:	8019      	strh	r1, [r3, #0]
 80235f2:	2300      	movs	r3, #0
 80235f4:	6123      	str	r3, [r4, #16]
 80235f6:	4615      	mov	r5, r2
 80235f8:	e7ba      	b.n	8023570 <_printf_i+0x150>
 80235fa:	682b      	ldr	r3, [r5, #0]
 80235fc:	1d1a      	adds	r2, r3, #4
 80235fe:	602a      	str	r2, [r5, #0]
 8023600:	681d      	ldr	r5, [r3, #0]
 8023602:	6862      	ldr	r2, [r4, #4]
 8023604:	2100      	movs	r1, #0
 8023606:	4628      	mov	r0, r5
 8023608:	f7dc fde2 	bl	80001d0 <memchr>
 802360c:	b108      	cbz	r0, 8023612 <_printf_i+0x1f2>
 802360e:	1b40      	subs	r0, r0, r5
 8023610:	6060      	str	r0, [r4, #4]
 8023612:	6863      	ldr	r3, [r4, #4]
 8023614:	6123      	str	r3, [r4, #16]
 8023616:	2300      	movs	r3, #0
 8023618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802361c:	e7a8      	b.n	8023570 <_printf_i+0x150>
 802361e:	6923      	ldr	r3, [r4, #16]
 8023620:	462a      	mov	r2, r5
 8023622:	4649      	mov	r1, r9
 8023624:	4640      	mov	r0, r8
 8023626:	47d0      	blx	sl
 8023628:	3001      	adds	r0, #1
 802362a:	d0ab      	beq.n	8023584 <_printf_i+0x164>
 802362c:	6823      	ldr	r3, [r4, #0]
 802362e:	079b      	lsls	r3, r3, #30
 8023630:	d413      	bmi.n	802365a <_printf_i+0x23a>
 8023632:	68e0      	ldr	r0, [r4, #12]
 8023634:	9b03      	ldr	r3, [sp, #12]
 8023636:	4298      	cmp	r0, r3
 8023638:	bfb8      	it	lt
 802363a:	4618      	movlt	r0, r3
 802363c:	e7a4      	b.n	8023588 <_printf_i+0x168>
 802363e:	2301      	movs	r3, #1
 8023640:	4632      	mov	r2, r6
 8023642:	4649      	mov	r1, r9
 8023644:	4640      	mov	r0, r8
 8023646:	47d0      	blx	sl
 8023648:	3001      	adds	r0, #1
 802364a:	d09b      	beq.n	8023584 <_printf_i+0x164>
 802364c:	3501      	adds	r5, #1
 802364e:	68e3      	ldr	r3, [r4, #12]
 8023650:	9903      	ldr	r1, [sp, #12]
 8023652:	1a5b      	subs	r3, r3, r1
 8023654:	42ab      	cmp	r3, r5
 8023656:	dcf2      	bgt.n	802363e <_printf_i+0x21e>
 8023658:	e7eb      	b.n	8023632 <_printf_i+0x212>
 802365a:	2500      	movs	r5, #0
 802365c:	f104 0619 	add.w	r6, r4, #25
 8023660:	e7f5      	b.n	802364e <_printf_i+0x22e>
 8023662:	bf00      	nop
 8023664:	0804beb3 	.word	0x0804beb3
 8023668:	0804bec4 	.word	0x0804bec4

0802366c <_sbrk_r>:
 802366c:	b538      	push	{r3, r4, r5, lr}
 802366e:	4d06      	ldr	r5, [pc, #24]	; (8023688 <_sbrk_r+0x1c>)
 8023670:	2300      	movs	r3, #0
 8023672:	4604      	mov	r4, r0
 8023674:	4608      	mov	r0, r1
 8023676:	602b      	str	r3, [r5, #0]
 8023678:	f7e5 faca 	bl	8008c10 <_sbrk>
 802367c:	1c43      	adds	r3, r0, #1
 802367e:	d102      	bne.n	8023686 <_sbrk_r+0x1a>
 8023680:	682b      	ldr	r3, [r5, #0]
 8023682:	b103      	cbz	r3, 8023686 <_sbrk_r+0x1a>
 8023684:	6023      	str	r3, [r4, #0]
 8023686:	bd38      	pop	{r3, r4, r5, pc}
 8023688:	2000277c 	.word	0x2000277c

0802368c <_raise_r>:
 802368c:	291f      	cmp	r1, #31
 802368e:	b538      	push	{r3, r4, r5, lr}
 8023690:	4604      	mov	r4, r0
 8023692:	460d      	mov	r5, r1
 8023694:	d904      	bls.n	80236a0 <_raise_r+0x14>
 8023696:	2316      	movs	r3, #22
 8023698:	6003      	str	r3, [r0, #0]
 802369a:	f04f 30ff 	mov.w	r0, #4294967295
 802369e:	bd38      	pop	{r3, r4, r5, pc}
 80236a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80236a2:	b112      	cbz	r2, 80236aa <_raise_r+0x1e>
 80236a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80236a8:	b94b      	cbnz	r3, 80236be <_raise_r+0x32>
 80236aa:	4620      	mov	r0, r4
 80236ac:	f000 f830 	bl	8023710 <_getpid_r>
 80236b0:	462a      	mov	r2, r5
 80236b2:	4601      	mov	r1, r0
 80236b4:	4620      	mov	r0, r4
 80236b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80236ba:	f000 b817 	b.w	80236ec <_kill_r>
 80236be:	2b01      	cmp	r3, #1
 80236c0:	d00a      	beq.n	80236d8 <_raise_r+0x4c>
 80236c2:	1c59      	adds	r1, r3, #1
 80236c4:	d103      	bne.n	80236ce <_raise_r+0x42>
 80236c6:	2316      	movs	r3, #22
 80236c8:	6003      	str	r3, [r0, #0]
 80236ca:	2001      	movs	r0, #1
 80236cc:	e7e7      	b.n	802369e <_raise_r+0x12>
 80236ce:	2400      	movs	r4, #0
 80236d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80236d4:	4628      	mov	r0, r5
 80236d6:	4798      	blx	r3
 80236d8:	2000      	movs	r0, #0
 80236da:	e7e0      	b.n	802369e <_raise_r+0x12>

080236dc <raise>:
 80236dc:	4b02      	ldr	r3, [pc, #8]	; (80236e8 <raise+0xc>)
 80236de:	4601      	mov	r1, r0
 80236e0:	6818      	ldr	r0, [r3, #0]
 80236e2:	f7ff bfd3 	b.w	802368c <_raise_r>
 80236e6:	bf00      	nop
 80236e8:	200002b8 	.word	0x200002b8

080236ec <_kill_r>:
 80236ec:	b538      	push	{r3, r4, r5, lr}
 80236ee:	4d07      	ldr	r5, [pc, #28]	; (802370c <_kill_r+0x20>)
 80236f0:	2300      	movs	r3, #0
 80236f2:	4604      	mov	r4, r0
 80236f4:	4608      	mov	r0, r1
 80236f6:	4611      	mov	r1, r2
 80236f8:	602b      	str	r3, [r5, #0]
 80236fa:	f7e5 fa01 	bl	8008b00 <_kill>
 80236fe:	1c43      	adds	r3, r0, #1
 8023700:	d102      	bne.n	8023708 <_kill_r+0x1c>
 8023702:	682b      	ldr	r3, [r5, #0]
 8023704:	b103      	cbz	r3, 8023708 <_kill_r+0x1c>
 8023706:	6023      	str	r3, [r4, #0]
 8023708:	bd38      	pop	{r3, r4, r5, pc}
 802370a:	bf00      	nop
 802370c:	2000277c 	.word	0x2000277c

08023710 <_getpid_r>:
 8023710:	f7e5 b9ee 	b.w	8008af0 <_getpid>

08023714 <strncmp>:
 8023714:	b510      	push	{r4, lr}
 8023716:	b17a      	cbz	r2, 8023738 <strncmp+0x24>
 8023718:	4603      	mov	r3, r0
 802371a:	3901      	subs	r1, #1
 802371c:	1884      	adds	r4, r0, r2
 802371e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8023722:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023726:	4290      	cmp	r0, r2
 8023728:	d101      	bne.n	802372e <strncmp+0x1a>
 802372a:	42a3      	cmp	r3, r4
 802372c:	d101      	bne.n	8023732 <strncmp+0x1e>
 802372e:	1a80      	subs	r0, r0, r2
 8023730:	bd10      	pop	{r4, pc}
 8023732:	2800      	cmp	r0, #0
 8023734:	d1f3      	bne.n	802371e <strncmp+0xa>
 8023736:	e7fa      	b.n	802372e <strncmp+0x1a>
 8023738:	4610      	mov	r0, r2
 802373a:	e7f9      	b.n	8023730 <strncmp+0x1c>

0802373c <sulp>:
 802373c:	b570      	push	{r4, r5, r6, lr}
 802373e:	4604      	mov	r4, r0
 8023740:	460d      	mov	r5, r1
 8023742:	ec45 4b10 	vmov	d0, r4, r5
 8023746:	4616      	mov	r6, r2
 8023748:	f002 fea4 	bl	8026494 <__ulp>
 802374c:	ec51 0b10 	vmov	r0, r1, d0
 8023750:	b17e      	cbz	r6, 8023772 <sulp+0x36>
 8023752:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8023756:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802375a:	2b00      	cmp	r3, #0
 802375c:	dd09      	ble.n	8023772 <sulp+0x36>
 802375e:	051b      	lsls	r3, r3, #20
 8023760:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8023764:	2400      	movs	r4, #0
 8023766:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 802376a:	4622      	mov	r2, r4
 802376c:	462b      	mov	r3, r5
 802376e:	f7dc ff4d 	bl	800060c <__aeabi_dmul>
 8023772:	bd70      	pop	{r4, r5, r6, pc}
 8023774:	0000      	movs	r0, r0
	...

08023778 <_strtod_l>:
 8023778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802377c:	ed2d 8b02 	vpush	{d8}
 8023780:	b09d      	sub	sp, #116	; 0x74
 8023782:	461f      	mov	r7, r3
 8023784:	2300      	movs	r3, #0
 8023786:	9318      	str	r3, [sp, #96]	; 0x60
 8023788:	4ba2      	ldr	r3, [pc, #648]	; (8023a14 <_strtod_l+0x29c>)
 802378a:	9213      	str	r2, [sp, #76]	; 0x4c
 802378c:	681b      	ldr	r3, [r3, #0]
 802378e:	9305      	str	r3, [sp, #20]
 8023790:	4604      	mov	r4, r0
 8023792:	4618      	mov	r0, r3
 8023794:	4688      	mov	r8, r1
 8023796:	f7dc fd75 	bl	8000284 <strlen>
 802379a:	f04f 0a00 	mov.w	sl, #0
 802379e:	4605      	mov	r5, r0
 80237a0:	f04f 0b00 	mov.w	fp, #0
 80237a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80237a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80237aa:	781a      	ldrb	r2, [r3, #0]
 80237ac:	2a2b      	cmp	r2, #43	; 0x2b
 80237ae:	d04e      	beq.n	802384e <_strtod_l+0xd6>
 80237b0:	d83b      	bhi.n	802382a <_strtod_l+0xb2>
 80237b2:	2a0d      	cmp	r2, #13
 80237b4:	d834      	bhi.n	8023820 <_strtod_l+0xa8>
 80237b6:	2a08      	cmp	r2, #8
 80237b8:	d834      	bhi.n	8023824 <_strtod_l+0xac>
 80237ba:	2a00      	cmp	r2, #0
 80237bc:	d03e      	beq.n	802383c <_strtod_l+0xc4>
 80237be:	2300      	movs	r3, #0
 80237c0:	930a      	str	r3, [sp, #40]	; 0x28
 80237c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80237c4:	7833      	ldrb	r3, [r6, #0]
 80237c6:	2b30      	cmp	r3, #48	; 0x30
 80237c8:	f040 80b0 	bne.w	802392c <_strtod_l+0x1b4>
 80237cc:	7873      	ldrb	r3, [r6, #1]
 80237ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80237d2:	2b58      	cmp	r3, #88	; 0x58
 80237d4:	d168      	bne.n	80238a8 <_strtod_l+0x130>
 80237d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80237d8:	9301      	str	r3, [sp, #4]
 80237da:	ab18      	add	r3, sp, #96	; 0x60
 80237dc:	9702      	str	r7, [sp, #8]
 80237de:	9300      	str	r3, [sp, #0]
 80237e0:	4a8d      	ldr	r2, [pc, #564]	; (8023a18 <_strtod_l+0x2a0>)
 80237e2:	ab19      	add	r3, sp, #100	; 0x64
 80237e4:	a917      	add	r1, sp, #92	; 0x5c
 80237e6:	4620      	mov	r0, r4
 80237e8:	f001 ff52 	bl	8025690 <__gethex>
 80237ec:	f010 0707 	ands.w	r7, r0, #7
 80237f0:	4605      	mov	r5, r0
 80237f2:	d005      	beq.n	8023800 <_strtod_l+0x88>
 80237f4:	2f06      	cmp	r7, #6
 80237f6:	d12c      	bne.n	8023852 <_strtod_l+0xda>
 80237f8:	3601      	adds	r6, #1
 80237fa:	2300      	movs	r3, #0
 80237fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80237fe:	930a      	str	r3, [sp, #40]	; 0x28
 8023800:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023802:	2b00      	cmp	r3, #0
 8023804:	f040 8590 	bne.w	8024328 <_strtod_l+0xbb0>
 8023808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802380a:	b1eb      	cbz	r3, 8023848 <_strtod_l+0xd0>
 802380c:	4652      	mov	r2, sl
 802380e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8023812:	ec43 2b10 	vmov	d0, r2, r3
 8023816:	b01d      	add	sp, #116	; 0x74
 8023818:	ecbd 8b02 	vpop	{d8}
 802381c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023820:	2a20      	cmp	r2, #32
 8023822:	d1cc      	bne.n	80237be <_strtod_l+0x46>
 8023824:	3301      	adds	r3, #1
 8023826:	9317      	str	r3, [sp, #92]	; 0x5c
 8023828:	e7be      	b.n	80237a8 <_strtod_l+0x30>
 802382a:	2a2d      	cmp	r2, #45	; 0x2d
 802382c:	d1c7      	bne.n	80237be <_strtod_l+0x46>
 802382e:	2201      	movs	r2, #1
 8023830:	920a      	str	r2, [sp, #40]	; 0x28
 8023832:	1c5a      	adds	r2, r3, #1
 8023834:	9217      	str	r2, [sp, #92]	; 0x5c
 8023836:	785b      	ldrb	r3, [r3, #1]
 8023838:	2b00      	cmp	r3, #0
 802383a:	d1c2      	bne.n	80237c2 <_strtod_l+0x4a>
 802383c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802383e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8023842:	2b00      	cmp	r3, #0
 8023844:	f040 856e 	bne.w	8024324 <_strtod_l+0xbac>
 8023848:	4652      	mov	r2, sl
 802384a:	465b      	mov	r3, fp
 802384c:	e7e1      	b.n	8023812 <_strtod_l+0x9a>
 802384e:	2200      	movs	r2, #0
 8023850:	e7ee      	b.n	8023830 <_strtod_l+0xb8>
 8023852:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023854:	b13a      	cbz	r2, 8023866 <_strtod_l+0xee>
 8023856:	2135      	movs	r1, #53	; 0x35
 8023858:	a81a      	add	r0, sp, #104	; 0x68
 802385a:	f002 ff26 	bl	80266aa <__copybits>
 802385e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8023860:	4620      	mov	r0, r4
 8023862:	f002 fae5 	bl	8025e30 <_Bfree>
 8023866:	3f01      	subs	r7, #1
 8023868:	2f04      	cmp	r7, #4
 802386a:	d806      	bhi.n	802387a <_strtod_l+0x102>
 802386c:	e8df f007 	tbb	[pc, r7]
 8023870:	1714030a 	.word	0x1714030a
 8023874:	0a          	.byte	0x0a
 8023875:	00          	.byte	0x00
 8023876:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 802387a:	0728      	lsls	r0, r5, #28
 802387c:	d5c0      	bpl.n	8023800 <_strtod_l+0x88>
 802387e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8023882:	e7bd      	b.n	8023800 <_strtod_l+0x88>
 8023884:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8023888:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802388a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802388e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8023892:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8023896:	e7f0      	b.n	802387a <_strtod_l+0x102>
 8023898:	f8df b180 	ldr.w	fp, [pc, #384]	; 8023a1c <_strtod_l+0x2a4>
 802389c:	e7ed      	b.n	802387a <_strtod_l+0x102>
 802389e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80238a2:	f04f 3aff 	mov.w	sl, #4294967295
 80238a6:	e7e8      	b.n	802387a <_strtod_l+0x102>
 80238a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80238aa:	1c5a      	adds	r2, r3, #1
 80238ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80238ae:	785b      	ldrb	r3, [r3, #1]
 80238b0:	2b30      	cmp	r3, #48	; 0x30
 80238b2:	d0f9      	beq.n	80238a8 <_strtod_l+0x130>
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	d0a3      	beq.n	8023800 <_strtod_l+0x88>
 80238b8:	2301      	movs	r3, #1
 80238ba:	f04f 0900 	mov.w	r9, #0
 80238be:	9304      	str	r3, [sp, #16]
 80238c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80238c2:	9308      	str	r3, [sp, #32]
 80238c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80238c8:	464f      	mov	r7, r9
 80238ca:	220a      	movs	r2, #10
 80238cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80238ce:	7806      	ldrb	r6, [r0, #0]
 80238d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80238d4:	b2d9      	uxtb	r1, r3
 80238d6:	2909      	cmp	r1, #9
 80238d8:	d92a      	bls.n	8023930 <_strtod_l+0x1b8>
 80238da:	9905      	ldr	r1, [sp, #20]
 80238dc:	462a      	mov	r2, r5
 80238de:	f7ff ff19 	bl	8023714 <strncmp>
 80238e2:	b398      	cbz	r0, 802394c <_strtod_l+0x1d4>
 80238e4:	2000      	movs	r0, #0
 80238e6:	4632      	mov	r2, r6
 80238e8:	463d      	mov	r5, r7
 80238ea:	9005      	str	r0, [sp, #20]
 80238ec:	4603      	mov	r3, r0
 80238ee:	2a65      	cmp	r2, #101	; 0x65
 80238f0:	d001      	beq.n	80238f6 <_strtod_l+0x17e>
 80238f2:	2a45      	cmp	r2, #69	; 0x45
 80238f4:	d118      	bne.n	8023928 <_strtod_l+0x1b0>
 80238f6:	b91d      	cbnz	r5, 8023900 <_strtod_l+0x188>
 80238f8:	9a04      	ldr	r2, [sp, #16]
 80238fa:	4302      	orrs	r2, r0
 80238fc:	d09e      	beq.n	802383c <_strtod_l+0xc4>
 80238fe:	2500      	movs	r5, #0
 8023900:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8023904:	f108 0201 	add.w	r2, r8, #1
 8023908:	9217      	str	r2, [sp, #92]	; 0x5c
 802390a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802390e:	2a2b      	cmp	r2, #43	; 0x2b
 8023910:	d075      	beq.n	80239fe <_strtod_l+0x286>
 8023912:	2a2d      	cmp	r2, #45	; 0x2d
 8023914:	d07b      	beq.n	8023a0e <_strtod_l+0x296>
 8023916:	f04f 0c00 	mov.w	ip, #0
 802391a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802391e:	2909      	cmp	r1, #9
 8023920:	f240 8082 	bls.w	8023a28 <_strtod_l+0x2b0>
 8023924:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8023928:	2600      	movs	r6, #0
 802392a:	e09d      	b.n	8023a68 <_strtod_l+0x2f0>
 802392c:	2300      	movs	r3, #0
 802392e:	e7c4      	b.n	80238ba <_strtod_l+0x142>
 8023930:	2f08      	cmp	r7, #8
 8023932:	bfd8      	it	le
 8023934:	9907      	ldrle	r1, [sp, #28]
 8023936:	f100 0001 	add.w	r0, r0, #1
 802393a:	bfda      	itte	le
 802393c:	fb02 3301 	mlale	r3, r2, r1, r3
 8023940:	9307      	strle	r3, [sp, #28]
 8023942:	fb02 3909 	mlagt	r9, r2, r9, r3
 8023946:	3701      	adds	r7, #1
 8023948:	9017      	str	r0, [sp, #92]	; 0x5c
 802394a:	e7bf      	b.n	80238cc <_strtod_l+0x154>
 802394c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802394e:	195a      	adds	r2, r3, r5
 8023950:	9217      	str	r2, [sp, #92]	; 0x5c
 8023952:	5d5a      	ldrb	r2, [r3, r5]
 8023954:	2f00      	cmp	r7, #0
 8023956:	d037      	beq.n	80239c8 <_strtod_l+0x250>
 8023958:	9005      	str	r0, [sp, #20]
 802395a:	463d      	mov	r5, r7
 802395c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8023960:	2b09      	cmp	r3, #9
 8023962:	d912      	bls.n	802398a <_strtod_l+0x212>
 8023964:	2301      	movs	r3, #1
 8023966:	e7c2      	b.n	80238ee <_strtod_l+0x176>
 8023968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802396a:	1c5a      	adds	r2, r3, #1
 802396c:	9217      	str	r2, [sp, #92]	; 0x5c
 802396e:	785a      	ldrb	r2, [r3, #1]
 8023970:	3001      	adds	r0, #1
 8023972:	2a30      	cmp	r2, #48	; 0x30
 8023974:	d0f8      	beq.n	8023968 <_strtod_l+0x1f0>
 8023976:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802397a:	2b08      	cmp	r3, #8
 802397c:	f200 84d9 	bhi.w	8024332 <_strtod_l+0xbba>
 8023980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023982:	9005      	str	r0, [sp, #20]
 8023984:	2000      	movs	r0, #0
 8023986:	9308      	str	r3, [sp, #32]
 8023988:	4605      	mov	r5, r0
 802398a:	3a30      	subs	r2, #48	; 0x30
 802398c:	f100 0301 	add.w	r3, r0, #1
 8023990:	d014      	beq.n	80239bc <_strtod_l+0x244>
 8023992:	9905      	ldr	r1, [sp, #20]
 8023994:	4419      	add	r1, r3
 8023996:	9105      	str	r1, [sp, #20]
 8023998:	462b      	mov	r3, r5
 802399a:	eb00 0e05 	add.w	lr, r0, r5
 802399e:	210a      	movs	r1, #10
 80239a0:	4573      	cmp	r3, lr
 80239a2:	d113      	bne.n	80239cc <_strtod_l+0x254>
 80239a4:	182b      	adds	r3, r5, r0
 80239a6:	2b08      	cmp	r3, #8
 80239a8:	f105 0501 	add.w	r5, r5, #1
 80239ac:	4405      	add	r5, r0
 80239ae:	dc1c      	bgt.n	80239ea <_strtod_l+0x272>
 80239b0:	9907      	ldr	r1, [sp, #28]
 80239b2:	230a      	movs	r3, #10
 80239b4:	fb03 2301 	mla	r3, r3, r1, r2
 80239b8:	9307      	str	r3, [sp, #28]
 80239ba:	2300      	movs	r3, #0
 80239bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80239be:	1c51      	adds	r1, r2, #1
 80239c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80239c2:	7852      	ldrb	r2, [r2, #1]
 80239c4:	4618      	mov	r0, r3
 80239c6:	e7c9      	b.n	802395c <_strtod_l+0x1e4>
 80239c8:	4638      	mov	r0, r7
 80239ca:	e7d2      	b.n	8023972 <_strtod_l+0x1fa>
 80239cc:	2b08      	cmp	r3, #8
 80239ce:	dc04      	bgt.n	80239da <_strtod_l+0x262>
 80239d0:	9e07      	ldr	r6, [sp, #28]
 80239d2:	434e      	muls	r6, r1
 80239d4:	9607      	str	r6, [sp, #28]
 80239d6:	3301      	adds	r3, #1
 80239d8:	e7e2      	b.n	80239a0 <_strtod_l+0x228>
 80239da:	f103 0c01 	add.w	ip, r3, #1
 80239de:	f1bc 0f10 	cmp.w	ip, #16
 80239e2:	bfd8      	it	le
 80239e4:	fb01 f909 	mulle.w	r9, r1, r9
 80239e8:	e7f5      	b.n	80239d6 <_strtod_l+0x25e>
 80239ea:	2d10      	cmp	r5, #16
 80239ec:	bfdc      	itt	le
 80239ee:	230a      	movle	r3, #10
 80239f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80239f4:	e7e1      	b.n	80239ba <_strtod_l+0x242>
 80239f6:	2300      	movs	r3, #0
 80239f8:	9305      	str	r3, [sp, #20]
 80239fa:	2301      	movs	r3, #1
 80239fc:	e77c      	b.n	80238f8 <_strtod_l+0x180>
 80239fe:	f04f 0c00 	mov.w	ip, #0
 8023a02:	f108 0202 	add.w	r2, r8, #2
 8023a06:	9217      	str	r2, [sp, #92]	; 0x5c
 8023a08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8023a0c:	e785      	b.n	802391a <_strtod_l+0x1a2>
 8023a0e:	f04f 0c01 	mov.w	ip, #1
 8023a12:	e7f6      	b.n	8023a02 <_strtod_l+0x28a>
 8023a14:	0804c184 	.word	0x0804c184
 8023a18:	0804bed8 	.word	0x0804bed8
 8023a1c:	7ff00000 	.word	0x7ff00000
 8023a20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8023a22:	1c51      	adds	r1, r2, #1
 8023a24:	9117      	str	r1, [sp, #92]	; 0x5c
 8023a26:	7852      	ldrb	r2, [r2, #1]
 8023a28:	2a30      	cmp	r2, #48	; 0x30
 8023a2a:	d0f9      	beq.n	8023a20 <_strtod_l+0x2a8>
 8023a2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8023a30:	2908      	cmp	r1, #8
 8023a32:	f63f af79 	bhi.w	8023928 <_strtod_l+0x1b0>
 8023a36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8023a3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8023a3c:	9206      	str	r2, [sp, #24]
 8023a3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8023a40:	1c51      	adds	r1, r2, #1
 8023a42:	9117      	str	r1, [sp, #92]	; 0x5c
 8023a44:	7852      	ldrb	r2, [r2, #1]
 8023a46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8023a4a:	2e09      	cmp	r6, #9
 8023a4c:	d937      	bls.n	8023abe <_strtod_l+0x346>
 8023a4e:	9e06      	ldr	r6, [sp, #24]
 8023a50:	1b89      	subs	r1, r1, r6
 8023a52:	2908      	cmp	r1, #8
 8023a54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8023a58:	dc02      	bgt.n	8023a60 <_strtod_l+0x2e8>
 8023a5a:	4576      	cmp	r6, lr
 8023a5c:	bfa8      	it	ge
 8023a5e:	4676      	movge	r6, lr
 8023a60:	f1bc 0f00 	cmp.w	ip, #0
 8023a64:	d000      	beq.n	8023a68 <_strtod_l+0x2f0>
 8023a66:	4276      	negs	r6, r6
 8023a68:	2d00      	cmp	r5, #0
 8023a6a:	d14d      	bne.n	8023b08 <_strtod_l+0x390>
 8023a6c:	9904      	ldr	r1, [sp, #16]
 8023a6e:	4301      	orrs	r1, r0
 8023a70:	f47f aec6 	bne.w	8023800 <_strtod_l+0x88>
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	f47f aee1 	bne.w	802383c <_strtod_l+0xc4>
 8023a7a:	2a69      	cmp	r2, #105	; 0x69
 8023a7c:	d027      	beq.n	8023ace <_strtod_l+0x356>
 8023a7e:	dc24      	bgt.n	8023aca <_strtod_l+0x352>
 8023a80:	2a49      	cmp	r2, #73	; 0x49
 8023a82:	d024      	beq.n	8023ace <_strtod_l+0x356>
 8023a84:	2a4e      	cmp	r2, #78	; 0x4e
 8023a86:	f47f aed9 	bne.w	802383c <_strtod_l+0xc4>
 8023a8a:	499f      	ldr	r1, [pc, #636]	; (8023d08 <_strtod_l+0x590>)
 8023a8c:	a817      	add	r0, sp, #92	; 0x5c
 8023a8e:	f002 f857 	bl	8025b40 <__match>
 8023a92:	2800      	cmp	r0, #0
 8023a94:	f43f aed2 	beq.w	802383c <_strtod_l+0xc4>
 8023a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023a9a:	781b      	ldrb	r3, [r3, #0]
 8023a9c:	2b28      	cmp	r3, #40	; 0x28
 8023a9e:	d12d      	bne.n	8023afc <_strtod_l+0x384>
 8023aa0:	499a      	ldr	r1, [pc, #616]	; (8023d0c <_strtod_l+0x594>)
 8023aa2:	aa1a      	add	r2, sp, #104	; 0x68
 8023aa4:	a817      	add	r0, sp, #92	; 0x5c
 8023aa6:	f002 f85f 	bl	8025b68 <__hexnan>
 8023aaa:	2805      	cmp	r0, #5
 8023aac:	d126      	bne.n	8023afc <_strtod_l+0x384>
 8023aae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023ab0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8023ab4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8023ab8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8023abc:	e6a0      	b.n	8023800 <_strtod_l+0x88>
 8023abe:	210a      	movs	r1, #10
 8023ac0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8023ac4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8023ac8:	e7b9      	b.n	8023a3e <_strtod_l+0x2c6>
 8023aca:	2a6e      	cmp	r2, #110	; 0x6e
 8023acc:	e7db      	b.n	8023a86 <_strtod_l+0x30e>
 8023ace:	4990      	ldr	r1, [pc, #576]	; (8023d10 <_strtod_l+0x598>)
 8023ad0:	a817      	add	r0, sp, #92	; 0x5c
 8023ad2:	f002 f835 	bl	8025b40 <__match>
 8023ad6:	2800      	cmp	r0, #0
 8023ad8:	f43f aeb0 	beq.w	802383c <_strtod_l+0xc4>
 8023adc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023ade:	498d      	ldr	r1, [pc, #564]	; (8023d14 <_strtod_l+0x59c>)
 8023ae0:	3b01      	subs	r3, #1
 8023ae2:	a817      	add	r0, sp, #92	; 0x5c
 8023ae4:	9317      	str	r3, [sp, #92]	; 0x5c
 8023ae6:	f002 f82b 	bl	8025b40 <__match>
 8023aea:	b910      	cbnz	r0, 8023af2 <_strtod_l+0x37a>
 8023aec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023aee:	3301      	adds	r3, #1
 8023af0:	9317      	str	r3, [sp, #92]	; 0x5c
 8023af2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8023d24 <_strtod_l+0x5ac>
 8023af6:	f04f 0a00 	mov.w	sl, #0
 8023afa:	e681      	b.n	8023800 <_strtod_l+0x88>
 8023afc:	4886      	ldr	r0, [pc, #536]	; (8023d18 <_strtod_l+0x5a0>)
 8023afe:	f7fe fda7 	bl	8022650 <nan>
 8023b02:	ec5b ab10 	vmov	sl, fp, d0
 8023b06:	e67b      	b.n	8023800 <_strtod_l+0x88>
 8023b08:	9b05      	ldr	r3, [sp, #20]
 8023b0a:	9807      	ldr	r0, [sp, #28]
 8023b0c:	1af3      	subs	r3, r6, r3
 8023b0e:	2f00      	cmp	r7, #0
 8023b10:	bf08      	it	eq
 8023b12:	462f      	moveq	r7, r5
 8023b14:	2d10      	cmp	r5, #16
 8023b16:	9306      	str	r3, [sp, #24]
 8023b18:	46a8      	mov	r8, r5
 8023b1a:	bfa8      	it	ge
 8023b1c:	f04f 0810 	movge.w	r8, #16
 8023b20:	f7dc fcfa 	bl	8000518 <__aeabi_ui2d>
 8023b24:	2d09      	cmp	r5, #9
 8023b26:	4682      	mov	sl, r0
 8023b28:	468b      	mov	fp, r1
 8023b2a:	dd13      	ble.n	8023b54 <_strtod_l+0x3dc>
 8023b2c:	4b7b      	ldr	r3, [pc, #492]	; (8023d1c <_strtod_l+0x5a4>)
 8023b2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8023b32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8023b36:	f7dc fd69 	bl	800060c <__aeabi_dmul>
 8023b3a:	4682      	mov	sl, r0
 8023b3c:	4648      	mov	r0, r9
 8023b3e:	468b      	mov	fp, r1
 8023b40:	f7dc fcea 	bl	8000518 <__aeabi_ui2d>
 8023b44:	4602      	mov	r2, r0
 8023b46:	460b      	mov	r3, r1
 8023b48:	4650      	mov	r0, sl
 8023b4a:	4659      	mov	r1, fp
 8023b4c:	f7dc fba8 	bl	80002a0 <__adddf3>
 8023b50:	4682      	mov	sl, r0
 8023b52:	468b      	mov	fp, r1
 8023b54:	2d0f      	cmp	r5, #15
 8023b56:	dc38      	bgt.n	8023bca <_strtod_l+0x452>
 8023b58:	9b06      	ldr	r3, [sp, #24]
 8023b5a:	2b00      	cmp	r3, #0
 8023b5c:	f43f ae50 	beq.w	8023800 <_strtod_l+0x88>
 8023b60:	dd24      	ble.n	8023bac <_strtod_l+0x434>
 8023b62:	2b16      	cmp	r3, #22
 8023b64:	dc0b      	bgt.n	8023b7e <_strtod_l+0x406>
 8023b66:	496d      	ldr	r1, [pc, #436]	; (8023d1c <_strtod_l+0x5a4>)
 8023b68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8023b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023b70:	4652      	mov	r2, sl
 8023b72:	465b      	mov	r3, fp
 8023b74:	f7dc fd4a 	bl	800060c <__aeabi_dmul>
 8023b78:	4682      	mov	sl, r0
 8023b7a:	468b      	mov	fp, r1
 8023b7c:	e640      	b.n	8023800 <_strtod_l+0x88>
 8023b7e:	9a06      	ldr	r2, [sp, #24]
 8023b80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8023b84:	4293      	cmp	r3, r2
 8023b86:	db20      	blt.n	8023bca <_strtod_l+0x452>
 8023b88:	4c64      	ldr	r4, [pc, #400]	; (8023d1c <_strtod_l+0x5a4>)
 8023b8a:	f1c5 050f 	rsb	r5, r5, #15
 8023b8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8023b92:	4652      	mov	r2, sl
 8023b94:	465b      	mov	r3, fp
 8023b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023b9a:	f7dc fd37 	bl	800060c <__aeabi_dmul>
 8023b9e:	9b06      	ldr	r3, [sp, #24]
 8023ba0:	1b5d      	subs	r5, r3, r5
 8023ba2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8023ba6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8023baa:	e7e3      	b.n	8023b74 <_strtod_l+0x3fc>
 8023bac:	9b06      	ldr	r3, [sp, #24]
 8023bae:	3316      	adds	r3, #22
 8023bb0:	db0b      	blt.n	8023bca <_strtod_l+0x452>
 8023bb2:	9b05      	ldr	r3, [sp, #20]
 8023bb4:	1b9e      	subs	r6, r3, r6
 8023bb6:	4b59      	ldr	r3, [pc, #356]	; (8023d1c <_strtod_l+0x5a4>)
 8023bb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8023bbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023bc0:	4650      	mov	r0, sl
 8023bc2:	4659      	mov	r1, fp
 8023bc4:	f7dc fe4c 	bl	8000860 <__aeabi_ddiv>
 8023bc8:	e7d6      	b.n	8023b78 <_strtod_l+0x400>
 8023bca:	9b06      	ldr	r3, [sp, #24]
 8023bcc:	eba5 0808 	sub.w	r8, r5, r8
 8023bd0:	4498      	add	r8, r3
 8023bd2:	f1b8 0f00 	cmp.w	r8, #0
 8023bd6:	dd74      	ble.n	8023cc2 <_strtod_l+0x54a>
 8023bd8:	f018 030f 	ands.w	r3, r8, #15
 8023bdc:	d00a      	beq.n	8023bf4 <_strtod_l+0x47c>
 8023bde:	494f      	ldr	r1, [pc, #316]	; (8023d1c <_strtod_l+0x5a4>)
 8023be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8023be4:	4652      	mov	r2, sl
 8023be6:	465b      	mov	r3, fp
 8023be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023bec:	f7dc fd0e 	bl	800060c <__aeabi_dmul>
 8023bf0:	4682      	mov	sl, r0
 8023bf2:	468b      	mov	fp, r1
 8023bf4:	f038 080f 	bics.w	r8, r8, #15
 8023bf8:	d04f      	beq.n	8023c9a <_strtod_l+0x522>
 8023bfa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8023bfe:	dd22      	ble.n	8023c46 <_strtod_l+0x4ce>
 8023c00:	2500      	movs	r5, #0
 8023c02:	462e      	mov	r6, r5
 8023c04:	9507      	str	r5, [sp, #28]
 8023c06:	9505      	str	r5, [sp, #20]
 8023c08:	2322      	movs	r3, #34	; 0x22
 8023c0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8023d24 <_strtod_l+0x5ac>
 8023c0e:	6023      	str	r3, [r4, #0]
 8023c10:	f04f 0a00 	mov.w	sl, #0
 8023c14:	9b07      	ldr	r3, [sp, #28]
 8023c16:	2b00      	cmp	r3, #0
 8023c18:	f43f adf2 	beq.w	8023800 <_strtod_l+0x88>
 8023c1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8023c1e:	4620      	mov	r0, r4
 8023c20:	f002 f906 	bl	8025e30 <_Bfree>
 8023c24:	9905      	ldr	r1, [sp, #20]
 8023c26:	4620      	mov	r0, r4
 8023c28:	f002 f902 	bl	8025e30 <_Bfree>
 8023c2c:	4631      	mov	r1, r6
 8023c2e:	4620      	mov	r0, r4
 8023c30:	f002 f8fe 	bl	8025e30 <_Bfree>
 8023c34:	9907      	ldr	r1, [sp, #28]
 8023c36:	4620      	mov	r0, r4
 8023c38:	f002 f8fa 	bl	8025e30 <_Bfree>
 8023c3c:	4629      	mov	r1, r5
 8023c3e:	4620      	mov	r0, r4
 8023c40:	f002 f8f6 	bl	8025e30 <_Bfree>
 8023c44:	e5dc      	b.n	8023800 <_strtod_l+0x88>
 8023c46:	4b36      	ldr	r3, [pc, #216]	; (8023d20 <_strtod_l+0x5a8>)
 8023c48:	9304      	str	r3, [sp, #16]
 8023c4a:	2300      	movs	r3, #0
 8023c4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8023c50:	4650      	mov	r0, sl
 8023c52:	4659      	mov	r1, fp
 8023c54:	4699      	mov	r9, r3
 8023c56:	f1b8 0f01 	cmp.w	r8, #1
 8023c5a:	dc21      	bgt.n	8023ca0 <_strtod_l+0x528>
 8023c5c:	b10b      	cbz	r3, 8023c62 <_strtod_l+0x4ea>
 8023c5e:	4682      	mov	sl, r0
 8023c60:	468b      	mov	fp, r1
 8023c62:	4b2f      	ldr	r3, [pc, #188]	; (8023d20 <_strtod_l+0x5a8>)
 8023c64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8023c68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8023c6c:	4652      	mov	r2, sl
 8023c6e:	465b      	mov	r3, fp
 8023c70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8023c74:	f7dc fcca 	bl	800060c <__aeabi_dmul>
 8023c78:	4b2a      	ldr	r3, [pc, #168]	; (8023d24 <_strtod_l+0x5ac>)
 8023c7a:	460a      	mov	r2, r1
 8023c7c:	400b      	ands	r3, r1
 8023c7e:	492a      	ldr	r1, [pc, #168]	; (8023d28 <_strtod_l+0x5b0>)
 8023c80:	428b      	cmp	r3, r1
 8023c82:	4682      	mov	sl, r0
 8023c84:	d8bc      	bhi.n	8023c00 <_strtod_l+0x488>
 8023c86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8023c8a:	428b      	cmp	r3, r1
 8023c8c:	bf86      	itte	hi
 8023c8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8023d2c <_strtod_l+0x5b4>
 8023c92:	f04f 3aff 	movhi.w	sl, #4294967295
 8023c96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8023c9a:	2300      	movs	r3, #0
 8023c9c:	9304      	str	r3, [sp, #16]
 8023c9e:	e084      	b.n	8023daa <_strtod_l+0x632>
 8023ca0:	f018 0f01 	tst.w	r8, #1
 8023ca4:	d005      	beq.n	8023cb2 <_strtod_l+0x53a>
 8023ca6:	9b04      	ldr	r3, [sp, #16]
 8023ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cac:	f7dc fcae 	bl	800060c <__aeabi_dmul>
 8023cb0:	2301      	movs	r3, #1
 8023cb2:	9a04      	ldr	r2, [sp, #16]
 8023cb4:	3208      	adds	r2, #8
 8023cb6:	f109 0901 	add.w	r9, r9, #1
 8023cba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8023cbe:	9204      	str	r2, [sp, #16]
 8023cc0:	e7c9      	b.n	8023c56 <_strtod_l+0x4de>
 8023cc2:	d0ea      	beq.n	8023c9a <_strtod_l+0x522>
 8023cc4:	f1c8 0800 	rsb	r8, r8, #0
 8023cc8:	f018 020f 	ands.w	r2, r8, #15
 8023ccc:	d00a      	beq.n	8023ce4 <_strtod_l+0x56c>
 8023cce:	4b13      	ldr	r3, [pc, #76]	; (8023d1c <_strtod_l+0x5a4>)
 8023cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023cd4:	4650      	mov	r0, sl
 8023cd6:	4659      	mov	r1, fp
 8023cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cdc:	f7dc fdc0 	bl	8000860 <__aeabi_ddiv>
 8023ce0:	4682      	mov	sl, r0
 8023ce2:	468b      	mov	fp, r1
 8023ce4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8023ce8:	d0d7      	beq.n	8023c9a <_strtod_l+0x522>
 8023cea:	f1b8 0f1f 	cmp.w	r8, #31
 8023cee:	dd1f      	ble.n	8023d30 <_strtod_l+0x5b8>
 8023cf0:	2500      	movs	r5, #0
 8023cf2:	462e      	mov	r6, r5
 8023cf4:	9507      	str	r5, [sp, #28]
 8023cf6:	9505      	str	r5, [sp, #20]
 8023cf8:	2322      	movs	r3, #34	; 0x22
 8023cfa:	f04f 0a00 	mov.w	sl, #0
 8023cfe:	f04f 0b00 	mov.w	fp, #0
 8023d02:	6023      	str	r3, [r4, #0]
 8023d04:	e786      	b.n	8023c14 <_strtod_l+0x49c>
 8023d06:	bf00      	nop
 8023d08:	0804beae 	.word	0x0804beae
 8023d0c:	0804beec 	.word	0x0804beec
 8023d10:	0804bea6 	.word	0x0804bea6
 8023d14:	0804c02c 	.word	0x0804c02c
 8023d18:	0804be8b 	.word	0x0804be8b
 8023d1c:	0804c220 	.word	0x0804c220
 8023d20:	0804c1f8 	.word	0x0804c1f8
 8023d24:	7ff00000 	.word	0x7ff00000
 8023d28:	7ca00000 	.word	0x7ca00000
 8023d2c:	7fefffff 	.word	0x7fefffff
 8023d30:	f018 0310 	ands.w	r3, r8, #16
 8023d34:	bf18      	it	ne
 8023d36:	236a      	movne	r3, #106	; 0x6a
 8023d38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80240e8 <_strtod_l+0x970>
 8023d3c:	9304      	str	r3, [sp, #16]
 8023d3e:	4650      	mov	r0, sl
 8023d40:	4659      	mov	r1, fp
 8023d42:	2300      	movs	r3, #0
 8023d44:	f018 0f01 	tst.w	r8, #1
 8023d48:	d004      	beq.n	8023d54 <_strtod_l+0x5dc>
 8023d4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8023d4e:	f7dc fc5d 	bl	800060c <__aeabi_dmul>
 8023d52:	2301      	movs	r3, #1
 8023d54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8023d58:	f109 0908 	add.w	r9, r9, #8
 8023d5c:	d1f2      	bne.n	8023d44 <_strtod_l+0x5cc>
 8023d5e:	b10b      	cbz	r3, 8023d64 <_strtod_l+0x5ec>
 8023d60:	4682      	mov	sl, r0
 8023d62:	468b      	mov	fp, r1
 8023d64:	9b04      	ldr	r3, [sp, #16]
 8023d66:	b1c3      	cbz	r3, 8023d9a <_strtod_l+0x622>
 8023d68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8023d6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8023d70:	2b00      	cmp	r3, #0
 8023d72:	4659      	mov	r1, fp
 8023d74:	dd11      	ble.n	8023d9a <_strtod_l+0x622>
 8023d76:	2b1f      	cmp	r3, #31
 8023d78:	f340 8124 	ble.w	8023fc4 <_strtod_l+0x84c>
 8023d7c:	2b34      	cmp	r3, #52	; 0x34
 8023d7e:	bfde      	ittt	le
 8023d80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8023d84:	f04f 33ff 	movle.w	r3, #4294967295
 8023d88:	fa03 f202 	lslle.w	r2, r3, r2
 8023d8c:	f04f 0a00 	mov.w	sl, #0
 8023d90:	bfcc      	ite	gt
 8023d92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8023d96:	ea02 0b01 	andle.w	fp, r2, r1
 8023d9a:	2200      	movs	r2, #0
 8023d9c:	2300      	movs	r3, #0
 8023d9e:	4650      	mov	r0, sl
 8023da0:	4659      	mov	r1, fp
 8023da2:	f7dc fe9b 	bl	8000adc <__aeabi_dcmpeq>
 8023da6:	2800      	cmp	r0, #0
 8023da8:	d1a2      	bne.n	8023cf0 <_strtod_l+0x578>
 8023daa:	9b07      	ldr	r3, [sp, #28]
 8023dac:	9300      	str	r3, [sp, #0]
 8023dae:	9908      	ldr	r1, [sp, #32]
 8023db0:	462b      	mov	r3, r5
 8023db2:	463a      	mov	r2, r7
 8023db4:	4620      	mov	r0, r4
 8023db6:	f002 f8a3 	bl	8025f00 <__s2b>
 8023dba:	9007      	str	r0, [sp, #28]
 8023dbc:	2800      	cmp	r0, #0
 8023dbe:	f43f af1f 	beq.w	8023c00 <_strtod_l+0x488>
 8023dc2:	9b05      	ldr	r3, [sp, #20]
 8023dc4:	1b9e      	subs	r6, r3, r6
 8023dc6:	9b06      	ldr	r3, [sp, #24]
 8023dc8:	2b00      	cmp	r3, #0
 8023dca:	bfb4      	ite	lt
 8023dcc:	4633      	movlt	r3, r6
 8023dce:	2300      	movge	r3, #0
 8023dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8023dd2:	9b06      	ldr	r3, [sp, #24]
 8023dd4:	2500      	movs	r5, #0
 8023dd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023dda:	9312      	str	r3, [sp, #72]	; 0x48
 8023ddc:	462e      	mov	r6, r5
 8023dde:	9b07      	ldr	r3, [sp, #28]
 8023de0:	4620      	mov	r0, r4
 8023de2:	6859      	ldr	r1, [r3, #4]
 8023de4:	f001 ffe4 	bl	8025db0 <_Balloc>
 8023de8:	9005      	str	r0, [sp, #20]
 8023dea:	2800      	cmp	r0, #0
 8023dec:	f43f af0c 	beq.w	8023c08 <_strtod_l+0x490>
 8023df0:	9b07      	ldr	r3, [sp, #28]
 8023df2:	691a      	ldr	r2, [r3, #16]
 8023df4:	3202      	adds	r2, #2
 8023df6:	f103 010c 	add.w	r1, r3, #12
 8023dfa:	0092      	lsls	r2, r2, #2
 8023dfc:	300c      	adds	r0, #12
 8023dfe:	f7fe fd4b 	bl	8022898 <memcpy>
 8023e02:	ec4b ab10 	vmov	d0, sl, fp
 8023e06:	aa1a      	add	r2, sp, #104	; 0x68
 8023e08:	a919      	add	r1, sp, #100	; 0x64
 8023e0a:	4620      	mov	r0, r4
 8023e0c:	f002 fbbe 	bl	802658c <__d2b>
 8023e10:	ec4b ab18 	vmov	d8, sl, fp
 8023e14:	9018      	str	r0, [sp, #96]	; 0x60
 8023e16:	2800      	cmp	r0, #0
 8023e18:	f43f aef6 	beq.w	8023c08 <_strtod_l+0x490>
 8023e1c:	2101      	movs	r1, #1
 8023e1e:	4620      	mov	r0, r4
 8023e20:	f002 f908 	bl	8026034 <__i2b>
 8023e24:	4606      	mov	r6, r0
 8023e26:	2800      	cmp	r0, #0
 8023e28:	f43f aeee 	beq.w	8023c08 <_strtod_l+0x490>
 8023e2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023e2e:	9904      	ldr	r1, [sp, #16]
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	bfab      	itete	ge
 8023e34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8023e36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8023e38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8023e3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8023e3e:	bfac      	ite	ge
 8023e40:	eb03 0902 	addge.w	r9, r3, r2
 8023e44:	1ad7      	sublt	r7, r2, r3
 8023e46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8023e48:	eba3 0801 	sub.w	r8, r3, r1
 8023e4c:	4490      	add	r8, r2
 8023e4e:	4ba1      	ldr	r3, [pc, #644]	; (80240d4 <_strtod_l+0x95c>)
 8023e50:	f108 38ff 	add.w	r8, r8, #4294967295
 8023e54:	4598      	cmp	r8, r3
 8023e56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8023e5a:	f280 80c7 	bge.w	8023fec <_strtod_l+0x874>
 8023e5e:	eba3 0308 	sub.w	r3, r3, r8
 8023e62:	2b1f      	cmp	r3, #31
 8023e64:	eba2 0203 	sub.w	r2, r2, r3
 8023e68:	f04f 0101 	mov.w	r1, #1
 8023e6c:	f300 80b1 	bgt.w	8023fd2 <_strtod_l+0x85a>
 8023e70:	fa01 f303 	lsl.w	r3, r1, r3
 8023e74:	930d      	str	r3, [sp, #52]	; 0x34
 8023e76:	2300      	movs	r3, #0
 8023e78:	9308      	str	r3, [sp, #32]
 8023e7a:	eb09 0802 	add.w	r8, r9, r2
 8023e7e:	9b04      	ldr	r3, [sp, #16]
 8023e80:	45c1      	cmp	r9, r8
 8023e82:	4417      	add	r7, r2
 8023e84:	441f      	add	r7, r3
 8023e86:	464b      	mov	r3, r9
 8023e88:	bfa8      	it	ge
 8023e8a:	4643      	movge	r3, r8
 8023e8c:	42bb      	cmp	r3, r7
 8023e8e:	bfa8      	it	ge
 8023e90:	463b      	movge	r3, r7
 8023e92:	2b00      	cmp	r3, #0
 8023e94:	bfc2      	ittt	gt
 8023e96:	eba8 0803 	subgt.w	r8, r8, r3
 8023e9a:	1aff      	subgt	r7, r7, r3
 8023e9c:	eba9 0903 	subgt.w	r9, r9, r3
 8023ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ea2:	2b00      	cmp	r3, #0
 8023ea4:	dd17      	ble.n	8023ed6 <_strtod_l+0x75e>
 8023ea6:	4631      	mov	r1, r6
 8023ea8:	461a      	mov	r2, r3
 8023eaa:	4620      	mov	r0, r4
 8023eac:	f002 f982 	bl	80261b4 <__pow5mult>
 8023eb0:	4606      	mov	r6, r0
 8023eb2:	2800      	cmp	r0, #0
 8023eb4:	f43f aea8 	beq.w	8023c08 <_strtod_l+0x490>
 8023eb8:	4601      	mov	r1, r0
 8023eba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023ebc:	4620      	mov	r0, r4
 8023ebe:	f002 f8cf 	bl	8026060 <__multiply>
 8023ec2:	900b      	str	r0, [sp, #44]	; 0x2c
 8023ec4:	2800      	cmp	r0, #0
 8023ec6:	f43f ae9f 	beq.w	8023c08 <_strtod_l+0x490>
 8023eca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8023ecc:	4620      	mov	r0, r4
 8023ece:	f001 ffaf 	bl	8025e30 <_Bfree>
 8023ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ed4:	9318      	str	r3, [sp, #96]	; 0x60
 8023ed6:	f1b8 0f00 	cmp.w	r8, #0
 8023eda:	f300 808c 	bgt.w	8023ff6 <_strtod_l+0x87e>
 8023ede:	9b06      	ldr	r3, [sp, #24]
 8023ee0:	2b00      	cmp	r3, #0
 8023ee2:	dd08      	ble.n	8023ef6 <_strtod_l+0x77e>
 8023ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023ee6:	9905      	ldr	r1, [sp, #20]
 8023ee8:	4620      	mov	r0, r4
 8023eea:	f002 f963 	bl	80261b4 <__pow5mult>
 8023eee:	9005      	str	r0, [sp, #20]
 8023ef0:	2800      	cmp	r0, #0
 8023ef2:	f43f ae89 	beq.w	8023c08 <_strtod_l+0x490>
 8023ef6:	2f00      	cmp	r7, #0
 8023ef8:	dd08      	ble.n	8023f0c <_strtod_l+0x794>
 8023efa:	9905      	ldr	r1, [sp, #20]
 8023efc:	463a      	mov	r2, r7
 8023efe:	4620      	mov	r0, r4
 8023f00:	f002 f9b2 	bl	8026268 <__lshift>
 8023f04:	9005      	str	r0, [sp, #20]
 8023f06:	2800      	cmp	r0, #0
 8023f08:	f43f ae7e 	beq.w	8023c08 <_strtod_l+0x490>
 8023f0c:	f1b9 0f00 	cmp.w	r9, #0
 8023f10:	dd08      	ble.n	8023f24 <_strtod_l+0x7ac>
 8023f12:	4631      	mov	r1, r6
 8023f14:	464a      	mov	r2, r9
 8023f16:	4620      	mov	r0, r4
 8023f18:	f002 f9a6 	bl	8026268 <__lshift>
 8023f1c:	4606      	mov	r6, r0
 8023f1e:	2800      	cmp	r0, #0
 8023f20:	f43f ae72 	beq.w	8023c08 <_strtod_l+0x490>
 8023f24:	9a05      	ldr	r2, [sp, #20]
 8023f26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8023f28:	4620      	mov	r0, r4
 8023f2a:	f002 fa29 	bl	8026380 <__mdiff>
 8023f2e:	4605      	mov	r5, r0
 8023f30:	2800      	cmp	r0, #0
 8023f32:	f43f ae69 	beq.w	8023c08 <_strtod_l+0x490>
 8023f36:	68c3      	ldr	r3, [r0, #12]
 8023f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8023f3a:	2300      	movs	r3, #0
 8023f3c:	60c3      	str	r3, [r0, #12]
 8023f3e:	4631      	mov	r1, r6
 8023f40:	f002 fa02 	bl	8026348 <__mcmp>
 8023f44:	2800      	cmp	r0, #0
 8023f46:	da60      	bge.n	802400a <_strtod_l+0x892>
 8023f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023f4a:	ea53 030a 	orrs.w	r3, r3, sl
 8023f4e:	f040 8082 	bne.w	8024056 <_strtod_l+0x8de>
 8023f52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8023f56:	2b00      	cmp	r3, #0
 8023f58:	d17d      	bne.n	8024056 <_strtod_l+0x8de>
 8023f5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023f5e:	0d1b      	lsrs	r3, r3, #20
 8023f60:	051b      	lsls	r3, r3, #20
 8023f62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8023f66:	d976      	bls.n	8024056 <_strtod_l+0x8de>
 8023f68:	696b      	ldr	r3, [r5, #20]
 8023f6a:	b913      	cbnz	r3, 8023f72 <_strtod_l+0x7fa>
 8023f6c:	692b      	ldr	r3, [r5, #16]
 8023f6e:	2b01      	cmp	r3, #1
 8023f70:	dd71      	ble.n	8024056 <_strtod_l+0x8de>
 8023f72:	4629      	mov	r1, r5
 8023f74:	2201      	movs	r2, #1
 8023f76:	4620      	mov	r0, r4
 8023f78:	f002 f976 	bl	8026268 <__lshift>
 8023f7c:	4631      	mov	r1, r6
 8023f7e:	4605      	mov	r5, r0
 8023f80:	f002 f9e2 	bl	8026348 <__mcmp>
 8023f84:	2800      	cmp	r0, #0
 8023f86:	dd66      	ble.n	8024056 <_strtod_l+0x8de>
 8023f88:	9904      	ldr	r1, [sp, #16]
 8023f8a:	4a53      	ldr	r2, [pc, #332]	; (80240d8 <_strtod_l+0x960>)
 8023f8c:	465b      	mov	r3, fp
 8023f8e:	2900      	cmp	r1, #0
 8023f90:	f000 8081 	beq.w	8024096 <_strtod_l+0x91e>
 8023f94:	ea02 010b 	and.w	r1, r2, fp
 8023f98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8023f9c:	dc7b      	bgt.n	8024096 <_strtod_l+0x91e>
 8023f9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8023fa2:	f77f aea9 	ble.w	8023cf8 <_strtod_l+0x580>
 8023fa6:	4b4d      	ldr	r3, [pc, #308]	; (80240dc <_strtod_l+0x964>)
 8023fa8:	4650      	mov	r0, sl
 8023faa:	4659      	mov	r1, fp
 8023fac:	2200      	movs	r2, #0
 8023fae:	f7dc fb2d 	bl	800060c <__aeabi_dmul>
 8023fb2:	460b      	mov	r3, r1
 8023fb4:	4303      	orrs	r3, r0
 8023fb6:	bf08      	it	eq
 8023fb8:	2322      	moveq	r3, #34	; 0x22
 8023fba:	4682      	mov	sl, r0
 8023fbc:	468b      	mov	fp, r1
 8023fbe:	bf08      	it	eq
 8023fc0:	6023      	streq	r3, [r4, #0]
 8023fc2:	e62b      	b.n	8023c1c <_strtod_l+0x4a4>
 8023fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8023fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8023fcc:	ea03 0a0a 	and.w	sl, r3, sl
 8023fd0:	e6e3      	b.n	8023d9a <_strtod_l+0x622>
 8023fd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8023fd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8023fda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8023fde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8023fe2:	fa01 f308 	lsl.w	r3, r1, r8
 8023fe6:	9308      	str	r3, [sp, #32]
 8023fe8:	910d      	str	r1, [sp, #52]	; 0x34
 8023fea:	e746      	b.n	8023e7a <_strtod_l+0x702>
 8023fec:	2300      	movs	r3, #0
 8023fee:	9308      	str	r3, [sp, #32]
 8023ff0:	2301      	movs	r3, #1
 8023ff2:	930d      	str	r3, [sp, #52]	; 0x34
 8023ff4:	e741      	b.n	8023e7a <_strtod_l+0x702>
 8023ff6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8023ff8:	4642      	mov	r2, r8
 8023ffa:	4620      	mov	r0, r4
 8023ffc:	f002 f934 	bl	8026268 <__lshift>
 8024000:	9018      	str	r0, [sp, #96]	; 0x60
 8024002:	2800      	cmp	r0, #0
 8024004:	f47f af6b 	bne.w	8023ede <_strtod_l+0x766>
 8024008:	e5fe      	b.n	8023c08 <_strtod_l+0x490>
 802400a:	465f      	mov	r7, fp
 802400c:	d16e      	bne.n	80240ec <_strtod_l+0x974>
 802400e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024010:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024014:	b342      	cbz	r2, 8024068 <_strtod_l+0x8f0>
 8024016:	4a32      	ldr	r2, [pc, #200]	; (80240e0 <_strtod_l+0x968>)
 8024018:	4293      	cmp	r3, r2
 802401a:	d128      	bne.n	802406e <_strtod_l+0x8f6>
 802401c:	9b04      	ldr	r3, [sp, #16]
 802401e:	4651      	mov	r1, sl
 8024020:	b1eb      	cbz	r3, 802405e <_strtod_l+0x8e6>
 8024022:	4b2d      	ldr	r3, [pc, #180]	; (80240d8 <_strtod_l+0x960>)
 8024024:	403b      	ands	r3, r7
 8024026:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802402a:	f04f 32ff 	mov.w	r2, #4294967295
 802402e:	d819      	bhi.n	8024064 <_strtod_l+0x8ec>
 8024030:	0d1b      	lsrs	r3, r3, #20
 8024032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8024036:	fa02 f303 	lsl.w	r3, r2, r3
 802403a:	4299      	cmp	r1, r3
 802403c:	d117      	bne.n	802406e <_strtod_l+0x8f6>
 802403e:	4b29      	ldr	r3, [pc, #164]	; (80240e4 <_strtod_l+0x96c>)
 8024040:	429f      	cmp	r7, r3
 8024042:	d102      	bne.n	802404a <_strtod_l+0x8d2>
 8024044:	3101      	adds	r1, #1
 8024046:	f43f addf 	beq.w	8023c08 <_strtod_l+0x490>
 802404a:	4b23      	ldr	r3, [pc, #140]	; (80240d8 <_strtod_l+0x960>)
 802404c:	403b      	ands	r3, r7
 802404e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8024052:	f04f 0a00 	mov.w	sl, #0
 8024056:	9b04      	ldr	r3, [sp, #16]
 8024058:	2b00      	cmp	r3, #0
 802405a:	d1a4      	bne.n	8023fa6 <_strtod_l+0x82e>
 802405c:	e5de      	b.n	8023c1c <_strtod_l+0x4a4>
 802405e:	f04f 33ff 	mov.w	r3, #4294967295
 8024062:	e7ea      	b.n	802403a <_strtod_l+0x8c2>
 8024064:	4613      	mov	r3, r2
 8024066:	e7e8      	b.n	802403a <_strtod_l+0x8c2>
 8024068:	ea53 030a 	orrs.w	r3, r3, sl
 802406c:	d08c      	beq.n	8023f88 <_strtod_l+0x810>
 802406e:	9b08      	ldr	r3, [sp, #32]
 8024070:	b1db      	cbz	r3, 80240aa <_strtod_l+0x932>
 8024072:	423b      	tst	r3, r7
 8024074:	d0ef      	beq.n	8024056 <_strtod_l+0x8de>
 8024076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024078:	9a04      	ldr	r2, [sp, #16]
 802407a:	4650      	mov	r0, sl
 802407c:	4659      	mov	r1, fp
 802407e:	b1c3      	cbz	r3, 80240b2 <_strtod_l+0x93a>
 8024080:	f7ff fb5c 	bl	802373c <sulp>
 8024084:	4602      	mov	r2, r0
 8024086:	460b      	mov	r3, r1
 8024088:	ec51 0b18 	vmov	r0, r1, d8
 802408c:	f7dc f908 	bl	80002a0 <__adddf3>
 8024090:	4682      	mov	sl, r0
 8024092:	468b      	mov	fp, r1
 8024094:	e7df      	b.n	8024056 <_strtod_l+0x8de>
 8024096:	4013      	ands	r3, r2
 8024098:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802409c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80240a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80240a4:	f04f 3aff 	mov.w	sl, #4294967295
 80240a8:	e7d5      	b.n	8024056 <_strtod_l+0x8de>
 80240aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80240ac:	ea13 0f0a 	tst.w	r3, sl
 80240b0:	e7e0      	b.n	8024074 <_strtod_l+0x8fc>
 80240b2:	f7ff fb43 	bl	802373c <sulp>
 80240b6:	4602      	mov	r2, r0
 80240b8:	460b      	mov	r3, r1
 80240ba:	ec51 0b18 	vmov	r0, r1, d8
 80240be:	f7dc f8ed 	bl	800029c <__aeabi_dsub>
 80240c2:	2200      	movs	r2, #0
 80240c4:	2300      	movs	r3, #0
 80240c6:	4682      	mov	sl, r0
 80240c8:	468b      	mov	fp, r1
 80240ca:	f7dc fd07 	bl	8000adc <__aeabi_dcmpeq>
 80240ce:	2800      	cmp	r0, #0
 80240d0:	d0c1      	beq.n	8024056 <_strtod_l+0x8de>
 80240d2:	e611      	b.n	8023cf8 <_strtod_l+0x580>
 80240d4:	fffffc02 	.word	0xfffffc02
 80240d8:	7ff00000 	.word	0x7ff00000
 80240dc:	39500000 	.word	0x39500000
 80240e0:	000fffff 	.word	0x000fffff
 80240e4:	7fefffff 	.word	0x7fefffff
 80240e8:	0804bf00 	.word	0x0804bf00
 80240ec:	4631      	mov	r1, r6
 80240ee:	4628      	mov	r0, r5
 80240f0:	f002 faa8 	bl	8026644 <__ratio>
 80240f4:	ec59 8b10 	vmov	r8, r9, d0
 80240f8:	ee10 0a10 	vmov	r0, s0
 80240fc:	2200      	movs	r2, #0
 80240fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024102:	4649      	mov	r1, r9
 8024104:	f7dc fcfe 	bl	8000b04 <__aeabi_dcmple>
 8024108:	2800      	cmp	r0, #0
 802410a:	d07a      	beq.n	8024202 <_strtod_l+0xa8a>
 802410c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802410e:	2b00      	cmp	r3, #0
 8024110:	d04a      	beq.n	80241a8 <_strtod_l+0xa30>
 8024112:	4b95      	ldr	r3, [pc, #596]	; (8024368 <_strtod_l+0xbf0>)
 8024114:	2200      	movs	r2, #0
 8024116:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802411a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8024368 <_strtod_l+0xbf0>
 802411e:	f04f 0800 	mov.w	r8, #0
 8024122:	4b92      	ldr	r3, [pc, #584]	; (802436c <_strtod_l+0xbf4>)
 8024124:	403b      	ands	r3, r7
 8024126:	930d      	str	r3, [sp, #52]	; 0x34
 8024128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802412a:	4b91      	ldr	r3, [pc, #580]	; (8024370 <_strtod_l+0xbf8>)
 802412c:	429a      	cmp	r2, r3
 802412e:	f040 80b0 	bne.w	8024292 <_strtod_l+0xb1a>
 8024132:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024136:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 802413a:	ec4b ab10 	vmov	d0, sl, fp
 802413e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024142:	f002 f9a7 	bl	8026494 <__ulp>
 8024146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802414a:	ec53 2b10 	vmov	r2, r3, d0
 802414e:	f7dc fa5d 	bl	800060c <__aeabi_dmul>
 8024152:	4652      	mov	r2, sl
 8024154:	465b      	mov	r3, fp
 8024156:	f7dc f8a3 	bl	80002a0 <__adddf3>
 802415a:	460b      	mov	r3, r1
 802415c:	4983      	ldr	r1, [pc, #524]	; (802436c <_strtod_l+0xbf4>)
 802415e:	4a85      	ldr	r2, [pc, #532]	; (8024374 <_strtod_l+0xbfc>)
 8024160:	4019      	ands	r1, r3
 8024162:	4291      	cmp	r1, r2
 8024164:	4682      	mov	sl, r0
 8024166:	d960      	bls.n	802422a <_strtod_l+0xab2>
 8024168:	ee18 3a90 	vmov	r3, s17
 802416c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8024170:	4293      	cmp	r3, r2
 8024172:	d104      	bne.n	802417e <_strtod_l+0xa06>
 8024174:	ee18 3a10 	vmov	r3, s16
 8024178:	3301      	adds	r3, #1
 802417a:	f43f ad45 	beq.w	8023c08 <_strtod_l+0x490>
 802417e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8024380 <_strtod_l+0xc08>
 8024182:	f04f 3aff 	mov.w	sl, #4294967295
 8024186:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024188:	4620      	mov	r0, r4
 802418a:	f001 fe51 	bl	8025e30 <_Bfree>
 802418e:	9905      	ldr	r1, [sp, #20]
 8024190:	4620      	mov	r0, r4
 8024192:	f001 fe4d 	bl	8025e30 <_Bfree>
 8024196:	4631      	mov	r1, r6
 8024198:	4620      	mov	r0, r4
 802419a:	f001 fe49 	bl	8025e30 <_Bfree>
 802419e:	4629      	mov	r1, r5
 80241a0:	4620      	mov	r0, r4
 80241a2:	f001 fe45 	bl	8025e30 <_Bfree>
 80241a6:	e61a      	b.n	8023dde <_strtod_l+0x666>
 80241a8:	f1ba 0f00 	cmp.w	sl, #0
 80241ac:	d11b      	bne.n	80241e6 <_strtod_l+0xa6e>
 80241ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80241b2:	b9f3      	cbnz	r3, 80241f2 <_strtod_l+0xa7a>
 80241b4:	4b6c      	ldr	r3, [pc, #432]	; (8024368 <_strtod_l+0xbf0>)
 80241b6:	2200      	movs	r2, #0
 80241b8:	4640      	mov	r0, r8
 80241ba:	4649      	mov	r1, r9
 80241bc:	f7dc fc98 	bl	8000af0 <__aeabi_dcmplt>
 80241c0:	b9d0      	cbnz	r0, 80241f8 <_strtod_l+0xa80>
 80241c2:	4640      	mov	r0, r8
 80241c4:	4649      	mov	r1, r9
 80241c6:	4b6c      	ldr	r3, [pc, #432]	; (8024378 <_strtod_l+0xc00>)
 80241c8:	2200      	movs	r2, #0
 80241ca:	f7dc fa1f 	bl	800060c <__aeabi_dmul>
 80241ce:	4680      	mov	r8, r0
 80241d0:	4689      	mov	r9, r1
 80241d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80241d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80241da:	9315      	str	r3, [sp, #84]	; 0x54
 80241dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80241e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80241e4:	e79d      	b.n	8024122 <_strtod_l+0x9aa>
 80241e6:	f1ba 0f01 	cmp.w	sl, #1
 80241ea:	d102      	bne.n	80241f2 <_strtod_l+0xa7a>
 80241ec:	2f00      	cmp	r7, #0
 80241ee:	f43f ad83 	beq.w	8023cf8 <_strtod_l+0x580>
 80241f2:	4b62      	ldr	r3, [pc, #392]	; (802437c <_strtod_l+0xc04>)
 80241f4:	2200      	movs	r2, #0
 80241f6:	e78e      	b.n	8024116 <_strtod_l+0x99e>
 80241f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8024378 <_strtod_l+0xc00>
 80241fc:	f04f 0800 	mov.w	r8, #0
 8024200:	e7e7      	b.n	80241d2 <_strtod_l+0xa5a>
 8024202:	4b5d      	ldr	r3, [pc, #372]	; (8024378 <_strtod_l+0xc00>)
 8024204:	4640      	mov	r0, r8
 8024206:	4649      	mov	r1, r9
 8024208:	2200      	movs	r2, #0
 802420a:	f7dc f9ff 	bl	800060c <__aeabi_dmul>
 802420e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024210:	4680      	mov	r8, r0
 8024212:	4689      	mov	r9, r1
 8024214:	b933      	cbnz	r3, 8024224 <_strtod_l+0xaac>
 8024216:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802421a:	900e      	str	r0, [sp, #56]	; 0x38
 802421c:	930f      	str	r3, [sp, #60]	; 0x3c
 802421e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8024222:	e7dd      	b.n	80241e0 <_strtod_l+0xa68>
 8024224:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8024228:	e7f9      	b.n	802421e <_strtod_l+0xaa6>
 802422a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 802422e:	9b04      	ldr	r3, [sp, #16]
 8024230:	2b00      	cmp	r3, #0
 8024232:	d1a8      	bne.n	8024186 <_strtod_l+0xa0e>
 8024234:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802423a:	0d1b      	lsrs	r3, r3, #20
 802423c:	051b      	lsls	r3, r3, #20
 802423e:	429a      	cmp	r2, r3
 8024240:	d1a1      	bne.n	8024186 <_strtod_l+0xa0e>
 8024242:	4640      	mov	r0, r8
 8024244:	4649      	mov	r1, r9
 8024246:	f7dc fd91 	bl	8000d6c <__aeabi_d2lz>
 802424a:	f7dc f9b1 	bl	80005b0 <__aeabi_l2d>
 802424e:	4602      	mov	r2, r0
 8024250:	460b      	mov	r3, r1
 8024252:	4640      	mov	r0, r8
 8024254:	4649      	mov	r1, r9
 8024256:	f7dc f821 	bl	800029c <__aeabi_dsub>
 802425a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802425c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024260:	ea43 030a 	orr.w	r3, r3, sl
 8024264:	4313      	orrs	r3, r2
 8024266:	4680      	mov	r8, r0
 8024268:	4689      	mov	r9, r1
 802426a:	d055      	beq.n	8024318 <_strtod_l+0xba0>
 802426c:	a336      	add	r3, pc, #216	; (adr r3, 8024348 <_strtod_l+0xbd0>)
 802426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024272:	f7dc fc3d 	bl	8000af0 <__aeabi_dcmplt>
 8024276:	2800      	cmp	r0, #0
 8024278:	f47f acd0 	bne.w	8023c1c <_strtod_l+0x4a4>
 802427c:	a334      	add	r3, pc, #208	; (adr r3, 8024350 <_strtod_l+0xbd8>)
 802427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024282:	4640      	mov	r0, r8
 8024284:	4649      	mov	r1, r9
 8024286:	f7dc fc51 	bl	8000b2c <__aeabi_dcmpgt>
 802428a:	2800      	cmp	r0, #0
 802428c:	f43f af7b 	beq.w	8024186 <_strtod_l+0xa0e>
 8024290:	e4c4      	b.n	8023c1c <_strtod_l+0x4a4>
 8024292:	9b04      	ldr	r3, [sp, #16]
 8024294:	b333      	cbz	r3, 80242e4 <_strtod_l+0xb6c>
 8024296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024298:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802429c:	d822      	bhi.n	80242e4 <_strtod_l+0xb6c>
 802429e:	a32e      	add	r3, pc, #184	; (adr r3, 8024358 <_strtod_l+0xbe0>)
 80242a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242a4:	4640      	mov	r0, r8
 80242a6:	4649      	mov	r1, r9
 80242a8:	f7dc fc2c 	bl	8000b04 <__aeabi_dcmple>
 80242ac:	b1a0      	cbz	r0, 80242d8 <_strtod_l+0xb60>
 80242ae:	4649      	mov	r1, r9
 80242b0:	4640      	mov	r0, r8
 80242b2:	f7dc fc83 	bl	8000bbc <__aeabi_d2uiz>
 80242b6:	2801      	cmp	r0, #1
 80242b8:	bf38      	it	cc
 80242ba:	2001      	movcc	r0, #1
 80242bc:	f7dc f92c 	bl	8000518 <__aeabi_ui2d>
 80242c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80242c2:	4680      	mov	r8, r0
 80242c4:	4689      	mov	r9, r1
 80242c6:	bb23      	cbnz	r3, 8024312 <_strtod_l+0xb9a>
 80242c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80242cc:	9010      	str	r0, [sp, #64]	; 0x40
 80242ce:	9311      	str	r3, [sp, #68]	; 0x44
 80242d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80242d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80242d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80242dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80242e0:	1a9b      	subs	r3, r3, r2
 80242e2:	9309      	str	r3, [sp, #36]	; 0x24
 80242e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80242e8:	eeb0 0a48 	vmov.f32	s0, s16
 80242ec:	eef0 0a68 	vmov.f32	s1, s17
 80242f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80242f4:	f002 f8ce 	bl	8026494 <__ulp>
 80242f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80242fc:	ec53 2b10 	vmov	r2, r3, d0
 8024300:	f7dc f984 	bl	800060c <__aeabi_dmul>
 8024304:	ec53 2b18 	vmov	r2, r3, d8
 8024308:	f7db ffca 	bl	80002a0 <__adddf3>
 802430c:	4682      	mov	sl, r0
 802430e:	468b      	mov	fp, r1
 8024310:	e78d      	b.n	802422e <_strtod_l+0xab6>
 8024312:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8024316:	e7db      	b.n	80242d0 <_strtod_l+0xb58>
 8024318:	a311      	add	r3, pc, #68	; (adr r3, 8024360 <_strtod_l+0xbe8>)
 802431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802431e:	f7dc fbe7 	bl	8000af0 <__aeabi_dcmplt>
 8024322:	e7b2      	b.n	802428a <_strtod_l+0xb12>
 8024324:	2300      	movs	r3, #0
 8024326:	930a      	str	r3, [sp, #40]	; 0x28
 8024328:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802432a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802432c:	6013      	str	r3, [r2, #0]
 802432e:	f7ff ba6b 	b.w	8023808 <_strtod_l+0x90>
 8024332:	2a65      	cmp	r2, #101	; 0x65
 8024334:	f43f ab5f 	beq.w	80239f6 <_strtod_l+0x27e>
 8024338:	2a45      	cmp	r2, #69	; 0x45
 802433a:	f43f ab5c 	beq.w	80239f6 <_strtod_l+0x27e>
 802433e:	2301      	movs	r3, #1
 8024340:	f7ff bb94 	b.w	8023a6c <_strtod_l+0x2f4>
 8024344:	f3af 8000 	nop.w
 8024348:	94a03595 	.word	0x94a03595
 802434c:	3fdfffff 	.word	0x3fdfffff
 8024350:	35afe535 	.word	0x35afe535
 8024354:	3fe00000 	.word	0x3fe00000
 8024358:	ffc00000 	.word	0xffc00000
 802435c:	41dfffff 	.word	0x41dfffff
 8024360:	94a03595 	.word	0x94a03595
 8024364:	3fcfffff 	.word	0x3fcfffff
 8024368:	3ff00000 	.word	0x3ff00000
 802436c:	7ff00000 	.word	0x7ff00000
 8024370:	7fe00000 	.word	0x7fe00000
 8024374:	7c9fffff 	.word	0x7c9fffff
 8024378:	3fe00000 	.word	0x3fe00000
 802437c:	bff00000 	.word	0xbff00000
 8024380:	7fefffff 	.word	0x7fefffff

08024384 <strtod>:
 8024384:	460a      	mov	r2, r1
 8024386:	4601      	mov	r1, r0
 8024388:	4802      	ldr	r0, [pc, #8]	; (8024394 <strtod+0x10>)
 802438a:	4b03      	ldr	r3, [pc, #12]	; (8024398 <strtod+0x14>)
 802438c:	6800      	ldr	r0, [r0, #0]
 802438e:	f7ff b9f3 	b.w	8023778 <_strtod_l>
 8024392:	bf00      	nop
 8024394:	200002b8 	.word	0x200002b8
 8024398:	20000320 	.word	0x20000320

0802439c <_vsiprintf_r>:
 802439c:	b500      	push	{lr}
 802439e:	b09b      	sub	sp, #108	; 0x6c
 80243a0:	9100      	str	r1, [sp, #0]
 80243a2:	9104      	str	r1, [sp, #16]
 80243a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80243a8:	9105      	str	r1, [sp, #20]
 80243aa:	9102      	str	r1, [sp, #8]
 80243ac:	4905      	ldr	r1, [pc, #20]	; (80243c4 <_vsiprintf_r+0x28>)
 80243ae:	9103      	str	r1, [sp, #12]
 80243b0:	4669      	mov	r1, sp
 80243b2:	f002 fa49 	bl	8026848 <_svfiprintf_r>
 80243b6:	9b00      	ldr	r3, [sp, #0]
 80243b8:	2200      	movs	r2, #0
 80243ba:	701a      	strb	r2, [r3, #0]
 80243bc:	b01b      	add	sp, #108	; 0x6c
 80243be:	f85d fb04 	ldr.w	pc, [sp], #4
 80243c2:	bf00      	nop
 80243c4:	ffff0208 	.word	0xffff0208

080243c8 <vsiprintf>:
 80243c8:	4613      	mov	r3, r2
 80243ca:	460a      	mov	r2, r1
 80243cc:	4601      	mov	r1, r0
 80243ce:	4802      	ldr	r0, [pc, #8]	; (80243d8 <vsiprintf+0x10>)
 80243d0:	6800      	ldr	r0, [r0, #0]
 80243d2:	f7ff bfe3 	b.w	802439c <_vsiprintf_r>
 80243d6:	bf00      	nop
 80243d8:	200002b8 	.word	0x200002b8

080243dc <__swbuf_r>:
 80243dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80243de:	460e      	mov	r6, r1
 80243e0:	4614      	mov	r4, r2
 80243e2:	4605      	mov	r5, r0
 80243e4:	b118      	cbz	r0, 80243ee <__swbuf_r+0x12>
 80243e6:	6983      	ldr	r3, [r0, #24]
 80243e8:	b90b      	cbnz	r3, 80243ee <__swbuf_r+0x12>
 80243ea:	f001 f84d 	bl	8025488 <__sinit>
 80243ee:	4b21      	ldr	r3, [pc, #132]	; (8024474 <__swbuf_r+0x98>)
 80243f0:	429c      	cmp	r4, r3
 80243f2:	d12b      	bne.n	802444c <__swbuf_r+0x70>
 80243f4:	686c      	ldr	r4, [r5, #4]
 80243f6:	69a3      	ldr	r3, [r4, #24]
 80243f8:	60a3      	str	r3, [r4, #8]
 80243fa:	89a3      	ldrh	r3, [r4, #12]
 80243fc:	071a      	lsls	r2, r3, #28
 80243fe:	d52f      	bpl.n	8024460 <__swbuf_r+0x84>
 8024400:	6923      	ldr	r3, [r4, #16]
 8024402:	b36b      	cbz	r3, 8024460 <__swbuf_r+0x84>
 8024404:	6923      	ldr	r3, [r4, #16]
 8024406:	6820      	ldr	r0, [r4, #0]
 8024408:	1ac0      	subs	r0, r0, r3
 802440a:	6963      	ldr	r3, [r4, #20]
 802440c:	b2f6      	uxtb	r6, r6
 802440e:	4283      	cmp	r3, r0
 8024410:	4637      	mov	r7, r6
 8024412:	dc04      	bgt.n	802441e <__swbuf_r+0x42>
 8024414:	4621      	mov	r1, r4
 8024416:	4628      	mov	r0, r5
 8024418:	f000 ffa2 	bl	8025360 <_fflush_r>
 802441c:	bb30      	cbnz	r0, 802446c <__swbuf_r+0x90>
 802441e:	68a3      	ldr	r3, [r4, #8]
 8024420:	3b01      	subs	r3, #1
 8024422:	60a3      	str	r3, [r4, #8]
 8024424:	6823      	ldr	r3, [r4, #0]
 8024426:	1c5a      	adds	r2, r3, #1
 8024428:	6022      	str	r2, [r4, #0]
 802442a:	701e      	strb	r6, [r3, #0]
 802442c:	6963      	ldr	r3, [r4, #20]
 802442e:	3001      	adds	r0, #1
 8024430:	4283      	cmp	r3, r0
 8024432:	d004      	beq.n	802443e <__swbuf_r+0x62>
 8024434:	89a3      	ldrh	r3, [r4, #12]
 8024436:	07db      	lsls	r3, r3, #31
 8024438:	d506      	bpl.n	8024448 <__swbuf_r+0x6c>
 802443a:	2e0a      	cmp	r6, #10
 802443c:	d104      	bne.n	8024448 <__swbuf_r+0x6c>
 802443e:	4621      	mov	r1, r4
 8024440:	4628      	mov	r0, r5
 8024442:	f000 ff8d 	bl	8025360 <_fflush_r>
 8024446:	b988      	cbnz	r0, 802446c <__swbuf_r+0x90>
 8024448:	4638      	mov	r0, r7
 802444a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802444c:	4b0a      	ldr	r3, [pc, #40]	; (8024478 <__swbuf_r+0x9c>)
 802444e:	429c      	cmp	r4, r3
 8024450:	d101      	bne.n	8024456 <__swbuf_r+0x7a>
 8024452:	68ac      	ldr	r4, [r5, #8]
 8024454:	e7cf      	b.n	80243f6 <__swbuf_r+0x1a>
 8024456:	4b09      	ldr	r3, [pc, #36]	; (802447c <__swbuf_r+0xa0>)
 8024458:	429c      	cmp	r4, r3
 802445a:	bf08      	it	eq
 802445c:	68ec      	ldreq	r4, [r5, #12]
 802445e:	e7ca      	b.n	80243f6 <__swbuf_r+0x1a>
 8024460:	4621      	mov	r1, r4
 8024462:	4628      	mov	r0, r5
 8024464:	f000 f80c 	bl	8024480 <__swsetup_r>
 8024468:	2800      	cmp	r0, #0
 802446a:	d0cb      	beq.n	8024404 <__swbuf_r+0x28>
 802446c:	f04f 37ff 	mov.w	r7, #4294967295
 8024470:	e7ea      	b.n	8024448 <__swbuf_r+0x6c>
 8024472:	bf00      	nop
 8024474:	0804c0dc 	.word	0x0804c0dc
 8024478:	0804c0fc 	.word	0x0804c0fc
 802447c:	0804c0bc 	.word	0x0804c0bc

08024480 <__swsetup_r>:
 8024480:	4b32      	ldr	r3, [pc, #200]	; (802454c <__swsetup_r+0xcc>)
 8024482:	b570      	push	{r4, r5, r6, lr}
 8024484:	681d      	ldr	r5, [r3, #0]
 8024486:	4606      	mov	r6, r0
 8024488:	460c      	mov	r4, r1
 802448a:	b125      	cbz	r5, 8024496 <__swsetup_r+0x16>
 802448c:	69ab      	ldr	r3, [r5, #24]
 802448e:	b913      	cbnz	r3, 8024496 <__swsetup_r+0x16>
 8024490:	4628      	mov	r0, r5
 8024492:	f000 fff9 	bl	8025488 <__sinit>
 8024496:	4b2e      	ldr	r3, [pc, #184]	; (8024550 <__swsetup_r+0xd0>)
 8024498:	429c      	cmp	r4, r3
 802449a:	d10f      	bne.n	80244bc <__swsetup_r+0x3c>
 802449c:	686c      	ldr	r4, [r5, #4]
 802449e:	89a3      	ldrh	r3, [r4, #12]
 80244a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80244a4:	0719      	lsls	r1, r3, #28
 80244a6:	d42c      	bmi.n	8024502 <__swsetup_r+0x82>
 80244a8:	06dd      	lsls	r5, r3, #27
 80244aa:	d411      	bmi.n	80244d0 <__swsetup_r+0x50>
 80244ac:	2309      	movs	r3, #9
 80244ae:	6033      	str	r3, [r6, #0]
 80244b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80244b4:	81a3      	strh	r3, [r4, #12]
 80244b6:	f04f 30ff 	mov.w	r0, #4294967295
 80244ba:	e03e      	b.n	802453a <__swsetup_r+0xba>
 80244bc:	4b25      	ldr	r3, [pc, #148]	; (8024554 <__swsetup_r+0xd4>)
 80244be:	429c      	cmp	r4, r3
 80244c0:	d101      	bne.n	80244c6 <__swsetup_r+0x46>
 80244c2:	68ac      	ldr	r4, [r5, #8]
 80244c4:	e7eb      	b.n	802449e <__swsetup_r+0x1e>
 80244c6:	4b24      	ldr	r3, [pc, #144]	; (8024558 <__swsetup_r+0xd8>)
 80244c8:	429c      	cmp	r4, r3
 80244ca:	bf08      	it	eq
 80244cc:	68ec      	ldreq	r4, [r5, #12]
 80244ce:	e7e6      	b.n	802449e <__swsetup_r+0x1e>
 80244d0:	0758      	lsls	r0, r3, #29
 80244d2:	d512      	bpl.n	80244fa <__swsetup_r+0x7a>
 80244d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80244d6:	b141      	cbz	r1, 80244ea <__swsetup_r+0x6a>
 80244d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80244dc:	4299      	cmp	r1, r3
 80244de:	d002      	beq.n	80244e6 <__swsetup_r+0x66>
 80244e0:	4630      	mov	r0, r6
 80244e2:	f7fe fa1f 	bl	8022924 <_free_r>
 80244e6:	2300      	movs	r3, #0
 80244e8:	6363      	str	r3, [r4, #52]	; 0x34
 80244ea:	89a3      	ldrh	r3, [r4, #12]
 80244ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80244f0:	81a3      	strh	r3, [r4, #12]
 80244f2:	2300      	movs	r3, #0
 80244f4:	6063      	str	r3, [r4, #4]
 80244f6:	6923      	ldr	r3, [r4, #16]
 80244f8:	6023      	str	r3, [r4, #0]
 80244fa:	89a3      	ldrh	r3, [r4, #12]
 80244fc:	f043 0308 	orr.w	r3, r3, #8
 8024500:	81a3      	strh	r3, [r4, #12]
 8024502:	6923      	ldr	r3, [r4, #16]
 8024504:	b94b      	cbnz	r3, 802451a <__swsetup_r+0x9a>
 8024506:	89a3      	ldrh	r3, [r4, #12]
 8024508:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802450c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024510:	d003      	beq.n	802451a <__swsetup_r+0x9a>
 8024512:	4621      	mov	r1, r4
 8024514:	4630      	mov	r0, r6
 8024516:	f001 fbed 	bl	8025cf4 <__smakebuf_r>
 802451a:	89a0      	ldrh	r0, [r4, #12]
 802451c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024520:	f010 0301 	ands.w	r3, r0, #1
 8024524:	d00a      	beq.n	802453c <__swsetup_r+0xbc>
 8024526:	2300      	movs	r3, #0
 8024528:	60a3      	str	r3, [r4, #8]
 802452a:	6963      	ldr	r3, [r4, #20]
 802452c:	425b      	negs	r3, r3
 802452e:	61a3      	str	r3, [r4, #24]
 8024530:	6923      	ldr	r3, [r4, #16]
 8024532:	b943      	cbnz	r3, 8024546 <__swsetup_r+0xc6>
 8024534:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024538:	d1ba      	bne.n	80244b0 <__swsetup_r+0x30>
 802453a:	bd70      	pop	{r4, r5, r6, pc}
 802453c:	0781      	lsls	r1, r0, #30
 802453e:	bf58      	it	pl
 8024540:	6963      	ldrpl	r3, [r4, #20]
 8024542:	60a3      	str	r3, [r4, #8]
 8024544:	e7f4      	b.n	8024530 <__swsetup_r+0xb0>
 8024546:	2000      	movs	r0, #0
 8024548:	e7f7      	b.n	802453a <__swsetup_r+0xba>
 802454a:	bf00      	nop
 802454c:	200002b8 	.word	0x200002b8
 8024550:	0804c0dc 	.word	0x0804c0dc
 8024554:	0804c0fc 	.word	0x0804c0fc
 8024558:	0804c0bc 	.word	0x0804c0bc

0802455c <quorem>:
 802455c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024560:	6903      	ldr	r3, [r0, #16]
 8024562:	690c      	ldr	r4, [r1, #16]
 8024564:	42a3      	cmp	r3, r4
 8024566:	4607      	mov	r7, r0
 8024568:	f2c0 8081 	blt.w	802466e <quorem+0x112>
 802456c:	3c01      	subs	r4, #1
 802456e:	f101 0814 	add.w	r8, r1, #20
 8024572:	f100 0514 	add.w	r5, r0, #20
 8024576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802457a:	9301      	str	r3, [sp, #4]
 802457c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8024580:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024584:	3301      	adds	r3, #1
 8024586:	429a      	cmp	r2, r3
 8024588:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802458c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8024590:	fbb2 f6f3 	udiv	r6, r2, r3
 8024594:	d331      	bcc.n	80245fa <quorem+0x9e>
 8024596:	f04f 0e00 	mov.w	lr, #0
 802459a:	4640      	mov	r0, r8
 802459c:	46ac      	mov	ip, r5
 802459e:	46f2      	mov	sl, lr
 80245a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80245a4:	b293      	uxth	r3, r2
 80245a6:	fb06 e303 	mla	r3, r6, r3, lr
 80245aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80245ae:	b29b      	uxth	r3, r3
 80245b0:	ebaa 0303 	sub.w	r3, sl, r3
 80245b4:	f8dc a000 	ldr.w	sl, [ip]
 80245b8:	0c12      	lsrs	r2, r2, #16
 80245ba:	fa13 f38a 	uxtah	r3, r3, sl
 80245be:	fb06 e202 	mla	r2, r6, r2, lr
 80245c2:	9300      	str	r3, [sp, #0]
 80245c4:	9b00      	ldr	r3, [sp, #0]
 80245c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80245ca:	b292      	uxth	r2, r2
 80245cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80245d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80245d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80245d8:	4581      	cmp	r9, r0
 80245da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80245de:	f84c 3b04 	str.w	r3, [ip], #4
 80245e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80245e6:	d2db      	bcs.n	80245a0 <quorem+0x44>
 80245e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80245ec:	b92b      	cbnz	r3, 80245fa <quorem+0x9e>
 80245ee:	9b01      	ldr	r3, [sp, #4]
 80245f0:	3b04      	subs	r3, #4
 80245f2:	429d      	cmp	r5, r3
 80245f4:	461a      	mov	r2, r3
 80245f6:	d32e      	bcc.n	8024656 <quorem+0xfa>
 80245f8:	613c      	str	r4, [r7, #16]
 80245fa:	4638      	mov	r0, r7
 80245fc:	f001 fea4 	bl	8026348 <__mcmp>
 8024600:	2800      	cmp	r0, #0
 8024602:	db24      	blt.n	802464e <quorem+0xf2>
 8024604:	3601      	adds	r6, #1
 8024606:	4628      	mov	r0, r5
 8024608:	f04f 0c00 	mov.w	ip, #0
 802460c:	f858 2b04 	ldr.w	r2, [r8], #4
 8024610:	f8d0 e000 	ldr.w	lr, [r0]
 8024614:	b293      	uxth	r3, r2
 8024616:	ebac 0303 	sub.w	r3, ip, r3
 802461a:	0c12      	lsrs	r2, r2, #16
 802461c:	fa13 f38e 	uxtah	r3, r3, lr
 8024620:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8024624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024628:	b29b      	uxth	r3, r3
 802462a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802462e:	45c1      	cmp	r9, r8
 8024630:	f840 3b04 	str.w	r3, [r0], #4
 8024634:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8024638:	d2e8      	bcs.n	802460c <quorem+0xb0>
 802463a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802463e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024642:	b922      	cbnz	r2, 802464e <quorem+0xf2>
 8024644:	3b04      	subs	r3, #4
 8024646:	429d      	cmp	r5, r3
 8024648:	461a      	mov	r2, r3
 802464a:	d30a      	bcc.n	8024662 <quorem+0x106>
 802464c:	613c      	str	r4, [r7, #16]
 802464e:	4630      	mov	r0, r6
 8024650:	b003      	add	sp, #12
 8024652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024656:	6812      	ldr	r2, [r2, #0]
 8024658:	3b04      	subs	r3, #4
 802465a:	2a00      	cmp	r2, #0
 802465c:	d1cc      	bne.n	80245f8 <quorem+0x9c>
 802465e:	3c01      	subs	r4, #1
 8024660:	e7c7      	b.n	80245f2 <quorem+0x96>
 8024662:	6812      	ldr	r2, [r2, #0]
 8024664:	3b04      	subs	r3, #4
 8024666:	2a00      	cmp	r2, #0
 8024668:	d1f0      	bne.n	802464c <quorem+0xf0>
 802466a:	3c01      	subs	r4, #1
 802466c:	e7eb      	b.n	8024646 <quorem+0xea>
 802466e:	2000      	movs	r0, #0
 8024670:	e7ee      	b.n	8024650 <quorem+0xf4>
 8024672:	0000      	movs	r0, r0
 8024674:	0000      	movs	r0, r0
	...

08024678 <_dtoa_r>:
 8024678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802467c:	ed2d 8b04 	vpush	{d8-d9}
 8024680:	ec57 6b10 	vmov	r6, r7, d0
 8024684:	b093      	sub	sp, #76	; 0x4c
 8024686:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8024688:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802468c:	9106      	str	r1, [sp, #24]
 802468e:	ee10 aa10 	vmov	sl, s0
 8024692:	4604      	mov	r4, r0
 8024694:	9209      	str	r2, [sp, #36]	; 0x24
 8024696:	930c      	str	r3, [sp, #48]	; 0x30
 8024698:	46bb      	mov	fp, r7
 802469a:	b975      	cbnz	r5, 80246ba <_dtoa_r+0x42>
 802469c:	2010      	movs	r0, #16
 802469e:	f7fe f8eb 	bl	8022878 <malloc>
 80246a2:	4602      	mov	r2, r0
 80246a4:	6260      	str	r0, [r4, #36]	; 0x24
 80246a6:	b920      	cbnz	r0, 80246b2 <_dtoa_r+0x3a>
 80246a8:	4ba7      	ldr	r3, [pc, #668]	; (8024948 <_dtoa_r+0x2d0>)
 80246aa:	21ea      	movs	r1, #234	; 0xea
 80246ac:	48a7      	ldr	r0, [pc, #668]	; (802494c <_dtoa_r+0x2d4>)
 80246ae:	f7fe f879 	bl	80227a4 <__assert_func>
 80246b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80246b6:	6005      	str	r5, [r0, #0]
 80246b8:	60c5      	str	r5, [r0, #12]
 80246ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80246bc:	6819      	ldr	r1, [r3, #0]
 80246be:	b151      	cbz	r1, 80246d6 <_dtoa_r+0x5e>
 80246c0:	685a      	ldr	r2, [r3, #4]
 80246c2:	604a      	str	r2, [r1, #4]
 80246c4:	2301      	movs	r3, #1
 80246c6:	4093      	lsls	r3, r2
 80246c8:	608b      	str	r3, [r1, #8]
 80246ca:	4620      	mov	r0, r4
 80246cc:	f001 fbb0 	bl	8025e30 <_Bfree>
 80246d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80246d2:	2200      	movs	r2, #0
 80246d4:	601a      	str	r2, [r3, #0]
 80246d6:	1e3b      	subs	r3, r7, #0
 80246d8:	bfaa      	itet	ge
 80246da:	2300      	movge	r3, #0
 80246dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80246e0:	f8c8 3000 	strge.w	r3, [r8]
 80246e4:	4b9a      	ldr	r3, [pc, #616]	; (8024950 <_dtoa_r+0x2d8>)
 80246e6:	bfbc      	itt	lt
 80246e8:	2201      	movlt	r2, #1
 80246ea:	f8c8 2000 	strlt.w	r2, [r8]
 80246ee:	ea33 030b 	bics.w	r3, r3, fp
 80246f2:	d11b      	bne.n	802472c <_dtoa_r+0xb4>
 80246f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80246f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80246fa:	6013      	str	r3, [r2, #0]
 80246fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024700:	4333      	orrs	r3, r6
 8024702:	f000 8592 	beq.w	802522a <_dtoa_r+0xbb2>
 8024706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024708:	b963      	cbnz	r3, 8024724 <_dtoa_r+0xac>
 802470a:	4b92      	ldr	r3, [pc, #584]	; (8024954 <_dtoa_r+0x2dc>)
 802470c:	e022      	b.n	8024754 <_dtoa_r+0xdc>
 802470e:	4b92      	ldr	r3, [pc, #584]	; (8024958 <_dtoa_r+0x2e0>)
 8024710:	9301      	str	r3, [sp, #4]
 8024712:	3308      	adds	r3, #8
 8024714:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024716:	6013      	str	r3, [r2, #0]
 8024718:	9801      	ldr	r0, [sp, #4]
 802471a:	b013      	add	sp, #76	; 0x4c
 802471c:	ecbd 8b04 	vpop	{d8-d9}
 8024720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024724:	4b8b      	ldr	r3, [pc, #556]	; (8024954 <_dtoa_r+0x2dc>)
 8024726:	9301      	str	r3, [sp, #4]
 8024728:	3303      	adds	r3, #3
 802472a:	e7f3      	b.n	8024714 <_dtoa_r+0x9c>
 802472c:	2200      	movs	r2, #0
 802472e:	2300      	movs	r3, #0
 8024730:	4650      	mov	r0, sl
 8024732:	4659      	mov	r1, fp
 8024734:	f7dc f9d2 	bl	8000adc <__aeabi_dcmpeq>
 8024738:	ec4b ab19 	vmov	d9, sl, fp
 802473c:	4680      	mov	r8, r0
 802473e:	b158      	cbz	r0, 8024758 <_dtoa_r+0xe0>
 8024740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024742:	2301      	movs	r3, #1
 8024744:	6013      	str	r3, [r2, #0]
 8024746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024748:	2b00      	cmp	r3, #0
 802474a:	f000 856b 	beq.w	8025224 <_dtoa_r+0xbac>
 802474e:	4883      	ldr	r0, [pc, #524]	; (802495c <_dtoa_r+0x2e4>)
 8024750:	6018      	str	r0, [r3, #0]
 8024752:	1e43      	subs	r3, r0, #1
 8024754:	9301      	str	r3, [sp, #4]
 8024756:	e7df      	b.n	8024718 <_dtoa_r+0xa0>
 8024758:	ec4b ab10 	vmov	d0, sl, fp
 802475c:	aa10      	add	r2, sp, #64	; 0x40
 802475e:	a911      	add	r1, sp, #68	; 0x44
 8024760:	4620      	mov	r0, r4
 8024762:	f001 ff13 	bl	802658c <__d2b>
 8024766:	f3cb 550a 	ubfx	r5, fp, #20, #11
 802476a:	ee08 0a10 	vmov	s16, r0
 802476e:	2d00      	cmp	r5, #0
 8024770:	f000 8084 	beq.w	802487c <_dtoa_r+0x204>
 8024774:	ee19 3a90 	vmov	r3, s19
 8024778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802477c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8024780:	4656      	mov	r6, sl
 8024782:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8024786:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802478a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802478e:	4b74      	ldr	r3, [pc, #464]	; (8024960 <_dtoa_r+0x2e8>)
 8024790:	2200      	movs	r2, #0
 8024792:	4630      	mov	r0, r6
 8024794:	4639      	mov	r1, r7
 8024796:	f7db fd81 	bl	800029c <__aeabi_dsub>
 802479a:	a365      	add	r3, pc, #404	; (adr r3, 8024930 <_dtoa_r+0x2b8>)
 802479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247a0:	f7db ff34 	bl	800060c <__aeabi_dmul>
 80247a4:	a364      	add	r3, pc, #400	; (adr r3, 8024938 <_dtoa_r+0x2c0>)
 80247a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247aa:	f7db fd79 	bl	80002a0 <__adddf3>
 80247ae:	4606      	mov	r6, r0
 80247b0:	4628      	mov	r0, r5
 80247b2:	460f      	mov	r7, r1
 80247b4:	f7db fec0 	bl	8000538 <__aeabi_i2d>
 80247b8:	a361      	add	r3, pc, #388	; (adr r3, 8024940 <_dtoa_r+0x2c8>)
 80247ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247be:	f7db ff25 	bl	800060c <__aeabi_dmul>
 80247c2:	4602      	mov	r2, r0
 80247c4:	460b      	mov	r3, r1
 80247c6:	4630      	mov	r0, r6
 80247c8:	4639      	mov	r1, r7
 80247ca:	f7db fd69 	bl	80002a0 <__adddf3>
 80247ce:	4606      	mov	r6, r0
 80247d0:	460f      	mov	r7, r1
 80247d2:	f7dc f9cb 	bl	8000b6c <__aeabi_d2iz>
 80247d6:	2200      	movs	r2, #0
 80247d8:	9000      	str	r0, [sp, #0]
 80247da:	2300      	movs	r3, #0
 80247dc:	4630      	mov	r0, r6
 80247de:	4639      	mov	r1, r7
 80247e0:	f7dc f986 	bl	8000af0 <__aeabi_dcmplt>
 80247e4:	b150      	cbz	r0, 80247fc <_dtoa_r+0x184>
 80247e6:	9800      	ldr	r0, [sp, #0]
 80247e8:	f7db fea6 	bl	8000538 <__aeabi_i2d>
 80247ec:	4632      	mov	r2, r6
 80247ee:	463b      	mov	r3, r7
 80247f0:	f7dc f974 	bl	8000adc <__aeabi_dcmpeq>
 80247f4:	b910      	cbnz	r0, 80247fc <_dtoa_r+0x184>
 80247f6:	9b00      	ldr	r3, [sp, #0]
 80247f8:	3b01      	subs	r3, #1
 80247fa:	9300      	str	r3, [sp, #0]
 80247fc:	9b00      	ldr	r3, [sp, #0]
 80247fe:	2b16      	cmp	r3, #22
 8024800:	d85a      	bhi.n	80248b8 <_dtoa_r+0x240>
 8024802:	9a00      	ldr	r2, [sp, #0]
 8024804:	4b57      	ldr	r3, [pc, #348]	; (8024964 <_dtoa_r+0x2ec>)
 8024806:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802480e:	ec51 0b19 	vmov	r0, r1, d9
 8024812:	f7dc f96d 	bl	8000af0 <__aeabi_dcmplt>
 8024816:	2800      	cmp	r0, #0
 8024818:	d050      	beq.n	80248bc <_dtoa_r+0x244>
 802481a:	9b00      	ldr	r3, [sp, #0]
 802481c:	3b01      	subs	r3, #1
 802481e:	9300      	str	r3, [sp, #0]
 8024820:	2300      	movs	r3, #0
 8024822:	930b      	str	r3, [sp, #44]	; 0x2c
 8024824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024826:	1b5d      	subs	r5, r3, r5
 8024828:	1e6b      	subs	r3, r5, #1
 802482a:	9305      	str	r3, [sp, #20]
 802482c:	bf45      	ittet	mi
 802482e:	f1c5 0301 	rsbmi	r3, r5, #1
 8024832:	9304      	strmi	r3, [sp, #16]
 8024834:	2300      	movpl	r3, #0
 8024836:	2300      	movmi	r3, #0
 8024838:	bf4c      	ite	mi
 802483a:	9305      	strmi	r3, [sp, #20]
 802483c:	9304      	strpl	r3, [sp, #16]
 802483e:	9b00      	ldr	r3, [sp, #0]
 8024840:	2b00      	cmp	r3, #0
 8024842:	db3d      	blt.n	80248c0 <_dtoa_r+0x248>
 8024844:	9b05      	ldr	r3, [sp, #20]
 8024846:	9a00      	ldr	r2, [sp, #0]
 8024848:	920a      	str	r2, [sp, #40]	; 0x28
 802484a:	4413      	add	r3, r2
 802484c:	9305      	str	r3, [sp, #20]
 802484e:	2300      	movs	r3, #0
 8024850:	9307      	str	r3, [sp, #28]
 8024852:	9b06      	ldr	r3, [sp, #24]
 8024854:	2b09      	cmp	r3, #9
 8024856:	f200 8089 	bhi.w	802496c <_dtoa_r+0x2f4>
 802485a:	2b05      	cmp	r3, #5
 802485c:	bfc4      	itt	gt
 802485e:	3b04      	subgt	r3, #4
 8024860:	9306      	strgt	r3, [sp, #24]
 8024862:	9b06      	ldr	r3, [sp, #24]
 8024864:	f1a3 0302 	sub.w	r3, r3, #2
 8024868:	bfcc      	ite	gt
 802486a:	2500      	movgt	r5, #0
 802486c:	2501      	movle	r5, #1
 802486e:	2b03      	cmp	r3, #3
 8024870:	f200 8087 	bhi.w	8024982 <_dtoa_r+0x30a>
 8024874:	e8df f003 	tbb	[pc, r3]
 8024878:	59383a2d 	.word	0x59383a2d
 802487c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8024880:	441d      	add	r5, r3
 8024882:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8024886:	2b20      	cmp	r3, #32
 8024888:	bfc1      	itttt	gt
 802488a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802488e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8024892:	fa0b f303 	lslgt.w	r3, fp, r3
 8024896:	fa26 f000 	lsrgt.w	r0, r6, r0
 802489a:	bfda      	itte	le
 802489c:	f1c3 0320 	rsble	r3, r3, #32
 80248a0:	fa06 f003 	lslle.w	r0, r6, r3
 80248a4:	4318      	orrgt	r0, r3
 80248a6:	f7db fe37 	bl	8000518 <__aeabi_ui2d>
 80248aa:	2301      	movs	r3, #1
 80248ac:	4606      	mov	r6, r0
 80248ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80248b2:	3d01      	subs	r5, #1
 80248b4:	930e      	str	r3, [sp, #56]	; 0x38
 80248b6:	e76a      	b.n	802478e <_dtoa_r+0x116>
 80248b8:	2301      	movs	r3, #1
 80248ba:	e7b2      	b.n	8024822 <_dtoa_r+0x1aa>
 80248bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80248be:	e7b1      	b.n	8024824 <_dtoa_r+0x1ac>
 80248c0:	9b04      	ldr	r3, [sp, #16]
 80248c2:	9a00      	ldr	r2, [sp, #0]
 80248c4:	1a9b      	subs	r3, r3, r2
 80248c6:	9304      	str	r3, [sp, #16]
 80248c8:	4253      	negs	r3, r2
 80248ca:	9307      	str	r3, [sp, #28]
 80248cc:	2300      	movs	r3, #0
 80248ce:	930a      	str	r3, [sp, #40]	; 0x28
 80248d0:	e7bf      	b.n	8024852 <_dtoa_r+0x1da>
 80248d2:	2300      	movs	r3, #0
 80248d4:	9308      	str	r3, [sp, #32]
 80248d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248d8:	2b00      	cmp	r3, #0
 80248da:	dc55      	bgt.n	8024988 <_dtoa_r+0x310>
 80248dc:	2301      	movs	r3, #1
 80248de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80248e2:	461a      	mov	r2, r3
 80248e4:	9209      	str	r2, [sp, #36]	; 0x24
 80248e6:	e00c      	b.n	8024902 <_dtoa_r+0x28a>
 80248e8:	2301      	movs	r3, #1
 80248ea:	e7f3      	b.n	80248d4 <_dtoa_r+0x25c>
 80248ec:	2300      	movs	r3, #0
 80248ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80248f0:	9308      	str	r3, [sp, #32]
 80248f2:	9b00      	ldr	r3, [sp, #0]
 80248f4:	4413      	add	r3, r2
 80248f6:	9302      	str	r3, [sp, #8]
 80248f8:	3301      	adds	r3, #1
 80248fa:	2b01      	cmp	r3, #1
 80248fc:	9303      	str	r3, [sp, #12]
 80248fe:	bfb8      	it	lt
 8024900:	2301      	movlt	r3, #1
 8024902:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8024904:	2200      	movs	r2, #0
 8024906:	6042      	str	r2, [r0, #4]
 8024908:	2204      	movs	r2, #4
 802490a:	f102 0614 	add.w	r6, r2, #20
 802490e:	429e      	cmp	r6, r3
 8024910:	6841      	ldr	r1, [r0, #4]
 8024912:	d93d      	bls.n	8024990 <_dtoa_r+0x318>
 8024914:	4620      	mov	r0, r4
 8024916:	f001 fa4b 	bl	8025db0 <_Balloc>
 802491a:	9001      	str	r0, [sp, #4]
 802491c:	2800      	cmp	r0, #0
 802491e:	d13b      	bne.n	8024998 <_dtoa_r+0x320>
 8024920:	4b11      	ldr	r3, [pc, #68]	; (8024968 <_dtoa_r+0x2f0>)
 8024922:	4602      	mov	r2, r0
 8024924:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8024928:	e6c0      	b.n	80246ac <_dtoa_r+0x34>
 802492a:	2301      	movs	r3, #1
 802492c:	e7df      	b.n	80248ee <_dtoa_r+0x276>
 802492e:	bf00      	nop
 8024930:	636f4361 	.word	0x636f4361
 8024934:	3fd287a7 	.word	0x3fd287a7
 8024938:	8b60c8b3 	.word	0x8b60c8b3
 802493c:	3fc68a28 	.word	0x3fc68a28
 8024940:	509f79fb 	.word	0x509f79fb
 8024944:	3fd34413 	.word	0x3fd34413
 8024948:	0804c036 	.word	0x0804c036
 802494c:	0804c04d 	.word	0x0804c04d
 8024950:	7ff00000 	.word	0x7ff00000
 8024954:	0804c032 	.word	0x0804c032
 8024958:	0804c029 	.word	0x0804c029
 802495c:	0804beb2 	.word	0x0804beb2
 8024960:	3ff80000 	.word	0x3ff80000
 8024964:	0804c220 	.word	0x0804c220
 8024968:	0804c0a8 	.word	0x0804c0a8
 802496c:	2501      	movs	r5, #1
 802496e:	2300      	movs	r3, #0
 8024970:	9306      	str	r3, [sp, #24]
 8024972:	9508      	str	r5, [sp, #32]
 8024974:	f04f 33ff 	mov.w	r3, #4294967295
 8024978:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802497c:	2200      	movs	r2, #0
 802497e:	2312      	movs	r3, #18
 8024980:	e7b0      	b.n	80248e4 <_dtoa_r+0x26c>
 8024982:	2301      	movs	r3, #1
 8024984:	9308      	str	r3, [sp, #32]
 8024986:	e7f5      	b.n	8024974 <_dtoa_r+0x2fc>
 8024988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802498a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802498e:	e7b8      	b.n	8024902 <_dtoa_r+0x28a>
 8024990:	3101      	adds	r1, #1
 8024992:	6041      	str	r1, [r0, #4]
 8024994:	0052      	lsls	r2, r2, #1
 8024996:	e7b8      	b.n	802490a <_dtoa_r+0x292>
 8024998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802499a:	9a01      	ldr	r2, [sp, #4]
 802499c:	601a      	str	r2, [r3, #0]
 802499e:	9b03      	ldr	r3, [sp, #12]
 80249a0:	2b0e      	cmp	r3, #14
 80249a2:	f200 809d 	bhi.w	8024ae0 <_dtoa_r+0x468>
 80249a6:	2d00      	cmp	r5, #0
 80249a8:	f000 809a 	beq.w	8024ae0 <_dtoa_r+0x468>
 80249ac:	9b00      	ldr	r3, [sp, #0]
 80249ae:	2b00      	cmp	r3, #0
 80249b0:	dd32      	ble.n	8024a18 <_dtoa_r+0x3a0>
 80249b2:	4ab7      	ldr	r2, [pc, #732]	; (8024c90 <_dtoa_r+0x618>)
 80249b4:	f003 030f 	and.w	r3, r3, #15
 80249b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80249bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80249c0:	9b00      	ldr	r3, [sp, #0]
 80249c2:	05d8      	lsls	r0, r3, #23
 80249c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80249c8:	d516      	bpl.n	80249f8 <_dtoa_r+0x380>
 80249ca:	4bb2      	ldr	r3, [pc, #712]	; (8024c94 <_dtoa_r+0x61c>)
 80249cc:	ec51 0b19 	vmov	r0, r1, d9
 80249d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80249d4:	f7db ff44 	bl	8000860 <__aeabi_ddiv>
 80249d8:	f007 070f 	and.w	r7, r7, #15
 80249dc:	4682      	mov	sl, r0
 80249de:	468b      	mov	fp, r1
 80249e0:	2503      	movs	r5, #3
 80249e2:	4eac      	ldr	r6, [pc, #688]	; (8024c94 <_dtoa_r+0x61c>)
 80249e4:	b957      	cbnz	r7, 80249fc <_dtoa_r+0x384>
 80249e6:	4642      	mov	r2, r8
 80249e8:	464b      	mov	r3, r9
 80249ea:	4650      	mov	r0, sl
 80249ec:	4659      	mov	r1, fp
 80249ee:	f7db ff37 	bl	8000860 <__aeabi_ddiv>
 80249f2:	4682      	mov	sl, r0
 80249f4:	468b      	mov	fp, r1
 80249f6:	e028      	b.n	8024a4a <_dtoa_r+0x3d2>
 80249f8:	2502      	movs	r5, #2
 80249fa:	e7f2      	b.n	80249e2 <_dtoa_r+0x36a>
 80249fc:	07f9      	lsls	r1, r7, #31
 80249fe:	d508      	bpl.n	8024a12 <_dtoa_r+0x39a>
 8024a00:	4640      	mov	r0, r8
 8024a02:	4649      	mov	r1, r9
 8024a04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8024a08:	f7db fe00 	bl	800060c <__aeabi_dmul>
 8024a0c:	3501      	adds	r5, #1
 8024a0e:	4680      	mov	r8, r0
 8024a10:	4689      	mov	r9, r1
 8024a12:	107f      	asrs	r7, r7, #1
 8024a14:	3608      	adds	r6, #8
 8024a16:	e7e5      	b.n	80249e4 <_dtoa_r+0x36c>
 8024a18:	f000 809b 	beq.w	8024b52 <_dtoa_r+0x4da>
 8024a1c:	9b00      	ldr	r3, [sp, #0]
 8024a1e:	4f9d      	ldr	r7, [pc, #628]	; (8024c94 <_dtoa_r+0x61c>)
 8024a20:	425e      	negs	r6, r3
 8024a22:	4b9b      	ldr	r3, [pc, #620]	; (8024c90 <_dtoa_r+0x618>)
 8024a24:	f006 020f 	and.w	r2, r6, #15
 8024a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a30:	ec51 0b19 	vmov	r0, r1, d9
 8024a34:	f7db fdea 	bl	800060c <__aeabi_dmul>
 8024a38:	1136      	asrs	r6, r6, #4
 8024a3a:	4682      	mov	sl, r0
 8024a3c:	468b      	mov	fp, r1
 8024a3e:	2300      	movs	r3, #0
 8024a40:	2502      	movs	r5, #2
 8024a42:	2e00      	cmp	r6, #0
 8024a44:	d17a      	bne.n	8024b3c <_dtoa_r+0x4c4>
 8024a46:	2b00      	cmp	r3, #0
 8024a48:	d1d3      	bne.n	80249f2 <_dtoa_r+0x37a>
 8024a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024a4c:	2b00      	cmp	r3, #0
 8024a4e:	f000 8082 	beq.w	8024b56 <_dtoa_r+0x4de>
 8024a52:	4b91      	ldr	r3, [pc, #580]	; (8024c98 <_dtoa_r+0x620>)
 8024a54:	2200      	movs	r2, #0
 8024a56:	4650      	mov	r0, sl
 8024a58:	4659      	mov	r1, fp
 8024a5a:	f7dc f849 	bl	8000af0 <__aeabi_dcmplt>
 8024a5e:	2800      	cmp	r0, #0
 8024a60:	d079      	beq.n	8024b56 <_dtoa_r+0x4de>
 8024a62:	9b03      	ldr	r3, [sp, #12]
 8024a64:	2b00      	cmp	r3, #0
 8024a66:	d076      	beq.n	8024b56 <_dtoa_r+0x4de>
 8024a68:	9b02      	ldr	r3, [sp, #8]
 8024a6a:	2b00      	cmp	r3, #0
 8024a6c:	dd36      	ble.n	8024adc <_dtoa_r+0x464>
 8024a6e:	9b00      	ldr	r3, [sp, #0]
 8024a70:	4650      	mov	r0, sl
 8024a72:	4659      	mov	r1, fp
 8024a74:	1e5f      	subs	r7, r3, #1
 8024a76:	2200      	movs	r2, #0
 8024a78:	4b88      	ldr	r3, [pc, #544]	; (8024c9c <_dtoa_r+0x624>)
 8024a7a:	f7db fdc7 	bl	800060c <__aeabi_dmul>
 8024a7e:	9e02      	ldr	r6, [sp, #8]
 8024a80:	4682      	mov	sl, r0
 8024a82:	468b      	mov	fp, r1
 8024a84:	3501      	adds	r5, #1
 8024a86:	4628      	mov	r0, r5
 8024a88:	f7db fd56 	bl	8000538 <__aeabi_i2d>
 8024a8c:	4652      	mov	r2, sl
 8024a8e:	465b      	mov	r3, fp
 8024a90:	f7db fdbc 	bl	800060c <__aeabi_dmul>
 8024a94:	4b82      	ldr	r3, [pc, #520]	; (8024ca0 <_dtoa_r+0x628>)
 8024a96:	2200      	movs	r2, #0
 8024a98:	f7db fc02 	bl	80002a0 <__adddf3>
 8024a9c:	46d0      	mov	r8, sl
 8024a9e:	46d9      	mov	r9, fp
 8024aa0:	4682      	mov	sl, r0
 8024aa2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8024aa6:	2e00      	cmp	r6, #0
 8024aa8:	d158      	bne.n	8024b5c <_dtoa_r+0x4e4>
 8024aaa:	4b7e      	ldr	r3, [pc, #504]	; (8024ca4 <_dtoa_r+0x62c>)
 8024aac:	2200      	movs	r2, #0
 8024aae:	4640      	mov	r0, r8
 8024ab0:	4649      	mov	r1, r9
 8024ab2:	f7db fbf3 	bl	800029c <__aeabi_dsub>
 8024ab6:	4652      	mov	r2, sl
 8024ab8:	465b      	mov	r3, fp
 8024aba:	4680      	mov	r8, r0
 8024abc:	4689      	mov	r9, r1
 8024abe:	f7dc f835 	bl	8000b2c <__aeabi_dcmpgt>
 8024ac2:	2800      	cmp	r0, #0
 8024ac4:	f040 8295 	bne.w	8024ff2 <_dtoa_r+0x97a>
 8024ac8:	4652      	mov	r2, sl
 8024aca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8024ace:	4640      	mov	r0, r8
 8024ad0:	4649      	mov	r1, r9
 8024ad2:	f7dc f80d 	bl	8000af0 <__aeabi_dcmplt>
 8024ad6:	2800      	cmp	r0, #0
 8024ad8:	f040 8289 	bne.w	8024fee <_dtoa_r+0x976>
 8024adc:	ec5b ab19 	vmov	sl, fp, d9
 8024ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024ae2:	2b00      	cmp	r3, #0
 8024ae4:	f2c0 8148 	blt.w	8024d78 <_dtoa_r+0x700>
 8024ae8:	9a00      	ldr	r2, [sp, #0]
 8024aea:	2a0e      	cmp	r2, #14
 8024aec:	f300 8144 	bgt.w	8024d78 <_dtoa_r+0x700>
 8024af0:	4b67      	ldr	r3, [pc, #412]	; (8024c90 <_dtoa_r+0x618>)
 8024af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024af6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024afc:	2b00      	cmp	r3, #0
 8024afe:	f280 80d5 	bge.w	8024cac <_dtoa_r+0x634>
 8024b02:	9b03      	ldr	r3, [sp, #12]
 8024b04:	2b00      	cmp	r3, #0
 8024b06:	f300 80d1 	bgt.w	8024cac <_dtoa_r+0x634>
 8024b0a:	f040 826f 	bne.w	8024fec <_dtoa_r+0x974>
 8024b0e:	4b65      	ldr	r3, [pc, #404]	; (8024ca4 <_dtoa_r+0x62c>)
 8024b10:	2200      	movs	r2, #0
 8024b12:	4640      	mov	r0, r8
 8024b14:	4649      	mov	r1, r9
 8024b16:	f7db fd79 	bl	800060c <__aeabi_dmul>
 8024b1a:	4652      	mov	r2, sl
 8024b1c:	465b      	mov	r3, fp
 8024b1e:	f7db fffb 	bl	8000b18 <__aeabi_dcmpge>
 8024b22:	9e03      	ldr	r6, [sp, #12]
 8024b24:	4637      	mov	r7, r6
 8024b26:	2800      	cmp	r0, #0
 8024b28:	f040 8245 	bne.w	8024fb6 <_dtoa_r+0x93e>
 8024b2c:	9d01      	ldr	r5, [sp, #4]
 8024b2e:	2331      	movs	r3, #49	; 0x31
 8024b30:	f805 3b01 	strb.w	r3, [r5], #1
 8024b34:	9b00      	ldr	r3, [sp, #0]
 8024b36:	3301      	adds	r3, #1
 8024b38:	9300      	str	r3, [sp, #0]
 8024b3a:	e240      	b.n	8024fbe <_dtoa_r+0x946>
 8024b3c:	07f2      	lsls	r2, r6, #31
 8024b3e:	d505      	bpl.n	8024b4c <_dtoa_r+0x4d4>
 8024b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024b44:	f7db fd62 	bl	800060c <__aeabi_dmul>
 8024b48:	3501      	adds	r5, #1
 8024b4a:	2301      	movs	r3, #1
 8024b4c:	1076      	asrs	r6, r6, #1
 8024b4e:	3708      	adds	r7, #8
 8024b50:	e777      	b.n	8024a42 <_dtoa_r+0x3ca>
 8024b52:	2502      	movs	r5, #2
 8024b54:	e779      	b.n	8024a4a <_dtoa_r+0x3d2>
 8024b56:	9f00      	ldr	r7, [sp, #0]
 8024b58:	9e03      	ldr	r6, [sp, #12]
 8024b5a:	e794      	b.n	8024a86 <_dtoa_r+0x40e>
 8024b5c:	9901      	ldr	r1, [sp, #4]
 8024b5e:	4b4c      	ldr	r3, [pc, #304]	; (8024c90 <_dtoa_r+0x618>)
 8024b60:	4431      	add	r1, r6
 8024b62:	910d      	str	r1, [sp, #52]	; 0x34
 8024b64:	9908      	ldr	r1, [sp, #32]
 8024b66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8024b6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024b6e:	2900      	cmp	r1, #0
 8024b70:	d043      	beq.n	8024bfa <_dtoa_r+0x582>
 8024b72:	494d      	ldr	r1, [pc, #308]	; (8024ca8 <_dtoa_r+0x630>)
 8024b74:	2000      	movs	r0, #0
 8024b76:	f7db fe73 	bl	8000860 <__aeabi_ddiv>
 8024b7a:	4652      	mov	r2, sl
 8024b7c:	465b      	mov	r3, fp
 8024b7e:	f7db fb8d 	bl	800029c <__aeabi_dsub>
 8024b82:	9d01      	ldr	r5, [sp, #4]
 8024b84:	4682      	mov	sl, r0
 8024b86:	468b      	mov	fp, r1
 8024b88:	4649      	mov	r1, r9
 8024b8a:	4640      	mov	r0, r8
 8024b8c:	f7db ffee 	bl	8000b6c <__aeabi_d2iz>
 8024b90:	4606      	mov	r6, r0
 8024b92:	f7db fcd1 	bl	8000538 <__aeabi_i2d>
 8024b96:	4602      	mov	r2, r0
 8024b98:	460b      	mov	r3, r1
 8024b9a:	4640      	mov	r0, r8
 8024b9c:	4649      	mov	r1, r9
 8024b9e:	f7db fb7d 	bl	800029c <__aeabi_dsub>
 8024ba2:	3630      	adds	r6, #48	; 0x30
 8024ba4:	f805 6b01 	strb.w	r6, [r5], #1
 8024ba8:	4652      	mov	r2, sl
 8024baa:	465b      	mov	r3, fp
 8024bac:	4680      	mov	r8, r0
 8024bae:	4689      	mov	r9, r1
 8024bb0:	f7db ff9e 	bl	8000af0 <__aeabi_dcmplt>
 8024bb4:	2800      	cmp	r0, #0
 8024bb6:	d163      	bne.n	8024c80 <_dtoa_r+0x608>
 8024bb8:	4642      	mov	r2, r8
 8024bba:	464b      	mov	r3, r9
 8024bbc:	4936      	ldr	r1, [pc, #216]	; (8024c98 <_dtoa_r+0x620>)
 8024bbe:	2000      	movs	r0, #0
 8024bc0:	f7db fb6c 	bl	800029c <__aeabi_dsub>
 8024bc4:	4652      	mov	r2, sl
 8024bc6:	465b      	mov	r3, fp
 8024bc8:	f7db ff92 	bl	8000af0 <__aeabi_dcmplt>
 8024bcc:	2800      	cmp	r0, #0
 8024bce:	f040 80b5 	bne.w	8024d3c <_dtoa_r+0x6c4>
 8024bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024bd4:	429d      	cmp	r5, r3
 8024bd6:	d081      	beq.n	8024adc <_dtoa_r+0x464>
 8024bd8:	4b30      	ldr	r3, [pc, #192]	; (8024c9c <_dtoa_r+0x624>)
 8024bda:	2200      	movs	r2, #0
 8024bdc:	4650      	mov	r0, sl
 8024bde:	4659      	mov	r1, fp
 8024be0:	f7db fd14 	bl	800060c <__aeabi_dmul>
 8024be4:	4b2d      	ldr	r3, [pc, #180]	; (8024c9c <_dtoa_r+0x624>)
 8024be6:	4682      	mov	sl, r0
 8024be8:	468b      	mov	fp, r1
 8024bea:	4640      	mov	r0, r8
 8024bec:	4649      	mov	r1, r9
 8024bee:	2200      	movs	r2, #0
 8024bf0:	f7db fd0c 	bl	800060c <__aeabi_dmul>
 8024bf4:	4680      	mov	r8, r0
 8024bf6:	4689      	mov	r9, r1
 8024bf8:	e7c6      	b.n	8024b88 <_dtoa_r+0x510>
 8024bfa:	4650      	mov	r0, sl
 8024bfc:	4659      	mov	r1, fp
 8024bfe:	f7db fd05 	bl	800060c <__aeabi_dmul>
 8024c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024c04:	9d01      	ldr	r5, [sp, #4]
 8024c06:	930f      	str	r3, [sp, #60]	; 0x3c
 8024c08:	4682      	mov	sl, r0
 8024c0a:	468b      	mov	fp, r1
 8024c0c:	4649      	mov	r1, r9
 8024c0e:	4640      	mov	r0, r8
 8024c10:	f7db ffac 	bl	8000b6c <__aeabi_d2iz>
 8024c14:	4606      	mov	r6, r0
 8024c16:	f7db fc8f 	bl	8000538 <__aeabi_i2d>
 8024c1a:	3630      	adds	r6, #48	; 0x30
 8024c1c:	4602      	mov	r2, r0
 8024c1e:	460b      	mov	r3, r1
 8024c20:	4640      	mov	r0, r8
 8024c22:	4649      	mov	r1, r9
 8024c24:	f7db fb3a 	bl	800029c <__aeabi_dsub>
 8024c28:	f805 6b01 	strb.w	r6, [r5], #1
 8024c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024c2e:	429d      	cmp	r5, r3
 8024c30:	4680      	mov	r8, r0
 8024c32:	4689      	mov	r9, r1
 8024c34:	f04f 0200 	mov.w	r2, #0
 8024c38:	d124      	bne.n	8024c84 <_dtoa_r+0x60c>
 8024c3a:	4b1b      	ldr	r3, [pc, #108]	; (8024ca8 <_dtoa_r+0x630>)
 8024c3c:	4650      	mov	r0, sl
 8024c3e:	4659      	mov	r1, fp
 8024c40:	f7db fb2e 	bl	80002a0 <__adddf3>
 8024c44:	4602      	mov	r2, r0
 8024c46:	460b      	mov	r3, r1
 8024c48:	4640      	mov	r0, r8
 8024c4a:	4649      	mov	r1, r9
 8024c4c:	f7db ff6e 	bl	8000b2c <__aeabi_dcmpgt>
 8024c50:	2800      	cmp	r0, #0
 8024c52:	d173      	bne.n	8024d3c <_dtoa_r+0x6c4>
 8024c54:	4652      	mov	r2, sl
 8024c56:	465b      	mov	r3, fp
 8024c58:	4913      	ldr	r1, [pc, #76]	; (8024ca8 <_dtoa_r+0x630>)
 8024c5a:	2000      	movs	r0, #0
 8024c5c:	f7db fb1e 	bl	800029c <__aeabi_dsub>
 8024c60:	4602      	mov	r2, r0
 8024c62:	460b      	mov	r3, r1
 8024c64:	4640      	mov	r0, r8
 8024c66:	4649      	mov	r1, r9
 8024c68:	f7db ff42 	bl	8000af0 <__aeabi_dcmplt>
 8024c6c:	2800      	cmp	r0, #0
 8024c6e:	f43f af35 	beq.w	8024adc <_dtoa_r+0x464>
 8024c72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024c74:	1e6b      	subs	r3, r5, #1
 8024c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8024c78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8024c7c:	2b30      	cmp	r3, #48	; 0x30
 8024c7e:	d0f8      	beq.n	8024c72 <_dtoa_r+0x5fa>
 8024c80:	9700      	str	r7, [sp, #0]
 8024c82:	e049      	b.n	8024d18 <_dtoa_r+0x6a0>
 8024c84:	4b05      	ldr	r3, [pc, #20]	; (8024c9c <_dtoa_r+0x624>)
 8024c86:	f7db fcc1 	bl	800060c <__aeabi_dmul>
 8024c8a:	4680      	mov	r8, r0
 8024c8c:	4689      	mov	r9, r1
 8024c8e:	e7bd      	b.n	8024c0c <_dtoa_r+0x594>
 8024c90:	0804c220 	.word	0x0804c220
 8024c94:	0804c1f8 	.word	0x0804c1f8
 8024c98:	3ff00000 	.word	0x3ff00000
 8024c9c:	40240000 	.word	0x40240000
 8024ca0:	401c0000 	.word	0x401c0000
 8024ca4:	40140000 	.word	0x40140000
 8024ca8:	3fe00000 	.word	0x3fe00000
 8024cac:	9d01      	ldr	r5, [sp, #4]
 8024cae:	4656      	mov	r6, sl
 8024cb0:	465f      	mov	r7, fp
 8024cb2:	4642      	mov	r2, r8
 8024cb4:	464b      	mov	r3, r9
 8024cb6:	4630      	mov	r0, r6
 8024cb8:	4639      	mov	r1, r7
 8024cba:	f7db fdd1 	bl	8000860 <__aeabi_ddiv>
 8024cbe:	f7db ff55 	bl	8000b6c <__aeabi_d2iz>
 8024cc2:	4682      	mov	sl, r0
 8024cc4:	f7db fc38 	bl	8000538 <__aeabi_i2d>
 8024cc8:	4642      	mov	r2, r8
 8024cca:	464b      	mov	r3, r9
 8024ccc:	f7db fc9e 	bl	800060c <__aeabi_dmul>
 8024cd0:	4602      	mov	r2, r0
 8024cd2:	460b      	mov	r3, r1
 8024cd4:	4630      	mov	r0, r6
 8024cd6:	4639      	mov	r1, r7
 8024cd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8024cdc:	f7db fade 	bl	800029c <__aeabi_dsub>
 8024ce0:	f805 6b01 	strb.w	r6, [r5], #1
 8024ce4:	9e01      	ldr	r6, [sp, #4]
 8024ce6:	9f03      	ldr	r7, [sp, #12]
 8024ce8:	1bae      	subs	r6, r5, r6
 8024cea:	42b7      	cmp	r7, r6
 8024cec:	4602      	mov	r2, r0
 8024cee:	460b      	mov	r3, r1
 8024cf0:	d135      	bne.n	8024d5e <_dtoa_r+0x6e6>
 8024cf2:	f7db fad5 	bl	80002a0 <__adddf3>
 8024cf6:	4642      	mov	r2, r8
 8024cf8:	464b      	mov	r3, r9
 8024cfa:	4606      	mov	r6, r0
 8024cfc:	460f      	mov	r7, r1
 8024cfe:	f7db ff15 	bl	8000b2c <__aeabi_dcmpgt>
 8024d02:	b9d0      	cbnz	r0, 8024d3a <_dtoa_r+0x6c2>
 8024d04:	4642      	mov	r2, r8
 8024d06:	464b      	mov	r3, r9
 8024d08:	4630      	mov	r0, r6
 8024d0a:	4639      	mov	r1, r7
 8024d0c:	f7db fee6 	bl	8000adc <__aeabi_dcmpeq>
 8024d10:	b110      	cbz	r0, 8024d18 <_dtoa_r+0x6a0>
 8024d12:	f01a 0f01 	tst.w	sl, #1
 8024d16:	d110      	bne.n	8024d3a <_dtoa_r+0x6c2>
 8024d18:	4620      	mov	r0, r4
 8024d1a:	ee18 1a10 	vmov	r1, s16
 8024d1e:	f001 f887 	bl	8025e30 <_Bfree>
 8024d22:	2300      	movs	r3, #0
 8024d24:	9800      	ldr	r0, [sp, #0]
 8024d26:	702b      	strb	r3, [r5, #0]
 8024d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024d2a:	3001      	adds	r0, #1
 8024d2c:	6018      	str	r0, [r3, #0]
 8024d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024d30:	2b00      	cmp	r3, #0
 8024d32:	f43f acf1 	beq.w	8024718 <_dtoa_r+0xa0>
 8024d36:	601d      	str	r5, [r3, #0]
 8024d38:	e4ee      	b.n	8024718 <_dtoa_r+0xa0>
 8024d3a:	9f00      	ldr	r7, [sp, #0]
 8024d3c:	462b      	mov	r3, r5
 8024d3e:	461d      	mov	r5, r3
 8024d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024d44:	2a39      	cmp	r2, #57	; 0x39
 8024d46:	d106      	bne.n	8024d56 <_dtoa_r+0x6de>
 8024d48:	9a01      	ldr	r2, [sp, #4]
 8024d4a:	429a      	cmp	r2, r3
 8024d4c:	d1f7      	bne.n	8024d3e <_dtoa_r+0x6c6>
 8024d4e:	9901      	ldr	r1, [sp, #4]
 8024d50:	2230      	movs	r2, #48	; 0x30
 8024d52:	3701      	adds	r7, #1
 8024d54:	700a      	strb	r2, [r1, #0]
 8024d56:	781a      	ldrb	r2, [r3, #0]
 8024d58:	3201      	adds	r2, #1
 8024d5a:	701a      	strb	r2, [r3, #0]
 8024d5c:	e790      	b.n	8024c80 <_dtoa_r+0x608>
 8024d5e:	4ba6      	ldr	r3, [pc, #664]	; (8024ff8 <_dtoa_r+0x980>)
 8024d60:	2200      	movs	r2, #0
 8024d62:	f7db fc53 	bl	800060c <__aeabi_dmul>
 8024d66:	2200      	movs	r2, #0
 8024d68:	2300      	movs	r3, #0
 8024d6a:	4606      	mov	r6, r0
 8024d6c:	460f      	mov	r7, r1
 8024d6e:	f7db feb5 	bl	8000adc <__aeabi_dcmpeq>
 8024d72:	2800      	cmp	r0, #0
 8024d74:	d09d      	beq.n	8024cb2 <_dtoa_r+0x63a>
 8024d76:	e7cf      	b.n	8024d18 <_dtoa_r+0x6a0>
 8024d78:	9a08      	ldr	r2, [sp, #32]
 8024d7a:	2a00      	cmp	r2, #0
 8024d7c:	f000 80d7 	beq.w	8024f2e <_dtoa_r+0x8b6>
 8024d80:	9a06      	ldr	r2, [sp, #24]
 8024d82:	2a01      	cmp	r2, #1
 8024d84:	f300 80ba 	bgt.w	8024efc <_dtoa_r+0x884>
 8024d88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024d8a:	2a00      	cmp	r2, #0
 8024d8c:	f000 80b2 	beq.w	8024ef4 <_dtoa_r+0x87c>
 8024d90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8024d94:	9e07      	ldr	r6, [sp, #28]
 8024d96:	9d04      	ldr	r5, [sp, #16]
 8024d98:	9a04      	ldr	r2, [sp, #16]
 8024d9a:	441a      	add	r2, r3
 8024d9c:	9204      	str	r2, [sp, #16]
 8024d9e:	9a05      	ldr	r2, [sp, #20]
 8024da0:	2101      	movs	r1, #1
 8024da2:	441a      	add	r2, r3
 8024da4:	4620      	mov	r0, r4
 8024da6:	9205      	str	r2, [sp, #20]
 8024da8:	f001 f944 	bl	8026034 <__i2b>
 8024dac:	4607      	mov	r7, r0
 8024dae:	2d00      	cmp	r5, #0
 8024db0:	dd0c      	ble.n	8024dcc <_dtoa_r+0x754>
 8024db2:	9b05      	ldr	r3, [sp, #20]
 8024db4:	2b00      	cmp	r3, #0
 8024db6:	dd09      	ble.n	8024dcc <_dtoa_r+0x754>
 8024db8:	42ab      	cmp	r3, r5
 8024dba:	9a04      	ldr	r2, [sp, #16]
 8024dbc:	bfa8      	it	ge
 8024dbe:	462b      	movge	r3, r5
 8024dc0:	1ad2      	subs	r2, r2, r3
 8024dc2:	9204      	str	r2, [sp, #16]
 8024dc4:	9a05      	ldr	r2, [sp, #20]
 8024dc6:	1aed      	subs	r5, r5, r3
 8024dc8:	1ad3      	subs	r3, r2, r3
 8024dca:	9305      	str	r3, [sp, #20]
 8024dcc:	9b07      	ldr	r3, [sp, #28]
 8024dce:	b31b      	cbz	r3, 8024e18 <_dtoa_r+0x7a0>
 8024dd0:	9b08      	ldr	r3, [sp, #32]
 8024dd2:	2b00      	cmp	r3, #0
 8024dd4:	f000 80af 	beq.w	8024f36 <_dtoa_r+0x8be>
 8024dd8:	2e00      	cmp	r6, #0
 8024dda:	dd13      	ble.n	8024e04 <_dtoa_r+0x78c>
 8024ddc:	4639      	mov	r1, r7
 8024dde:	4632      	mov	r2, r6
 8024de0:	4620      	mov	r0, r4
 8024de2:	f001 f9e7 	bl	80261b4 <__pow5mult>
 8024de6:	ee18 2a10 	vmov	r2, s16
 8024dea:	4601      	mov	r1, r0
 8024dec:	4607      	mov	r7, r0
 8024dee:	4620      	mov	r0, r4
 8024df0:	f001 f936 	bl	8026060 <__multiply>
 8024df4:	ee18 1a10 	vmov	r1, s16
 8024df8:	4680      	mov	r8, r0
 8024dfa:	4620      	mov	r0, r4
 8024dfc:	f001 f818 	bl	8025e30 <_Bfree>
 8024e00:	ee08 8a10 	vmov	s16, r8
 8024e04:	9b07      	ldr	r3, [sp, #28]
 8024e06:	1b9a      	subs	r2, r3, r6
 8024e08:	d006      	beq.n	8024e18 <_dtoa_r+0x7a0>
 8024e0a:	ee18 1a10 	vmov	r1, s16
 8024e0e:	4620      	mov	r0, r4
 8024e10:	f001 f9d0 	bl	80261b4 <__pow5mult>
 8024e14:	ee08 0a10 	vmov	s16, r0
 8024e18:	2101      	movs	r1, #1
 8024e1a:	4620      	mov	r0, r4
 8024e1c:	f001 f90a 	bl	8026034 <__i2b>
 8024e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024e22:	2b00      	cmp	r3, #0
 8024e24:	4606      	mov	r6, r0
 8024e26:	f340 8088 	ble.w	8024f3a <_dtoa_r+0x8c2>
 8024e2a:	461a      	mov	r2, r3
 8024e2c:	4601      	mov	r1, r0
 8024e2e:	4620      	mov	r0, r4
 8024e30:	f001 f9c0 	bl	80261b4 <__pow5mult>
 8024e34:	9b06      	ldr	r3, [sp, #24]
 8024e36:	2b01      	cmp	r3, #1
 8024e38:	4606      	mov	r6, r0
 8024e3a:	f340 8081 	ble.w	8024f40 <_dtoa_r+0x8c8>
 8024e3e:	f04f 0800 	mov.w	r8, #0
 8024e42:	6933      	ldr	r3, [r6, #16]
 8024e44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8024e48:	6918      	ldr	r0, [r3, #16]
 8024e4a:	f001 f8a3 	bl	8025f94 <__hi0bits>
 8024e4e:	f1c0 0020 	rsb	r0, r0, #32
 8024e52:	9b05      	ldr	r3, [sp, #20]
 8024e54:	4418      	add	r0, r3
 8024e56:	f010 001f 	ands.w	r0, r0, #31
 8024e5a:	f000 8092 	beq.w	8024f82 <_dtoa_r+0x90a>
 8024e5e:	f1c0 0320 	rsb	r3, r0, #32
 8024e62:	2b04      	cmp	r3, #4
 8024e64:	f340 808a 	ble.w	8024f7c <_dtoa_r+0x904>
 8024e68:	f1c0 001c 	rsb	r0, r0, #28
 8024e6c:	9b04      	ldr	r3, [sp, #16]
 8024e6e:	4403      	add	r3, r0
 8024e70:	9304      	str	r3, [sp, #16]
 8024e72:	9b05      	ldr	r3, [sp, #20]
 8024e74:	4403      	add	r3, r0
 8024e76:	4405      	add	r5, r0
 8024e78:	9305      	str	r3, [sp, #20]
 8024e7a:	9b04      	ldr	r3, [sp, #16]
 8024e7c:	2b00      	cmp	r3, #0
 8024e7e:	dd07      	ble.n	8024e90 <_dtoa_r+0x818>
 8024e80:	ee18 1a10 	vmov	r1, s16
 8024e84:	461a      	mov	r2, r3
 8024e86:	4620      	mov	r0, r4
 8024e88:	f001 f9ee 	bl	8026268 <__lshift>
 8024e8c:	ee08 0a10 	vmov	s16, r0
 8024e90:	9b05      	ldr	r3, [sp, #20]
 8024e92:	2b00      	cmp	r3, #0
 8024e94:	dd05      	ble.n	8024ea2 <_dtoa_r+0x82a>
 8024e96:	4631      	mov	r1, r6
 8024e98:	461a      	mov	r2, r3
 8024e9a:	4620      	mov	r0, r4
 8024e9c:	f001 f9e4 	bl	8026268 <__lshift>
 8024ea0:	4606      	mov	r6, r0
 8024ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ea4:	2b00      	cmp	r3, #0
 8024ea6:	d06e      	beq.n	8024f86 <_dtoa_r+0x90e>
 8024ea8:	ee18 0a10 	vmov	r0, s16
 8024eac:	4631      	mov	r1, r6
 8024eae:	f001 fa4b 	bl	8026348 <__mcmp>
 8024eb2:	2800      	cmp	r0, #0
 8024eb4:	da67      	bge.n	8024f86 <_dtoa_r+0x90e>
 8024eb6:	9b00      	ldr	r3, [sp, #0]
 8024eb8:	3b01      	subs	r3, #1
 8024eba:	ee18 1a10 	vmov	r1, s16
 8024ebe:	9300      	str	r3, [sp, #0]
 8024ec0:	220a      	movs	r2, #10
 8024ec2:	2300      	movs	r3, #0
 8024ec4:	4620      	mov	r0, r4
 8024ec6:	f000 ffd5 	bl	8025e74 <__multadd>
 8024eca:	9b08      	ldr	r3, [sp, #32]
 8024ecc:	ee08 0a10 	vmov	s16, r0
 8024ed0:	2b00      	cmp	r3, #0
 8024ed2:	f000 81b1 	beq.w	8025238 <_dtoa_r+0xbc0>
 8024ed6:	2300      	movs	r3, #0
 8024ed8:	4639      	mov	r1, r7
 8024eda:	220a      	movs	r2, #10
 8024edc:	4620      	mov	r0, r4
 8024ede:	f000 ffc9 	bl	8025e74 <__multadd>
 8024ee2:	9b02      	ldr	r3, [sp, #8]
 8024ee4:	2b00      	cmp	r3, #0
 8024ee6:	4607      	mov	r7, r0
 8024ee8:	f300 808e 	bgt.w	8025008 <_dtoa_r+0x990>
 8024eec:	9b06      	ldr	r3, [sp, #24]
 8024eee:	2b02      	cmp	r3, #2
 8024ef0:	dc51      	bgt.n	8024f96 <_dtoa_r+0x91e>
 8024ef2:	e089      	b.n	8025008 <_dtoa_r+0x990>
 8024ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024ef6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8024efa:	e74b      	b.n	8024d94 <_dtoa_r+0x71c>
 8024efc:	9b03      	ldr	r3, [sp, #12]
 8024efe:	1e5e      	subs	r6, r3, #1
 8024f00:	9b07      	ldr	r3, [sp, #28]
 8024f02:	42b3      	cmp	r3, r6
 8024f04:	bfbf      	itttt	lt
 8024f06:	9b07      	ldrlt	r3, [sp, #28]
 8024f08:	9607      	strlt	r6, [sp, #28]
 8024f0a:	1af2      	sublt	r2, r6, r3
 8024f0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8024f0e:	bfb6      	itet	lt
 8024f10:	189b      	addlt	r3, r3, r2
 8024f12:	1b9e      	subge	r6, r3, r6
 8024f14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8024f16:	9b03      	ldr	r3, [sp, #12]
 8024f18:	bfb8      	it	lt
 8024f1a:	2600      	movlt	r6, #0
 8024f1c:	2b00      	cmp	r3, #0
 8024f1e:	bfb7      	itett	lt
 8024f20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8024f24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8024f28:	1a9d      	sublt	r5, r3, r2
 8024f2a:	2300      	movlt	r3, #0
 8024f2c:	e734      	b.n	8024d98 <_dtoa_r+0x720>
 8024f2e:	9e07      	ldr	r6, [sp, #28]
 8024f30:	9d04      	ldr	r5, [sp, #16]
 8024f32:	9f08      	ldr	r7, [sp, #32]
 8024f34:	e73b      	b.n	8024dae <_dtoa_r+0x736>
 8024f36:	9a07      	ldr	r2, [sp, #28]
 8024f38:	e767      	b.n	8024e0a <_dtoa_r+0x792>
 8024f3a:	9b06      	ldr	r3, [sp, #24]
 8024f3c:	2b01      	cmp	r3, #1
 8024f3e:	dc18      	bgt.n	8024f72 <_dtoa_r+0x8fa>
 8024f40:	f1ba 0f00 	cmp.w	sl, #0
 8024f44:	d115      	bne.n	8024f72 <_dtoa_r+0x8fa>
 8024f46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024f4a:	b993      	cbnz	r3, 8024f72 <_dtoa_r+0x8fa>
 8024f4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024f50:	0d1b      	lsrs	r3, r3, #20
 8024f52:	051b      	lsls	r3, r3, #20
 8024f54:	b183      	cbz	r3, 8024f78 <_dtoa_r+0x900>
 8024f56:	9b04      	ldr	r3, [sp, #16]
 8024f58:	3301      	adds	r3, #1
 8024f5a:	9304      	str	r3, [sp, #16]
 8024f5c:	9b05      	ldr	r3, [sp, #20]
 8024f5e:	3301      	adds	r3, #1
 8024f60:	9305      	str	r3, [sp, #20]
 8024f62:	f04f 0801 	mov.w	r8, #1
 8024f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f68:	2b00      	cmp	r3, #0
 8024f6a:	f47f af6a 	bne.w	8024e42 <_dtoa_r+0x7ca>
 8024f6e:	2001      	movs	r0, #1
 8024f70:	e76f      	b.n	8024e52 <_dtoa_r+0x7da>
 8024f72:	f04f 0800 	mov.w	r8, #0
 8024f76:	e7f6      	b.n	8024f66 <_dtoa_r+0x8ee>
 8024f78:	4698      	mov	r8, r3
 8024f7a:	e7f4      	b.n	8024f66 <_dtoa_r+0x8ee>
 8024f7c:	f43f af7d 	beq.w	8024e7a <_dtoa_r+0x802>
 8024f80:	4618      	mov	r0, r3
 8024f82:	301c      	adds	r0, #28
 8024f84:	e772      	b.n	8024e6c <_dtoa_r+0x7f4>
 8024f86:	9b03      	ldr	r3, [sp, #12]
 8024f88:	2b00      	cmp	r3, #0
 8024f8a:	dc37      	bgt.n	8024ffc <_dtoa_r+0x984>
 8024f8c:	9b06      	ldr	r3, [sp, #24]
 8024f8e:	2b02      	cmp	r3, #2
 8024f90:	dd34      	ble.n	8024ffc <_dtoa_r+0x984>
 8024f92:	9b03      	ldr	r3, [sp, #12]
 8024f94:	9302      	str	r3, [sp, #8]
 8024f96:	9b02      	ldr	r3, [sp, #8]
 8024f98:	b96b      	cbnz	r3, 8024fb6 <_dtoa_r+0x93e>
 8024f9a:	4631      	mov	r1, r6
 8024f9c:	2205      	movs	r2, #5
 8024f9e:	4620      	mov	r0, r4
 8024fa0:	f000 ff68 	bl	8025e74 <__multadd>
 8024fa4:	4601      	mov	r1, r0
 8024fa6:	4606      	mov	r6, r0
 8024fa8:	ee18 0a10 	vmov	r0, s16
 8024fac:	f001 f9cc 	bl	8026348 <__mcmp>
 8024fb0:	2800      	cmp	r0, #0
 8024fb2:	f73f adbb 	bgt.w	8024b2c <_dtoa_r+0x4b4>
 8024fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fb8:	9d01      	ldr	r5, [sp, #4]
 8024fba:	43db      	mvns	r3, r3
 8024fbc:	9300      	str	r3, [sp, #0]
 8024fbe:	f04f 0800 	mov.w	r8, #0
 8024fc2:	4631      	mov	r1, r6
 8024fc4:	4620      	mov	r0, r4
 8024fc6:	f000 ff33 	bl	8025e30 <_Bfree>
 8024fca:	2f00      	cmp	r7, #0
 8024fcc:	f43f aea4 	beq.w	8024d18 <_dtoa_r+0x6a0>
 8024fd0:	f1b8 0f00 	cmp.w	r8, #0
 8024fd4:	d005      	beq.n	8024fe2 <_dtoa_r+0x96a>
 8024fd6:	45b8      	cmp	r8, r7
 8024fd8:	d003      	beq.n	8024fe2 <_dtoa_r+0x96a>
 8024fda:	4641      	mov	r1, r8
 8024fdc:	4620      	mov	r0, r4
 8024fde:	f000 ff27 	bl	8025e30 <_Bfree>
 8024fe2:	4639      	mov	r1, r7
 8024fe4:	4620      	mov	r0, r4
 8024fe6:	f000 ff23 	bl	8025e30 <_Bfree>
 8024fea:	e695      	b.n	8024d18 <_dtoa_r+0x6a0>
 8024fec:	2600      	movs	r6, #0
 8024fee:	4637      	mov	r7, r6
 8024ff0:	e7e1      	b.n	8024fb6 <_dtoa_r+0x93e>
 8024ff2:	9700      	str	r7, [sp, #0]
 8024ff4:	4637      	mov	r7, r6
 8024ff6:	e599      	b.n	8024b2c <_dtoa_r+0x4b4>
 8024ff8:	40240000 	.word	0x40240000
 8024ffc:	9b08      	ldr	r3, [sp, #32]
 8024ffe:	2b00      	cmp	r3, #0
 8025000:	f000 80ca 	beq.w	8025198 <_dtoa_r+0xb20>
 8025004:	9b03      	ldr	r3, [sp, #12]
 8025006:	9302      	str	r3, [sp, #8]
 8025008:	2d00      	cmp	r5, #0
 802500a:	dd05      	ble.n	8025018 <_dtoa_r+0x9a0>
 802500c:	4639      	mov	r1, r7
 802500e:	462a      	mov	r2, r5
 8025010:	4620      	mov	r0, r4
 8025012:	f001 f929 	bl	8026268 <__lshift>
 8025016:	4607      	mov	r7, r0
 8025018:	f1b8 0f00 	cmp.w	r8, #0
 802501c:	d05b      	beq.n	80250d6 <_dtoa_r+0xa5e>
 802501e:	6879      	ldr	r1, [r7, #4]
 8025020:	4620      	mov	r0, r4
 8025022:	f000 fec5 	bl	8025db0 <_Balloc>
 8025026:	4605      	mov	r5, r0
 8025028:	b928      	cbnz	r0, 8025036 <_dtoa_r+0x9be>
 802502a:	4b87      	ldr	r3, [pc, #540]	; (8025248 <_dtoa_r+0xbd0>)
 802502c:	4602      	mov	r2, r0
 802502e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8025032:	f7ff bb3b 	b.w	80246ac <_dtoa_r+0x34>
 8025036:	693a      	ldr	r2, [r7, #16]
 8025038:	3202      	adds	r2, #2
 802503a:	0092      	lsls	r2, r2, #2
 802503c:	f107 010c 	add.w	r1, r7, #12
 8025040:	300c      	adds	r0, #12
 8025042:	f7fd fc29 	bl	8022898 <memcpy>
 8025046:	2201      	movs	r2, #1
 8025048:	4629      	mov	r1, r5
 802504a:	4620      	mov	r0, r4
 802504c:	f001 f90c 	bl	8026268 <__lshift>
 8025050:	9b01      	ldr	r3, [sp, #4]
 8025052:	f103 0901 	add.w	r9, r3, #1
 8025056:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802505a:	4413      	add	r3, r2
 802505c:	9305      	str	r3, [sp, #20]
 802505e:	f00a 0301 	and.w	r3, sl, #1
 8025062:	46b8      	mov	r8, r7
 8025064:	9304      	str	r3, [sp, #16]
 8025066:	4607      	mov	r7, r0
 8025068:	4631      	mov	r1, r6
 802506a:	ee18 0a10 	vmov	r0, s16
 802506e:	f7ff fa75 	bl	802455c <quorem>
 8025072:	4641      	mov	r1, r8
 8025074:	9002      	str	r0, [sp, #8]
 8025076:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802507a:	ee18 0a10 	vmov	r0, s16
 802507e:	f001 f963 	bl	8026348 <__mcmp>
 8025082:	463a      	mov	r2, r7
 8025084:	9003      	str	r0, [sp, #12]
 8025086:	4631      	mov	r1, r6
 8025088:	4620      	mov	r0, r4
 802508a:	f001 f979 	bl	8026380 <__mdiff>
 802508e:	68c2      	ldr	r2, [r0, #12]
 8025090:	f109 3bff 	add.w	fp, r9, #4294967295
 8025094:	4605      	mov	r5, r0
 8025096:	bb02      	cbnz	r2, 80250da <_dtoa_r+0xa62>
 8025098:	4601      	mov	r1, r0
 802509a:	ee18 0a10 	vmov	r0, s16
 802509e:	f001 f953 	bl	8026348 <__mcmp>
 80250a2:	4602      	mov	r2, r0
 80250a4:	4629      	mov	r1, r5
 80250a6:	4620      	mov	r0, r4
 80250a8:	9207      	str	r2, [sp, #28]
 80250aa:	f000 fec1 	bl	8025e30 <_Bfree>
 80250ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80250b2:	ea43 0102 	orr.w	r1, r3, r2
 80250b6:	9b04      	ldr	r3, [sp, #16]
 80250b8:	430b      	orrs	r3, r1
 80250ba:	464d      	mov	r5, r9
 80250bc:	d10f      	bne.n	80250de <_dtoa_r+0xa66>
 80250be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80250c2:	d02a      	beq.n	802511a <_dtoa_r+0xaa2>
 80250c4:	9b03      	ldr	r3, [sp, #12]
 80250c6:	2b00      	cmp	r3, #0
 80250c8:	dd02      	ble.n	80250d0 <_dtoa_r+0xa58>
 80250ca:	9b02      	ldr	r3, [sp, #8]
 80250cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80250d0:	f88b a000 	strb.w	sl, [fp]
 80250d4:	e775      	b.n	8024fc2 <_dtoa_r+0x94a>
 80250d6:	4638      	mov	r0, r7
 80250d8:	e7ba      	b.n	8025050 <_dtoa_r+0x9d8>
 80250da:	2201      	movs	r2, #1
 80250dc:	e7e2      	b.n	80250a4 <_dtoa_r+0xa2c>
 80250de:	9b03      	ldr	r3, [sp, #12]
 80250e0:	2b00      	cmp	r3, #0
 80250e2:	db04      	blt.n	80250ee <_dtoa_r+0xa76>
 80250e4:	9906      	ldr	r1, [sp, #24]
 80250e6:	430b      	orrs	r3, r1
 80250e8:	9904      	ldr	r1, [sp, #16]
 80250ea:	430b      	orrs	r3, r1
 80250ec:	d122      	bne.n	8025134 <_dtoa_r+0xabc>
 80250ee:	2a00      	cmp	r2, #0
 80250f0:	ddee      	ble.n	80250d0 <_dtoa_r+0xa58>
 80250f2:	ee18 1a10 	vmov	r1, s16
 80250f6:	2201      	movs	r2, #1
 80250f8:	4620      	mov	r0, r4
 80250fa:	f001 f8b5 	bl	8026268 <__lshift>
 80250fe:	4631      	mov	r1, r6
 8025100:	ee08 0a10 	vmov	s16, r0
 8025104:	f001 f920 	bl	8026348 <__mcmp>
 8025108:	2800      	cmp	r0, #0
 802510a:	dc03      	bgt.n	8025114 <_dtoa_r+0xa9c>
 802510c:	d1e0      	bne.n	80250d0 <_dtoa_r+0xa58>
 802510e:	f01a 0f01 	tst.w	sl, #1
 8025112:	d0dd      	beq.n	80250d0 <_dtoa_r+0xa58>
 8025114:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8025118:	d1d7      	bne.n	80250ca <_dtoa_r+0xa52>
 802511a:	2339      	movs	r3, #57	; 0x39
 802511c:	f88b 3000 	strb.w	r3, [fp]
 8025120:	462b      	mov	r3, r5
 8025122:	461d      	mov	r5, r3
 8025124:	3b01      	subs	r3, #1
 8025126:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802512a:	2a39      	cmp	r2, #57	; 0x39
 802512c:	d071      	beq.n	8025212 <_dtoa_r+0xb9a>
 802512e:	3201      	adds	r2, #1
 8025130:	701a      	strb	r2, [r3, #0]
 8025132:	e746      	b.n	8024fc2 <_dtoa_r+0x94a>
 8025134:	2a00      	cmp	r2, #0
 8025136:	dd07      	ble.n	8025148 <_dtoa_r+0xad0>
 8025138:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802513c:	d0ed      	beq.n	802511a <_dtoa_r+0xaa2>
 802513e:	f10a 0301 	add.w	r3, sl, #1
 8025142:	f88b 3000 	strb.w	r3, [fp]
 8025146:	e73c      	b.n	8024fc2 <_dtoa_r+0x94a>
 8025148:	9b05      	ldr	r3, [sp, #20]
 802514a:	f809 ac01 	strb.w	sl, [r9, #-1]
 802514e:	4599      	cmp	r9, r3
 8025150:	d047      	beq.n	80251e2 <_dtoa_r+0xb6a>
 8025152:	ee18 1a10 	vmov	r1, s16
 8025156:	2300      	movs	r3, #0
 8025158:	220a      	movs	r2, #10
 802515a:	4620      	mov	r0, r4
 802515c:	f000 fe8a 	bl	8025e74 <__multadd>
 8025160:	45b8      	cmp	r8, r7
 8025162:	ee08 0a10 	vmov	s16, r0
 8025166:	f04f 0300 	mov.w	r3, #0
 802516a:	f04f 020a 	mov.w	r2, #10
 802516e:	4641      	mov	r1, r8
 8025170:	4620      	mov	r0, r4
 8025172:	d106      	bne.n	8025182 <_dtoa_r+0xb0a>
 8025174:	f000 fe7e 	bl	8025e74 <__multadd>
 8025178:	4680      	mov	r8, r0
 802517a:	4607      	mov	r7, r0
 802517c:	f109 0901 	add.w	r9, r9, #1
 8025180:	e772      	b.n	8025068 <_dtoa_r+0x9f0>
 8025182:	f000 fe77 	bl	8025e74 <__multadd>
 8025186:	4639      	mov	r1, r7
 8025188:	4680      	mov	r8, r0
 802518a:	2300      	movs	r3, #0
 802518c:	220a      	movs	r2, #10
 802518e:	4620      	mov	r0, r4
 8025190:	f000 fe70 	bl	8025e74 <__multadd>
 8025194:	4607      	mov	r7, r0
 8025196:	e7f1      	b.n	802517c <_dtoa_r+0xb04>
 8025198:	9b03      	ldr	r3, [sp, #12]
 802519a:	9302      	str	r3, [sp, #8]
 802519c:	9d01      	ldr	r5, [sp, #4]
 802519e:	ee18 0a10 	vmov	r0, s16
 80251a2:	4631      	mov	r1, r6
 80251a4:	f7ff f9da 	bl	802455c <quorem>
 80251a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80251ac:	9b01      	ldr	r3, [sp, #4]
 80251ae:	f805 ab01 	strb.w	sl, [r5], #1
 80251b2:	1aea      	subs	r2, r5, r3
 80251b4:	9b02      	ldr	r3, [sp, #8]
 80251b6:	4293      	cmp	r3, r2
 80251b8:	dd09      	ble.n	80251ce <_dtoa_r+0xb56>
 80251ba:	ee18 1a10 	vmov	r1, s16
 80251be:	2300      	movs	r3, #0
 80251c0:	220a      	movs	r2, #10
 80251c2:	4620      	mov	r0, r4
 80251c4:	f000 fe56 	bl	8025e74 <__multadd>
 80251c8:	ee08 0a10 	vmov	s16, r0
 80251cc:	e7e7      	b.n	802519e <_dtoa_r+0xb26>
 80251ce:	9b02      	ldr	r3, [sp, #8]
 80251d0:	2b00      	cmp	r3, #0
 80251d2:	bfc8      	it	gt
 80251d4:	461d      	movgt	r5, r3
 80251d6:	9b01      	ldr	r3, [sp, #4]
 80251d8:	bfd8      	it	le
 80251da:	2501      	movle	r5, #1
 80251dc:	441d      	add	r5, r3
 80251de:	f04f 0800 	mov.w	r8, #0
 80251e2:	ee18 1a10 	vmov	r1, s16
 80251e6:	2201      	movs	r2, #1
 80251e8:	4620      	mov	r0, r4
 80251ea:	f001 f83d 	bl	8026268 <__lshift>
 80251ee:	4631      	mov	r1, r6
 80251f0:	ee08 0a10 	vmov	s16, r0
 80251f4:	f001 f8a8 	bl	8026348 <__mcmp>
 80251f8:	2800      	cmp	r0, #0
 80251fa:	dc91      	bgt.n	8025120 <_dtoa_r+0xaa8>
 80251fc:	d102      	bne.n	8025204 <_dtoa_r+0xb8c>
 80251fe:	f01a 0f01 	tst.w	sl, #1
 8025202:	d18d      	bne.n	8025120 <_dtoa_r+0xaa8>
 8025204:	462b      	mov	r3, r5
 8025206:	461d      	mov	r5, r3
 8025208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802520c:	2a30      	cmp	r2, #48	; 0x30
 802520e:	d0fa      	beq.n	8025206 <_dtoa_r+0xb8e>
 8025210:	e6d7      	b.n	8024fc2 <_dtoa_r+0x94a>
 8025212:	9a01      	ldr	r2, [sp, #4]
 8025214:	429a      	cmp	r2, r3
 8025216:	d184      	bne.n	8025122 <_dtoa_r+0xaaa>
 8025218:	9b00      	ldr	r3, [sp, #0]
 802521a:	3301      	adds	r3, #1
 802521c:	9300      	str	r3, [sp, #0]
 802521e:	2331      	movs	r3, #49	; 0x31
 8025220:	7013      	strb	r3, [r2, #0]
 8025222:	e6ce      	b.n	8024fc2 <_dtoa_r+0x94a>
 8025224:	4b09      	ldr	r3, [pc, #36]	; (802524c <_dtoa_r+0xbd4>)
 8025226:	f7ff ba95 	b.w	8024754 <_dtoa_r+0xdc>
 802522a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802522c:	2b00      	cmp	r3, #0
 802522e:	f47f aa6e 	bne.w	802470e <_dtoa_r+0x96>
 8025232:	4b07      	ldr	r3, [pc, #28]	; (8025250 <_dtoa_r+0xbd8>)
 8025234:	f7ff ba8e 	b.w	8024754 <_dtoa_r+0xdc>
 8025238:	9b02      	ldr	r3, [sp, #8]
 802523a:	2b00      	cmp	r3, #0
 802523c:	dcae      	bgt.n	802519c <_dtoa_r+0xb24>
 802523e:	9b06      	ldr	r3, [sp, #24]
 8025240:	2b02      	cmp	r3, #2
 8025242:	f73f aea8 	bgt.w	8024f96 <_dtoa_r+0x91e>
 8025246:	e7a9      	b.n	802519c <_dtoa_r+0xb24>
 8025248:	0804c0a8 	.word	0x0804c0a8
 802524c:	0804beb1 	.word	0x0804beb1
 8025250:	0804c029 	.word	0x0804c029

08025254 <__sflush_r>:
 8025254:	898a      	ldrh	r2, [r1, #12]
 8025256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802525a:	4605      	mov	r5, r0
 802525c:	0710      	lsls	r0, r2, #28
 802525e:	460c      	mov	r4, r1
 8025260:	d458      	bmi.n	8025314 <__sflush_r+0xc0>
 8025262:	684b      	ldr	r3, [r1, #4]
 8025264:	2b00      	cmp	r3, #0
 8025266:	dc05      	bgt.n	8025274 <__sflush_r+0x20>
 8025268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802526a:	2b00      	cmp	r3, #0
 802526c:	dc02      	bgt.n	8025274 <__sflush_r+0x20>
 802526e:	2000      	movs	r0, #0
 8025270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025276:	2e00      	cmp	r6, #0
 8025278:	d0f9      	beq.n	802526e <__sflush_r+0x1a>
 802527a:	2300      	movs	r3, #0
 802527c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025280:	682f      	ldr	r7, [r5, #0]
 8025282:	602b      	str	r3, [r5, #0]
 8025284:	d032      	beq.n	80252ec <__sflush_r+0x98>
 8025286:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025288:	89a3      	ldrh	r3, [r4, #12]
 802528a:	075a      	lsls	r2, r3, #29
 802528c:	d505      	bpl.n	802529a <__sflush_r+0x46>
 802528e:	6863      	ldr	r3, [r4, #4]
 8025290:	1ac0      	subs	r0, r0, r3
 8025292:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025294:	b10b      	cbz	r3, 802529a <__sflush_r+0x46>
 8025296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025298:	1ac0      	subs	r0, r0, r3
 802529a:	2300      	movs	r3, #0
 802529c:	4602      	mov	r2, r0
 802529e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80252a0:	6a21      	ldr	r1, [r4, #32]
 80252a2:	4628      	mov	r0, r5
 80252a4:	47b0      	blx	r6
 80252a6:	1c43      	adds	r3, r0, #1
 80252a8:	89a3      	ldrh	r3, [r4, #12]
 80252aa:	d106      	bne.n	80252ba <__sflush_r+0x66>
 80252ac:	6829      	ldr	r1, [r5, #0]
 80252ae:	291d      	cmp	r1, #29
 80252b0:	d82c      	bhi.n	802530c <__sflush_r+0xb8>
 80252b2:	4a2a      	ldr	r2, [pc, #168]	; (802535c <__sflush_r+0x108>)
 80252b4:	40ca      	lsrs	r2, r1
 80252b6:	07d6      	lsls	r6, r2, #31
 80252b8:	d528      	bpl.n	802530c <__sflush_r+0xb8>
 80252ba:	2200      	movs	r2, #0
 80252bc:	6062      	str	r2, [r4, #4]
 80252be:	04d9      	lsls	r1, r3, #19
 80252c0:	6922      	ldr	r2, [r4, #16]
 80252c2:	6022      	str	r2, [r4, #0]
 80252c4:	d504      	bpl.n	80252d0 <__sflush_r+0x7c>
 80252c6:	1c42      	adds	r2, r0, #1
 80252c8:	d101      	bne.n	80252ce <__sflush_r+0x7a>
 80252ca:	682b      	ldr	r3, [r5, #0]
 80252cc:	b903      	cbnz	r3, 80252d0 <__sflush_r+0x7c>
 80252ce:	6560      	str	r0, [r4, #84]	; 0x54
 80252d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80252d2:	602f      	str	r7, [r5, #0]
 80252d4:	2900      	cmp	r1, #0
 80252d6:	d0ca      	beq.n	802526e <__sflush_r+0x1a>
 80252d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80252dc:	4299      	cmp	r1, r3
 80252de:	d002      	beq.n	80252e6 <__sflush_r+0x92>
 80252e0:	4628      	mov	r0, r5
 80252e2:	f7fd fb1f 	bl	8022924 <_free_r>
 80252e6:	2000      	movs	r0, #0
 80252e8:	6360      	str	r0, [r4, #52]	; 0x34
 80252ea:	e7c1      	b.n	8025270 <__sflush_r+0x1c>
 80252ec:	6a21      	ldr	r1, [r4, #32]
 80252ee:	2301      	movs	r3, #1
 80252f0:	4628      	mov	r0, r5
 80252f2:	47b0      	blx	r6
 80252f4:	1c41      	adds	r1, r0, #1
 80252f6:	d1c7      	bne.n	8025288 <__sflush_r+0x34>
 80252f8:	682b      	ldr	r3, [r5, #0]
 80252fa:	2b00      	cmp	r3, #0
 80252fc:	d0c4      	beq.n	8025288 <__sflush_r+0x34>
 80252fe:	2b1d      	cmp	r3, #29
 8025300:	d001      	beq.n	8025306 <__sflush_r+0xb2>
 8025302:	2b16      	cmp	r3, #22
 8025304:	d101      	bne.n	802530a <__sflush_r+0xb6>
 8025306:	602f      	str	r7, [r5, #0]
 8025308:	e7b1      	b.n	802526e <__sflush_r+0x1a>
 802530a:	89a3      	ldrh	r3, [r4, #12]
 802530c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025310:	81a3      	strh	r3, [r4, #12]
 8025312:	e7ad      	b.n	8025270 <__sflush_r+0x1c>
 8025314:	690f      	ldr	r7, [r1, #16]
 8025316:	2f00      	cmp	r7, #0
 8025318:	d0a9      	beq.n	802526e <__sflush_r+0x1a>
 802531a:	0793      	lsls	r3, r2, #30
 802531c:	680e      	ldr	r6, [r1, #0]
 802531e:	bf08      	it	eq
 8025320:	694b      	ldreq	r3, [r1, #20]
 8025322:	600f      	str	r7, [r1, #0]
 8025324:	bf18      	it	ne
 8025326:	2300      	movne	r3, #0
 8025328:	eba6 0807 	sub.w	r8, r6, r7
 802532c:	608b      	str	r3, [r1, #8]
 802532e:	f1b8 0f00 	cmp.w	r8, #0
 8025332:	dd9c      	ble.n	802526e <__sflush_r+0x1a>
 8025334:	6a21      	ldr	r1, [r4, #32]
 8025336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025338:	4643      	mov	r3, r8
 802533a:	463a      	mov	r2, r7
 802533c:	4628      	mov	r0, r5
 802533e:	47b0      	blx	r6
 8025340:	2800      	cmp	r0, #0
 8025342:	dc06      	bgt.n	8025352 <__sflush_r+0xfe>
 8025344:	89a3      	ldrh	r3, [r4, #12]
 8025346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802534a:	81a3      	strh	r3, [r4, #12]
 802534c:	f04f 30ff 	mov.w	r0, #4294967295
 8025350:	e78e      	b.n	8025270 <__sflush_r+0x1c>
 8025352:	4407      	add	r7, r0
 8025354:	eba8 0800 	sub.w	r8, r8, r0
 8025358:	e7e9      	b.n	802532e <__sflush_r+0xda>
 802535a:	bf00      	nop
 802535c:	20400001 	.word	0x20400001

08025360 <_fflush_r>:
 8025360:	b538      	push	{r3, r4, r5, lr}
 8025362:	690b      	ldr	r3, [r1, #16]
 8025364:	4605      	mov	r5, r0
 8025366:	460c      	mov	r4, r1
 8025368:	b913      	cbnz	r3, 8025370 <_fflush_r+0x10>
 802536a:	2500      	movs	r5, #0
 802536c:	4628      	mov	r0, r5
 802536e:	bd38      	pop	{r3, r4, r5, pc}
 8025370:	b118      	cbz	r0, 802537a <_fflush_r+0x1a>
 8025372:	6983      	ldr	r3, [r0, #24]
 8025374:	b90b      	cbnz	r3, 802537a <_fflush_r+0x1a>
 8025376:	f000 f887 	bl	8025488 <__sinit>
 802537a:	4b14      	ldr	r3, [pc, #80]	; (80253cc <_fflush_r+0x6c>)
 802537c:	429c      	cmp	r4, r3
 802537e:	d11b      	bne.n	80253b8 <_fflush_r+0x58>
 8025380:	686c      	ldr	r4, [r5, #4]
 8025382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025386:	2b00      	cmp	r3, #0
 8025388:	d0ef      	beq.n	802536a <_fflush_r+0xa>
 802538a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802538c:	07d0      	lsls	r0, r2, #31
 802538e:	d404      	bmi.n	802539a <_fflush_r+0x3a>
 8025390:	0599      	lsls	r1, r3, #22
 8025392:	d402      	bmi.n	802539a <_fflush_r+0x3a>
 8025394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025396:	f7fd fa6c 	bl	8022872 <__retarget_lock_acquire_recursive>
 802539a:	4628      	mov	r0, r5
 802539c:	4621      	mov	r1, r4
 802539e:	f7ff ff59 	bl	8025254 <__sflush_r>
 80253a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80253a4:	07da      	lsls	r2, r3, #31
 80253a6:	4605      	mov	r5, r0
 80253a8:	d4e0      	bmi.n	802536c <_fflush_r+0xc>
 80253aa:	89a3      	ldrh	r3, [r4, #12]
 80253ac:	059b      	lsls	r3, r3, #22
 80253ae:	d4dd      	bmi.n	802536c <_fflush_r+0xc>
 80253b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80253b2:	f7fd fa5f 	bl	8022874 <__retarget_lock_release_recursive>
 80253b6:	e7d9      	b.n	802536c <_fflush_r+0xc>
 80253b8:	4b05      	ldr	r3, [pc, #20]	; (80253d0 <_fflush_r+0x70>)
 80253ba:	429c      	cmp	r4, r3
 80253bc:	d101      	bne.n	80253c2 <_fflush_r+0x62>
 80253be:	68ac      	ldr	r4, [r5, #8]
 80253c0:	e7df      	b.n	8025382 <_fflush_r+0x22>
 80253c2:	4b04      	ldr	r3, [pc, #16]	; (80253d4 <_fflush_r+0x74>)
 80253c4:	429c      	cmp	r4, r3
 80253c6:	bf08      	it	eq
 80253c8:	68ec      	ldreq	r4, [r5, #12]
 80253ca:	e7da      	b.n	8025382 <_fflush_r+0x22>
 80253cc:	0804c0dc 	.word	0x0804c0dc
 80253d0:	0804c0fc 	.word	0x0804c0fc
 80253d4:	0804c0bc 	.word	0x0804c0bc

080253d8 <std>:
 80253d8:	2300      	movs	r3, #0
 80253da:	b510      	push	{r4, lr}
 80253dc:	4604      	mov	r4, r0
 80253de:	e9c0 3300 	strd	r3, r3, [r0]
 80253e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80253e6:	6083      	str	r3, [r0, #8]
 80253e8:	8181      	strh	r1, [r0, #12]
 80253ea:	6643      	str	r3, [r0, #100]	; 0x64
 80253ec:	81c2      	strh	r2, [r0, #14]
 80253ee:	6183      	str	r3, [r0, #24]
 80253f0:	4619      	mov	r1, r3
 80253f2:	2208      	movs	r2, #8
 80253f4:	305c      	adds	r0, #92	; 0x5c
 80253f6:	f7fd fa77 	bl	80228e8 <memset>
 80253fa:	4b05      	ldr	r3, [pc, #20]	; (8025410 <std+0x38>)
 80253fc:	6263      	str	r3, [r4, #36]	; 0x24
 80253fe:	4b05      	ldr	r3, [pc, #20]	; (8025414 <std+0x3c>)
 8025400:	62a3      	str	r3, [r4, #40]	; 0x28
 8025402:	4b05      	ldr	r3, [pc, #20]	; (8025418 <std+0x40>)
 8025404:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025406:	4b05      	ldr	r3, [pc, #20]	; (802541c <std+0x44>)
 8025408:	6224      	str	r4, [r4, #32]
 802540a:	6323      	str	r3, [r4, #48]	; 0x30
 802540c:	bd10      	pop	{r4, pc}
 802540e:	bf00      	nop
 8025410:	08026a49 	.word	0x08026a49
 8025414:	08026a6b 	.word	0x08026a6b
 8025418:	08026aa3 	.word	0x08026aa3
 802541c:	08026ac7 	.word	0x08026ac7

08025420 <_cleanup_r>:
 8025420:	4901      	ldr	r1, [pc, #4]	; (8025428 <_cleanup_r+0x8>)
 8025422:	f000 b8af 	b.w	8025584 <_fwalk_reent>
 8025426:	bf00      	nop
 8025428:	08025361 	.word	0x08025361

0802542c <__sfmoreglue>:
 802542c:	b570      	push	{r4, r5, r6, lr}
 802542e:	2268      	movs	r2, #104	; 0x68
 8025430:	1e4d      	subs	r5, r1, #1
 8025432:	4355      	muls	r5, r2
 8025434:	460e      	mov	r6, r1
 8025436:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802543a:	f7fd fadf 	bl	80229fc <_malloc_r>
 802543e:	4604      	mov	r4, r0
 8025440:	b140      	cbz	r0, 8025454 <__sfmoreglue+0x28>
 8025442:	2100      	movs	r1, #0
 8025444:	e9c0 1600 	strd	r1, r6, [r0]
 8025448:	300c      	adds	r0, #12
 802544a:	60a0      	str	r0, [r4, #8]
 802544c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025450:	f7fd fa4a 	bl	80228e8 <memset>
 8025454:	4620      	mov	r0, r4
 8025456:	bd70      	pop	{r4, r5, r6, pc}

08025458 <__sfp_lock_acquire>:
 8025458:	4801      	ldr	r0, [pc, #4]	; (8025460 <__sfp_lock_acquire+0x8>)
 802545a:	f7fd ba0a 	b.w	8022872 <__retarget_lock_acquire_recursive>
 802545e:	bf00      	nop
 8025460:	20002771 	.word	0x20002771

08025464 <__sfp_lock_release>:
 8025464:	4801      	ldr	r0, [pc, #4]	; (802546c <__sfp_lock_release+0x8>)
 8025466:	f7fd ba05 	b.w	8022874 <__retarget_lock_release_recursive>
 802546a:	bf00      	nop
 802546c:	20002771 	.word	0x20002771

08025470 <__sinit_lock_acquire>:
 8025470:	4801      	ldr	r0, [pc, #4]	; (8025478 <__sinit_lock_acquire+0x8>)
 8025472:	f7fd b9fe 	b.w	8022872 <__retarget_lock_acquire_recursive>
 8025476:	bf00      	nop
 8025478:	20002772 	.word	0x20002772

0802547c <__sinit_lock_release>:
 802547c:	4801      	ldr	r0, [pc, #4]	; (8025484 <__sinit_lock_release+0x8>)
 802547e:	f7fd b9f9 	b.w	8022874 <__retarget_lock_release_recursive>
 8025482:	bf00      	nop
 8025484:	20002772 	.word	0x20002772

08025488 <__sinit>:
 8025488:	b510      	push	{r4, lr}
 802548a:	4604      	mov	r4, r0
 802548c:	f7ff fff0 	bl	8025470 <__sinit_lock_acquire>
 8025490:	69a3      	ldr	r3, [r4, #24]
 8025492:	b11b      	cbz	r3, 802549c <__sinit+0x14>
 8025494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025498:	f7ff bff0 	b.w	802547c <__sinit_lock_release>
 802549c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80254a0:	6523      	str	r3, [r4, #80]	; 0x50
 80254a2:	4b13      	ldr	r3, [pc, #76]	; (80254f0 <__sinit+0x68>)
 80254a4:	4a13      	ldr	r2, [pc, #76]	; (80254f4 <__sinit+0x6c>)
 80254a6:	681b      	ldr	r3, [r3, #0]
 80254a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80254aa:	42a3      	cmp	r3, r4
 80254ac:	bf04      	itt	eq
 80254ae:	2301      	moveq	r3, #1
 80254b0:	61a3      	streq	r3, [r4, #24]
 80254b2:	4620      	mov	r0, r4
 80254b4:	f000 f820 	bl	80254f8 <__sfp>
 80254b8:	6060      	str	r0, [r4, #4]
 80254ba:	4620      	mov	r0, r4
 80254bc:	f000 f81c 	bl	80254f8 <__sfp>
 80254c0:	60a0      	str	r0, [r4, #8]
 80254c2:	4620      	mov	r0, r4
 80254c4:	f000 f818 	bl	80254f8 <__sfp>
 80254c8:	2200      	movs	r2, #0
 80254ca:	60e0      	str	r0, [r4, #12]
 80254cc:	2104      	movs	r1, #4
 80254ce:	6860      	ldr	r0, [r4, #4]
 80254d0:	f7ff ff82 	bl	80253d8 <std>
 80254d4:	68a0      	ldr	r0, [r4, #8]
 80254d6:	2201      	movs	r2, #1
 80254d8:	2109      	movs	r1, #9
 80254da:	f7ff ff7d 	bl	80253d8 <std>
 80254de:	68e0      	ldr	r0, [r4, #12]
 80254e0:	2202      	movs	r2, #2
 80254e2:	2112      	movs	r1, #18
 80254e4:	f7ff ff78 	bl	80253d8 <std>
 80254e8:	2301      	movs	r3, #1
 80254ea:	61a3      	str	r3, [r4, #24]
 80254ec:	e7d2      	b.n	8025494 <__sinit+0xc>
 80254ee:	bf00      	nop
 80254f0:	0804be8c 	.word	0x0804be8c
 80254f4:	08025421 	.word	0x08025421

080254f8 <__sfp>:
 80254f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80254fa:	4607      	mov	r7, r0
 80254fc:	f7ff ffac 	bl	8025458 <__sfp_lock_acquire>
 8025500:	4b1e      	ldr	r3, [pc, #120]	; (802557c <__sfp+0x84>)
 8025502:	681e      	ldr	r6, [r3, #0]
 8025504:	69b3      	ldr	r3, [r6, #24]
 8025506:	b913      	cbnz	r3, 802550e <__sfp+0x16>
 8025508:	4630      	mov	r0, r6
 802550a:	f7ff ffbd 	bl	8025488 <__sinit>
 802550e:	3648      	adds	r6, #72	; 0x48
 8025510:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025514:	3b01      	subs	r3, #1
 8025516:	d503      	bpl.n	8025520 <__sfp+0x28>
 8025518:	6833      	ldr	r3, [r6, #0]
 802551a:	b30b      	cbz	r3, 8025560 <__sfp+0x68>
 802551c:	6836      	ldr	r6, [r6, #0]
 802551e:	e7f7      	b.n	8025510 <__sfp+0x18>
 8025520:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025524:	b9d5      	cbnz	r5, 802555c <__sfp+0x64>
 8025526:	4b16      	ldr	r3, [pc, #88]	; (8025580 <__sfp+0x88>)
 8025528:	60e3      	str	r3, [r4, #12]
 802552a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802552e:	6665      	str	r5, [r4, #100]	; 0x64
 8025530:	f7fd f99e 	bl	8022870 <__retarget_lock_init_recursive>
 8025534:	f7ff ff96 	bl	8025464 <__sfp_lock_release>
 8025538:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802553c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025540:	6025      	str	r5, [r4, #0]
 8025542:	61a5      	str	r5, [r4, #24]
 8025544:	2208      	movs	r2, #8
 8025546:	4629      	mov	r1, r5
 8025548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802554c:	f7fd f9cc 	bl	80228e8 <memset>
 8025550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025558:	4620      	mov	r0, r4
 802555a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802555c:	3468      	adds	r4, #104	; 0x68
 802555e:	e7d9      	b.n	8025514 <__sfp+0x1c>
 8025560:	2104      	movs	r1, #4
 8025562:	4638      	mov	r0, r7
 8025564:	f7ff ff62 	bl	802542c <__sfmoreglue>
 8025568:	4604      	mov	r4, r0
 802556a:	6030      	str	r0, [r6, #0]
 802556c:	2800      	cmp	r0, #0
 802556e:	d1d5      	bne.n	802551c <__sfp+0x24>
 8025570:	f7ff ff78 	bl	8025464 <__sfp_lock_release>
 8025574:	230c      	movs	r3, #12
 8025576:	603b      	str	r3, [r7, #0]
 8025578:	e7ee      	b.n	8025558 <__sfp+0x60>
 802557a:	bf00      	nop
 802557c:	0804be8c 	.word	0x0804be8c
 8025580:	ffff0001 	.word	0xffff0001

08025584 <_fwalk_reent>:
 8025584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025588:	4606      	mov	r6, r0
 802558a:	4688      	mov	r8, r1
 802558c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025590:	2700      	movs	r7, #0
 8025592:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025596:	f1b9 0901 	subs.w	r9, r9, #1
 802559a:	d505      	bpl.n	80255a8 <_fwalk_reent+0x24>
 802559c:	6824      	ldr	r4, [r4, #0]
 802559e:	2c00      	cmp	r4, #0
 80255a0:	d1f7      	bne.n	8025592 <_fwalk_reent+0xe>
 80255a2:	4638      	mov	r0, r7
 80255a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80255a8:	89ab      	ldrh	r3, [r5, #12]
 80255aa:	2b01      	cmp	r3, #1
 80255ac:	d907      	bls.n	80255be <_fwalk_reent+0x3a>
 80255ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80255b2:	3301      	adds	r3, #1
 80255b4:	d003      	beq.n	80255be <_fwalk_reent+0x3a>
 80255b6:	4629      	mov	r1, r5
 80255b8:	4630      	mov	r0, r6
 80255ba:	47c0      	blx	r8
 80255bc:	4307      	orrs	r7, r0
 80255be:	3568      	adds	r5, #104	; 0x68
 80255c0:	e7e9      	b.n	8025596 <_fwalk_reent+0x12>

080255c2 <rshift>:
 80255c2:	6903      	ldr	r3, [r0, #16]
 80255c4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80255c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80255cc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80255d0:	f100 0414 	add.w	r4, r0, #20
 80255d4:	dd45      	ble.n	8025662 <rshift+0xa0>
 80255d6:	f011 011f 	ands.w	r1, r1, #31
 80255da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80255de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80255e2:	d10c      	bne.n	80255fe <rshift+0x3c>
 80255e4:	f100 0710 	add.w	r7, r0, #16
 80255e8:	4629      	mov	r1, r5
 80255ea:	42b1      	cmp	r1, r6
 80255ec:	d334      	bcc.n	8025658 <rshift+0x96>
 80255ee:	1a9b      	subs	r3, r3, r2
 80255f0:	009b      	lsls	r3, r3, #2
 80255f2:	1eea      	subs	r2, r5, #3
 80255f4:	4296      	cmp	r6, r2
 80255f6:	bf38      	it	cc
 80255f8:	2300      	movcc	r3, #0
 80255fa:	4423      	add	r3, r4
 80255fc:	e015      	b.n	802562a <rshift+0x68>
 80255fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8025602:	f1c1 0820 	rsb	r8, r1, #32
 8025606:	40cf      	lsrs	r7, r1
 8025608:	f105 0e04 	add.w	lr, r5, #4
 802560c:	46a1      	mov	r9, r4
 802560e:	4576      	cmp	r6, lr
 8025610:	46f4      	mov	ip, lr
 8025612:	d815      	bhi.n	8025640 <rshift+0x7e>
 8025614:	1a9a      	subs	r2, r3, r2
 8025616:	0092      	lsls	r2, r2, #2
 8025618:	3a04      	subs	r2, #4
 802561a:	3501      	adds	r5, #1
 802561c:	42ae      	cmp	r6, r5
 802561e:	bf38      	it	cc
 8025620:	2200      	movcc	r2, #0
 8025622:	18a3      	adds	r3, r4, r2
 8025624:	50a7      	str	r7, [r4, r2]
 8025626:	b107      	cbz	r7, 802562a <rshift+0x68>
 8025628:	3304      	adds	r3, #4
 802562a:	1b1a      	subs	r2, r3, r4
 802562c:	42a3      	cmp	r3, r4
 802562e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8025632:	bf08      	it	eq
 8025634:	2300      	moveq	r3, #0
 8025636:	6102      	str	r2, [r0, #16]
 8025638:	bf08      	it	eq
 802563a:	6143      	streq	r3, [r0, #20]
 802563c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025640:	f8dc c000 	ldr.w	ip, [ip]
 8025644:	fa0c fc08 	lsl.w	ip, ip, r8
 8025648:	ea4c 0707 	orr.w	r7, ip, r7
 802564c:	f849 7b04 	str.w	r7, [r9], #4
 8025650:	f85e 7b04 	ldr.w	r7, [lr], #4
 8025654:	40cf      	lsrs	r7, r1
 8025656:	e7da      	b.n	802560e <rshift+0x4c>
 8025658:	f851 cb04 	ldr.w	ip, [r1], #4
 802565c:	f847 cf04 	str.w	ip, [r7, #4]!
 8025660:	e7c3      	b.n	80255ea <rshift+0x28>
 8025662:	4623      	mov	r3, r4
 8025664:	e7e1      	b.n	802562a <rshift+0x68>

08025666 <__hexdig_fun>:
 8025666:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802566a:	2b09      	cmp	r3, #9
 802566c:	d802      	bhi.n	8025674 <__hexdig_fun+0xe>
 802566e:	3820      	subs	r0, #32
 8025670:	b2c0      	uxtb	r0, r0
 8025672:	4770      	bx	lr
 8025674:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8025678:	2b05      	cmp	r3, #5
 802567a:	d801      	bhi.n	8025680 <__hexdig_fun+0x1a>
 802567c:	3847      	subs	r0, #71	; 0x47
 802567e:	e7f7      	b.n	8025670 <__hexdig_fun+0xa>
 8025680:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8025684:	2b05      	cmp	r3, #5
 8025686:	d801      	bhi.n	802568c <__hexdig_fun+0x26>
 8025688:	3827      	subs	r0, #39	; 0x27
 802568a:	e7f1      	b.n	8025670 <__hexdig_fun+0xa>
 802568c:	2000      	movs	r0, #0
 802568e:	4770      	bx	lr

08025690 <__gethex>:
 8025690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025694:	ed2d 8b02 	vpush	{d8}
 8025698:	b089      	sub	sp, #36	; 0x24
 802569a:	ee08 0a10 	vmov	s16, r0
 802569e:	9304      	str	r3, [sp, #16]
 80256a0:	4bb4      	ldr	r3, [pc, #720]	; (8025974 <__gethex+0x2e4>)
 80256a2:	681b      	ldr	r3, [r3, #0]
 80256a4:	9301      	str	r3, [sp, #4]
 80256a6:	4618      	mov	r0, r3
 80256a8:	468b      	mov	fp, r1
 80256aa:	4690      	mov	r8, r2
 80256ac:	f7da fdea 	bl	8000284 <strlen>
 80256b0:	9b01      	ldr	r3, [sp, #4]
 80256b2:	f8db 2000 	ldr.w	r2, [fp]
 80256b6:	4403      	add	r3, r0
 80256b8:	4682      	mov	sl, r0
 80256ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80256be:	9305      	str	r3, [sp, #20]
 80256c0:	1c93      	adds	r3, r2, #2
 80256c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80256c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80256ca:	32fe      	adds	r2, #254	; 0xfe
 80256cc:	18d1      	adds	r1, r2, r3
 80256ce:	461f      	mov	r7, r3
 80256d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80256d4:	9100      	str	r1, [sp, #0]
 80256d6:	2830      	cmp	r0, #48	; 0x30
 80256d8:	d0f8      	beq.n	80256cc <__gethex+0x3c>
 80256da:	f7ff ffc4 	bl	8025666 <__hexdig_fun>
 80256de:	4604      	mov	r4, r0
 80256e0:	2800      	cmp	r0, #0
 80256e2:	d13a      	bne.n	802575a <__gethex+0xca>
 80256e4:	9901      	ldr	r1, [sp, #4]
 80256e6:	4652      	mov	r2, sl
 80256e8:	4638      	mov	r0, r7
 80256ea:	f7fe f813 	bl	8023714 <strncmp>
 80256ee:	4605      	mov	r5, r0
 80256f0:	2800      	cmp	r0, #0
 80256f2:	d168      	bne.n	80257c6 <__gethex+0x136>
 80256f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80256f8:	eb07 060a 	add.w	r6, r7, sl
 80256fc:	f7ff ffb3 	bl	8025666 <__hexdig_fun>
 8025700:	2800      	cmp	r0, #0
 8025702:	d062      	beq.n	80257ca <__gethex+0x13a>
 8025704:	4633      	mov	r3, r6
 8025706:	7818      	ldrb	r0, [r3, #0]
 8025708:	2830      	cmp	r0, #48	; 0x30
 802570a:	461f      	mov	r7, r3
 802570c:	f103 0301 	add.w	r3, r3, #1
 8025710:	d0f9      	beq.n	8025706 <__gethex+0x76>
 8025712:	f7ff ffa8 	bl	8025666 <__hexdig_fun>
 8025716:	2301      	movs	r3, #1
 8025718:	fab0 f480 	clz	r4, r0
 802571c:	0964      	lsrs	r4, r4, #5
 802571e:	4635      	mov	r5, r6
 8025720:	9300      	str	r3, [sp, #0]
 8025722:	463a      	mov	r2, r7
 8025724:	4616      	mov	r6, r2
 8025726:	3201      	adds	r2, #1
 8025728:	7830      	ldrb	r0, [r6, #0]
 802572a:	f7ff ff9c 	bl	8025666 <__hexdig_fun>
 802572e:	2800      	cmp	r0, #0
 8025730:	d1f8      	bne.n	8025724 <__gethex+0x94>
 8025732:	9901      	ldr	r1, [sp, #4]
 8025734:	4652      	mov	r2, sl
 8025736:	4630      	mov	r0, r6
 8025738:	f7fd ffec 	bl	8023714 <strncmp>
 802573c:	b980      	cbnz	r0, 8025760 <__gethex+0xd0>
 802573e:	b94d      	cbnz	r5, 8025754 <__gethex+0xc4>
 8025740:	eb06 050a 	add.w	r5, r6, sl
 8025744:	462a      	mov	r2, r5
 8025746:	4616      	mov	r6, r2
 8025748:	3201      	adds	r2, #1
 802574a:	7830      	ldrb	r0, [r6, #0]
 802574c:	f7ff ff8b 	bl	8025666 <__hexdig_fun>
 8025750:	2800      	cmp	r0, #0
 8025752:	d1f8      	bne.n	8025746 <__gethex+0xb6>
 8025754:	1bad      	subs	r5, r5, r6
 8025756:	00ad      	lsls	r5, r5, #2
 8025758:	e004      	b.n	8025764 <__gethex+0xd4>
 802575a:	2400      	movs	r4, #0
 802575c:	4625      	mov	r5, r4
 802575e:	e7e0      	b.n	8025722 <__gethex+0x92>
 8025760:	2d00      	cmp	r5, #0
 8025762:	d1f7      	bne.n	8025754 <__gethex+0xc4>
 8025764:	7833      	ldrb	r3, [r6, #0]
 8025766:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802576a:	2b50      	cmp	r3, #80	; 0x50
 802576c:	d13b      	bne.n	80257e6 <__gethex+0x156>
 802576e:	7873      	ldrb	r3, [r6, #1]
 8025770:	2b2b      	cmp	r3, #43	; 0x2b
 8025772:	d02c      	beq.n	80257ce <__gethex+0x13e>
 8025774:	2b2d      	cmp	r3, #45	; 0x2d
 8025776:	d02e      	beq.n	80257d6 <__gethex+0x146>
 8025778:	1c71      	adds	r1, r6, #1
 802577a:	f04f 0900 	mov.w	r9, #0
 802577e:	7808      	ldrb	r0, [r1, #0]
 8025780:	f7ff ff71 	bl	8025666 <__hexdig_fun>
 8025784:	1e43      	subs	r3, r0, #1
 8025786:	b2db      	uxtb	r3, r3
 8025788:	2b18      	cmp	r3, #24
 802578a:	d82c      	bhi.n	80257e6 <__gethex+0x156>
 802578c:	f1a0 0210 	sub.w	r2, r0, #16
 8025790:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8025794:	f7ff ff67 	bl	8025666 <__hexdig_fun>
 8025798:	1e43      	subs	r3, r0, #1
 802579a:	b2db      	uxtb	r3, r3
 802579c:	2b18      	cmp	r3, #24
 802579e:	d91d      	bls.n	80257dc <__gethex+0x14c>
 80257a0:	f1b9 0f00 	cmp.w	r9, #0
 80257a4:	d000      	beq.n	80257a8 <__gethex+0x118>
 80257a6:	4252      	negs	r2, r2
 80257a8:	4415      	add	r5, r2
 80257aa:	f8cb 1000 	str.w	r1, [fp]
 80257ae:	b1e4      	cbz	r4, 80257ea <__gethex+0x15a>
 80257b0:	9b00      	ldr	r3, [sp, #0]
 80257b2:	2b00      	cmp	r3, #0
 80257b4:	bf14      	ite	ne
 80257b6:	2700      	movne	r7, #0
 80257b8:	2706      	moveq	r7, #6
 80257ba:	4638      	mov	r0, r7
 80257bc:	b009      	add	sp, #36	; 0x24
 80257be:	ecbd 8b02 	vpop	{d8}
 80257c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257c6:	463e      	mov	r6, r7
 80257c8:	4625      	mov	r5, r4
 80257ca:	2401      	movs	r4, #1
 80257cc:	e7ca      	b.n	8025764 <__gethex+0xd4>
 80257ce:	f04f 0900 	mov.w	r9, #0
 80257d2:	1cb1      	adds	r1, r6, #2
 80257d4:	e7d3      	b.n	802577e <__gethex+0xee>
 80257d6:	f04f 0901 	mov.w	r9, #1
 80257da:	e7fa      	b.n	80257d2 <__gethex+0x142>
 80257dc:	230a      	movs	r3, #10
 80257de:	fb03 0202 	mla	r2, r3, r2, r0
 80257e2:	3a10      	subs	r2, #16
 80257e4:	e7d4      	b.n	8025790 <__gethex+0x100>
 80257e6:	4631      	mov	r1, r6
 80257e8:	e7df      	b.n	80257aa <__gethex+0x11a>
 80257ea:	1bf3      	subs	r3, r6, r7
 80257ec:	3b01      	subs	r3, #1
 80257ee:	4621      	mov	r1, r4
 80257f0:	2b07      	cmp	r3, #7
 80257f2:	dc0b      	bgt.n	802580c <__gethex+0x17c>
 80257f4:	ee18 0a10 	vmov	r0, s16
 80257f8:	f000 fada 	bl	8025db0 <_Balloc>
 80257fc:	4604      	mov	r4, r0
 80257fe:	b940      	cbnz	r0, 8025812 <__gethex+0x182>
 8025800:	4b5d      	ldr	r3, [pc, #372]	; (8025978 <__gethex+0x2e8>)
 8025802:	4602      	mov	r2, r0
 8025804:	21de      	movs	r1, #222	; 0xde
 8025806:	485d      	ldr	r0, [pc, #372]	; (802597c <__gethex+0x2ec>)
 8025808:	f7fc ffcc 	bl	80227a4 <__assert_func>
 802580c:	3101      	adds	r1, #1
 802580e:	105b      	asrs	r3, r3, #1
 8025810:	e7ee      	b.n	80257f0 <__gethex+0x160>
 8025812:	f100 0914 	add.w	r9, r0, #20
 8025816:	f04f 0b00 	mov.w	fp, #0
 802581a:	f1ca 0301 	rsb	r3, sl, #1
 802581e:	f8cd 9008 	str.w	r9, [sp, #8]
 8025822:	f8cd b000 	str.w	fp, [sp]
 8025826:	9306      	str	r3, [sp, #24]
 8025828:	42b7      	cmp	r7, r6
 802582a:	d340      	bcc.n	80258ae <__gethex+0x21e>
 802582c:	9802      	ldr	r0, [sp, #8]
 802582e:	9b00      	ldr	r3, [sp, #0]
 8025830:	f840 3b04 	str.w	r3, [r0], #4
 8025834:	eba0 0009 	sub.w	r0, r0, r9
 8025838:	1080      	asrs	r0, r0, #2
 802583a:	0146      	lsls	r6, r0, #5
 802583c:	6120      	str	r0, [r4, #16]
 802583e:	4618      	mov	r0, r3
 8025840:	f000 fba8 	bl	8025f94 <__hi0bits>
 8025844:	1a30      	subs	r0, r6, r0
 8025846:	f8d8 6000 	ldr.w	r6, [r8]
 802584a:	42b0      	cmp	r0, r6
 802584c:	dd63      	ble.n	8025916 <__gethex+0x286>
 802584e:	1b87      	subs	r7, r0, r6
 8025850:	4639      	mov	r1, r7
 8025852:	4620      	mov	r0, r4
 8025854:	f000 ff4c 	bl	80266f0 <__any_on>
 8025858:	4682      	mov	sl, r0
 802585a:	b1a8      	cbz	r0, 8025888 <__gethex+0x1f8>
 802585c:	1e7b      	subs	r3, r7, #1
 802585e:	1159      	asrs	r1, r3, #5
 8025860:	f003 021f 	and.w	r2, r3, #31
 8025864:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8025868:	f04f 0a01 	mov.w	sl, #1
 802586c:	fa0a f202 	lsl.w	r2, sl, r2
 8025870:	420a      	tst	r2, r1
 8025872:	d009      	beq.n	8025888 <__gethex+0x1f8>
 8025874:	4553      	cmp	r3, sl
 8025876:	dd05      	ble.n	8025884 <__gethex+0x1f4>
 8025878:	1eb9      	subs	r1, r7, #2
 802587a:	4620      	mov	r0, r4
 802587c:	f000 ff38 	bl	80266f0 <__any_on>
 8025880:	2800      	cmp	r0, #0
 8025882:	d145      	bne.n	8025910 <__gethex+0x280>
 8025884:	f04f 0a02 	mov.w	sl, #2
 8025888:	4639      	mov	r1, r7
 802588a:	4620      	mov	r0, r4
 802588c:	f7ff fe99 	bl	80255c2 <rshift>
 8025890:	443d      	add	r5, r7
 8025892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8025896:	42ab      	cmp	r3, r5
 8025898:	da4c      	bge.n	8025934 <__gethex+0x2a4>
 802589a:	ee18 0a10 	vmov	r0, s16
 802589e:	4621      	mov	r1, r4
 80258a0:	f000 fac6 	bl	8025e30 <_Bfree>
 80258a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80258a6:	2300      	movs	r3, #0
 80258a8:	6013      	str	r3, [r2, #0]
 80258aa:	27a3      	movs	r7, #163	; 0xa3
 80258ac:	e785      	b.n	80257ba <__gethex+0x12a>
 80258ae:	1e73      	subs	r3, r6, #1
 80258b0:	9a05      	ldr	r2, [sp, #20]
 80258b2:	9303      	str	r3, [sp, #12]
 80258b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80258b8:	4293      	cmp	r3, r2
 80258ba:	d019      	beq.n	80258f0 <__gethex+0x260>
 80258bc:	f1bb 0f20 	cmp.w	fp, #32
 80258c0:	d107      	bne.n	80258d2 <__gethex+0x242>
 80258c2:	9b02      	ldr	r3, [sp, #8]
 80258c4:	9a00      	ldr	r2, [sp, #0]
 80258c6:	f843 2b04 	str.w	r2, [r3], #4
 80258ca:	9302      	str	r3, [sp, #8]
 80258cc:	2300      	movs	r3, #0
 80258ce:	9300      	str	r3, [sp, #0]
 80258d0:	469b      	mov	fp, r3
 80258d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80258d6:	f7ff fec6 	bl	8025666 <__hexdig_fun>
 80258da:	9b00      	ldr	r3, [sp, #0]
 80258dc:	f000 000f 	and.w	r0, r0, #15
 80258e0:	fa00 f00b 	lsl.w	r0, r0, fp
 80258e4:	4303      	orrs	r3, r0
 80258e6:	9300      	str	r3, [sp, #0]
 80258e8:	f10b 0b04 	add.w	fp, fp, #4
 80258ec:	9b03      	ldr	r3, [sp, #12]
 80258ee:	e00d      	b.n	802590c <__gethex+0x27c>
 80258f0:	9b03      	ldr	r3, [sp, #12]
 80258f2:	9a06      	ldr	r2, [sp, #24]
 80258f4:	4413      	add	r3, r2
 80258f6:	42bb      	cmp	r3, r7
 80258f8:	d3e0      	bcc.n	80258bc <__gethex+0x22c>
 80258fa:	4618      	mov	r0, r3
 80258fc:	9901      	ldr	r1, [sp, #4]
 80258fe:	9307      	str	r3, [sp, #28]
 8025900:	4652      	mov	r2, sl
 8025902:	f7fd ff07 	bl	8023714 <strncmp>
 8025906:	9b07      	ldr	r3, [sp, #28]
 8025908:	2800      	cmp	r0, #0
 802590a:	d1d7      	bne.n	80258bc <__gethex+0x22c>
 802590c:	461e      	mov	r6, r3
 802590e:	e78b      	b.n	8025828 <__gethex+0x198>
 8025910:	f04f 0a03 	mov.w	sl, #3
 8025914:	e7b8      	b.n	8025888 <__gethex+0x1f8>
 8025916:	da0a      	bge.n	802592e <__gethex+0x29e>
 8025918:	1a37      	subs	r7, r6, r0
 802591a:	4621      	mov	r1, r4
 802591c:	ee18 0a10 	vmov	r0, s16
 8025920:	463a      	mov	r2, r7
 8025922:	f000 fca1 	bl	8026268 <__lshift>
 8025926:	1bed      	subs	r5, r5, r7
 8025928:	4604      	mov	r4, r0
 802592a:	f100 0914 	add.w	r9, r0, #20
 802592e:	f04f 0a00 	mov.w	sl, #0
 8025932:	e7ae      	b.n	8025892 <__gethex+0x202>
 8025934:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8025938:	42a8      	cmp	r0, r5
 802593a:	dd72      	ble.n	8025a22 <__gethex+0x392>
 802593c:	1b45      	subs	r5, r0, r5
 802593e:	42ae      	cmp	r6, r5
 8025940:	dc36      	bgt.n	80259b0 <__gethex+0x320>
 8025942:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8025946:	2b02      	cmp	r3, #2
 8025948:	d02a      	beq.n	80259a0 <__gethex+0x310>
 802594a:	2b03      	cmp	r3, #3
 802594c:	d02c      	beq.n	80259a8 <__gethex+0x318>
 802594e:	2b01      	cmp	r3, #1
 8025950:	d11c      	bne.n	802598c <__gethex+0x2fc>
 8025952:	42ae      	cmp	r6, r5
 8025954:	d11a      	bne.n	802598c <__gethex+0x2fc>
 8025956:	2e01      	cmp	r6, #1
 8025958:	d112      	bne.n	8025980 <__gethex+0x2f0>
 802595a:	9a04      	ldr	r2, [sp, #16]
 802595c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8025960:	6013      	str	r3, [r2, #0]
 8025962:	2301      	movs	r3, #1
 8025964:	6123      	str	r3, [r4, #16]
 8025966:	f8c9 3000 	str.w	r3, [r9]
 802596a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802596c:	2762      	movs	r7, #98	; 0x62
 802596e:	601c      	str	r4, [r3, #0]
 8025970:	e723      	b.n	80257ba <__gethex+0x12a>
 8025972:	bf00      	nop
 8025974:	0804c184 	.word	0x0804c184
 8025978:	0804c0a8 	.word	0x0804c0a8
 802597c:	0804c11c 	.word	0x0804c11c
 8025980:	1e71      	subs	r1, r6, #1
 8025982:	4620      	mov	r0, r4
 8025984:	f000 feb4 	bl	80266f0 <__any_on>
 8025988:	2800      	cmp	r0, #0
 802598a:	d1e6      	bne.n	802595a <__gethex+0x2ca>
 802598c:	ee18 0a10 	vmov	r0, s16
 8025990:	4621      	mov	r1, r4
 8025992:	f000 fa4d 	bl	8025e30 <_Bfree>
 8025996:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025998:	2300      	movs	r3, #0
 802599a:	6013      	str	r3, [r2, #0]
 802599c:	2750      	movs	r7, #80	; 0x50
 802599e:	e70c      	b.n	80257ba <__gethex+0x12a>
 80259a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80259a2:	2b00      	cmp	r3, #0
 80259a4:	d1f2      	bne.n	802598c <__gethex+0x2fc>
 80259a6:	e7d8      	b.n	802595a <__gethex+0x2ca>
 80259a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80259aa:	2b00      	cmp	r3, #0
 80259ac:	d1d5      	bne.n	802595a <__gethex+0x2ca>
 80259ae:	e7ed      	b.n	802598c <__gethex+0x2fc>
 80259b0:	1e6f      	subs	r7, r5, #1
 80259b2:	f1ba 0f00 	cmp.w	sl, #0
 80259b6:	d131      	bne.n	8025a1c <__gethex+0x38c>
 80259b8:	b127      	cbz	r7, 80259c4 <__gethex+0x334>
 80259ba:	4639      	mov	r1, r7
 80259bc:	4620      	mov	r0, r4
 80259be:	f000 fe97 	bl	80266f0 <__any_on>
 80259c2:	4682      	mov	sl, r0
 80259c4:	117b      	asrs	r3, r7, #5
 80259c6:	2101      	movs	r1, #1
 80259c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80259cc:	f007 071f 	and.w	r7, r7, #31
 80259d0:	fa01 f707 	lsl.w	r7, r1, r7
 80259d4:	421f      	tst	r7, r3
 80259d6:	4629      	mov	r1, r5
 80259d8:	4620      	mov	r0, r4
 80259da:	bf18      	it	ne
 80259dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80259e0:	1b76      	subs	r6, r6, r5
 80259e2:	f7ff fdee 	bl	80255c2 <rshift>
 80259e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80259ea:	2702      	movs	r7, #2
 80259ec:	f1ba 0f00 	cmp.w	sl, #0
 80259f0:	d048      	beq.n	8025a84 <__gethex+0x3f4>
 80259f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80259f6:	2b02      	cmp	r3, #2
 80259f8:	d015      	beq.n	8025a26 <__gethex+0x396>
 80259fa:	2b03      	cmp	r3, #3
 80259fc:	d017      	beq.n	8025a2e <__gethex+0x39e>
 80259fe:	2b01      	cmp	r3, #1
 8025a00:	d109      	bne.n	8025a16 <__gethex+0x386>
 8025a02:	f01a 0f02 	tst.w	sl, #2
 8025a06:	d006      	beq.n	8025a16 <__gethex+0x386>
 8025a08:	f8d9 0000 	ldr.w	r0, [r9]
 8025a0c:	ea4a 0a00 	orr.w	sl, sl, r0
 8025a10:	f01a 0f01 	tst.w	sl, #1
 8025a14:	d10e      	bne.n	8025a34 <__gethex+0x3a4>
 8025a16:	f047 0710 	orr.w	r7, r7, #16
 8025a1a:	e033      	b.n	8025a84 <__gethex+0x3f4>
 8025a1c:	f04f 0a01 	mov.w	sl, #1
 8025a20:	e7d0      	b.n	80259c4 <__gethex+0x334>
 8025a22:	2701      	movs	r7, #1
 8025a24:	e7e2      	b.n	80259ec <__gethex+0x35c>
 8025a26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025a28:	f1c3 0301 	rsb	r3, r3, #1
 8025a2c:	9315      	str	r3, [sp, #84]	; 0x54
 8025a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025a30:	2b00      	cmp	r3, #0
 8025a32:	d0f0      	beq.n	8025a16 <__gethex+0x386>
 8025a34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8025a38:	f104 0314 	add.w	r3, r4, #20
 8025a3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8025a40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8025a44:	f04f 0c00 	mov.w	ip, #0
 8025a48:	4618      	mov	r0, r3
 8025a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8025a4e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8025a52:	d01c      	beq.n	8025a8e <__gethex+0x3fe>
 8025a54:	3201      	adds	r2, #1
 8025a56:	6002      	str	r2, [r0, #0]
 8025a58:	2f02      	cmp	r7, #2
 8025a5a:	f104 0314 	add.w	r3, r4, #20
 8025a5e:	d13f      	bne.n	8025ae0 <__gethex+0x450>
 8025a60:	f8d8 2000 	ldr.w	r2, [r8]
 8025a64:	3a01      	subs	r2, #1
 8025a66:	42b2      	cmp	r2, r6
 8025a68:	d10a      	bne.n	8025a80 <__gethex+0x3f0>
 8025a6a:	1171      	asrs	r1, r6, #5
 8025a6c:	2201      	movs	r2, #1
 8025a6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8025a72:	f006 061f 	and.w	r6, r6, #31
 8025a76:	fa02 f606 	lsl.w	r6, r2, r6
 8025a7a:	421e      	tst	r6, r3
 8025a7c:	bf18      	it	ne
 8025a7e:	4617      	movne	r7, r2
 8025a80:	f047 0720 	orr.w	r7, r7, #32
 8025a84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025a86:	601c      	str	r4, [r3, #0]
 8025a88:	9b04      	ldr	r3, [sp, #16]
 8025a8a:	601d      	str	r5, [r3, #0]
 8025a8c:	e695      	b.n	80257ba <__gethex+0x12a>
 8025a8e:	4299      	cmp	r1, r3
 8025a90:	f843 cc04 	str.w	ip, [r3, #-4]
 8025a94:	d8d8      	bhi.n	8025a48 <__gethex+0x3b8>
 8025a96:	68a3      	ldr	r3, [r4, #8]
 8025a98:	459b      	cmp	fp, r3
 8025a9a:	db19      	blt.n	8025ad0 <__gethex+0x440>
 8025a9c:	6861      	ldr	r1, [r4, #4]
 8025a9e:	ee18 0a10 	vmov	r0, s16
 8025aa2:	3101      	adds	r1, #1
 8025aa4:	f000 f984 	bl	8025db0 <_Balloc>
 8025aa8:	4681      	mov	r9, r0
 8025aaa:	b918      	cbnz	r0, 8025ab4 <__gethex+0x424>
 8025aac:	4b1a      	ldr	r3, [pc, #104]	; (8025b18 <__gethex+0x488>)
 8025aae:	4602      	mov	r2, r0
 8025ab0:	2184      	movs	r1, #132	; 0x84
 8025ab2:	e6a8      	b.n	8025806 <__gethex+0x176>
 8025ab4:	6922      	ldr	r2, [r4, #16]
 8025ab6:	3202      	adds	r2, #2
 8025ab8:	f104 010c 	add.w	r1, r4, #12
 8025abc:	0092      	lsls	r2, r2, #2
 8025abe:	300c      	adds	r0, #12
 8025ac0:	f7fc feea 	bl	8022898 <memcpy>
 8025ac4:	4621      	mov	r1, r4
 8025ac6:	ee18 0a10 	vmov	r0, s16
 8025aca:	f000 f9b1 	bl	8025e30 <_Bfree>
 8025ace:	464c      	mov	r4, r9
 8025ad0:	6923      	ldr	r3, [r4, #16]
 8025ad2:	1c5a      	adds	r2, r3, #1
 8025ad4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8025ad8:	6122      	str	r2, [r4, #16]
 8025ada:	2201      	movs	r2, #1
 8025adc:	615a      	str	r2, [r3, #20]
 8025ade:	e7bb      	b.n	8025a58 <__gethex+0x3c8>
 8025ae0:	6922      	ldr	r2, [r4, #16]
 8025ae2:	455a      	cmp	r2, fp
 8025ae4:	dd0b      	ble.n	8025afe <__gethex+0x46e>
 8025ae6:	2101      	movs	r1, #1
 8025ae8:	4620      	mov	r0, r4
 8025aea:	f7ff fd6a 	bl	80255c2 <rshift>
 8025aee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8025af2:	3501      	adds	r5, #1
 8025af4:	42ab      	cmp	r3, r5
 8025af6:	f6ff aed0 	blt.w	802589a <__gethex+0x20a>
 8025afa:	2701      	movs	r7, #1
 8025afc:	e7c0      	b.n	8025a80 <__gethex+0x3f0>
 8025afe:	f016 061f 	ands.w	r6, r6, #31
 8025b02:	d0fa      	beq.n	8025afa <__gethex+0x46a>
 8025b04:	4453      	add	r3, sl
 8025b06:	f1c6 0620 	rsb	r6, r6, #32
 8025b0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8025b0e:	f000 fa41 	bl	8025f94 <__hi0bits>
 8025b12:	42b0      	cmp	r0, r6
 8025b14:	dbe7      	blt.n	8025ae6 <__gethex+0x456>
 8025b16:	e7f0      	b.n	8025afa <__gethex+0x46a>
 8025b18:	0804c0a8 	.word	0x0804c0a8

08025b1c <L_shift>:
 8025b1c:	f1c2 0208 	rsb	r2, r2, #8
 8025b20:	0092      	lsls	r2, r2, #2
 8025b22:	b570      	push	{r4, r5, r6, lr}
 8025b24:	f1c2 0620 	rsb	r6, r2, #32
 8025b28:	6843      	ldr	r3, [r0, #4]
 8025b2a:	6804      	ldr	r4, [r0, #0]
 8025b2c:	fa03 f506 	lsl.w	r5, r3, r6
 8025b30:	432c      	orrs	r4, r5
 8025b32:	40d3      	lsrs	r3, r2
 8025b34:	6004      	str	r4, [r0, #0]
 8025b36:	f840 3f04 	str.w	r3, [r0, #4]!
 8025b3a:	4288      	cmp	r0, r1
 8025b3c:	d3f4      	bcc.n	8025b28 <L_shift+0xc>
 8025b3e:	bd70      	pop	{r4, r5, r6, pc}

08025b40 <__match>:
 8025b40:	b530      	push	{r4, r5, lr}
 8025b42:	6803      	ldr	r3, [r0, #0]
 8025b44:	3301      	adds	r3, #1
 8025b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025b4a:	b914      	cbnz	r4, 8025b52 <__match+0x12>
 8025b4c:	6003      	str	r3, [r0, #0]
 8025b4e:	2001      	movs	r0, #1
 8025b50:	bd30      	pop	{r4, r5, pc}
 8025b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025b56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8025b5a:	2d19      	cmp	r5, #25
 8025b5c:	bf98      	it	ls
 8025b5e:	3220      	addls	r2, #32
 8025b60:	42a2      	cmp	r2, r4
 8025b62:	d0f0      	beq.n	8025b46 <__match+0x6>
 8025b64:	2000      	movs	r0, #0
 8025b66:	e7f3      	b.n	8025b50 <__match+0x10>

08025b68 <__hexnan>:
 8025b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b6c:	680b      	ldr	r3, [r1, #0]
 8025b6e:	115e      	asrs	r6, r3, #5
 8025b70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8025b74:	f013 031f 	ands.w	r3, r3, #31
 8025b78:	b087      	sub	sp, #28
 8025b7a:	bf18      	it	ne
 8025b7c:	3604      	addne	r6, #4
 8025b7e:	2500      	movs	r5, #0
 8025b80:	1f37      	subs	r7, r6, #4
 8025b82:	4690      	mov	r8, r2
 8025b84:	6802      	ldr	r2, [r0, #0]
 8025b86:	9301      	str	r3, [sp, #4]
 8025b88:	4682      	mov	sl, r0
 8025b8a:	f846 5c04 	str.w	r5, [r6, #-4]
 8025b8e:	46b9      	mov	r9, r7
 8025b90:	463c      	mov	r4, r7
 8025b92:	9502      	str	r5, [sp, #8]
 8025b94:	46ab      	mov	fp, r5
 8025b96:	7851      	ldrb	r1, [r2, #1]
 8025b98:	1c53      	adds	r3, r2, #1
 8025b9a:	9303      	str	r3, [sp, #12]
 8025b9c:	b341      	cbz	r1, 8025bf0 <__hexnan+0x88>
 8025b9e:	4608      	mov	r0, r1
 8025ba0:	9205      	str	r2, [sp, #20]
 8025ba2:	9104      	str	r1, [sp, #16]
 8025ba4:	f7ff fd5f 	bl	8025666 <__hexdig_fun>
 8025ba8:	2800      	cmp	r0, #0
 8025baa:	d14f      	bne.n	8025c4c <__hexnan+0xe4>
 8025bac:	9904      	ldr	r1, [sp, #16]
 8025bae:	9a05      	ldr	r2, [sp, #20]
 8025bb0:	2920      	cmp	r1, #32
 8025bb2:	d818      	bhi.n	8025be6 <__hexnan+0x7e>
 8025bb4:	9b02      	ldr	r3, [sp, #8]
 8025bb6:	459b      	cmp	fp, r3
 8025bb8:	dd13      	ble.n	8025be2 <__hexnan+0x7a>
 8025bba:	454c      	cmp	r4, r9
 8025bbc:	d206      	bcs.n	8025bcc <__hexnan+0x64>
 8025bbe:	2d07      	cmp	r5, #7
 8025bc0:	dc04      	bgt.n	8025bcc <__hexnan+0x64>
 8025bc2:	462a      	mov	r2, r5
 8025bc4:	4649      	mov	r1, r9
 8025bc6:	4620      	mov	r0, r4
 8025bc8:	f7ff ffa8 	bl	8025b1c <L_shift>
 8025bcc:	4544      	cmp	r4, r8
 8025bce:	d950      	bls.n	8025c72 <__hexnan+0x10a>
 8025bd0:	2300      	movs	r3, #0
 8025bd2:	f1a4 0904 	sub.w	r9, r4, #4
 8025bd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8025bda:	f8cd b008 	str.w	fp, [sp, #8]
 8025bde:	464c      	mov	r4, r9
 8025be0:	461d      	mov	r5, r3
 8025be2:	9a03      	ldr	r2, [sp, #12]
 8025be4:	e7d7      	b.n	8025b96 <__hexnan+0x2e>
 8025be6:	2929      	cmp	r1, #41	; 0x29
 8025be8:	d156      	bne.n	8025c98 <__hexnan+0x130>
 8025bea:	3202      	adds	r2, #2
 8025bec:	f8ca 2000 	str.w	r2, [sl]
 8025bf0:	f1bb 0f00 	cmp.w	fp, #0
 8025bf4:	d050      	beq.n	8025c98 <__hexnan+0x130>
 8025bf6:	454c      	cmp	r4, r9
 8025bf8:	d206      	bcs.n	8025c08 <__hexnan+0xa0>
 8025bfa:	2d07      	cmp	r5, #7
 8025bfc:	dc04      	bgt.n	8025c08 <__hexnan+0xa0>
 8025bfe:	462a      	mov	r2, r5
 8025c00:	4649      	mov	r1, r9
 8025c02:	4620      	mov	r0, r4
 8025c04:	f7ff ff8a 	bl	8025b1c <L_shift>
 8025c08:	4544      	cmp	r4, r8
 8025c0a:	d934      	bls.n	8025c76 <__hexnan+0x10e>
 8025c0c:	f1a8 0204 	sub.w	r2, r8, #4
 8025c10:	4623      	mov	r3, r4
 8025c12:	f853 1b04 	ldr.w	r1, [r3], #4
 8025c16:	f842 1f04 	str.w	r1, [r2, #4]!
 8025c1a:	429f      	cmp	r7, r3
 8025c1c:	d2f9      	bcs.n	8025c12 <__hexnan+0xaa>
 8025c1e:	1b3b      	subs	r3, r7, r4
 8025c20:	f023 0303 	bic.w	r3, r3, #3
 8025c24:	3304      	adds	r3, #4
 8025c26:	3401      	adds	r4, #1
 8025c28:	3e03      	subs	r6, #3
 8025c2a:	42b4      	cmp	r4, r6
 8025c2c:	bf88      	it	hi
 8025c2e:	2304      	movhi	r3, #4
 8025c30:	4443      	add	r3, r8
 8025c32:	2200      	movs	r2, #0
 8025c34:	f843 2b04 	str.w	r2, [r3], #4
 8025c38:	429f      	cmp	r7, r3
 8025c3a:	d2fb      	bcs.n	8025c34 <__hexnan+0xcc>
 8025c3c:	683b      	ldr	r3, [r7, #0]
 8025c3e:	b91b      	cbnz	r3, 8025c48 <__hexnan+0xe0>
 8025c40:	4547      	cmp	r7, r8
 8025c42:	d127      	bne.n	8025c94 <__hexnan+0x12c>
 8025c44:	2301      	movs	r3, #1
 8025c46:	603b      	str	r3, [r7, #0]
 8025c48:	2005      	movs	r0, #5
 8025c4a:	e026      	b.n	8025c9a <__hexnan+0x132>
 8025c4c:	3501      	adds	r5, #1
 8025c4e:	2d08      	cmp	r5, #8
 8025c50:	f10b 0b01 	add.w	fp, fp, #1
 8025c54:	dd06      	ble.n	8025c64 <__hexnan+0xfc>
 8025c56:	4544      	cmp	r4, r8
 8025c58:	d9c3      	bls.n	8025be2 <__hexnan+0x7a>
 8025c5a:	2300      	movs	r3, #0
 8025c5c:	f844 3c04 	str.w	r3, [r4, #-4]
 8025c60:	2501      	movs	r5, #1
 8025c62:	3c04      	subs	r4, #4
 8025c64:	6822      	ldr	r2, [r4, #0]
 8025c66:	f000 000f 	and.w	r0, r0, #15
 8025c6a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8025c6e:	6022      	str	r2, [r4, #0]
 8025c70:	e7b7      	b.n	8025be2 <__hexnan+0x7a>
 8025c72:	2508      	movs	r5, #8
 8025c74:	e7b5      	b.n	8025be2 <__hexnan+0x7a>
 8025c76:	9b01      	ldr	r3, [sp, #4]
 8025c78:	2b00      	cmp	r3, #0
 8025c7a:	d0df      	beq.n	8025c3c <__hexnan+0xd4>
 8025c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8025c80:	f1c3 0320 	rsb	r3, r3, #32
 8025c84:	fa22 f303 	lsr.w	r3, r2, r3
 8025c88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8025c8c:	401a      	ands	r2, r3
 8025c8e:	f846 2c04 	str.w	r2, [r6, #-4]
 8025c92:	e7d3      	b.n	8025c3c <__hexnan+0xd4>
 8025c94:	3f04      	subs	r7, #4
 8025c96:	e7d1      	b.n	8025c3c <__hexnan+0xd4>
 8025c98:	2004      	movs	r0, #4
 8025c9a:	b007      	add	sp, #28
 8025c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025ca0 <_localeconv_r>:
 8025ca0:	4800      	ldr	r0, [pc, #0]	; (8025ca4 <_localeconv_r+0x4>)
 8025ca2:	4770      	bx	lr
 8025ca4:	20000410 	.word	0x20000410

08025ca8 <__swhatbuf_r>:
 8025ca8:	b570      	push	{r4, r5, r6, lr}
 8025caa:	460e      	mov	r6, r1
 8025cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025cb0:	2900      	cmp	r1, #0
 8025cb2:	b096      	sub	sp, #88	; 0x58
 8025cb4:	4614      	mov	r4, r2
 8025cb6:	461d      	mov	r5, r3
 8025cb8:	da08      	bge.n	8025ccc <__swhatbuf_r+0x24>
 8025cba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8025cbe:	2200      	movs	r2, #0
 8025cc0:	602a      	str	r2, [r5, #0]
 8025cc2:	061a      	lsls	r2, r3, #24
 8025cc4:	d410      	bmi.n	8025ce8 <__swhatbuf_r+0x40>
 8025cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025cca:	e00e      	b.n	8025cea <__swhatbuf_r+0x42>
 8025ccc:	466a      	mov	r2, sp
 8025cce:	f000 ff2d 	bl	8026b2c <_fstat_r>
 8025cd2:	2800      	cmp	r0, #0
 8025cd4:	dbf1      	blt.n	8025cba <__swhatbuf_r+0x12>
 8025cd6:	9a01      	ldr	r2, [sp, #4]
 8025cd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025cdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025ce0:	425a      	negs	r2, r3
 8025ce2:	415a      	adcs	r2, r3
 8025ce4:	602a      	str	r2, [r5, #0]
 8025ce6:	e7ee      	b.n	8025cc6 <__swhatbuf_r+0x1e>
 8025ce8:	2340      	movs	r3, #64	; 0x40
 8025cea:	2000      	movs	r0, #0
 8025cec:	6023      	str	r3, [r4, #0]
 8025cee:	b016      	add	sp, #88	; 0x58
 8025cf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08025cf4 <__smakebuf_r>:
 8025cf4:	898b      	ldrh	r3, [r1, #12]
 8025cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025cf8:	079d      	lsls	r5, r3, #30
 8025cfa:	4606      	mov	r6, r0
 8025cfc:	460c      	mov	r4, r1
 8025cfe:	d507      	bpl.n	8025d10 <__smakebuf_r+0x1c>
 8025d00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025d04:	6023      	str	r3, [r4, #0]
 8025d06:	6123      	str	r3, [r4, #16]
 8025d08:	2301      	movs	r3, #1
 8025d0a:	6163      	str	r3, [r4, #20]
 8025d0c:	b002      	add	sp, #8
 8025d0e:	bd70      	pop	{r4, r5, r6, pc}
 8025d10:	ab01      	add	r3, sp, #4
 8025d12:	466a      	mov	r2, sp
 8025d14:	f7ff ffc8 	bl	8025ca8 <__swhatbuf_r>
 8025d18:	9900      	ldr	r1, [sp, #0]
 8025d1a:	4605      	mov	r5, r0
 8025d1c:	4630      	mov	r0, r6
 8025d1e:	f7fc fe6d 	bl	80229fc <_malloc_r>
 8025d22:	b948      	cbnz	r0, 8025d38 <__smakebuf_r+0x44>
 8025d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025d28:	059a      	lsls	r2, r3, #22
 8025d2a:	d4ef      	bmi.n	8025d0c <__smakebuf_r+0x18>
 8025d2c:	f023 0303 	bic.w	r3, r3, #3
 8025d30:	f043 0302 	orr.w	r3, r3, #2
 8025d34:	81a3      	strh	r3, [r4, #12]
 8025d36:	e7e3      	b.n	8025d00 <__smakebuf_r+0xc>
 8025d38:	4b0d      	ldr	r3, [pc, #52]	; (8025d70 <__smakebuf_r+0x7c>)
 8025d3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8025d3c:	89a3      	ldrh	r3, [r4, #12]
 8025d3e:	6020      	str	r0, [r4, #0]
 8025d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025d44:	81a3      	strh	r3, [r4, #12]
 8025d46:	9b00      	ldr	r3, [sp, #0]
 8025d48:	6163      	str	r3, [r4, #20]
 8025d4a:	9b01      	ldr	r3, [sp, #4]
 8025d4c:	6120      	str	r0, [r4, #16]
 8025d4e:	b15b      	cbz	r3, 8025d68 <__smakebuf_r+0x74>
 8025d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025d54:	4630      	mov	r0, r6
 8025d56:	f000 fefb 	bl	8026b50 <_isatty_r>
 8025d5a:	b128      	cbz	r0, 8025d68 <__smakebuf_r+0x74>
 8025d5c:	89a3      	ldrh	r3, [r4, #12]
 8025d5e:	f023 0303 	bic.w	r3, r3, #3
 8025d62:	f043 0301 	orr.w	r3, r3, #1
 8025d66:	81a3      	strh	r3, [r4, #12]
 8025d68:	89a0      	ldrh	r0, [r4, #12]
 8025d6a:	4305      	orrs	r5, r0
 8025d6c:	81a5      	strh	r5, [r4, #12]
 8025d6e:	e7cd      	b.n	8025d0c <__smakebuf_r+0x18>
 8025d70:	08025421 	.word	0x08025421

08025d74 <__ascii_mbtowc>:
 8025d74:	b082      	sub	sp, #8
 8025d76:	b901      	cbnz	r1, 8025d7a <__ascii_mbtowc+0x6>
 8025d78:	a901      	add	r1, sp, #4
 8025d7a:	b142      	cbz	r2, 8025d8e <__ascii_mbtowc+0x1a>
 8025d7c:	b14b      	cbz	r3, 8025d92 <__ascii_mbtowc+0x1e>
 8025d7e:	7813      	ldrb	r3, [r2, #0]
 8025d80:	600b      	str	r3, [r1, #0]
 8025d82:	7812      	ldrb	r2, [r2, #0]
 8025d84:	1e10      	subs	r0, r2, #0
 8025d86:	bf18      	it	ne
 8025d88:	2001      	movne	r0, #1
 8025d8a:	b002      	add	sp, #8
 8025d8c:	4770      	bx	lr
 8025d8e:	4610      	mov	r0, r2
 8025d90:	e7fb      	b.n	8025d8a <__ascii_mbtowc+0x16>
 8025d92:	f06f 0001 	mvn.w	r0, #1
 8025d96:	e7f8      	b.n	8025d8a <__ascii_mbtowc+0x16>

08025d98 <__malloc_lock>:
 8025d98:	4801      	ldr	r0, [pc, #4]	; (8025da0 <__malloc_lock+0x8>)
 8025d9a:	f7fc bd6a 	b.w	8022872 <__retarget_lock_acquire_recursive>
 8025d9e:	bf00      	nop
 8025da0:	20002770 	.word	0x20002770

08025da4 <__malloc_unlock>:
 8025da4:	4801      	ldr	r0, [pc, #4]	; (8025dac <__malloc_unlock+0x8>)
 8025da6:	f7fc bd65 	b.w	8022874 <__retarget_lock_release_recursive>
 8025daa:	bf00      	nop
 8025dac:	20002770 	.word	0x20002770

08025db0 <_Balloc>:
 8025db0:	b570      	push	{r4, r5, r6, lr}
 8025db2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8025db4:	4604      	mov	r4, r0
 8025db6:	460d      	mov	r5, r1
 8025db8:	b976      	cbnz	r6, 8025dd8 <_Balloc+0x28>
 8025dba:	2010      	movs	r0, #16
 8025dbc:	f7fc fd5c 	bl	8022878 <malloc>
 8025dc0:	4602      	mov	r2, r0
 8025dc2:	6260      	str	r0, [r4, #36]	; 0x24
 8025dc4:	b920      	cbnz	r0, 8025dd0 <_Balloc+0x20>
 8025dc6:	4b18      	ldr	r3, [pc, #96]	; (8025e28 <_Balloc+0x78>)
 8025dc8:	4818      	ldr	r0, [pc, #96]	; (8025e2c <_Balloc+0x7c>)
 8025dca:	2166      	movs	r1, #102	; 0x66
 8025dcc:	f7fc fcea 	bl	80227a4 <__assert_func>
 8025dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025dd4:	6006      	str	r6, [r0, #0]
 8025dd6:	60c6      	str	r6, [r0, #12]
 8025dd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8025dda:	68f3      	ldr	r3, [r6, #12]
 8025ddc:	b183      	cbz	r3, 8025e00 <_Balloc+0x50>
 8025dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025de0:	68db      	ldr	r3, [r3, #12]
 8025de2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8025de6:	b9b8      	cbnz	r0, 8025e18 <_Balloc+0x68>
 8025de8:	2101      	movs	r1, #1
 8025dea:	fa01 f605 	lsl.w	r6, r1, r5
 8025dee:	1d72      	adds	r2, r6, #5
 8025df0:	0092      	lsls	r2, r2, #2
 8025df2:	4620      	mov	r0, r4
 8025df4:	f7fc fd80 	bl	80228f8 <_calloc_r>
 8025df8:	b160      	cbz	r0, 8025e14 <_Balloc+0x64>
 8025dfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8025dfe:	e00e      	b.n	8025e1e <_Balloc+0x6e>
 8025e00:	2221      	movs	r2, #33	; 0x21
 8025e02:	2104      	movs	r1, #4
 8025e04:	4620      	mov	r0, r4
 8025e06:	f7fc fd77 	bl	80228f8 <_calloc_r>
 8025e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025e0c:	60f0      	str	r0, [r6, #12]
 8025e0e:	68db      	ldr	r3, [r3, #12]
 8025e10:	2b00      	cmp	r3, #0
 8025e12:	d1e4      	bne.n	8025dde <_Balloc+0x2e>
 8025e14:	2000      	movs	r0, #0
 8025e16:	bd70      	pop	{r4, r5, r6, pc}
 8025e18:	6802      	ldr	r2, [r0, #0]
 8025e1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8025e1e:	2300      	movs	r3, #0
 8025e20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025e24:	e7f7      	b.n	8025e16 <_Balloc+0x66>
 8025e26:	bf00      	nop
 8025e28:	0804c036 	.word	0x0804c036
 8025e2c:	0804c198 	.word	0x0804c198

08025e30 <_Bfree>:
 8025e30:	b570      	push	{r4, r5, r6, lr}
 8025e32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8025e34:	4605      	mov	r5, r0
 8025e36:	460c      	mov	r4, r1
 8025e38:	b976      	cbnz	r6, 8025e58 <_Bfree+0x28>
 8025e3a:	2010      	movs	r0, #16
 8025e3c:	f7fc fd1c 	bl	8022878 <malloc>
 8025e40:	4602      	mov	r2, r0
 8025e42:	6268      	str	r0, [r5, #36]	; 0x24
 8025e44:	b920      	cbnz	r0, 8025e50 <_Bfree+0x20>
 8025e46:	4b09      	ldr	r3, [pc, #36]	; (8025e6c <_Bfree+0x3c>)
 8025e48:	4809      	ldr	r0, [pc, #36]	; (8025e70 <_Bfree+0x40>)
 8025e4a:	218a      	movs	r1, #138	; 0x8a
 8025e4c:	f7fc fcaa 	bl	80227a4 <__assert_func>
 8025e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025e54:	6006      	str	r6, [r0, #0]
 8025e56:	60c6      	str	r6, [r0, #12]
 8025e58:	b13c      	cbz	r4, 8025e6a <_Bfree+0x3a>
 8025e5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8025e5c:	6862      	ldr	r2, [r4, #4]
 8025e5e:	68db      	ldr	r3, [r3, #12]
 8025e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025e64:	6021      	str	r1, [r4, #0]
 8025e66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8025e6a:	bd70      	pop	{r4, r5, r6, pc}
 8025e6c:	0804c036 	.word	0x0804c036
 8025e70:	0804c198 	.word	0x0804c198

08025e74 <__multadd>:
 8025e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e78:	690d      	ldr	r5, [r1, #16]
 8025e7a:	4607      	mov	r7, r0
 8025e7c:	460c      	mov	r4, r1
 8025e7e:	461e      	mov	r6, r3
 8025e80:	f101 0c14 	add.w	ip, r1, #20
 8025e84:	2000      	movs	r0, #0
 8025e86:	f8dc 3000 	ldr.w	r3, [ip]
 8025e8a:	b299      	uxth	r1, r3
 8025e8c:	fb02 6101 	mla	r1, r2, r1, r6
 8025e90:	0c1e      	lsrs	r6, r3, #16
 8025e92:	0c0b      	lsrs	r3, r1, #16
 8025e94:	fb02 3306 	mla	r3, r2, r6, r3
 8025e98:	b289      	uxth	r1, r1
 8025e9a:	3001      	adds	r0, #1
 8025e9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025ea0:	4285      	cmp	r5, r0
 8025ea2:	f84c 1b04 	str.w	r1, [ip], #4
 8025ea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8025eaa:	dcec      	bgt.n	8025e86 <__multadd+0x12>
 8025eac:	b30e      	cbz	r6, 8025ef2 <__multadd+0x7e>
 8025eae:	68a3      	ldr	r3, [r4, #8]
 8025eb0:	42ab      	cmp	r3, r5
 8025eb2:	dc19      	bgt.n	8025ee8 <__multadd+0x74>
 8025eb4:	6861      	ldr	r1, [r4, #4]
 8025eb6:	4638      	mov	r0, r7
 8025eb8:	3101      	adds	r1, #1
 8025eba:	f7ff ff79 	bl	8025db0 <_Balloc>
 8025ebe:	4680      	mov	r8, r0
 8025ec0:	b928      	cbnz	r0, 8025ece <__multadd+0x5a>
 8025ec2:	4602      	mov	r2, r0
 8025ec4:	4b0c      	ldr	r3, [pc, #48]	; (8025ef8 <__multadd+0x84>)
 8025ec6:	480d      	ldr	r0, [pc, #52]	; (8025efc <__multadd+0x88>)
 8025ec8:	21b5      	movs	r1, #181	; 0xb5
 8025eca:	f7fc fc6b 	bl	80227a4 <__assert_func>
 8025ece:	6922      	ldr	r2, [r4, #16]
 8025ed0:	3202      	adds	r2, #2
 8025ed2:	f104 010c 	add.w	r1, r4, #12
 8025ed6:	0092      	lsls	r2, r2, #2
 8025ed8:	300c      	adds	r0, #12
 8025eda:	f7fc fcdd 	bl	8022898 <memcpy>
 8025ede:	4621      	mov	r1, r4
 8025ee0:	4638      	mov	r0, r7
 8025ee2:	f7ff ffa5 	bl	8025e30 <_Bfree>
 8025ee6:	4644      	mov	r4, r8
 8025ee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8025eec:	3501      	adds	r5, #1
 8025eee:	615e      	str	r6, [r3, #20]
 8025ef0:	6125      	str	r5, [r4, #16]
 8025ef2:	4620      	mov	r0, r4
 8025ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025ef8:	0804c0a8 	.word	0x0804c0a8
 8025efc:	0804c198 	.word	0x0804c198

08025f00 <__s2b>:
 8025f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025f04:	460c      	mov	r4, r1
 8025f06:	4615      	mov	r5, r2
 8025f08:	461f      	mov	r7, r3
 8025f0a:	2209      	movs	r2, #9
 8025f0c:	3308      	adds	r3, #8
 8025f0e:	4606      	mov	r6, r0
 8025f10:	fb93 f3f2 	sdiv	r3, r3, r2
 8025f14:	2100      	movs	r1, #0
 8025f16:	2201      	movs	r2, #1
 8025f18:	429a      	cmp	r2, r3
 8025f1a:	db09      	blt.n	8025f30 <__s2b+0x30>
 8025f1c:	4630      	mov	r0, r6
 8025f1e:	f7ff ff47 	bl	8025db0 <_Balloc>
 8025f22:	b940      	cbnz	r0, 8025f36 <__s2b+0x36>
 8025f24:	4602      	mov	r2, r0
 8025f26:	4b19      	ldr	r3, [pc, #100]	; (8025f8c <__s2b+0x8c>)
 8025f28:	4819      	ldr	r0, [pc, #100]	; (8025f90 <__s2b+0x90>)
 8025f2a:	21ce      	movs	r1, #206	; 0xce
 8025f2c:	f7fc fc3a 	bl	80227a4 <__assert_func>
 8025f30:	0052      	lsls	r2, r2, #1
 8025f32:	3101      	adds	r1, #1
 8025f34:	e7f0      	b.n	8025f18 <__s2b+0x18>
 8025f36:	9b08      	ldr	r3, [sp, #32]
 8025f38:	6143      	str	r3, [r0, #20]
 8025f3a:	2d09      	cmp	r5, #9
 8025f3c:	f04f 0301 	mov.w	r3, #1
 8025f40:	6103      	str	r3, [r0, #16]
 8025f42:	dd16      	ble.n	8025f72 <__s2b+0x72>
 8025f44:	f104 0909 	add.w	r9, r4, #9
 8025f48:	46c8      	mov	r8, r9
 8025f4a:	442c      	add	r4, r5
 8025f4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8025f50:	4601      	mov	r1, r0
 8025f52:	3b30      	subs	r3, #48	; 0x30
 8025f54:	220a      	movs	r2, #10
 8025f56:	4630      	mov	r0, r6
 8025f58:	f7ff ff8c 	bl	8025e74 <__multadd>
 8025f5c:	45a0      	cmp	r8, r4
 8025f5e:	d1f5      	bne.n	8025f4c <__s2b+0x4c>
 8025f60:	f1a5 0408 	sub.w	r4, r5, #8
 8025f64:	444c      	add	r4, r9
 8025f66:	1b2d      	subs	r5, r5, r4
 8025f68:	1963      	adds	r3, r4, r5
 8025f6a:	42bb      	cmp	r3, r7
 8025f6c:	db04      	blt.n	8025f78 <__s2b+0x78>
 8025f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025f72:	340a      	adds	r4, #10
 8025f74:	2509      	movs	r5, #9
 8025f76:	e7f6      	b.n	8025f66 <__s2b+0x66>
 8025f78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025f7c:	4601      	mov	r1, r0
 8025f7e:	3b30      	subs	r3, #48	; 0x30
 8025f80:	220a      	movs	r2, #10
 8025f82:	4630      	mov	r0, r6
 8025f84:	f7ff ff76 	bl	8025e74 <__multadd>
 8025f88:	e7ee      	b.n	8025f68 <__s2b+0x68>
 8025f8a:	bf00      	nop
 8025f8c:	0804c0a8 	.word	0x0804c0a8
 8025f90:	0804c198 	.word	0x0804c198

08025f94 <__hi0bits>:
 8025f94:	0c03      	lsrs	r3, r0, #16
 8025f96:	041b      	lsls	r3, r3, #16
 8025f98:	b9d3      	cbnz	r3, 8025fd0 <__hi0bits+0x3c>
 8025f9a:	0400      	lsls	r0, r0, #16
 8025f9c:	2310      	movs	r3, #16
 8025f9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8025fa2:	bf04      	itt	eq
 8025fa4:	0200      	lsleq	r0, r0, #8
 8025fa6:	3308      	addeq	r3, #8
 8025fa8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8025fac:	bf04      	itt	eq
 8025fae:	0100      	lsleq	r0, r0, #4
 8025fb0:	3304      	addeq	r3, #4
 8025fb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8025fb6:	bf04      	itt	eq
 8025fb8:	0080      	lsleq	r0, r0, #2
 8025fba:	3302      	addeq	r3, #2
 8025fbc:	2800      	cmp	r0, #0
 8025fbe:	db05      	blt.n	8025fcc <__hi0bits+0x38>
 8025fc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8025fc4:	f103 0301 	add.w	r3, r3, #1
 8025fc8:	bf08      	it	eq
 8025fca:	2320      	moveq	r3, #32
 8025fcc:	4618      	mov	r0, r3
 8025fce:	4770      	bx	lr
 8025fd0:	2300      	movs	r3, #0
 8025fd2:	e7e4      	b.n	8025f9e <__hi0bits+0xa>

08025fd4 <__lo0bits>:
 8025fd4:	6803      	ldr	r3, [r0, #0]
 8025fd6:	f013 0207 	ands.w	r2, r3, #7
 8025fda:	4601      	mov	r1, r0
 8025fdc:	d00b      	beq.n	8025ff6 <__lo0bits+0x22>
 8025fde:	07da      	lsls	r2, r3, #31
 8025fe0:	d423      	bmi.n	802602a <__lo0bits+0x56>
 8025fe2:	0798      	lsls	r0, r3, #30
 8025fe4:	bf49      	itett	mi
 8025fe6:	085b      	lsrmi	r3, r3, #1
 8025fe8:	089b      	lsrpl	r3, r3, #2
 8025fea:	2001      	movmi	r0, #1
 8025fec:	600b      	strmi	r3, [r1, #0]
 8025fee:	bf5c      	itt	pl
 8025ff0:	600b      	strpl	r3, [r1, #0]
 8025ff2:	2002      	movpl	r0, #2
 8025ff4:	4770      	bx	lr
 8025ff6:	b298      	uxth	r0, r3
 8025ff8:	b9a8      	cbnz	r0, 8026026 <__lo0bits+0x52>
 8025ffa:	0c1b      	lsrs	r3, r3, #16
 8025ffc:	2010      	movs	r0, #16
 8025ffe:	b2da      	uxtb	r2, r3
 8026000:	b90a      	cbnz	r2, 8026006 <__lo0bits+0x32>
 8026002:	3008      	adds	r0, #8
 8026004:	0a1b      	lsrs	r3, r3, #8
 8026006:	071a      	lsls	r2, r3, #28
 8026008:	bf04      	itt	eq
 802600a:	091b      	lsreq	r3, r3, #4
 802600c:	3004      	addeq	r0, #4
 802600e:	079a      	lsls	r2, r3, #30
 8026010:	bf04      	itt	eq
 8026012:	089b      	lsreq	r3, r3, #2
 8026014:	3002      	addeq	r0, #2
 8026016:	07da      	lsls	r2, r3, #31
 8026018:	d403      	bmi.n	8026022 <__lo0bits+0x4e>
 802601a:	085b      	lsrs	r3, r3, #1
 802601c:	f100 0001 	add.w	r0, r0, #1
 8026020:	d005      	beq.n	802602e <__lo0bits+0x5a>
 8026022:	600b      	str	r3, [r1, #0]
 8026024:	4770      	bx	lr
 8026026:	4610      	mov	r0, r2
 8026028:	e7e9      	b.n	8025ffe <__lo0bits+0x2a>
 802602a:	2000      	movs	r0, #0
 802602c:	4770      	bx	lr
 802602e:	2020      	movs	r0, #32
 8026030:	4770      	bx	lr
	...

08026034 <__i2b>:
 8026034:	b510      	push	{r4, lr}
 8026036:	460c      	mov	r4, r1
 8026038:	2101      	movs	r1, #1
 802603a:	f7ff feb9 	bl	8025db0 <_Balloc>
 802603e:	4602      	mov	r2, r0
 8026040:	b928      	cbnz	r0, 802604e <__i2b+0x1a>
 8026042:	4b05      	ldr	r3, [pc, #20]	; (8026058 <__i2b+0x24>)
 8026044:	4805      	ldr	r0, [pc, #20]	; (802605c <__i2b+0x28>)
 8026046:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802604a:	f7fc fbab 	bl	80227a4 <__assert_func>
 802604e:	2301      	movs	r3, #1
 8026050:	6144      	str	r4, [r0, #20]
 8026052:	6103      	str	r3, [r0, #16]
 8026054:	bd10      	pop	{r4, pc}
 8026056:	bf00      	nop
 8026058:	0804c0a8 	.word	0x0804c0a8
 802605c:	0804c198 	.word	0x0804c198

08026060 <__multiply>:
 8026060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026064:	4691      	mov	r9, r2
 8026066:	690a      	ldr	r2, [r1, #16]
 8026068:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802606c:	429a      	cmp	r2, r3
 802606e:	bfb8      	it	lt
 8026070:	460b      	movlt	r3, r1
 8026072:	460c      	mov	r4, r1
 8026074:	bfbc      	itt	lt
 8026076:	464c      	movlt	r4, r9
 8026078:	4699      	movlt	r9, r3
 802607a:	6927      	ldr	r7, [r4, #16]
 802607c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8026080:	68a3      	ldr	r3, [r4, #8]
 8026082:	6861      	ldr	r1, [r4, #4]
 8026084:	eb07 060a 	add.w	r6, r7, sl
 8026088:	42b3      	cmp	r3, r6
 802608a:	b085      	sub	sp, #20
 802608c:	bfb8      	it	lt
 802608e:	3101      	addlt	r1, #1
 8026090:	f7ff fe8e 	bl	8025db0 <_Balloc>
 8026094:	b930      	cbnz	r0, 80260a4 <__multiply+0x44>
 8026096:	4602      	mov	r2, r0
 8026098:	4b44      	ldr	r3, [pc, #272]	; (80261ac <__multiply+0x14c>)
 802609a:	4845      	ldr	r0, [pc, #276]	; (80261b0 <__multiply+0x150>)
 802609c:	f240 115d 	movw	r1, #349	; 0x15d
 80260a0:	f7fc fb80 	bl	80227a4 <__assert_func>
 80260a4:	f100 0514 	add.w	r5, r0, #20
 80260a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80260ac:	462b      	mov	r3, r5
 80260ae:	2200      	movs	r2, #0
 80260b0:	4543      	cmp	r3, r8
 80260b2:	d321      	bcc.n	80260f8 <__multiply+0x98>
 80260b4:	f104 0314 	add.w	r3, r4, #20
 80260b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80260bc:	f109 0314 	add.w	r3, r9, #20
 80260c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80260c4:	9202      	str	r2, [sp, #8]
 80260c6:	1b3a      	subs	r2, r7, r4
 80260c8:	3a15      	subs	r2, #21
 80260ca:	f022 0203 	bic.w	r2, r2, #3
 80260ce:	3204      	adds	r2, #4
 80260d0:	f104 0115 	add.w	r1, r4, #21
 80260d4:	428f      	cmp	r7, r1
 80260d6:	bf38      	it	cc
 80260d8:	2204      	movcc	r2, #4
 80260da:	9201      	str	r2, [sp, #4]
 80260dc:	9a02      	ldr	r2, [sp, #8]
 80260de:	9303      	str	r3, [sp, #12]
 80260e0:	429a      	cmp	r2, r3
 80260e2:	d80c      	bhi.n	80260fe <__multiply+0x9e>
 80260e4:	2e00      	cmp	r6, #0
 80260e6:	dd03      	ble.n	80260f0 <__multiply+0x90>
 80260e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80260ec:	2b00      	cmp	r3, #0
 80260ee:	d05a      	beq.n	80261a6 <__multiply+0x146>
 80260f0:	6106      	str	r6, [r0, #16]
 80260f2:	b005      	add	sp, #20
 80260f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260f8:	f843 2b04 	str.w	r2, [r3], #4
 80260fc:	e7d8      	b.n	80260b0 <__multiply+0x50>
 80260fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8026102:	f1ba 0f00 	cmp.w	sl, #0
 8026106:	d024      	beq.n	8026152 <__multiply+0xf2>
 8026108:	f104 0e14 	add.w	lr, r4, #20
 802610c:	46a9      	mov	r9, r5
 802610e:	f04f 0c00 	mov.w	ip, #0
 8026112:	f85e 2b04 	ldr.w	r2, [lr], #4
 8026116:	f8d9 1000 	ldr.w	r1, [r9]
 802611a:	fa1f fb82 	uxth.w	fp, r2
 802611e:	b289      	uxth	r1, r1
 8026120:	fb0a 110b 	mla	r1, sl, fp, r1
 8026124:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8026128:	f8d9 2000 	ldr.w	r2, [r9]
 802612c:	4461      	add	r1, ip
 802612e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8026132:	fb0a c20b 	mla	r2, sl, fp, ip
 8026136:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802613a:	b289      	uxth	r1, r1
 802613c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8026140:	4577      	cmp	r7, lr
 8026142:	f849 1b04 	str.w	r1, [r9], #4
 8026146:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802614a:	d8e2      	bhi.n	8026112 <__multiply+0xb2>
 802614c:	9a01      	ldr	r2, [sp, #4]
 802614e:	f845 c002 	str.w	ip, [r5, r2]
 8026152:	9a03      	ldr	r2, [sp, #12]
 8026154:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8026158:	3304      	adds	r3, #4
 802615a:	f1b9 0f00 	cmp.w	r9, #0
 802615e:	d020      	beq.n	80261a2 <__multiply+0x142>
 8026160:	6829      	ldr	r1, [r5, #0]
 8026162:	f104 0c14 	add.w	ip, r4, #20
 8026166:	46ae      	mov	lr, r5
 8026168:	f04f 0a00 	mov.w	sl, #0
 802616c:	f8bc b000 	ldrh.w	fp, [ip]
 8026170:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8026174:	fb09 220b 	mla	r2, r9, fp, r2
 8026178:	4492      	add	sl, r2
 802617a:	b289      	uxth	r1, r1
 802617c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8026180:	f84e 1b04 	str.w	r1, [lr], #4
 8026184:	f85c 2b04 	ldr.w	r2, [ip], #4
 8026188:	f8be 1000 	ldrh.w	r1, [lr]
 802618c:	0c12      	lsrs	r2, r2, #16
 802618e:	fb09 1102 	mla	r1, r9, r2, r1
 8026192:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8026196:	4567      	cmp	r7, ip
 8026198:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802619c:	d8e6      	bhi.n	802616c <__multiply+0x10c>
 802619e:	9a01      	ldr	r2, [sp, #4]
 80261a0:	50a9      	str	r1, [r5, r2]
 80261a2:	3504      	adds	r5, #4
 80261a4:	e79a      	b.n	80260dc <__multiply+0x7c>
 80261a6:	3e01      	subs	r6, #1
 80261a8:	e79c      	b.n	80260e4 <__multiply+0x84>
 80261aa:	bf00      	nop
 80261ac:	0804c0a8 	.word	0x0804c0a8
 80261b0:	0804c198 	.word	0x0804c198

080261b4 <__pow5mult>:
 80261b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80261b8:	4615      	mov	r5, r2
 80261ba:	f012 0203 	ands.w	r2, r2, #3
 80261be:	4606      	mov	r6, r0
 80261c0:	460f      	mov	r7, r1
 80261c2:	d007      	beq.n	80261d4 <__pow5mult+0x20>
 80261c4:	4c25      	ldr	r4, [pc, #148]	; (802625c <__pow5mult+0xa8>)
 80261c6:	3a01      	subs	r2, #1
 80261c8:	2300      	movs	r3, #0
 80261ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80261ce:	f7ff fe51 	bl	8025e74 <__multadd>
 80261d2:	4607      	mov	r7, r0
 80261d4:	10ad      	asrs	r5, r5, #2
 80261d6:	d03d      	beq.n	8026254 <__pow5mult+0xa0>
 80261d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80261da:	b97c      	cbnz	r4, 80261fc <__pow5mult+0x48>
 80261dc:	2010      	movs	r0, #16
 80261de:	f7fc fb4b 	bl	8022878 <malloc>
 80261e2:	4602      	mov	r2, r0
 80261e4:	6270      	str	r0, [r6, #36]	; 0x24
 80261e6:	b928      	cbnz	r0, 80261f4 <__pow5mult+0x40>
 80261e8:	4b1d      	ldr	r3, [pc, #116]	; (8026260 <__pow5mult+0xac>)
 80261ea:	481e      	ldr	r0, [pc, #120]	; (8026264 <__pow5mult+0xb0>)
 80261ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80261f0:	f7fc fad8 	bl	80227a4 <__assert_func>
 80261f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80261f8:	6004      	str	r4, [r0, #0]
 80261fa:	60c4      	str	r4, [r0, #12]
 80261fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8026200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026204:	b94c      	cbnz	r4, 802621a <__pow5mult+0x66>
 8026206:	f240 2171 	movw	r1, #625	; 0x271
 802620a:	4630      	mov	r0, r6
 802620c:	f7ff ff12 	bl	8026034 <__i2b>
 8026210:	2300      	movs	r3, #0
 8026212:	f8c8 0008 	str.w	r0, [r8, #8]
 8026216:	4604      	mov	r4, r0
 8026218:	6003      	str	r3, [r0, #0]
 802621a:	f04f 0900 	mov.w	r9, #0
 802621e:	07eb      	lsls	r3, r5, #31
 8026220:	d50a      	bpl.n	8026238 <__pow5mult+0x84>
 8026222:	4639      	mov	r1, r7
 8026224:	4622      	mov	r2, r4
 8026226:	4630      	mov	r0, r6
 8026228:	f7ff ff1a 	bl	8026060 <__multiply>
 802622c:	4639      	mov	r1, r7
 802622e:	4680      	mov	r8, r0
 8026230:	4630      	mov	r0, r6
 8026232:	f7ff fdfd 	bl	8025e30 <_Bfree>
 8026236:	4647      	mov	r7, r8
 8026238:	106d      	asrs	r5, r5, #1
 802623a:	d00b      	beq.n	8026254 <__pow5mult+0xa0>
 802623c:	6820      	ldr	r0, [r4, #0]
 802623e:	b938      	cbnz	r0, 8026250 <__pow5mult+0x9c>
 8026240:	4622      	mov	r2, r4
 8026242:	4621      	mov	r1, r4
 8026244:	4630      	mov	r0, r6
 8026246:	f7ff ff0b 	bl	8026060 <__multiply>
 802624a:	6020      	str	r0, [r4, #0]
 802624c:	f8c0 9000 	str.w	r9, [r0]
 8026250:	4604      	mov	r4, r0
 8026252:	e7e4      	b.n	802621e <__pow5mult+0x6a>
 8026254:	4638      	mov	r0, r7
 8026256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802625a:	bf00      	nop
 802625c:	0804c2e8 	.word	0x0804c2e8
 8026260:	0804c036 	.word	0x0804c036
 8026264:	0804c198 	.word	0x0804c198

08026268 <__lshift>:
 8026268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802626c:	460c      	mov	r4, r1
 802626e:	6849      	ldr	r1, [r1, #4]
 8026270:	6923      	ldr	r3, [r4, #16]
 8026272:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026276:	68a3      	ldr	r3, [r4, #8]
 8026278:	4607      	mov	r7, r0
 802627a:	4691      	mov	r9, r2
 802627c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026280:	f108 0601 	add.w	r6, r8, #1
 8026284:	42b3      	cmp	r3, r6
 8026286:	db0b      	blt.n	80262a0 <__lshift+0x38>
 8026288:	4638      	mov	r0, r7
 802628a:	f7ff fd91 	bl	8025db0 <_Balloc>
 802628e:	4605      	mov	r5, r0
 8026290:	b948      	cbnz	r0, 80262a6 <__lshift+0x3e>
 8026292:	4602      	mov	r2, r0
 8026294:	4b2a      	ldr	r3, [pc, #168]	; (8026340 <__lshift+0xd8>)
 8026296:	482b      	ldr	r0, [pc, #172]	; (8026344 <__lshift+0xdc>)
 8026298:	f240 11d9 	movw	r1, #473	; 0x1d9
 802629c:	f7fc fa82 	bl	80227a4 <__assert_func>
 80262a0:	3101      	adds	r1, #1
 80262a2:	005b      	lsls	r3, r3, #1
 80262a4:	e7ee      	b.n	8026284 <__lshift+0x1c>
 80262a6:	2300      	movs	r3, #0
 80262a8:	f100 0114 	add.w	r1, r0, #20
 80262ac:	f100 0210 	add.w	r2, r0, #16
 80262b0:	4618      	mov	r0, r3
 80262b2:	4553      	cmp	r3, sl
 80262b4:	db37      	blt.n	8026326 <__lshift+0xbe>
 80262b6:	6920      	ldr	r0, [r4, #16]
 80262b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80262bc:	f104 0314 	add.w	r3, r4, #20
 80262c0:	f019 091f 	ands.w	r9, r9, #31
 80262c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80262c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80262cc:	d02f      	beq.n	802632e <__lshift+0xc6>
 80262ce:	f1c9 0e20 	rsb	lr, r9, #32
 80262d2:	468a      	mov	sl, r1
 80262d4:	f04f 0c00 	mov.w	ip, #0
 80262d8:	681a      	ldr	r2, [r3, #0]
 80262da:	fa02 f209 	lsl.w	r2, r2, r9
 80262de:	ea42 020c 	orr.w	r2, r2, ip
 80262e2:	f84a 2b04 	str.w	r2, [sl], #4
 80262e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80262ea:	4298      	cmp	r0, r3
 80262ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80262f0:	d8f2      	bhi.n	80262d8 <__lshift+0x70>
 80262f2:	1b03      	subs	r3, r0, r4
 80262f4:	3b15      	subs	r3, #21
 80262f6:	f023 0303 	bic.w	r3, r3, #3
 80262fa:	3304      	adds	r3, #4
 80262fc:	f104 0215 	add.w	r2, r4, #21
 8026300:	4290      	cmp	r0, r2
 8026302:	bf38      	it	cc
 8026304:	2304      	movcc	r3, #4
 8026306:	f841 c003 	str.w	ip, [r1, r3]
 802630a:	f1bc 0f00 	cmp.w	ip, #0
 802630e:	d001      	beq.n	8026314 <__lshift+0xac>
 8026310:	f108 0602 	add.w	r6, r8, #2
 8026314:	3e01      	subs	r6, #1
 8026316:	4638      	mov	r0, r7
 8026318:	612e      	str	r6, [r5, #16]
 802631a:	4621      	mov	r1, r4
 802631c:	f7ff fd88 	bl	8025e30 <_Bfree>
 8026320:	4628      	mov	r0, r5
 8026322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026326:	f842 0f04 	str.w	r0, [r2, #4]!
 802632a:	3301      	adds	r3, #1
 802632c:	e7c1      	b.n	80262b2 <__lshift+0x4a>
 802632e:	3904      	subs	r1, #4
 8026330:	f853 2b04 	ldr.w	r2, [r3], #4
 8026334:	f841 2f04 	str.w	r2, [r1, #4]!
 8026338:	4298      	cmp	r0, r3
 802633a:	d8f9      	bhi.n	8026330 <__lshift+0xc8>
 802633c:	e7ea      	b.n	8026314 <__lshift+0xac>
 802633e:	bf00      	nop
 8026340:	0804c0a8 	.word	0x0804c0a8
 8026344:	0804c198 	.word	0x0804c198

08026348 <__mcmp>:
 8026348:	b530      	push	{r4, r5, lr}
 802634a:	6902      	ldr	r2, [r0, #16]
 802634c:	690c      	ldr	r4, [r1, #16]
 802634e:	1b12      	subs	r2, r2, r4
 8026350:	d10e      	bne.n	8026370 <__mcmp+0x28>
 8026352:	f100 0314 	add.w	r3, r0, #20
 8026356:	3114      	adds	r1, #20
 8026358:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802635c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8026360:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8026364:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8026368:	42a5      	cmp	r5, r4
 802636a:	d003      	beq.n	8026374 <__mcmp+0x2c>
 802636c:	d305      	bcc.n	802637a <__mcmp+0x32>
 802636e:	2201      	movs	r2, #1
 8026370:	4610      	mov	r0, r2
 8026372:	bd30      	pop	{r4, r5, pc}
 8026374:	4283      	cmp	r3, r0
 8026376:	d3f3      	bcc.n	8026360 <__mcmp+0x18>
 8026378:	e7fa      	b.n	8026370 <__mcmp+0x28>
 802637a:	f04f 32ff 	mov.w	r2, #4294967295
 802637e:	e7f7      	b.n	8026370 <__mcmp+0x28>

08026380 <__mdiff>:
 8026380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026384:	460c      	mov	r4, r1
 8026386:	4606      	mov	r6, r0
 8026388:	4611      	mov	r1, r2
 802638a:	4620      	mov	r0, r4
 802638c:	4690      	mov	r8, r2
 802638e:	f7ff ffdb 	bl	8026348 <__mcmp>
 8026392:	1e05      	subs	r5, r0, #0
 8026394:	d110      	bne.n	80263b8 <__mdiff+0x38>
 8026396:	4629      	mov	r1, r5
 8026398:	4630      	mov	r0, r6
 802639a:	f7ff fd09 	bl	8025db0 <_Balloc>
 802639e:	b930      	cbnz	r0, 80263ae <__mdiff+0x2e>
 80263a0:	4b3a      	ldr	r3, [pc, #232]	; (802648c <__mdiff+0x10c>)
 80263a2:	4602      	mov	r2, r0
 80263a4:	f240 2132 	movw	r1, #562	; 0x232
 80263a8:	4839      	ldr	r0, [pc, #228]	; (8026490 <__mdiff+0x110>)
 80263aa:	f7fc f9fb 	bl	80227a4 <__assert_func>
 80263ae:	2301      	movs	r3, #1
 80263b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80263b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80263b8:	bfa4      	itt	ge
 80263ba:	4643      	movge	r3, r8
 80263bc:	46a0      	movge	r8, r4
 80263be:	4630      	mov	r0, r6
 80263c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80263c4:	bfa6      	itte	ge
 80263c6:	461c      	movge	r4, r3
 80263c8:	2500      	movge	r5, #0
 80263ca:	2501      	movlt	r5, #1
 80263cc:	f7ff fcf0 	bl	8025db0 <_Balloc>
 80263d0:	b920      	cbnz	r0, 80263dc <__mdiff+0x5c>
 80263d2:	4b2e      	ldr	r3, [pc, #184]	; (802648c <__mdiff+0x10c>)
 80263d4:	4602      	mov	r2, r0
 80263d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80263da:	e7e5      	b.n	80263a8 <__mdiff+0x28>
 80263dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80263e0:	6926      	ldr	r6, [r4, #16]
 80263e2:	60c5      	str	r5, [r0, #12]
 80263e4:	f104 0914 	add.w	r9, r4, #20
 80263e8:	f108 0514 	add.w	r5, r8, #20
 80263ec:	f100 0e14 	add.w	lr, r0, #20
 80263f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80263f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80263f8:	f108 0210 	add.w	r2, r8, #16
 80263fc:	46f2      	mov	sl, lr
 80263fe:	2100      	movs	r1, #0
 8026400:	f859 3b04 	ldr.w	r3, [r9], #4
 8026404:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8026408:	fa1f f883 	uxth.w	r8, r3
 802640c:	fa11 f18b 	uxtah	r1, r1, fp
 8026410:	0c1b      	lsrs	r3, r3, #16
 8026412:	eba1 0808 	sub.w	r8, r1, r8
 8026416:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802641a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802641e:	fa1f f888 	uxth.w	r8, r8
 8026422:	1419      	asrs	r1, r3, #16
 8026424:	454e      	cmp	r6, r9
 8026426:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802642a:	f84a 3b04 	str.w	r3, [sl], #4
 802642e:	d8e7      	bhi.n	8026400 <__mdiff+0x80>
 8026430:	1b33      	subs	r3, r6, r4
 8026432:	3b15      	subs	r3, #21
 8026434:	f023 0303 	bic.w	r3, r3, #3
 8026438:	3304      	adds	r3, #4
 802643a:	3415      	adds	r4, #21
 802643c:	42a6      	cmp	r6, r4
 802643e:	bf38      	it	cc
 8026440:	2304      	movcc	r3, #4
 8026442:	441d      	add	r5, r3
 8026444:	4473      	add	r3, lr
 8026446:	469e      	mov	lr, r3
 8026448:	462e      	mov	r6, r5
 802644a:	4566      	cmp	r6, ip
 802644c:	d30e      	bcc.n	802646c <__mdiff+0xec>
 802644e:	f10c 0203 	add.w	r2, ip, #3
 8026452:	1b52      	subs	r2, r2, r5
 8026454:	f022 0203 	bic.w	r2, r2, #3
 8026458:	3d03      	subs	r5, #3
 802645a:	45ac      	cmp	ip, r5
 802645c:	bf38      	it	cc
 802645e:	2200      	movcc	r2, #0
 8026460:	441a      	add	r2, r3
 8026462:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8026466:	b17b      	cbz	r3, 8026488 <__mdiff+0x108>
 8026468:	6107      	str	r7, [r0, #16]
 802646a:	e7a3      	b.n	80263b4 <__mdiff+0x34>
 802646c:	f856 8b04 	ldr.w	r8, [r6], #4
 8026470:	fa11 f288 	uxtah	r2, r1, r8
 8026474:	1414      	asrs	r4, r2, #16
 8026476:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802647a:	b292      	uxth	r2, r2
 802647c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8026480:	f84e 2b04 	str.w	r2, [lr], #4
 8026484:	1421      	asrs	r1, r4, #16
 8026486:	e7e0      	b.n	802644a <__mdiff+0xca>
 8026488:	3f01      	subs	r7, #1
 802648a:	e7ea      	b.n	8026462 <__mdiff+0xe2>
 802648c:	0804c0a8 	.word	0x0804c0a8
 8026490:	0804c198 	.word	0x0804c198

08026494 <__ulp>:
 8026494:	b082      	sub	sp, #8
 8026496:	ed8d 0b00 	vstr	d0, [sp]
 802649a:	9b01      	ldr	r3, [sp, #4]
 802649c:	4912      	ldr	r1, [pc, #72]	; (80264e8 <__ulp+0x54>)
 802649e:	4019      	ands	r1, r3
 80264a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80264a4:	2900      	cmp	r1, #0
 80264a6:	dd05      	ble.n	80264b4 <__ulp+0x20>
 80264a8:	2200      	movs	r2, #0
 80264aa:	460b      	mov	r3, r1
 80264ac:	ec43 2b10 	vmov	d0, r2, r3
 80264b0:	b002      	add	sp, #8
 80264b2:	4770      	bx	lr
 80264b4:	4249      	negs	r1, r1
 80264b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80264ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 80264be:	f04f 0200 	mov.w	r2, #0
 80264c2:	f04f 0300 	mov.w	r3, #0
 80264c6:	da04      	bge.n	80264d2 <__ulp+0x3e>
 80264c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80264cc:	fa41 f300 	asr.w	r3, r1, r0
 80264d0:	e7ec      	b.n	80264ac <__ulp+0x18>
 80264d2:	f1a0 0114 	sub.w	r1, r0, #20
 80264d6:	291e      	cmp	r1, #30
 80264d8:	bfda      	itte	le
 80264da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80264de:	fa20 f101 	lsrle.w	r1, r0, r1
 80264e2:	2101      	movgt	r1, #1
 80264e4:	460a      	mov	r2, r1
 80264e6:	e7e1      	b.n	80264ac <__ulp+0x18>
 80264e8:	7ff00000 	.word	0x7ff00000

080264ec <__b2d>:
 80264ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80264ee:	6905      	ldr	r5, [r0, #16]
 80264f0:	f100 0714 	add.w	r7, r0, #20
 80264f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80264f8:	1f2e      	subs	r6, r5, #4
 80264fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80264fe:	4620      	mov	r0, r4
 8026500:	f7ff fd48 	bl	8025f94 <__hi0bits>
 8026504:	f1c0 0320 	rsb	r3, r0, #32
 8026508:	280a      	cmp	r0, #10
 802650a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8026588 <__b2d+0x9c>
 802650e:	600b      	str	r3, [r1, #0]
 8026510:	dc14      	bgt.n	802653c <__b2d+0x50>
 8026512:	f1c0 0e0b 	rsb	lr, r0, #11
 8026516:	fa24 f10e 	lsr.w	r1, r4, lr
 802651a:	42b7      	cmp	r7, r6
 802651c:	ea41 030c 	orr.w	r3, r1, ip
 8026520:	bf34      	ite	cc
 8026522:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8026526:	2100      	movcs	r1, #0
 8026528:	3015      	adds	r0, #21
 802652a:	fa04 f000 	lsl.w	r0, r4, r0
 802652e:	fa21 f10e 	lsr.w	r1, r1, lr
 8026532:	ea40 0201 	orr.w	r2, r0, r1
 8026536:	ec43 2b10 	vmov	d0, r2, r3
 802653a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802653c:	42b7      	cmp	r7, r6
 802653e:	bf3a      	itte	cc
 8026540:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8026544:	f1a5 0608 	subcc.w	r6, r5, #8
 8026548:	2100      	movcs	r1, #0
 802654a:	380b      	subs	r0, #11
 802654c:	d017      	beq.n	802657e <__b2d+0x92>
 802654e:	f1c0 0c20 	rsb	ip, r0, #32
 8026552:	fa04 f500 	lsl.w	r5, r4, r0
 8026556:	42be      	cmp	r6, r7
 8026558:	fa21 f40c 	lsr.w	r4, r1, ip
 802655c:	ea45 0504 	orr.w	r5, r5, r4
 8026560:	bf8c      	ite	hi
 8026562:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8026566:	2400      	movls	r4, #0
 8026568:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802656c:	fa01 f000 	lsl.w	r0, r1, r0
 8026570:	fa24 f40c 	lsr.w	r4, r4, ip
 8026574:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8026578:	ea40 0204 	orr.w	r2, r0, r4
 802657c:	e7db      	b.n	8026536 <__b2d+0x4a>
 802657e:	ea44 030c 	orr.w	r3, r4, ip
 8026582:	460a      	mov	r2, r1
 8026584:	e7d7      	b.n	8026536 <__b2d+0x4a>
 8026586:	bf00      	nop
 8026588:	3ff00000 	.word	0x3ff00000

0802658c <__d2b>:
 802658c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026590:	4689      	mov	r9, r1
 8026592:	2101      	movs	r1, #1
 8026594:	ec57 6b10 	vmov	r6, r7, d0
 8026598:	4690      	mov	r8, r2
 802659a:	f7ff fc09 	bl	8025db0 <_Balloc>
 802659e:	4604      	mov	r4, r0
 80265a0:	b930      	cbnz	r0, 80265b0 <__d2b+0x24>
 80265a2:	4602      	mov	r2, r0
 80265a4:	4b25      	ldr	r3, [pc, #148]	; (802663c <__d2b+0xb0>)
 80265a6:	4826      	ldr	r0, [pc, #152]	; (8026640 <__d2b+0xb4>)
 80265a8:	f240 310a 	movw	r1, #778	; 0x30a
 80265ac:	f7fc f8fa 	bl	80227a4 <__assert_func>
 80265b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80265b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80265b8:	bb35      	cbnz	r5, 8026608 <__d2b+0x7c>
 80265ba:	2e00      	cmp	r6, #0
 80265bc:	9301      	str	r3, [sp, #4]
 80265be:	d028      	beq.n	8026612 <__d2b+0x86>
 80265c0:	4668      	mov	r0, sp
 80265c2:	9600      	str	r6, [sp, #0]
 80265c4:	f7ff fd06 	bl	8025fd4 <__lo0bits>
 80265c8:	9900      	ldr	r1, [sp, #0]
 80265ca:	b300      	cbz	r0, 802660e <__d2b+0x82>
 80265cc:	9a01      	ldr	r2, [sp, #4]
 80265ce:	f1c0 0320 	rsb	r3, r0, #32
 80265d2:	fa02 f303 	lsl.w	r3, r2, r3
 80265d6:	430b      	orrs	r3, r1
 80265d8:	40c2      	lsrs	r2, r0
 80265da:	6163      	str	r3, [r4, #20]
 80265dc:	9201      	str	r2, [sp, #4]
 80265de:	9b01      	ldr	r3, [sp, #4]
 80265e0:	61a3      	str	r3, [r4, #24]
 80265e2:	2b00      	cmp	r3, #0
 80265e4:	bf14      	ite	ne
 80265e6:	2202      	movne	r2, #2
 80265e8:	2201      	moveq	r2, #1
 80265ea:	6122      	str	r2, [r4, #16]
 80265ec:	b1d5      	cbz	r5, 8026624 <__d2b+0x98>
 80265ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80265f2:	4405      	add	r5, r0
 80265f4:	f8c9 5000 	str.w	r5, [r9]
 80265f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80265fc:	f8c8 0000 	str.w	r0, [r8]
 8026600:	4620      	mov	r0, r4
 8026602:	b003      	add	sp, #12
 8026604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802660c:	e7d5      	b.n	80265ba <__d2b+0x2e>
 802660e:	6161      	str	r1, [r4, #20]
 8026610:	e7e5      	b.n	80265de <__d2b+0x52>
 8026612:	a801      	add	r0, sp, #4
 8026614:	f7ff fcde 	bl	8025fd4 <__lo0bits>
 8026618:	9b01      	ldr	r3, [sp, #4]
 802661a:	6163      	str	r3, [r4, #20]
 802661c:	2201      	movs	r2, #1
 802661e:	6122      	str	r2, [r4, #16]
 8026620:	3020      	adds	r0, #32
 8026622:	e7e3      	b.n	80265ec <__d2b+0x60>
 8026624:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026628:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802662c:	f8c9 0000 	str.w	r0, [r9]
 8026630:	6918      	ldr	r0, [r3, #16]
 8026632:	f7ff fcaf 	bl	8025f94 <__hi0bits>
 8026636:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802663a:	e7df      	b.n	80265fc <__d2b+0x70>
 802663c:	0804c0a8 	.word	0x0804c0a8
 8026640:	0804c198 	.word	0x0804c198

08026644 <__ratio>:
 8026644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026648:	4688      	mov	r8, r1
 802664a:	4669      	mov	r1, sp
 802664c:	4681      	mov	r9, r0
 802664e:	f7ff ff4d 	bl	80264ec <__b2d>
 8026652:	a901      	add	r1, sp, #4
 8026654:	4640      	mov	r0, r8
 8026656:	ec55 4b10 	vmov	r4, r5, d0
 802665a:	f7ff ff47 	bl	80264ec <__b2d>
 802665e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8026662:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8026666:	eba3 0c02 	sub.w	ip, r3, r2
 802666a:	e9dd 3200 	ldrd	r3, r2, [sp]
 802666e:	1a9b      	subs	r3, r3, r2
 8026670:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8026674:	ec51 0b10 	vmov	r0, r1, d0
 8026678:	2b00      	cmp	r3, #0
 802667a:	bfd6      	itet	le
 802667c:	460a      	movle	r2, r1
 802667e:	462a      	movgt	r2, r5
 8026680:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026684:	468b      	mov	fp, r1
 8026686:	462f      	mov	r7, r5
 8026688:	bfd4      	ite	le
 802668a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802668e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8026692:	4620      	mov	r0, r4
 8026694:	ee10 2a10 	vmov	r2, s0
 8026698:	465b      	mov	r3, fp
 802669a:	4639      	mov	r1, r7
 802669c:	f7da f8e0 	bl	8000860 <__aeabi_ddiv>
 80266a0:	ec41 0b10 	vmov	d0, r0, r1
 80266a4:	b003      	add	sp, #12
 80266a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080266aa <__copybits>:
 80266aa:	3901      	subs	r1, #1
 80266ac:	b570      	push	{r4, r5, r6, lr}
 80266ae:	1149      	asrs	r1, r1, #5
 80266b0:	6914      	ldr	r4, [r2, #16]
 80266b2:	3101      	adds	r1, #1
 80266b4:	f102 0314 	add.w	r3, r2, #20
 80266b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80266bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80266c0:	1f05      	subs	r5, r0, #4
 80266c2:	42a3      	cmp	r3, r4
 80266c4:	d30c      	bcc.n	80266e0 <__copybits+0x36>
 80266c6:	1aa3      	subs	r3, r4, r2
 80266c8:	3b11      	subs	r3, #17
 80266ca:	f023 0303 	bic.w	r3, r3, #3
 80266ce:	3211      	adds	r2, #17
 80266d0:	42a2      	cmp	r2, r4
 80266d2:	bf88      	it	hi
 80266d4:	2300      	movhi	r3, #0
 80266d6:	4418      	add	r0, r3
 80266d8:	2300      	movs	r3, #0
 80266da:	4288      	cmp	r0, r1
 80266dc:	d305      	bcc.n	80266ea <__copybits+0x40>
 80266de:	bd70      	pop	{r4, r5, r6, pc}
 80266e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80266e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80266e8:	e7eb      	b.n	80266c2 <__copybits+0x18>
 80266ea:	f840 3b04 	str.w	r3, [r0], #4
 80266ee:	e7f4      	b.n	80266da <__copybits+0x30>

080266f0 <__any_on>:
 80266f0:	f100 0214 	add.w	r2, r0, #20
 80266f4:	6900      	ldr	r0, [r0, #16]
 80266f6:	114b      	asrs	r3, r1, #5
 80266f8:	4298      	cmp	r0, r3
 80266fa:	b510      	push	{r4, lr}
 80266fc:	db11      	blt.n	8026722 <__any_on+0x32>
 80266fe:	dd0a      	ble.n	8026716 <__any_on+0x26>
 8026700:	f011 011f 	ands.w	r1, r1, #31
 8026704:	d007      	beq.n	8026716 <__any_on+0x26>
 8026706:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802670a:	fa24 f001 	lsr.w	r0, r4, r1
 802670e:	fa00 f101 	lsl.w	r1, r0, r1
 8026712:	428c      	cmp	r4, r1
 8026714:	d10b      	bne.n	802672e <__any_on+0x3e>
 8026716:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802671a:	4293      	cmp	r3, r2
 802671c:	d803      	bhi.n	8026726 <__any_on+0x36>
 802671e:	2000      	movs	r0, #0
 8026720:	bd10      	pop	{r4, pc}
 8026722:	4603      	mov	r3, r0
 8026724:	e7f7      	b.n	8026716 <__any_on+0x26>
 8026726:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802672a:	2900      	cmp	r1, #0
 802672c:	d0f5      	beq.n	802671a <__any_on+0x2a>
 802672e:	2001      	movs	r0, #1
 8026730:	e7f6      	b.n	8026720 <__any_on+0x30>

08026732 <_realloc_r>:
 8026732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026736:	4680      	mov	r8, r0
 8026738:	4614      	mov	r4, r2
 802673a:	460e      	mov	r6, r1
 802673c:	b921      	cbnz	r1, 8026748 <_realloc_r+0x16>
 802673e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026742:	4611      	mov	r1, r2
 8026744:	f7fc b95a 	b.w	80229fc <_malloc_r>
 8026748:	b92a      	cbnz	r2, 8026756 <_realloc_r+0x24>
 802674a:	f7fc f8eb 	bl	8022924 <_free_r>
 802674e:	4625      	mov	r5, r4
 8026750:	4628      	mov	r0, r5
 8026752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026756:	f000 fa1d 	bl	8026b94 <_malloc_usable_size_r>
 802675a:	4284      	cmp	r4, r0
 802675c:	4607      	mov	r7, r0
 802675e:	d802      	bhi.n	8026766 <_realloc_r+0x34>
 8026760:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8026764:	d812      	bhi.n	802678c <_realloc_r+0x5a>
 8026766:	4621      	mov	r1, r4
 8026768:	4640      	mov	r0, r8
 802676a:	f7fc f947 	bl	80229fc <_malloc_r>
 802676e:	4605      	mov	r5, r0
 8026770:	2800      	cmp	r0, #0
 8026772:	d0ed      	beq.n	8026750 <_realloc_r+0x1e>
 8026774:	42bc      	cmp	r4, r7
 8026776:	4622      	mov	r2, r4
 8026778:	4631      	mov	r1, r6
 802677a:	bf28      	it	cs
 802677c:	463a      	movcs	r2, r7
 802677e:	f7fc f88b 	bl	8022898 <memcpy>
 8026782:	4631      	mov	r1, r6
 8026784:	4640      	mov	r0, r8
 8026786:	f7fc f8cd 	bl	8022924 <_free_r>
 802678a:	e7e1      	b.n	8026750 <_realloc_r+0x1e>
 802678c:	4635      	mov	r5, r6
 802678e:	e7df      	b.n	8026750 <_realloc_r+0x1e>

08026790 <__ssputs_r>:
 8026790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026794:	688e      	ldr	r6, [r1, #8]
 8026796:	429e      	cmp	r6, r3
 8026798:	4682      	mov	sl, r0
 802679a:	460c      	mov	r4, r1
 802679c:	4690      	mov	r8, r2
 802679e:	461f      	mov	r7, r3
 80267a0:	d838      	bhi.n	8026814 <__ssputs_r+0x84>
 80267a2:	898a      	ldrh	r2, [r1, #12]
 80267a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80267a8:	d032      	beq.n	8026810 <__ssputs_r+0x80>
 80267aa:	6825      	ldr	r5, [r4, #0]
 80267ac:	6909      	ldr	r1, [r1, #16]
 80267ae:	eba5 0901 	sub.w	r9, r5, r1
 80267b2:	6965      	ldr	r5, [r4, #20]
 80267b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80267b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80267bc:	3301      	adds	r3, #1
 80267be:	444b      	add	r3, r9
 80267c0:	106d      	asrs	r5, r5, #1
 80267c2:	429d      	cmp	r5, r3
 80267c4:	bf38      	it	cc
 80267c6:	461d      	movcc	r5, r3
 80267c8:	0553      	lsls	r3, r2, #21
 80267ca:	d531      	bpl.n	8026830 <__ssputs_r+0xa0>
 80267cc:	4629      	mov	r1, r5
 80267ce:	f7fc f915 	bl	80229fc <_malloc_r>
 80267d2:	4606      	mov	r6, r0
 80267d4:	b950      	cbnz	r0, 80267ec <__ssputs_r+0x5c>
 80267d6:	230c      	movs	r3, #12
 80267d8:	f8ca 3000 	str.w	r3, [sl]
 80267dc:	89a3      	ldrh	r3, [r4, #12]
 80267de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80267e2:	81a3      	strh	r3, [r4, #12]
 80267e4:	f04f 30ff 	mov.w	r0, #4294967295
 80267e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80267ec:	6921      	ldr	r1, [r4, #16]
 80267ee:	464a      	mov	r2, r9
 80267f0:	f7fc f852 	bl	8022898 <memcpy>
 80267f4:	89a3      	ldrh	r3, [r4, #12]
 80267f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80267fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80267fe:	81a3      	strh	r3, [r4, #12]
 8026800:	6126      	str	r6, [r4, #16]
 8026802:	6165      	str	r5, [r4, #20]
 8026804:	444e      	add	r6, r9
 8026806:	eba5 0509 	sub.w	r5, r5, r9
 802680a:	6026      	str	r6, [r4, #0]
 802680c:	60a5      	str	r5, [r4, #8]
 802680e:	463e      	mov	r6, r7
 8026810:	42be      	cmp	r6, r7
 8026812:	d900      	bls.n	8026816 <__ssputs_r+0x86>
 8026814:	463e      	mov	r6, r7
 8026816:	6820      	ldr	r0, [r4, #0]
 8026818:	4632      	mov	r2, r6
 802681a:	4641      	mov	r1, r8
 802681c:	f7fc f84a 	bl	80228b4 <memmove>
 8026820:	68a3      	ldr	r3, [r4, #8]
 8026822:	1b9b      	subs	r3, r3, r6
 8026824:	60a3      	str	r3, [r4, #8]
 8026826:	6823      	ldr	r3, [r4, #0]
 8026828:	4433      	add	r3, r6
 802682a:	6023      	str	r3, [r4, #0]
 802682c:	2000      	movs	r0, #0
 802682e:	e7db      	b.n	80267e8 <__ssputs_r+0x58>
 8026830:	462a      	mov	r2, r5
 8026832:	f7ff ff7e 	bl	8026732 <_realloc_r>
 8026836:	4606      	mov	r6, r0
 8026838:	2800      	cmp	r0, #0
 802683a:	d1e1      	bne.n	8026800 <__ssputs_r+0x70>
 802683c:	6921      	ldr	r1, [r4, #16]
 802683e:	4650      	mov	r0, sl
 8026840:	f7fc f870 	bl	8022924 <_free_r>
 8026844:	e7c7      	b.n	80267d6 <__ssputs_r+0x46>
	...

08026848 <_svfiprintf_r>:
 8026848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802684c:	4698      	mov	r8, r3
 802684e:	898b      	ldrh	r3, [r1, #12]
 8026850:	061b      	lsls	r3, r3, #24
 8026852:	b09d      	sub	sp, #116	; 0x74
 8026854:	4607      	mov	r7, r0
 8026856:	460d      	mov	r5, r1
 8026858:	4614      	mov	r4, r2
 802685a:	d50e      	bpl.n	802687a <_svfiprintf_r+0x32>
 802685c:	690b      	ldr	r3, [r1, #16]
 802685e:	b963      	cbnz	r3, 802687a <_svfiprintf_r+0x32>
 8026860:	2140      	movs	r1, #64	; 0x40
 8026862:	f7fc f8cb 	bl	80229fc <_malloc_r>
 8026866:	6028      	str	r0, [r5, #0]
 8026868:	6128      	str	r0, [r5, #16]
 802686a:	b920      	cbnz	r0, 8026876 <_svfiprintf_r+0x2e>
 802686c:	230c      	movs	r3, #12
 802686e:	603b      	str	r3, [r7, #0]
 8026870:	f04f 30ff 	mov.w	r0, #4294967295
 8026874:	e0d1      	b.n	8026a1a <_svfiprintf_r+0x1d2>
 8026876:	2340      	movs	r3, #64	; 0x40
 8026878:	616b      	str	r3, [r5, #20]
 802687a:	2300      	movs	r3, #0
 802687c:	9309      	str	r3, [sp, #36]	; 0x24
 802687e:	2320      	movs	r3, #32
 8026880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026884:	f8cd 800c 	str.w	r8, [sp, #12]
 8026888:	2330      	movs	r3, #48	; 0x30
 802688a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8026a34 <_svfiprintf_r+0x1ec>
 802688e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026892:	f04f 0901 	mov.w	r9, #1
 8026896:	4623      	mov	r3, r4
 8026898:	469a      	mov	sl, r3
 802689a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802689e:	b10a      	cbz	r2, 80268a4 <_svfiprintf_r+0x5c>
 80268a0:	2a25      	cmp	r2, #37	; 0x25
 80268a2:	d1f9      	bne.n	8026898 <_svfiprintf_r+0x50>
 80268a4:	ebba 0b04 	subs.w	fp, sl, r4
 80268a8:	d00b      	beq.n	80268c2 <_svfiprintf_r+0x7a>
 80268aa:	465b      	mov	r3, fp
 80268ac:	4622      	mov	r2, r4
 80268ae:	4629      	mov	r1, r5
 80268b0:	4638      	mov	r0, r7
 80268b2:	f7ff ff6d 	bl	8026790 <__ssputs_r>
 80268b6:	3001      	adds	r0, #1
 80268b8:	f000 80aa 	beq.w	8026a10 <_svfiprintf_r+0x1c8>
 80268bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80268be:	445a      	add	r2, fp
 80268c0:	9209      	str	r2, [sp, #36]	; 0x24
 80268c2:	f89a 3000 	ldrb.w	r3, [sl]
 80268c6:	2b00      	cmp	r3, #0
 80268c8:	f000 80a2 	beq.w	8026a10 <_svfiprintf_r+0x1c8>
 80268cc:	2300      	movs	r3, #0
 80268ce:	f04f 32ff 	mov.w	r2, #4294967295
 80268d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80268d6:	f10a 0a01 	add.w	sl, sl, #1
 80268da:	9304      	str	r3, [sp, #16]
 80268dc:	9307      	str	r3, [sp, #28]
 80268de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80268e2:	931a      	str	r3, [sp, #104]	; 0x68
 80268e4:	4654      	mov	r4, sl
 80268e6:	2205      	movs	r2, #5
 80268e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80268ec:	4851      	ldr	r0, [pc, #324]	; (8026a34 <_svfiprintf_r+0x1ec>)
 80268ee:	f7d9 fc6f 	bl	80001d0 <memchr>
 80268f2:	9a04      	ldr	r2, [sp, #16]
 80268f4:	b9d8      	cbnz	r0, 802692e <_svfiprintf_r+0xe6>
 80268f6:	06d0      	lsls	r0, r2, #27
 80268f8:	bf44      	itt	mi
 80268fa:	2320      	movmi	r3, #32
 80268fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026900:	0711      	lsls	r1, r2, #28
 8026902:	bf44      	itt	mi
 8026904:	232b      	movmi	r3, #43	; 0x2b
 8026906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802690a:	f89a 3000 	ldrb.w	r3, [sl]
 802690e:	2b2a      	cmp	r3, #42	; 0x2a
 8026910:	d015      	beq.n	802693e <_svfiprintf_r+0xf6>
 8026912:	9a07      	ldr	r2, [sp, #28]
 8026914:	4654      	mov	r4, sl
 8026916:	2000      	movs	r0, #0
 8026918:	f04f 0c0a 	mov.w	ip, #10
 802691c:	4621      	mov	r1, r4
 802691e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026922:	3b30      	subs	r3, #48	; 0x30
 8026924:	2b09      	cmp	r3, #9
 8026926:	d94e      	bls.n	80269c6 <_svfiprintf_r+0x17e>
 8026928:	b1b0      	cbz	r0, 8026958 <_svfiprintf_r+0x110>
 802692a:	9207      	str	r2, [sp, #28]
 802692c:	e014      	b.n	8026958 <_svfiprintf_r+0x110>
 802692e:	eba0 0308 	sub.w	r3, r0, r8
 8026932:	fa09 f303 	lsl.w	r3, r9, r3
 8026936:	4313      	orrs	r3, r2
 8026938:	9304      	str	r3, [sp, #16]
 802693a:	46a2      	mov	sl, r4
 802693c:	e7d2      	b.n	80268e4 <_svfiprintf_r+0x9c>
 802693e:	9b03      	ldr	r3, [sp, #12]
 8026940:	1d19      	adds	r1, r3, #4
 8026942:	681b      	ldr	r3, [r3, #0]
 8026944:	9103      	str	r1, [sp, #12]
 8026946:	2b00      	cmp	r3, #0
 8026948:	bfbb      	ittet	lt
 802694a:	425b      	neglt	r3, r3
 802694c:	f042 0202 	orrlt.w	r2, r2, #2
 8026950:	9307      	strge	r3, [sp, #28]
 8026952:	9307      	strlt	r3, [sp, #28]
 8026954:	bfb8      	it	lt
 8026956:	9204      	strlt	r2, [sp, #16]
 8026958:	7823      	ldrb	r3, [r4, #0]
 802695a:	2b2e      	cmp	r3, #46	; 0x2e
 802695c:	d10c      	bne.n	8026978 <_svfiprintf_r+0x130>
 802695e:	7863      	ldrb	r3, [r4, #1]
 8026960:	2b2a      	cmp	r3, #42	; 0x2a
 8026962:	d135      	bne.n	80269d0 <_svfiprintf_r+0x188>
 8026964:	9b03      	ldr	r3, [sp, #12]
 8026966:	1d1a      	adds	r2, r3, #4
 8026968:	681b      	ldr	r3, [r3, #0]
 802696a:	9203      	str	r2, [sp, #12]
 802696c:	2b00      	cmp	r3, #0
 802696e:	bfb8      	it	lt
 8026970:	f04f 33ff 	movlt.w	r3, #4294967295
 8026974:	3402      	adds	r4, #2
 8026976:	9305      	str	r3, [sp, #20]
 8026978:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8026a44 <_svfiprintf_r+0x1fc>
 802697c:	7821      	ldrb	r1, [r4, #0]
 802697e:	2203      	movs	r2, #3
 8026980:	4650      	mov	r0, sl
 8026982:	f7d9 fc25 	bl	80001d0 <memchr>
 8026986:	b140      	cbz	r0, 802699a <_svfiprintf_r+0x152>
 8026988:	2340      	movs	r3, #64	; 0x40
 802698a:	eba0 000a 	sub.w	r0, r0, sl
 802698e:	fa03 f000 	lsl.w	r0, r3, r0
 8026992:	9b04      	ldr	r3, [sp, #16]
 8026994:	4303      	orrs	r3, r0
 8026996:	3401      	adds	r4, #1
 8026998:	9304      	str	r3, [sp, #16]
 802699a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802699e:	4826      	ldr	r0, [pc, #152]	; (8026a38 <_svfiprintf_r+0x1f0>)
 80269a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80269a4:	2206      	movs	r2, #6
 80269a6:	f7d9 fc13 	bl	80001d0 <memchr>
 80269aa:	2800      	cmp	r0, #0
 80269ac:	d038      	beq.n	8026a20 <_svfiprintf_r+0x1d8>
 80269ae:	4b23      	ldr	r3, [pc, #140]	; (8026a3c <_svfiprintf_r+0x1f4>)
 80269b0:	bb1b      	cbnz	r3, 80269fa <_svfiprintf_r+0x1b2>
 80269b2:	9b03      	ldr	r3, [sp, #12]
 80269b4:	3307      	adds	r3, #7
 80269b6:	f023 0307 	bic.w	r3, r3, #7
 80269ba:	3308      	adds	r3, #8
 80269bc:	9303      	str	r3, [sp, #12]
 80269be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80269c0:	4433      	add	r3, r6
 80269c2:	9309      	str	r3, [sp, #36]	; 0x24
 80269c4:	e767      	b.n	8026896 <_svfiprintf_r+0x4e>
 80269c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80269ca:	460c      	mov	r4, r1
 80269cc:	2001      	movs	r0, #1
 80269ce:	e7a5      	b.n	802691c <_svfiprintf_r+0xd4>
 80269d0:	2300      	movs	r3, #0
 80269d2:	3401      	adds	r4, #1
 80269d4:	9305      	str	r3, [sp, #20]
 80269d6:	4619      	mov	r1, r3
 80269d8:	f04f 0c0a 	mov.w	ip, #10
 80269dc:	4620      	mov	r0, r4
 80269de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80269e2:	3a30      	subs	r2, #48	; 0x30
 80269e4:	2a09      	cmp	r2, #9
 80269e6:	d903      	bls.n	80269f0 <_svfiprintf_r+0x1a8>
 80269e8:	2b00      	cmp	r3, #0
 80269ea:	d0c5      	beq.n	8026978 <_svfiprintf_r+0x130>
 80269ec:	9105      	str	r1, [sp, #20]
 80269ee:	e7c3      	b.n	8026978 <_svfiprintf_r+0x130>
 80269f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80269f4:	4604      	mov	r4, r0
 80269f6:	2301      	movs	r3, #1
 80269f8:	e7f0      	b.n	80269dc <_svfiprintf_r+0x194>
 80269fa:	ab03      	add	r3, sp, #12
 80269fc:	9300      	str	r3, [sp, #0]
 80269fe:	462a      	mov	r2, r5
 8026a00:	4b0f      	ldr	r3, [pc, #60]	; (8026a40 <_svfiprintf_r+0x1f8>)
 8026a02:	a904      	add	r1, sp, #16
 8026a04:	4638      	mov	r0, r7
 8026a06:	f7fc fa67 	bl	8022ed8 <_printf_float>
 8026a0a:	1c42      	adds	r2, r0, #1
 8026a0c:	4606      	mov	r6, r0
 8026a0e:	d1d6      	bne.n	80269be <_svfiprintf_r+0x176>
 8026a10:	89ab      	ldrh	r3, [r5, #12]
 8026a12:	065b      	lsls	r3, r3, #25
 8026a14:	f53f af2c 	bmi.w	8026870 <_svfiprintf_r+0x28>
 8026a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026a1a:	b01d      	add	sp, #116	; 0x74
 8026a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a20:	ab03      	add	r3, sp, #12
 8026a22:	9300      	str	r3, [sp, #0]
 8026a24:	462a      	mov	r2, r5
 8026a26:	4b06      	ldr	r3, [pc, #24]	; (8026a40 <_svfiprintf_r+0x1f8>)
 8026a28:	a904      	add	r1, sp, #16
 8026a2a:	4638      	mov	r0, r7
 8026a2c:	f7fc fcf8 	bl	8023420 <_printf_i>
 8026a30:	e7eb      	b.n	8026a0a <_svfiprintf_r+0x1c2>
 8026a32:	bf00      	nop
 8026a34:	0804be90 	.word	0x0804be90
 8026a38:	0804be9a 	.word	0x0804be9a
 8026a3c:	08022ed9 	.word	0x08022ed9
 8026a40:	08026791 	.word	0x08026791
 8026a44:	0804be96 	.word	0x0804be96

08026a48 <__sread>:
 8026a48:	b510      	push	{r4, lr}
 8026a4a:	460c      	mov	r4, r1
 8026a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a50:	f000 f8a8 	bl	8026ba4 <_read_r>
 8026a54:	2800      	cmp	r0, #0
 8026a56:	bfab      	itete	ge
 8026a58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8026a5c:	181b      	addge	r3, r3, r0
 8026a5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026a62:	bfac      	ite	ge
 8026a64:	6563      	strge	r3, [r4, #84]	; 0x54
 8026a66:	81a3      	strhlt	r3, [r4, #12]
 8026a68:	bd10      	pop	{r4, pc}

08026a6a <__swrite>:
 8026a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a6e:	461f      	mov	r7, r3
 8026a70:	898b      	ldrh	r3, [r1, #12]
 8026a72:	05db      	lsls	r3, r3, #23
 8026a74:	4605      	mov	r5, r0
 8026a76:	460c      	mov	r4, r1
 8026a78:	4616      	mov	r6, r2
 8026a7a:	d505      	bpl.n	8026a88 <__swrite+0x1e>
 8026a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a80:	2302      	movs	r3, #2
 8026a82:	2200      	movs	r2, #0
 8026a84:	f000 f874 	bl	8026b70 <_lseek_r>
 8026a88:	89a3      	ldrh	r3, [r4, #12]
 8026a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026a92:	81a3      	strh	r3, [r4, #12]
 8026a94:	4632      	mov	r2, r6
 8026a96:	463b      	mov	r3, r7
 8026a98:	4628      	mov	r0, r5
 8026a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026a9e:	f000 b823 	b.w	8026ae8 <_write_r>

08026aa2 <__sseek>:
 8026aa2:	b510      	push	{r4, lr}
 8026aa4:	460c      	mov	r4, r1
 8026aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026aaa:	f000 f861 	bl	8026b70 <_lseek_r>
 8026aae:	1c43      	adds	r3, r0, #1
 8026ab0:	89a3      	ldrh	r3, [r4, #12]
 8026ab2:	bf15      	itete	ne
 8026ab4:	6560      	strne	r0, [r4, #84]	; 0x54
 8026ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026abe:	81a3      	strheq	r3, [r4, #12]
 8026ac0:	bf18      	it	ne
 8026ac2:	81a3      	strhne	r3, [r4, #12]
 8026ac4:	bd10      	pop	{r4, pc}

08026ac6 <__sclose>:
 8026ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026aca:	f000 b81f 	b.w	8026b0c <_close_r>

08026ace <__ascii_wctomb>:
 8026ace:	b149      	cbz	r1, 8026ae4 <__ascii_wctomb+0x16>
 8026ad0:	2aff      	cmp	r2, #255	; 0xff
 8026ad2:	bf85      	ittet	hi
 8026ad4:	238a      	movhi	r3, #138	; 0x8a
 8026ad6:	6003      	strhi	r3, [r0, #0]
 8026ad8:	700a      	strbls	r2, [r1, #0]
 8026ada:	f04f 30ff 	movhi.w	r0, #4294967295
 8026ade:	bf98      	it	ls
 8026ae0:	2001      	movls	r0, #1
 8026ae2:	4770      	bx	lr
 8026ae4:	4608      	mov	r0, r1
 8026ae6:	4770      	bx	lr

08026ae8 <_write_r>:
 8026ae8:	b538      	push	{r3, r4, r5, lr}
 8026aea:	4d07      	ldr	r5, [pc, #28]	; (8026b08 <_write_r+0x20>)
 8026aec:	4604      	mov	r4, r0
 8026aee:	4608      	mov	r0, r1
 8026af0:	4611      	mov	r1, r2
 8026af2:	2200      	movs	r2, #0
 8026af4:	602a      	str	r2, [r5, #0]
 8026af6:	461a      	mov	r2, r3
 8026af8:	f7e2 f839 	bl	8008b6e <_write>
 8026afc:	1c43      	adds	r3, r0, #1
 8026afe:	d102      	bne.n	8026b06 <_write_r+0x1e>
 8026b00:	682b      	ldr	r3, [r5, #0]
 8026b02:	b103      	cbz	r3, 8026b06 <_write_r+0x1e>
 8026b04:	6023      	str	r3, [r4, #0]
 8026b06:	bd38      	pop	{r3, r4, r5, pc}
 8026b08:	2000277c 	.word	0x2000277c

08026b0c <_close_r>:
 8026b0c:	b538      	push	{r3, r4, r5, lr}
 8026b0e:	4d06      	ldr	r5, [pc, #24]	; (8026b28 <_close_r+0x1c>)
 8026b10:	2300      	movs	r3, #0
 8026b12:	4604      	mov	r4, r0
 8026b14:	4608      	mov	r0, r1
 8026b16:	602b      	str	r3, [r5, #0]
 8026b18:	f7e2 f845 	bl	8008ba6 <_close>
 8026b1c:	1c43      	adds	r3, r0, #1
 8026b1e:	d102      	bne.n	8026b26 <_close_r+0x1a>
 8026b20:	682b      	ldr	r3, [r5, #0]
 8026b22:	b103      	cbz	r3, 8026b26 <_close_r+0x1a>
 8026b24:	6023      	str	r3, [r4, #0]
 8026b26:	bd38      	pop	{r3, r4, r5, pc}
 8026b28:	2000277c 	.word	0x2000277c

08026b2c <_fstat_r>:
 8026b2c:	b538      	push	{r3, r4, r5, lr}
 8026b2e:	4d07      	ldr	r5, [pc, #28]	; (8026b4c <_fstat_r+0x20>)
 8026b30:	2300      	movs	r3, #0
 8026b32:	4604      	mov	r4, r0
 8026b34:	4608      	mov	r0, r1
 8026b36:	4611      	mov	r1, r2
 8026b38:	602b      	str	r3, [r5, #0]
 8026b3a:	f7e2 f840 	bl	8008bbe <_fstat>
 8026b3e:	1c43      	adds	r3, r0, #1
 8026b40:	d102      	bne.n	8026b48 <_fstat_r+0x1c>
 8026b42:	682b      	ldr	r3, [r5, #0]
 8026b44:	b103      	cbz	r3, 8026b48 <_fstat_r+0x1c>
 8026b46:	6023      	str	r3, [r4, #0]
 8026b48:	bd38      	pop	{r3, r4, r5, pc}
 8026b4a:	bf00      	nop
 8026b4c:	2000277c 	.word	0x2000277c

08026b50 <_isatty_r>:
 8026b50:	b538      	push	{r3, r4, r5, lr}
 8026b52:	4d06      	ldr	r5, [pc, #24]	; (8026b6c <_isatty_r+0x1c>)
 8026b54:	2300      	movs	r3, #0
 8026b56:	4604      	mov	r4, r0
 8026b58:	4608      	mov	r0, r1
 8026b5a:	602b      	str	r3, [r5, #0]
 8026b5c:	f7e2 f83f 	bl	8008bde <_isatty>
 8026b60:	1c43      	adds	r3, r0, #1
 8026b62:	d102      	bne.n	8026b6a <_isatty_r+0x1a>
 8026b64:	682b      	ldr	r3, [r5, #0]
 8026b66:	b103      	cbz	r3, 8026b6a <_isatty_r+0x1a>
 8026b68:	6023      	str	r3, [r4, #0]
 8026b6a:	bd38      	pop	{r3, r4, r5, pc}
 8026b6c:	2000277c 	.word	0x2000277c

08026b70 <_lseek_r>:
 8026b70:	b538      	push	{r3, r4, r5, lr}
 8026b72:	4d07      	ldr	r5, [pc, #28]	; (8026b90 <_lseek_r+0x20>)
 8026b74:	4604      	mov	r4, r0
 8026b76:	4608      	mov	r0, r1
 8026b78:	4611      	mov	r1, r2
 8026b7a:	2200      	movs	r2, #0
 8026b7c:	602a      	str	r2, [r5, #0]
 8026b7e:	461a      	mov	r2, r3
 8026b80:	f7e2 f838 	bl	8008bf4 <_lseek>
 8026b84:	1c43      	adds	r3, r0, #1
 8026b86:	d102      	bne.n	8026b8e <_lseek_r+0x1e>
 8026b88:	682b      	ldr	r3, [r5, #0]
 8026b8a:	b103      	cbz	r3, 8026b8e <_lseek_r+0x1e>
 8026b8c:	6023      	str	r3, [r4, #0]
 8026b8e:	bd38      	pop	{r3, r4, r5, pc}
 8026b90:	2000277c 	.word	0x2000277c

08026b94 <_malloc_usable_size_r>:
 8026b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026b98:	1f18      	subs	r0, r3, #4
 8026b9a:	2b00      	cmp	r3, #0
 8026b9c:	bfbc      	itt	lt
 8026b9e:	580b      	ldrlt	r3, [r1, r0]
 8026ba0:	18c0      	addlt	r0, r0, r3
 8026ba2:	4770      	bx	lr

08026ba4 <_read_r>:
 8026ba4:	b538      	push	{r3, r4, r5, lr}
 8026ba6:	4d07      	ldr	r5, [pc, #28]	; (8026bc4 <_read_r+0x20>)
 8026ba8:	4604      	mov	r4, r0
 8026baa:	4608      	mov	r0, r1
 8026bac:	4611      	mov	r1, r2
 8026bae:	2200      	movs	r2, #0
 8026bb0:	602a      	str	r2, [r5, #0]
 8026bb2:	461a      	mov	r2, r3
 8026bb4:	f7e1 ffbe 	bl	8008b34 <_read>
 8026bb8:	1c43      	adds	r3, r0, #1
 8026bba:	d102      	bne.n	8026bc2 <_read_r+0x1e>
 8026bbc:	682b      	ldr	r3, [r5, #0]
 8026bbe:	b103      	cbz	r3, 8026bc2 <_read_r+0x1e>
 8026bc0:	6023      	str	r3, [r4, #0]
 8026bc2:	bd38      	pop	{r3, r4, r5, pc}
 8026bc4:	2000277c 	.word	0x2000277c

08026bc8 <_init>:
 8026bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026bca:	bf00      	nop
 8026bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026bce:	bc08      	pop	{r3}
 8026bd0:	469e      	mov	lr, r3
 8026bd2:	4770      	bx	lr

08026bd4 <_fini>:
 8026bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026bd6:	bf00      	nop
 8026bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026bda:	bc08      	pop	{r3}
 8026bdc:	469e      	mov	lr, r3
 8026bde:	4770      	bx	lr
